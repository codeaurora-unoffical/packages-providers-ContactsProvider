diff --git a/Android.mk b/Android.mk
index 634ef9f..df4d245 100644
--- a/Android.mk
+++ b/Android.mk
@@ -8,7 +8,7 @@ LOCAL_SRC_FILES := $(call all-java-files-under, src)
 LOCAL_SRC_FILES += \
         src/com/android/providers/contacts/EventLogTags.logtags
 
-LOCAL_JAVA_LIBRARIES := ext
+LOCAL_JAVA_LIBRARIES := ext telephony-common
 
 LOCAL_STATIC_JAVA_LIBRARIES += android-common com.android.vcard guava
 
diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 6f74368..6ea3f0e 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -14,15 +14,13 @@
     <uses-permission android:name="android.permission.READ_CONTACTS" />
     <uses-permission android:name="android.permission.WRITE_CONTACTS" />
     <uses-permission android:name="android.permission.GET_ACCOUNTS" />
-    <uses-permission android:name="android.permission.READ_SYNC_STATS" />
-    <uses-permission android:name="android.permission.INTERNET" />
-    <uses-permission android:name="android.permission.USE_CREDENTIALS" />
-    <uses-permission android:name="com.google.android.googleapps.permission.GOOGLE_AUTH" />
-    <uses-permission android:name="com.google.android.googleapps.permission.GOOGLE_AUTH.cp" />
-    <uses-permission android:name="android.permission.SUBSCRIBED_FEEDS_READ" />
-    <uses-permission android:name="android.permission.SUBSCRIBED_FEEDS_WRITE" />
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
+    <uses-permission android:name="android.permission.BIND_DIRECTORY_SEARCH" />
+    <uses-permission android:name="android.permission.UPDATE_APP_OPS_STATS" />
+    <uses-permission android:name="android.permission.READ_SYNC_SETTINGS" />
+    <uses-permission android:name="com.android.voicemail.permission.ADD_VOICEMAIL" />
+    <uses-permission android:name="com.android.voicemail.permission.READ_WRITE_ALL_VOICEMAIL" />
 
     <application android:process="android.process.acore"
         android:label="@string/app_label"
@@ -33,6 +31,7 @@
             android:authorities="contacts;com.android.contacts"
             android:label="@string/provider_label"
             android:multiprocess="false"
+            android:exported="true"
             android:readPermission="android.permission.READ_CONTACTS"
             android:writePermission="android.permission.WRITE_CONTACTS">
             <path-permission
@@ -50,6 +49,7 @@
         <provider android:name="CallLogProvider"
             android:authorities="call_log"
             android:syncable="false" android:multiprocess="false"
+            android:exported="true"
             android:readPermission="android.permission.READ_CALL_LOG"
             android:writePermission="android.permission.WRITE_CALL_LOG">
         </provider>
@@ -57,6 +57,7 @@
         <provider android:name="VoicemailContentProvider"
             android:authorities="com.android.voicemail"
             android:syncable="false" android:multiprocess="false"
+            android:exported="true"
             android:permission="com.android.voicemail.permission.ADD_VOICEMAIL">
         </provider>
 
@@ -96,5 +97,21 @@
         </receiver>
 
         <service android:name="VoicemailCleanupService"/>
+
+        <activity android:name=".debug.ContactsDumpActivity"
+                android:label="@string/debug_dump_title"
+                android:theme="@android:style/Theme.Holo.Dialog"
+                >
+            <intent-filter>
+                <action android:name="com.android.providers.contacts.DUMP_DATABASE"/>
+                <category android:name="android.intent.category.DEFAULT"/>
+            </intent-filter>
+        </activity>
+
+        <provider android:name=".debug.DumpFileProvider"
+            android:authorities="com.android.contacts.dumpfile"
+            android:exported="true">
+        </provider>
+
     </application>
 </manifest>
diff --git a/res/layout/contact_dump_activity.xml b/res/layout/contact_dump_activity.xml
new file mode 100644
index 0000000..557b5bd
--- /dev/null
+++ b/res/layout/contact_dump_activity.xml
@@ -0,0 +1,72 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2012 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:padding="4dp"
+    android:gravity="center_horizontal">
+
+    <!-- Message to show to use. -->
+    <ScrollView
+        android:layout_width="match_parent"
+        android:layout_height="0dip"
+        android:gravity="center_vertical|left"
+        android:layout_weight="1">
+        <TextView
+            android:id="@+id/text"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:padding="16dp"
+            android:text="@string/debug_dump_database_message"
+            android:textAppearance="?android:attr/textAppearanceMedium" />
+    </ScrollView>
+
+    <!-- Alert dialog style buttons along the bottom. -->
+    <LinearLayout
+        style="?android:attr/buttonBarStyle"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:measureWithLargestChild="true">
+        <Button
+            style="?android:attr/buttonBarButtonStyle"
+            android:id="@+id/confirm"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:onClick="onClick"
+            android:text="@string/debug_dump_start_button" />
+        <Button
+            style="?android:attr/buttonBarButtonStyle"
+            android:id="@+id/delete"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:onClick="onClick"
+            android:text="@string/debug_dump_delete_button"
+            android:enabled="false" />
+        <Button
+            style="?android:attr/buttonBarButtonStyle"
+            android:id="@+id/cancel"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:onClick="onClick"
+            android:text="@android:string/no" />
+    </LinearLayout>
+</LinearLayout>
\ No newline at end of file
diff --git a/res/values-af/strings.xml b/res/values-af/strings.xml
index 2f6562b..d8c1011 100644
--- a/res/values-af/strings.xml
+++ b/res/values-af/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Kry toegang tot alle stemboodskappe"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Laat die program toe om alle stemboodskappe te stoor en op te haal wat hierdie toestel kan lees."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Stemboodskap van "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Kopieer kontaktedatabasis"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Jy is op die punt om 1) \'n afskrif van jou databasis te maak wat alle inligting insluit wat verband hou met kontakte en alle oproeploglêers na die interne berging, en 2) dit te e-pos. Onthou om die kopie uit te vee sodra jy dit suksesvol van die toestel af gekopieer het, of sodra die e-pos ontvang is."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Vee nou uit"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Begin"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Kies \'n program om jou lêer te stuur"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Kontaktedatabasis aangeheg"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"My kontaktedatabasis met al my kontakinligting is aangeheg. Hanteer versigtig."</string>
 </resources>
diff --git a/res/values-am/strings.xml b/res/values-am/strings.xml
index 6aa55ec..5889bc5 100644
--- a/res/values-am/strings.xml
+++ b/res/values-am/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"ሁሉንም  የድምፅ መልዕክቶች ድረስ"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"ትግበራ ይህ መሣሪያ መድረስ የሚችለውን የድምፅ መልዕክቶች በሙሉ ለማከማቸት እና ሰርስሮ ለማውጣት ይፈቅዳል።"</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"ከ....የድምፅ መልዕክት "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"የእውቂያዎች የውሂብ ጎታ ገልብጥ"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"ይህንን ሊያደርጉ ነው፦ 1) ሁሉንም ከእውቂያዎች ጋር የተያያዙ መረጃዎችንና ሁሉንም የጥሪ ምዝግብ ማስታወሻዎችን የያዘው የውሂብ ጎታዎ ቅጂ በውስጣዊ ማከማቻው ላይ ሊያስቀምጡ ነው፤ እና 2) በኢሜይል ሊልኩት። ከመሣሪያው በተገለበጠ ጊዜ ወይም ኢሜይሉ ሲደርስ ወዲያውንኑ ቅጂውን መሰረዝ እንዳለብዎት ያስታውሱ።"</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"አሁን ሰርዝ"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"ጀምር"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"ፋይልዎትን የሚልኩበት ፕሮግራም ይምረጡ"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"የእውቂያዎች የውሂብ ጎታ ተያይዟል"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"የእውቂያዎቼ የውሂብ ጎታ ከሁሉም የእውቂያዎቼ መረጃዎች ጋር አባሪ ተደርጓል። በደንብ ይጠበቅ።"</string>
 </resources>
diff --git a/res/values-ar/strings.xml b/res/values-ar/strings.xml
index 3cd298d..d2fd0a6 100644
--- a/res/values-ar/strings.xml
+++ b/res/values-ar/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"الوصول إلى جميع رسائل البريد الصوتي"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"للسماح للتطبيق بتخزين واسترداد جميع رسائل البريد الصوتي التي يمكن الوصول إليها عبر هذا الجهاز."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"بريد صوتي من "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"نسخ قاعدة بيانات جهات الاتصال"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"أنت على وشك 1) إنشاء نسخة من قاعدة بياناتك التي تتضمن جميع المعلومات المرتبطة بجهات الاتصال وجميع سجلات المكالمات إلى وحدة التخزين الداخلية و2) إرسالها بالبريد الإلكتروني. تذكر حذف النسخة بمجرد إتمام نسخها من الجهاز أو تلقي الرسالة الإلكترونية."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"الحذف الآن"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"البداية"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"اختر أحد البرامج لإرسال الملف"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"قاعدة بيانات جهات الاتصال مرفقة"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"قاعدة بيانات جهات اتصالي والتي تحتوي على جميع المعلومات ذات الصلة بجهات الاتصال مرفقة. يرجى التعامل معها بحرص."</string>
 </resources>
diff --git a/res/values-be/strings.xml b/res/values-be/strings.xml
index 44357c3..171fbb6 100644
--- a/res/values-be/strings.xml
+++ b/res/values-be/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Доступ да ўсіх галасавых паведамленняў"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Дазваляе прыкладанню захоўваць і прайграваць усе даступныя для гэтай прылады паведамленні галасавой пошты."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Галасавое паведамленне ад "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Капiраваць базу дадзеных кантактаў"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Вы збіраецеся 1) зрабіць копію базы дадзеных, якая ўключае ў сябе ўсе звесткi пра кантакты і званкi на ўнутранай памяці, і 2) адправiць яго па электроннай пошце. Не забудзьцеся выдаліць копію, як толькі вы паспяхова скапіруеце іх на прыладу ці атрымаеце па электроннай пошце."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Выдаліць зараз"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Пачаць"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Выберыце праграму для адпраўкі файла"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Далучаны кантакты Dd"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Далучана база дадзеных маiх кантактаў з усёй інфармацыяй. Працуйце з ёй уважліва."</string>
 </resources>
diff --git a/res/values-bg/strings.xml b/res/values-bg/strings.xml
index dee34a7..0690d6c 100644
--- a/res/values-bg/strings.xml
+++ b/res/values-bg/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Достъп до всички гласови съобщения"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Разрешава на приложението да съхранява и извлича всички гласови съобщения, до които това устройство има достъп."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Гласова поща от "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Копиране на базата от данни на контактите"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"На път сте 1) да направите копие във вътрешното хранилище на базата си от данни, което включва цялата свързана с контактите информация и всички списъци с обаждания, и 2) да го изпратите по имейл. Не забравяйте да го изтриете веднага след като го копирате успешно от устройството или когато имейлът е получен."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Изтриване сега"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Начало"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Изберете програма, за да изпратите файла си"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Прикачена база от данни на контактите"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Прикачена Ви изпращам базата от данни на контактите си заедно с цялата информация за тях. Бъдете внимателни."</string>
 </resources>
diff --git a/res/values-ca/strings.xml b/res/values-ca/strings.xml
index ef073fa..1cd0ea6 100644
--- a/res/values-ca/strings.xml
+++ b/res/values-ca/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Accés a tots els missatges de veu"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Permet que l\'aplicació emmagatzemi i recuperi totes les bústies de veu a les quals pot accedir aquest dispositiu."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Missatge de veu de "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Copia la base de dades de contactes"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Estàs a punt de: 1) fer una còpia de la teva base de dades, que inclou tota la informació relacionada amb els contactes i tots els registres de trucades de l\'emmagatzematge intern, i 2) d\'enviar-la per correu electrònic. Recorda suprimir la còpia de seguida que l\'hagis copiat correctament al dispositiu o quan hagis rebut el correu electrònic."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Suprimeix ara"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Inicia"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Selecciona un programa per enviar el fitxer"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Base de dades de contactes adjunta"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Aquí adjunta hi ha la meva base de dades de contactes amb tota la informació dels meus contactes. Tracta-la amb cura."</string>
 </resources>
diff --git a/res/values-cs/strings.xml b/res/values-cs/strings.xml
index 76335a0..561388f 100644
--- a/res/values-cs/strings.xml
+++ b/res/values-cs/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Přístup ke všem hlasovým zprávám"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Umožňuje aplikaci ukládat a načítat všechny hlasové zprávy, ke kterým má toto zařízení přístup."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Hlasová zpráva od uživatele "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Kopírování databáze kontaktů"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Chystáte se 1) vytvořit v interním úložišti kopii databáze obsahující všechny informace o kontaktech a veškerou historii hovorů a 2) odeslat ji e-mailem. Po úspěšném zkopírování ze zařízení nebo přijetí e-mailem ji nezapomeňte ihned odstranit."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Smazat nyní"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Spustit"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Vyberte program pro odeslání souboru."</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Databáze kontaktů v příloze"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"V příloze je databáze s informacemi o všech mých kontaktech. Zacházejte s ní opatrně."</string>
 </resources>
diff --git a/res/values-da/strings.xml b/res/values-da/strings.xml
index 7b708fb..ae4b033 100644
--- a/res/values-da/strings.xml
+++ b/res/values-da/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Adgang til alle telefonsvarerbeskeder"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Tillader, at applikationen gemmer og henter alle telefonsvarerbeskeder, som denne enhed kan få adgang til."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Telefonsvarerbesked fra "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Kopiér database med kontaktpersoner"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Du er ved at 1) lave en kopi af din database, som indeholder alle oplysninger om dine kontaktpersoner og alle opkaldslister, til det interne lager, og 2) sende den som e-mail. Husk at slette kopien, så snart du har kopieret den fra enheden, eller e-mailen er modtaget."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Slet nu"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Start"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Vælg et program, for at sende din fil"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Database med kontaktpersoner er vedhæftet"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Min database med kontaktpersoner med alle oplysninger om mine kontaktpersoner er vedhæftet. Brug den med omhu."</string>
 </resources>
diff --git a/res/values-de/strings.xml b/res/values-de/strings.xml
index 1f10b19..3b59396 100644
--- a/res/values-de/strings.xml
+++ b/res/values-de/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Zugriff auf alle Mailbox-Nachrichten"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Ermöglicht der App das Speichern und Abrufen aller Mailbox-Nachrichten, auf die dieses Gerät zugreifen kann"</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Mailbox-Nachricht von "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Kontaktdatenbank kopieren"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Sie 1) erstellen eine Kopie Ihrer Datenbank, die alle Kontaktinformationen und Anruflisten auf dem internen Speicher enthält, und 2) senden diese Kopie per E-Mail. Denken Sie daran, die Kopie so schnell wie möglich zu löschen, nachdem Sie sie vom Gerät kopiert haben oder die E-Mail empfangen wurde."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Jetzt löschen"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Starten"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Programm zum Senden der Datei auswählen"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Kontaktdatenbank angehängt"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Anbei meine Kontaktdatenbank mit allen Informationen zu meinen Kontakten. Bitte vertraulich behandeln!"</string>
 </resources>
diff --git a/res/values-el/strings.xml b/res/values-el/strings.xml
index 2622515..a85bae3 100644
--- a/res/values-el/strings.xml
+++ b/res/values-el/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Πρόσβαση σε όλα τα μηνύματα αυτόματου τηλεφωνητή"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Επιτρέπει στην εφαρμογή την αποθήκευση και ανάκτηση όλων των μηνυμάτων αυτόματου τηλεφωνητή, στα οποία μπορεί να έχει πρόσβαση αυτή η συσκευή."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Μήνυμα αυτόματου τηλεφωνητή από "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Αντιγραφή βάσης δεδομένων επαφών"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Πρόκειται να 1) δημιουργήσετε ένα αντίγραφο της βάσης δεδομένων σας το οποίο περιλαμβάνει όλες τις πληροφορίες που σχετίζονται με τις επαφές και όλα τα αρχεία καταγραφής κλήσεων στον εσωτερικό αποθηκευτικό χώρο και να το 2) αποστείλετε με μήνυμα ηλεκτρονικού ταχυδρομείου. Μην ξεχάσετε να διαγράψετε από τη συσκευή σας το αντίγραφο μόλις το αντιγράψετε επιτυχώς ή μόλις παραδοθεί το μήνυμα ηλεκτρονικού ταχυδρομείου."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Διαγραφή τώρα"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Έναρξη"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Επιλέξτε ένα πρόγραμμα για να στείλετε το αρχείο σας"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Συνημμένη βάση δεδομένων επαφών"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Επισυνάπτεται η βάση δεδομένων των επαφών μου με όλες τις πληροφορίες των επαφών μου. Ο χειρισμός της πρέπει να είναι προσεκτικός."</string>
 </resources>
diff --git a/res/values-en-rGB/strings.xml b/res/values-en-rGB/strings.xml
index 9cbc783..27342c9 100644
--- a/res/values-en-rGB/strings.xml
+++ b/res/values-en-rGB/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Access all voicemails"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Allows the app to store and retrieve all voicemails that this device can access."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Voicemail from "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Copy contacts database"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"You are about to 1) make a copy of your database which includes all contacts related information and all call log to the internal storage, and 2) email it. Remember to delete the copy as soon as you have successfully copied it off the device or the email is received."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Delete now"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Start"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Choose a programme to send your file"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Contacts Db attached"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Attached is my contacts database with all my contacts information. Handle with care."</string>
 </resources>
diff --git a/res/values-es-rUS/strings.xml b/res/values-es-rUS/strings.xml
index a3cddf2..8a14b6b 100644
--- a/res/values-es-rUS/strings.xml
+++ b/res/values-es-rUS/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Acceder a todos los mensajes de voz"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Permite que la aplicación almacene y recupere todos los mensajes de voz a los que este dispositivo puede acceder."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Mensaje de voz de "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Copiar base de datos de contactos"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Estás a punto de 1) copiar tu base datos, que incluye información de todos los contactos y el registro de todas las llamadas, en el almacenamiento interno; y de 2) enviar la copia por correo. Recuerda eliminar la copia inmediatamente después de guardarla fuera del dispositivo o de que se reciba el correo."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Eliminar ahora"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Comenzar"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Elige un programa para enviar el archivo."</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Base de datos de contactos adjunta"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Adjunto a este correo la base de datos de mis contactos con toda la información relacionada ellos. Esta información se debe manejar con cuidado."</string>
 </resources>
diff --git a/res/values-es/strings.xml b/res/values-es/strings.xml
index d4f7edf..ae99f67 100644
--- a/res/values-es/strings.xml
+++ b/res/values-es/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Acceder a todos los mensajes de voz"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Permite que la aplicación almacene y recupere todos los mensajes de voz a los que puede acceder este dispositivo."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Mensaje de voz de "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Copiar base de datos de contactos"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Vas a 1) hacer una copia de tu base de datos, que incluye la información relacionada con tus contactos y el registro de llamadas, en el almacenamiento interno y a 2) enviarla por correo electrónico. No olvides eliminar la copia en cuanto la hayas copiado en otro dispositivo o hayas recibido el correo electrónico."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Eliminar ahora"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Iniciar"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Seleccionar un programa para enviar el archivo"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Base de datos de contactos adjunta"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Mi base de datos de contactos con toda la información de mis contactos va adjunta a este mensaje. Usa esta información con cuidado."</string>
 </resources>
diff --git a/res/values-et/strings.xml b/res/values-et/strings.xml
index 6fda0d5..e6018f3 100644
--- a/res/values-et/strings.xml
+++ b/res/values-et/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Juurdepääs kõigile kõnepostisõnumitele"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Võimaldab rakendusel salvestada ja vastu võtta kõik kõnepostisõnumid, mille juurde seade pääseb."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Kõnepost kontaktilt "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Kontaktide andmebaasi kopeerimine"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Soovite teha 1) sisemisse salvestusruumi koopia andmebaasist, mis sisaldab kogu kontaktidega seotud teavet ja kõikide kõnede logi ning 2) saata koopia meiliga. Kustutage koopia niipea, kui olete selle seadmest kopeerinud või meil on kohale jõudnud."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Kustuta kohe"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Alusta"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Valige programm faili saatmiseks"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Lisatud kontaktide andmebaas"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Lisatud on minu kontaktide andmebaas, mis sisaldab kogu kontaktidega seotud teavet. Käsitsege ettevaatlikult."</string>
 </resources>
diff --git a/res/values-fa/strings.xml b/res/values-fa/strings.xml
index bcdf710..ca544db 100644
--- a/res/values-fa/strings.xml
+++ b/res/values-fa/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"دسترسی به تمام پست‌های صوتی"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"به برنامه اجازه ذخیره و بازیابی تمام پست‌های صوتی قابل دسترس برای این دستگاه را می‌دهد."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"پست صوتی از "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"کپی پایگاه داده مخاطبین"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"شما در شرف ۱) ایجاد یک کپی از پایگاه داده‌ در حافظه داخلی هستید، این کپی حاوی همه اطلاعات مربوط به مخاطبین و همه گزارشات تماس است و همچنین می‌خواهید ۲) آنرا ایمیل کنید. به خاطر داشته باشید که به محض کپی کردن این نسخه در دستگاه یا دریافت ایمیل، آنرا حذف کنید."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"اکنون حذف شود"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"شروع"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"یک برنامه را برای ارسال فایل خود انتخاب کنید"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"پایگاه داده مخاطبین پیوست شد"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"پایگاه داده مخاطبین من همراه با تمام اطلاعات مخاطبین پیوست شده است. با دقت از آن استفاده شود."</string>
 </resources>
diff --git a/res/values-fi/strings.xml b/res/values-fi/strings.xml
index d9c341f..d4b63f3 100644
--- a/res/values-fi/strings.xml
+++ b/res/values-fi/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Kaikkien vastaajaviestien käyttäminen"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Antaa sovelluksen tallentaa ja hakea kaikki vastaajaviestit, jotka ovat laitteen käytettävissä."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Vastaajaviesti henkilöltä "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Kopioi kontaktitietokanta"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Olet aikeissa 1) tehdä sisäiseen tallennustilaan kopion tietokannasta, joka sisältää kaikki yhteystietoihin liittyvät tiedot ja puhelulokit ja 2) lähettää sen. Muista poistaa kopio heti kopioituasi sen laitteelta tai kun sähköposti on vastaanotettu."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Poista nyt"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Aloita"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Valitse ohjelma tiedoston lähettämiseen"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Kontaktitietokanta liitteenä"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Liitteenä on kontaktitietokantani, joka sisältää kaikki kontaktitietoni. Käsiteltävä varoen."</string>
 </resources>
diff --git a/res/values-fr/strings.xml b/res/values-fr/strings.xml
index b25b763..4bc7c61 100644
--- a/res/values-fr/strings.xml
+++ b/res/values-fr/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Accéder à tous les messages vocaux"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Permet à l\'application de stocker et de récupérer tous les messages vocaux auxquels cet appareil peut accéder."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Message vocal de "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Copier la base de données de contacts"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Vous êtes sur le point de 1) faire une copie de votre base de données (qui inclut toutes les données relatives aux contacts et l\'intégralité du journal d\'appels) dans la mémoire de stockage interne, puis de 2) l\'envoyer par e-mail. N\'oubliez pas de supprimer la copie une fois qu\'elle a été dupliquée ou dès que l\'e-mail a été reçu."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Supprimer"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Commencer"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Sélectionnez un programme pour envoyer votre fichier"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Base de données de contacts ci-jointe"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Veuillez trouver ci-joint ma base de données de contacts incluant toutes les coordonnées de mes contacts. Merci de la traiter avec précaution."</string>
 </resources>
diff --git a/res/values-hi/strings.xml b/res/values-hi/strings.xml
index f2d706a..cc50237 100644
--- a/res/values-hi/strings.xml
+++ b/res/values-hi/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"सभी ध्‍वनि‍मेल पर पहुंचें"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"एप्‍लि‍केशन को ऐसे सभी ध्‍वनि‍मेल संग्रहीत और पुनर्प्राप्त करने देता है जि‍न पर यह उपकरण पहुंच सकता है."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"इनका ध्‍वनि‍मेल: "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"संपर्क डेटाबेस की प्रतिलिपि बनाएं"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"आप 1) आंतरिक संग्रहण में अपने उस डेटाबेस की प्रतिलिपि बनाने वाले हैं जिसमें सभी संपर्कों संबंधी जानकारी और सभी कॉल लॉग शामिल हैं, और 2) उसे ईमेल करने वाले हैं. जैसे ही आप उपकरण से इसकी प्रतिलिपि सफलतापूर्वक बना लें या ईमेल प्राप्त हो जाए तो प्रतिलिपि को हटाना न भूलें."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"अभी हटाएं"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"प्रारंभ करें"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"अपनी फ़ाइल भेजने के लिए कोई प्रोग्राम चुनें"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"संपर्क Db अनुलग्न है"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"मेरी समस्त संपर्क जानकारी के साथ मेरा संपर्क डेटाबेस अनुलग्न है. सावधानी से कार्य करें."</string>
 </resources>
diff --git a/res/values-hr/strings.xml b/res/values-hr/strings.xml
index 2b53781..72690b7 100644
--- a/res/values-hr/strings.xml
+++ b/res/values-hr/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Pristup svoj govornoj pošti"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Aplikaciji omogućuje pohranjivanje i dohvaćanje svih poruka govorne pošte kojoj ovaj uređaj može pristupati."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Govorna pošta od "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Kopiranje podatkovne baze kontakata"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Upravo ćete 1) napraviti kopiju svoje baze podataka koja uključuje sve podatke koji se odnose na kontakte i sve dnevnike poziva u internoj pohrani i 2) poslat ćete tu kopiju e-poštom. Ne zaboravite izbrisati kopiju čim ju uspješno kopirate s uređaja ili čim primite e-poruku."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Izbriši sada"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Kreni"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Odaberite program za slanje datoteke"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"U prilogu je podatkovna baza"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"U prilogu je moja podatkovna baza kontakata sa svim mojim kontaktnim informacijama. Oprezno rukujte s njom."</string>
 </resources>
diff --git a/res/values-hu/strings.xml b/res/values-hu/strings.xml
index 7f477e5..c510846 100644
--- a/res/values-hu/strings.xml
+++ b/res/values-hu/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Hozzáférés az összes hangüzenethez"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Lehetővé teszi, hogy az alkalmazás tárolja és lekérje azokat a hangüzeneteket, amelyekhez ez a készülék hozzáférhet."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Hangüzenet tőle: "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Névjegyadatbázis másolása"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Ön arra készül, hogy 1) másolatot készítsen a belső tárhelyre az adatbázisról, amely magában foglalja az összes névjegyet és minden kapcsolódó adatot, valamint a hívásnaplót, illetve hogy 2) e-mailben elküldje azt. Ne feledje azonnal törölni a másolatot, amint sikeresen átmásolta a készülékről, vagy amint megkapta az e-mailt."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Törlés most"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Indítás"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Válasszon programot a fájl elküldéséhez."</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Névjegyadatbázis csatolva."</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Csatolva a névjegyadatbázisom, amely a névjegyeim összes adatát tartalmazza. Óvatosan kezeld."</string>
 </resources>
diff --git a/res/values-in/strings.xml b/res/values-in/strings.xml
index f958b12..1d1f176 100644
--- a/res/values-in/strings.xml
+++ b/res/values-in/strings.xml
@@ -17,15 +17,22 @@
 <resources xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
     <string name="sharedUserLabel" msgid="8024311725474286801">"Apl Inti Android"</string>
-    <string name="app_label" msgid="3389954322874982620">"Penyimpanan Kenalan"</string>
-    <string name="provider_label" msgid="6012150850819899907">"Kenalan"</string>
-    <string name="upgrade_msg" msgid="8640807392794309950">"Meningkatkan versi basis data kenalan."</string>
-    <string name="upgrade_out_of_memory_notification_ticker" msgid="7638747231223520477">"Peningkatan versi kenalan memerlukan lebih banyak memori."</string>
-    <string name="upgrade_out_of_memory_notification_title" msgid="8888171924684998531">"Meningkatkan versi penyimpanan untuk kenalan"</string>
+    <string name="app_label" msgid="3389954322874982620">"Penyimpanan Kontak"</string>
+    <string name="provider_label" msgid="6012150850819899907">"Kontak"</string>
+    <string name="upgrade_msg" msgid="8640807392794309950">"Meningkatkan versi basis kontak."</string>
+    <string name="upgrade_out_of_memory_notification_ticker" msgid="7638747231223520477">"Peningkatan versi kontak memerlukan lebih banyak memori."</string>
+    <string name="upgrade_out_of_memory_notification_title" msgid="8888171924684998531">"Meningkatkan versi penyimpanan untuk kontak"</string>
     <string name="upgrade_out_of_memory_notification_text" msgid="8438179450336437626">"Sentuh untuk menyelesaikan peningkatan versi."</string>
-    <string name="default_directory" msgid="93961630309570294">"Kenalan"</string>
+    <string name="default_directory" msgid="93961630309570294">"Kontak"</string>
     <string name="local_invisible_directory" msgid="705244318477396120">"Lainnya"</string>
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Akses semua pesan suara"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Mengizinkan apl menyimpan dan mengambil semua pesan suara yang dapat diakses oleh perangkat ini."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Kotak pesan dari "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Salin basis data kontak"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Anda akan 1) membuat salinan basis data yang mencakup semua informasi terkait kontak dan semua log panggilan ke penyimpanan internal, dan 2) mengirimkannya sebagai email. Ingat untuk menghapus salinan secepatnya setelah Anda selesai menyalinnya dari perangkat atau saat email telah diterima."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Hapus sekarang"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Mulai"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Pilih program untuk mengirim file Anda"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Db Kontak terlampir"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Terlampir basis data kontak saya dengan semua informasi kontak. Harap tangani dengan benar."</string>
 </resources>
diff --git a/res/values-it/strings.xml b/res/values-it/strings.xml
index dfea4d4..ff80d20 100644
--- a/res/values-it/strings.xml
+++ b/res/values-it/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Accesso a tutti i messaggi vocali"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Consente all\'applicazione di archiviare recuperare tutti i messaggi vocali a cui questo dispositivo può accedere."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Messaggio vocale da "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Copia database di contatti"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Stai per 1) creare una copia del tuo database che include tutte le informazioni di contatto e tutti i registri chiamate nella memoria interna e 2) inviarla tramite email. Ricorda di eliminare la copia non appena è stata correttamente copiata dal dispositivo o non appena ricevi l\'email."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Elimina adesso"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Inizia"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Scegli un programma per inviare il file"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Database di contatti allegato"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"In allegato è presente il mio database di contatti contenente tutte le informazioni sui miei contatti. Trattare con cura."</string>
 </resources>
diff --git a/res/values-iw/strings.xml b/res/values-iw/strings.xml
index c87a2f9..7a0eb82 100644
--- a/res/values-iw/strings.xml
+++ b/res/values-iw/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"גישה לכל הודעות הדואר הקולי"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"מאפשר ליישום לאחסן ולאחזר את כל הודעות הדואר הקולי שלמכשיר זה יש גישה אליהן."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"הודעה קולית מאת "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"העתקת מסד נתוני אנשי קשר"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"אתה עומד 1) ליצור עותק באחסון הפנימי של מסד הנתונים שכולל את כל המידע הקשור לאנשי הקשר וכל יומני השיחות, 2) לשלוח אותו בדוא\"ל. זכור למחוק את העותק מיד לאחר שתעתיק אותו בהצלחה מהמכשיר או כשהודעת הדוא\"ל מתקבלת."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"מחק עכשיו"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"התחל"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"בחר תוכנית לשליחת הקובץ"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"מסד נתוני אנשי קשר מצורף"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"מצורף מסד הנתונים של אנשי הקשר שלי עם כל פרטי אנשי הקשר. שמור עליו היטב."</string>
 </resources>
diff --git a/res/values-ja/strings.xml b/res/values-ja/strings.xml
index 74044d8..a48ca04 100644
--- a/res/values-ja/strings.xml
+++ b/res/values-ja/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"すべてのボイスメールにアクセス"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"この端末でアクセス可能なすべてのボイスメールを保存、取得することをアプリに許可します。"</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"受信ボイスメール: "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"連絡先データベースをコピー"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"1）すべての連絡先関連情報とすべての通話履歴を格納したデータベースを内部ストレージにコピーし、2）メールで送信しようとしています。端末からのコピーが完了した時点またはメールが受信された時点ですぐにコピーを削除してください。"</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"今すぐ削除"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"開始"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"ファイルを送信するプログラムを選択"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"連絡先データベースを添付"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"添付されているのは、私のすべての連絡先情報を含む連絡先データベースです。取り扱いにご注意ください。"</string>
 </resources>
diff --git a/res/values-ko/strings.xml b/res/values-ko/strings.xml
index 041cc0b..fd4abf8 100644
--- a/res/values-ko/strings.xml
+++ b/res/values-ko/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"모든 음성사서함에 액세스"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"앱이 이 기기에서 액세스할 수 있는 모든 음성사서함을 저장하고 검색하도록 허용합니다."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"음성사서함 발신자 "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"주소록 데이터베이스 복사"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"내부 저장소에 모든 주소록 관련 정보와 통화 기록을 포함하는 데이터베이스의 1) 사본을 만들고 2) 이메일로 보내려고 합니다. 기기 이외의 장소에 사본을 만들거나 사본의 이메일 수신이 완료된 후에는 해당 사본을 즉시 삭제하시기 바랍니다."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"지금 삭제"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"시작"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"파일을 전송할 프로그램을 선택하세요."</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"주소록 DB 첨부됨"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"모든 주소록 정보가 포함된 주소록 데이터베이스가 첨부되어 있습니다. 신중하게 처리해 주세요."</string>
 </resources>
diff --git a/res/values-lt/strings.xml b/res/values-lt/strings.xml
index b873d1f..16d3a0c 100644
--- a/res/values-lt/strings.xml
+++ b/res/values-lt/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Pasiekti visus balso pašto pranešimus"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Leidžiama programai saugoti ir nuskaityti visus balso pašto pranešimus, kuriuos gali pasiekti šis įrenginys."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Balso pašto pranešimas nuo "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Kopijuoti kontaktų duomenis"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Ketinate 1. sukurti duomenų, į kuriuos įtraukta visa su kontaktais susijusi informacija ir visi skambučių žurnalai, kopiją vidinėje atmintyje ir 2. išsiųsti ją el. paštu. Nepamirškite ištrinti kopijos, kai ją sėkmingai nukopijuosite iš įrenginio ar gausite el. laišką."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Ištrinti dabar"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Pradėti"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Pasirinkite programą, kad išsiųstumėte failą"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Pridedami kontaktų duomenys"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Pridedami mano kontaktų duomenys su visa kontaktų informacija. Elkitės atsargiai."</string>
 </resources>
diff --git a/res/values-lv/strings.xml b/res/values-lv/strings.xml
index fa1e89e..25af3c9 100644
--- a/res/values-lv/strings.xml
+++ b/res/values-lv/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Piekļuve visiem balss pasta ziņojumiem"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Ļauj lietotnei glabāt un izgūt visus balss pasta ziņojumus, kuriem var piekļūt šajā ierīcē."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Balss pasta ziņojums no "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Kontaktpersonu datu bāzes kopēšana"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Jūs gatavojaties 1) iekšējā atmiņā izveidot savas datu bāzes kopiju, ietverot visu kontaktpersonu informāciju un visu zvanu žurnālu, un 2) nosūtīt to pa e-pastu. Dzēsiet kopiju, tiklīdz tā būs veiksmīgi kopēta no ierīces vai tiks saņemts attiecīgais e-pasta ziņojums."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Dzēst tūlīt"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Sākt"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Izvēlieties programmu, kuru izmantot faila nosūtīšanai"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Pievienota kontaktpersonu datu bāze"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Pielikumā ir pievienota mana kontaktpersonu datu bāze ar informāciju par visām manām kontaktpersonām. Rīkojieties uzmanīgi."</string>
 </resources>
diff --git a/res/values-ms/strings.xml b/res/values-ms/strings.xml
index 653a8d9..b4bad94 100644
--- a/res/values-ms/strings.xml
+++ b/res/values-ms/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Akses semua mel suara"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Membenarkan aplikasi menyimpan dan mengambil semula semua mel suara yang boleh diakses peranti ini."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Mel suara daripada "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Salin pangkalan data kenalan"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Anda akan 1) membuat salinan pangkalan data anda yang termasuk semua maklumat berkaitan kenalan dan semua log panggilan ke storan dalaman dan 2) hantar melalui e-mel. Jangan lupa untuk memadam salinan ini sebaik sahaja anda telah berjaya menyalin daripada peranti atau apabila e-mel diterima."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Padamkan sekarang"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Mula"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Pilih program untuk menghantar fail anda"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Pangkalan Data Kenalan dilampirkan"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Dilampirkan pangkalan data kenalan saya yang mengandungi semua maklumat kenalan. Sila gunakan dengan cermat."</string>
 </resources>
diff --git a/res/values-nb/strings.xml b/res/values-nb/strings.xml
index 5775854..909e54e 100644
--- a/res/values-nb/strings.xml
+++ b/res/values-nb/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Tilgang til alle talemeldinger"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Lar appen lagre og hente alle talepostmeldinger som denne enheten har tilgang til."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Talemelding fra "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Kopiér kontaktdatabasen"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Du er i ferd med å 1) lage en kopi av databasen som omfatter all kontaktrelatert informasjon og alle anropslogger til den interne lagringsplassen, og 2) sende kopien med e-post. Husk å slette kopien så snart du har kopiert den fra enheten eller når e-posten er mottatt."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Slett nå"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Start"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Velg et program for å sende filen"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Kontaktdatabasen er vedlagt"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Vedlagt er kontaktdatabasen min med informasjon om alle kontaktene mine. Håndteres med varsomhet."</string>
 </resources>
diff --git a/res/values-nl/strings.xml b/res/values-nl/strings.xml
index 1a09288..da31aa9 100644
--- a/res/values-nl/strings.xml
+++ b/res/values-nl/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Toegang tot alle voicemails"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Toestaan dat de app alle voicemails opslaat en ophaalt waartoe dit apparaat toegang heeft."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Voicemail van "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Contactendatabase kopiëren"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"U staat op het punt 1) een kopie van uw database met alle contactgegevens en oproeplogboeken te maken in de interne opslag, en 2) deze te e-mailen. Verwijder de kopie zodra u deze van het apparaat heeft gekopieerd of de e-mail is ontvangen."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Nu verwijderen"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Starten"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Selecteer een programma om uw bestand te verzenden"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Contactendatabase bijgevoegd"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Bijgevoegd is mijn contactendatabase met al mijn contactgegevens. Ga hier zorgvuldig mee om."</string>
 </resources>
diff --git a/res/values-pl/strings.xml b/res/values-pl/strings.xml
index b598221..2ba3f45 100644
--- a/res/values-pl/strings.xml
+++ b/res/values-pl/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Dostęp do wszystkich wiadomości głosowych"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Zezwala aplikacji na przechowywanie i pobieranie wszystkich wiadomości głosowych, do których ma dostęp to urządzenie."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Poczta głosowa od "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Kopiuj bazę danych kontaktów"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Zamierzasz: 1) utworzyć w pamięci wewnętrznej kopię bazy danych ze wszystkimi informacjami o kontaktach i dziennikiem połączeń, 2) wysłać ją e-mailem. Pamiętaj, by usunąć kopię zaraz po zapisaniu jej na innym nośniku lub odebraniu e-maila."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Usuń teraz"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Rozpocznij"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Wybierz program, którego użyjesz do wysłania pliku"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"W załączniku baza danych kontaktów"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"W załączniku przesyłam moją bazę danych kontaktów, która zawiera wszystkie informacje o moich kontaktach. Proszę zachować ostrożność."</string>
 </resources>
diff --git a/res/values-pt-rPT/strings.xml b/res/values-pt-rPT/strings.xml
index acdb0d2..ae32ab7 100644
--- a/res/values-pt-rPT/strings.xml
+++ b/res/values-pt-rPT/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Acesso a todas as mensagens de correio de voz"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Permite à aplicação guardar e recuperar todas as mensagens de correio de voz a que este aparelho pode aceder."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Correio de voz de "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Copiar base de dados de contactos"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Está prestes a 1) fazer uma cópia da sua base de dados que inclui todas as informações relativas aos contactos e todo o registo de chamadas para armazenamento interno, e a 2) enviá-los por email. Não se esqueça de eliminar a cópia logo que a tenha copiado com êxito para fora do dispositivo ou que o email tenha sido recebido."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Eliminar agora"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Iniciar"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Escolha um programa para enviar o ficheiro"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"BD de Contactos em anexo"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Em anexo segue a minha base de dados de contactos com todas as informações dos meus contactos. Utilize-a com cuidado."</string>
 </resources>
diff --git a/res/values-pt/strings.xml b/res/values-pt/strings.xml
index 5d471a1..31e8909 100644
--- a/res/values-pt/strings.xml
+++ b/res/values-pt/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Acessar todas as mensagens de voz"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Permite que o aplicativo armazene e recupere todas as mensagens de voz que esse dispositivo acessa."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Correio de voz de "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Copiar banco de dados de contatos"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Você está prestes a 1) fazer uma cópia de seu banco de dados no armazenamento interno, com todas as informações relacionadas aos contatos e todo o histórico de chamadas e 2) enviar essa cópia por e-mail. Lembre-se de excluir a cópia, logo que você a tiver copiado do dispositivo ou que o e-mail for recebido."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Excluir agora"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Iniciar"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Escolha um programa para enviar o arquivo"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"BD de contatos anexado"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Meu banco de dados de contatos está anexado, Lá estão todas as informações de meus contatos. Use-o com cuidado."</string>
 </resources>
diff --git a/res/values-rm/strings.xml b/res/values-rm/strings.xml
index b0e2898..574d09a 100644
--- a/res/values-rm/strings.xml
+++ b/res/values-rm/strings.xml
@@ -36,4 +36,18 @@
     <skip />
     <!-- no translation found for voicemail_from_column (435732568832121444) -->
     <skip />
+    <!-- no translation found for debug_dump_title (4916885724165570279) -->
+    <skip />
+    <!-- no translation found for debug_dump_database_message (406438635002392290) -->
+    <skip />
+    <!-- no translation found for debug_dump_delete_button (7832879421132026435) -->
+    <skip />
+    <!-- no translation found for debug_dump_start_button (2837506913757600001) -->
+    <skip />
+    <!-- no translation found for debug_dump_email_sender_picker (3534420908672176460) -->
+    <skip />
+    <!-- no translation found for debug_dump_email_subject (108188398416385976) -->
+    <skip />
+    <!-- no translation found for debug_dump_email_body (4577749800871444318) -->
+    <skip />
 </resources>
diff --git a/res/values-ro/strings.xml b/res/values-ro/strings.xml
index 110f166..5fafb93 100644
--- a/res/values-ro/strings.xml
+++ b/res/values-ro/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Accesaţi toate mesajele vocale"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Permite aplicaţiei să stocheze şi să preia toate mesajele vocale pe care acest dispozitiv le poate accesa."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Mesaj vocal de la "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Copiaţi baza de date a agendei"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Sunteţi pe cale 1) să faceţi o copie, pe stocarea internă, a bazei dvs. de date care include toate informaţiile referitoare la agendă şi întregul jurnal de apeluri şi 2) să trimiteţi această copie prin e-mail. Nu uitaţi să ştergeţi această copie după ce aţi copiat-o de pe dispozitiv sau după ce a fost primit e-mailul."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Ştergeţi acum"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Porniţi"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Alegeţi un program pentru a trimite fişierul"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Atașată baza de date a agendei"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Vă trimit ataşată baza de date cu toate informaţiile din agenda mea. Vă rog să o gestionaţi cu atenţie."</string>
 </resources>
diff --git a/res/values-ru/strings.xml b/res/values-ru/strings.xml
index 45b28a0..87a1798 100644
--- a/res/values-ru/strings.xml
+++ b/res/values-ru/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Доступ к голосовым сообщениям"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Приложение сможет сохранять и загружать все голосовые сообщения, к которым есть доступ на этом устройстве."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Голосовое сообщение от абонента "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Копирование базы данных контактов"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Вы собираетесь скопировать базу данных ваших контактов и списка вызовов во внутреннюю память устройства. При этом копия базы будет отправлена по электронной почте. Обязательно удалите эти данные с устройства после того, как они будут скопированы с него либо получены в письме."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Удалить"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Копировать"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Выберите приложение для отправки файла"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"К сообщению добавлена база данных контактов"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Будьте внимательны: в приложенном файле находится база данных с моими контактами."</string>
 </resources>
diff --git a/res/values-sk/strings.xml b/res/values-sk/strings.xml
index e8d82c6..2f8ae20 100644
--- a/res/values-sk/strings.xml
+++ b/res/values-sk/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Prístup ku všetkým hlasovým správam"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Umožňuje aplikácii uchovávať a načítavať všetky hlasové správy, ku ktorým má zariadenie prístup."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Hlasová správa od "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Kopírovanie databázy kontaktov"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Práve sa chystáte 1) vytvoriť v internom ukladacom priestore kópiu svojej databázy, ktorá obsahuje všetky informácie týkajúce sa kontaktov a všetky hovory, a 2) poslať túto databázu e-mailom. Nezabudnite odstrániť kópiu hneď po úspešnom skopírovaní do zariadenia alebo doručení e-mailu."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Odstrániť"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Spustiť"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Vyberte program na odoslanie súboru"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Databáza kontaktov v prílohe"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"V prílohe je databáza s informáciami o všetkých mojich kontaktoch. Zaobchádzajte s ňou opatrne."</string>
 </resources>
diff --git a/res/values-sl/strings.xml b/res/values-sl/strings.xml
index af43531..1753119 100644
--- a/res/values-sl/strings.xml
+++ b/res/values-sl/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Dostop do glasovne pošte"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Programu dovoli shranjevanje in prenos sporočil v odzivniku, do katerih lahko dostopa ta naprava."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Govorna pošta s številke "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Kopiraj zbirko podatkov o stikih"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"V naslednjem koraku boste 1) naredili kopijo zbirke podatkov, ki vključuje vse informacije o stikih in celoten dnevnik klicev, v notranji pomnilnik ter 2) jo poslali. Ne pozabite izbrisati kopije iz naprave, ko jo boste uspešno kopirali oziroma ko jo boste prejeli po e-pošti."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Izbriši zdaj"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Začni"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Izberite program za pošiljanje datoteke"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Priložena zbirka podatkov o stikih"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Priložena je zbirka podatkov z vsemi informacijami o stikih. Z e-pošto ravnajte previdno."</string>
 </resources>
diff --git a/res/values-sr/strings.xml b/res/values-sr/strings.xml
index c8888db..e7314bc 100644
--- a/res/values-sr/strings.xml
+++ b/res/values-sr/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Приступ свим порукама говорне поште"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Дозвољава апликацији да складишти и преузима све поруке говорне поште којима овај уређај може да приступи."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Говорна пошта од "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Копирање базе података са контактима"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Управо ћете 1) направити копију базе података која садржи све информације у вези са контактима и целокупну евиденцију позива у интерној меморији и 2) послати је е-поштом. Не заборавите да избришете копију чим је будете копирали са уређаја или чим будете примили поруку е-поште."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Избриши одмах"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Покрени"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Изаберите програм за слање датотеке"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"База података са контактима је у прилогу"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"У прилогу је база података са мојим контактима и свим информацијама о њима. Рукујте пажљиво."</string>
 </resources>
diff --git a/res/values-sv/strings.xml b/res/values-sv/strings.xml
index 06ecf9a..4b2d2e4 100644
--- a/res/values-sv/strings.xml
+++ b/res/values-sv/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Åtkomst till alla röstmeddelanden"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Tillåter att appen sparar och hämtar alla röstmeddelanden som enheten har åtkomst till."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Röstmeddelande från "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Kopiera kontaktdatabas"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Du kommer att 1) kopiera din databas, inklusive alla kontaktuppgifter och samtalsloggar till det interna lagringsutrymmet, och 2) skicka det via e-post. Kom ihåg att ta bort kopian från enheten när kopieringen har slutförts eller när du har fått e-postmeddelandet."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Ta bort nu"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Börja"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Välj program att skicka filen med"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Kontaktdatabas bifogad"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Jag bifogar min kontaktdatabas med alla mina kontaktuppgifter. Hantera den varsamt."</string>
 </resources>
diff --git a/res/values-sw/strings.xml b/res/values-sw/strings.xml
index b83c636..05d46fa 100644
--- a/res/values-sw/strings.xml
+++ b/res/values-sw/strings.xml
@@ -26,6 +26,13 @@
     <string name="default_directory" msgid="93961630309570294">"Anwani"</string>
     <string name="local_invisible_directory" msgid="705244318477396120">"Nyingineyo"</string>
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Fikia barua zote za sauti"</string>
-    <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Inaruhusu programu kuhifadhi na kutoa jumbe zote za sauti ambazo kifaa hiki kinaweza kufikia."</string>
+    <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Inaruhusu programu kuhifadhi na kutoa mawasiliano yote ya sauti ambayo kifaa hiki kinaweza kufikia."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Barua ya sauti kutoka "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Nakili hifadhidata ya anwani"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Unakaribia 1) kuunda nakala ya hifadhidata yako ambayo inajumuisha maelezo yote yanayohusiana na anwani na kumbukumbu zote za simu katika hifadhi ya ndani, na 2) uitume kwa barua pepe. Kumbuka kufuta nakala pindi tu unapoinakili kwa ufanisi kutoka kwenye kifaa au barua pepe imepokewa."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Futa sasa"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Anza"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Chagua programu ili kutuma faili yako"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Db ya anwani imeambatishwa"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Kilichoambatishwa ni hifadhidata ya anwani zangu iliyo na maelezo yote ya anwani zangu. Ishughulikie kwa uangalifu."</string>
 </resources>
diff --git a/res/values-th/strings.xml b/res/values-th/strings.xml
index 0cb6adc..d3c3e82 100644
--- a/res/values-th/strings.xml
+++ b/res/values-th/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"เข้าถึงข้อความเสียงทั้งหมด"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"อนุญาตให้แอปพลิเคชันจัดเก็บและเรียกข้อความเสียงทั้งหมดที่อุปกรณ์นี้สามารถเข้าถึงได้"</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"ข้อความเสียงจาก "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"คัดลอกฐานข้อมูลผู้ติดต่อ"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"คุณกำลังจะ 1) ทำสำเนาฐานข้อมูลของคุณซึ่งรวมถึงข้อมูลที่เกี่ยวข้องกับผู้ติดต่อทั้งหมดและบันทึกการโทรทั้งหมดลงในที่จัดเก็บข้อมูลภายใน และ 2) ส่งอีเมล อย่าลืมลบสำเนาออกจากอุปกรณ์ทันทีที่คุณคัดลอกเสร็จเรียบร้อยแล้วหรือเมื่ออีเมลส่งไปถึงผู้รับแล้ว"</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"ลบเดี๋ยวนี้"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"เริ่มต้น"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"เลือกโปรแกรมเพื่อส่งไฟล์ของคุณ"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"แนบฐานข้อมูลผู้ติดต่อมาด้วย"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"ที่แนบอยู่นี้เป็นฐานข้อมูลผู้ติดต่อซึ่งมีข้อมูลผู้ติดต่อของฉันทั้งหมด โปรดจัดการด้วยความระมัดระวัง"</string>
 </resources>
diff --git a/res/values-tl/strings.xml b/res/values-tl/strings.xml
index 44f6b73..8d6855c 100644
--- a/res/values-tl/strings.xml
+++ b/res/values-tl/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"I-access ang lahat ng voicemail"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Binibigyang-daan ang app upang iimbak at kuning muli ang lahat ng voicemail na naa-access ng device na ito."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Voicemail mula sa/kay "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Kopyahin ang database ng mga contact"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Ikaw ay 1) gagawa na ng kopya ng iyong database na kinapapalooban ng lahat ng impormasyong nauugnay sa mga contact at ng lahat ng log ng tawag sa panloob na storage, at 2) ipapadala mo na ito sa email. Alalahaning tanggalin ang kopya sa sandaling matagumpay mo na itong nakopya mula sa device o sa sandaling natanggap na ang email."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Tanggalin ngayon"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Simulan"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Pumili ng program upang ipadala ang iyong file"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Naka-attach ang Contacts Db"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Naka-attach ang aking database ng mga contact na kasama ang lahat ng impormasyon ng aking mga contact. Pangasiwaan nang may pag-iingat."</string>
 </resources>
diff --git a/res/values-tr/strings.xml b/res/values-tr/strings.xml
index 672288a..9507051 100644
--- a/res/values-tr/strings.xml
+++ b/res/values-tr/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Tüm sesli mesajlara erişim"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Uygulamaya, bu cihazın erişebileceği tüm sesli mesajları depolama ve alma izni verir."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Sesli mesaj gönderen: "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Kişiler veritabanını kopyala"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Birazdan 1) veritabanınızın kişilerle ilgili tüm bilgilerini ve çağrı günlüğünün tamamını içeren bir kopyasını dahili depolama birimine kaydetmek ve 2) bunu e-postayla göndermek üzeresiniz. Bu kopyayı cihazın dışına aktardıktan veya e-posta alındıktan sonra hemen silmeyi unutmayın."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Şimdi sil"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Başlat"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Dosyanızı göndermek için bir program seçin"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Kişiler veritabanı ektedir"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Tüm kişi bilgilerimi içeren kişiler veritabanımı ekte bulabilirsiniz. Dikkatli kullanın."</string>
 </resources>
diff --git a/res/values-uk/strings.xml b/res/values-uk/strings.xml
index 1829219..5554902 100644
--- a/res/values-uk/strings.xml
+++ b/res/values-uk/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Доступ до всієї голосової пошти"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Дозволяє програмі зберігати й отримувати всю голосову пошту, доступ до якої має цей пристрій."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Голосова пошта від "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Копіювати базу даних контактів"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Ви збираєтеся: 1) скопіювати у внутрішню пам’ять свою базу даних, яка містить усю інформацію про контакти та весь журнал дзвінків; 2) надіслати копію електронною поштою. Не забудьте видалити копію, щойно її буде перенесено з пристрою або отримано електронним листом."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Видалити зараз"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Почати"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Виберіть програму для надсилання файлу"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"У вкладенні – база даних контактів"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"У вкладенні – база даних моїх контактів з усією інформацією про мої контакти. Працюйте з нею обережно."</string>
 </resources>
diff --git a/res/values-vi/strings.xml b/res/values-vi/strings.xml
index 431a403..0d59f0d 100644
--- a/res/values-vi/strings.xml
+++ b/res/values-vi/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Truy cập tất cả các thư thoại"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Cho phép ứng dụng lưu trữ và truy xuất tất cả thư thoại mà thiết bị này có thể truy cập."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Thư thoại từ "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Sao chép cơ sở dữ liệu người liên hệ"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Bạn sắp 1) thực hiện sao chép cơ sở dữ liệu của mình bao gồm tất cả thông tin liên quan đến địa chỉ liên hệ và tất cả nhật ký cuộc gọi sang bộ nhớ trong, và 2) gửi bản sao đó qua email. Hãy nhớ xóa bản sao khỏi thiết bị hoặc email nhận được ngay khi bạn đã sao chép thành công."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Xóa ngay"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Bắt đầu"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Chọn chương trình để gửi tệp của bạn"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"Đã đính kèm cơ sở dữ liệu người liên hệ"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Phần đính kèm là cơ sở dữ liệu người liên hệ với tất cả thông tin người liên hệ của tôi. Hãy cẩn trọng khi xử lý."</string>
 </resources>
diff --git a/res/values-zh-rCN/strings.xml b/res/values-zh-rCN/strings.xml
index 402b8c1..2b388c9 100644
--- a/res/values-zh-rCN/strings.xml
+++ b/res/values-zh-rCN/strings.xml
@@ -22,10 +22,17 @@
     <string name="upgrade_msg" msgid="8640807392794309950">"正在升级联系人数据库。"</string>
     <string name="upgrade_out_of_memory_notification_ticker" msgid="7638747231223520477">"联系人升级需要更多的存储空间。"</string>
     <string name="upgrade_out_of_memory_notification_title" msgid="8888171924684998531">"正在升级存储器以容纳更多联系人"</string>
-    <string name="upgrade_out_of_memory_notification_text" msgid="8438179450336437626">"请触摸以完成升级。"</string>
+    <string name="upgrade_out_of_memory_notification_text" msgid="8438179450336437626">"触摸可完成升级。"</string>
     <string name="default_directory" msgid="93961630309570294">"联系人"</string>
     <string name="local_invisible_directory" msgid="705244318477396120">"其他"</string>
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"访问所有语音邮件"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"允许应用存储和检索此设备可访问的所有语音邮件。"</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"语音邮件发件人 "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"复制通讯录数据库"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"您将要执行以下操作：1) 在内部存储设备中，创建包括通讯录相关信息和所有通话记录的数据库的副本；2) 通过电子邮件发送该副本。从设备中成功复制该副本或在电子邮件送达之后，请务必及时删除该副本。"</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"立即删除"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"开始"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"选择用于发送文件的程序"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"随附通讯录数据库"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"附件是我的通讯录数据库，其中包含我所有的联系人信息，因此请谨慎处理。"</string>
 </resources>
diff --git a/res/values-zh-rTW/strings.xml b/res/values-zh-rTW/strings.xml
index ba929c3..bd580b2 100644
--- a/res/values-zh-rTW/strings.xml
+++ b/res/values-zh-rTW/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"存取所有語音留言"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"允許應用程式儲存及擷取這個裝置可存取的所有語音留言。"</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"語音郵件寄件者： "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"複製聯絡人資料庫"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"您即將要 1) 將您的資料庫 (包含所有聯絡人相關資訊及所有通話紀錄) 複製到內部儲存空間，以及 2) 透過電子郵件傳送副本。提醒您，當您順利複製裝置上的資料或收到電子郵件後，請儘快刪除副本。"</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"立即刪除"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"開始"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"選擇要傳送檔案的程式"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"內含聯絡人資料庫附件"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"附件是我的聯絡人資料庫，其中包含我所有的聯絡人資訊，請謹慎處理。"</string>
 </resources>
diff --git a/res/values-zu/strings.xml b/res/values-zu/strings.xml
index 76de636..014a516 100644
--- a/res/values-zu/strings.xml
+++ b/res/values-zu/strings.xml
@@ -28,4 +28,11 @@
     <string name="read_write_all_voicemail_label" msgid="4557216100818257560">"Finyelela kuwo wonke amavoyisimeyili"</string>
     <string name="read_write_all_voicemail_description" msgid="8029809937805761356">"Ivumela uhlelo olusebenzayo lulonde futhi lulande wonke ama-imeyli ezwi ledivayisi engakwazi ukuwafinyelela."</string>
     <string name="voicemail_from_column" msgid="435732568832121444">"Imeyili yezwi kusuka "</string>
+    <string name="debug_dump_title" msgid="4916885724165570279">"Kopisha imininingo egciniwe yoxhumana nabo"</string>
+    <string name="debug_dump_database_message" msgid="406438635002392290">"Useduze nokuthi 1) wenze ikhophi yemininingwane yakho egciniwe ebandakanya yonke imininingwane ehlobene noxhumana nabo kanye nohlu lokushaya ucingo kokokulondoloza kwangaphakathi, kanti futhi 2) uzoyYou are about to 1) make a copy of youithumela nge-imeyili. Khumbula ukuthi ususe ikhophi ngokushesha emumva kokuba uphumelele ukuyikopisha isuka edivayisini noma emumva kokuba kutholakale i-imeyili."</string>
+    <string name="debug_dump_delete_button" msgid="7832879421132026435">"Susa manje"</string>
+    <string name="debug_dump_start_button" msgid="2837506913757600001">"Qala"</string>
+    <string name="debug_dump_email_sender_picker" msgid="3534420908672176460">"Khetha uhlelo ozothumela kulo ifayela lakho"</string>
+    <string name="debug_dump_email_subject" msgid="108188398416385976">"I-Db yoxhumana nabo inamathiselwe"</string>
+    <string name="debug_dump_email_body" msgid="4577749800871444318">"Okunamathiselwe imininingo egciniwe yabaxhumana nami nalo lonke ulwazi labaxhumana nami. Kubambe ngokunakekela."</string>
 </resources>
diff --git a/res/values/strings.xml b/res/values/strings.xml
index aaa7f44..5291017 100644
--- a/res/values/strings.xml
+++ b/res/values/strings.xml
@@ -58,4 +58,26 @@
          Note that the trailing space is important, and that to achieve it we have to wrap the
          string in double quotes. -->
     <string name="voicemail_from_column">"Voicemail from "</string>
+
+    <!-- Debug tool - title of the dialog which copies the contact database into the external storage. [CHAR LIMIT=NONE] -->
+    <string name="debug_dump_title">Copy contacts database</string>
+
+    <!-- Debug tool - message shown to the user on the dialog which sends a copy of  the contact database via email or other apps. [CHAR LIMIT=NONE] -->
+    <string name="debug_dump_database_message">You are about to 1) make a copy of your database which includes all contacts related information and all call log to the internal storage, and 2) email it.  Remember to delete the copy as soon as you have successfully copied it off the device or the email is received.</string>
+
+    <!-- Debug tool - dialog button- delete file now [CHAR LIMIT=NONE] -->
+    <string name="debug_dump_delete_button">Delete now</string>
+
+    <!-- Debug tool - dialog button - start copying [CHAR LIMIT=NONE] -->
+    <string name="debug_dump_start_button">Start</string>
+
+    <!-- Debug tool - email subject [CHAR LIMIT=NONE] -->
+    <string name="debug_dump_email_sender_picker">Choose a program to send your file</string>
+
+    <!-- Debug tool - email subject [CHAR LIMIT=NONE] -->
+    <string name="debug_dump_email_subject">Contacts Db attached</string>
+
+    <!-- Debug tool - email body [CHAR LIMIT=NONE] -->
+    <string name="debug_dump_email_body">Attached is my contacts database with all my contacts information.  Handle with care.</string>
+
 </resources>
diff --git a/src/com/android/providers/contacts/AbstractContactsProvider.java b/src/com/android/providers/contacts/AbstractContactsProvider.java
index a33320f..226652e 100644
--- a/src/com/android/providers/contacts/AbstractContactsProvider.java
+++ b/src/com/android/providers/contacts/AbstractContactsProvider.java
@@ -38,9 +38,12 @@ import java.util.ArrayList;
 public abstract class AbstractContactsProvider extends ContentProvider
         implements SQLiteTransactionListener {
 
-    protected static final String TAG = "ContactsProvider";
+    public static final String TAG = "ContactsProvider";
 
-    protected static final boolean VERBOSE_LOGGING = Log.isLoggable(TAG, Log.VERBOSE);
+    public static final boolean VERBOSE_LOGGING = Log.isLoggable(TAG, Log.VERBOSE);
+
+    /** Set true to enable detailed transaction logging. */
+    public static final boolean ENABLE_TRANSACTION_LOG = false; // Don't submit with true.
 
     /**
      * Duration in ms to sleep after successfully yielding the lock during a batch operation.
@@ -72,14 +75,32 @@ public abstract class AbstractContactsProvider extends ContentProvider
      * created by this provider will automatically retrieve a writable database from this helper
      * and initiate a transaction on that database.  This should be used to ensure that operations
      * across multiple databases are all blocked on a single DB lock (to prevent deadlock cases).
+     *
+     * Hint: It's always {@link ContactsDatabaseHelper}.
+     *
+     * TODO Change the structure to make it obvious that it's actually always set, and is the
+     * {@link ContactsDatabaseHelper}.
      */
     private SQLiteOpenHelper mSerializeOnDbHelper;
 
     /**
      * The tag corresponding to the database used for serializing transactions.
+     *
+     * Hint: It's always the contacts db helper tag.
+     *
+     * See also the TODO on {@link #mSerializeOnDbHelper}.
      */
     private String mSerializeDbTag;
 
+    /**
+     * The transaction listener used with {@link #mSerializeOnDbHelper}.
+     *
+     * Hint: It's always {@link ContactsProvider2}.
+     *
+     * See also the TODO on {@link #mSerializeOnDbHelper}.
+     */
+    private SQLiteTransactionListener mSerializedDbTransactionListener;
+
     @Override
     public boolean onCreate() {
         Context context = getContext();
@@ -94,12 +115,14 @@ public abstract class AbstractContactsProvider extends ContentProvider
 
     /**
      * Specifies a database helper (and corresponding tag) to serialize all transactions on.
-     * @param serializeOnDbHelper The database helper to use for serializing transactions.
-     * @param tag The tag for this database.
+     *
+     * See also the TODO on {@link #mSerializeOnDbHelper}.
      */
-    public void setDbHelperToSerializeOn(SQLiteOpenHelper serializeOnDbHelper, String tag) {
+    public void setDbHelperToSerializeOn(SQLiteOpenHelper serializeOnDbHelper, String tag,
+            SQLiteTransactionListener listener) {
         mSerializeOnDbHelper = serializeOnDbHelper;
         mSerializeDbTag = tag;
+        mSerializedDbTransactionListener = listener;
     }
 
     public ContactsTransaction getCurrentTransaction() {
@@ -227,12 +250,16 @@ public abstract class AbstractContactsProvider extends ContentProvider
      * @param callerIsBatch Whether the caller is operating in batch mode.
      */
     private ContactsTransaction startTransaction(boolean callerIsBatch) {
+        if (ENABLE_TRANSACTION_LOG) {
+            Log.i(TAG, "startTransaction " + getClass().getSimpleName() +
+                    "  callerIsBatch=" + callerIsBatch, new RuntimeException("startTransaction"));
+        }
         ContactsTransaction transaction = mTransactionHolder.get();
         if (transaction == null) {
             transaction = new ContactsTransaction(callerIsBatch);
             if (mSerializeOnDbHelper != null) {
                 transaction.startTransactionForDb(mSerializeOnDbHelper.getWritableDatabase(),
-                        mSerializeDbTag, this);
+                        mSerializeDbTag, mSerializedDbTransactionListener);
             }
             mTransactionHolder.set(transaction);
         }
@@ -245,6 +272,10 @@ public abstract class AbstractContactsProvider extends ContentProvider
      * @param callerIsBatch Whether the caller is operating in batch mode.
      */
     private void endTransaction(boolean callerIsBatch) {
+        if (ENABLE_TRANSACTION_LOG) {
+            Log.i(TAG, "endTransaction " + getClass().getSimpleName() +
+                    "  callerIsBatch=" + callerIsBatch, new RuntimeException("endTransaction"));
+        }
         ContactsTransaction transaction = mTransactionHolder.get();
         if (transaction != null && (!transaction.isBatch() || callerIsBatch)) {
             try {
diff --git a/src/com/android/providers/contacts/AccountWithDataSet.java b/src/com/android/providers/contacts/AccountWithDataSet.java
index 3fea8a6..bfae112 100644
--- a/src/com/android/providers/contacts/AccountWithDataSet.java
+++ b/src/com/android/providers/contacts/AccountWithDataSet.java
@@ -16,11 +16,11 @@
 
 package com.android.providers.contacts;
 
-import com.android.internal.util.Objects;
-
 import android.accounts.Account;
 import android.text.TextUtils;
 
+import com.google.common.base.Objects;
+
 /**
  * Account information that includes the data set, if any.
  */
diff --git a/src/com/android/providers/contacts/CallLogProvider.java b/src/com/android/providers/contacts/CallLogProvider.java
index 89ae591..9d5ea93 100644
--- a/src/com/android/providers/contacts/CallLogProvider.java
+++ b/src/com/android/providers/contacts/CallLogProvider.java
@@ -20,10 +20,7 @@ import static com.android.providers.contacts.util.DbQueryUtils.checkForSupported
 import static com.android.providers.contacts.util.DbQueryUtils.getEqualityClause;
 import static com.android.providers.contacts.util.DbQueryUtils.getInequalityClause;
 
-import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
-import com.android.providers.contacts.util.SelectionBuilder;
-import com.google.common.annotations.VisibleForTesting;
-
+import android.app.AppOpsManager;
 import android.content.ContentProvider;
 import android.content.ContentUris;
 import android.content.ContentValues;
@@ -38,6 +35,10 @@ import android.provider.CallLog;
 import android.provider.CallLog.Calls;
 import android.util.Log;
 
+import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
+import com.android.providers.contacts.util.SelectionBuilder;
+import com.google.common.annotations.VisibleForTesting;
+
 import java.util.HashMap;
 
 /**
@@ -94,6 +95,7 @@ public class CallLogProvider extends ContentProvider {
 
     @Override
     public boolean onCreate() {
+        setAppOps(AppOpsManager.OP_READ_CALL_LOG, AppOpsManager.OP_WRITE_CALL_LOG);
         if (Log.isLoggable(Constants.PERFORMANCE_TAG, Log.DEBUG)) {
             Log.d(Constants.PERFORMANCE_TAG, "CallLogProvider.onCreate start");
         }
@@ -123,15 +125,15 @@ public class CallLogProvider extends ContentProvider {
     @Override
     public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs,
             String sortOrder) {
-        SQLiteQueryBuilder qb = new SQLiteQueryBuilder();
+        final SQLiteQueryBuilder qb = new SQLiteQueryBuilder();
         qb.setTables(Tables.CALLS);
         qb.setProjectionMap(sCallsProjectionMap);
         qb.setStrict(true);
 
-        SelectionBuilder selectionBuilder = new SelectionBuilder(selection);
+        final SelectionBuilder selectionBuilder = new SelectionBuilder(selection);
         checkVoicemailPermissionAndAddRestriction(uri, selectionBuilder);
 
-        int match = sURIMatcher.match(uri);
+        final int match = sURIMatcher.match(uri);
         switch (match) {
             case CALLS:
                 break;
@@ -154,15 +156,47 @@ public class CallLogProvider extends ContentProvider {
                 throw new IllegalArgumentException("Unknown URL " + uri);
         }
 
+        final int limit = getIntParam(uri, Calls.LIMIT_PARAM_KEY, 0);
+        final int offset = getIntParam(uri, Calls.OFFSET_PARAM_KEY, 0);
+        String limitClause = null;
+        if (limit > 0) {
+            limitClause = offset + "," + limit;
+        }
+
         final SQLiteDatabase db = mDbHelper.getReadableDatabase();
-        Cursor c = qb.query(db, projection, selectionBuilder.build(), selectionArgs, null, null,
-                sortOrder, null);
+        final Cursor c = qb.query(db, projection, selectionBuilder.build(), selectionArgs, null,
+                null, sortOrder, limitClause);
         if (c != null) {
             c.setNotificationUri(getContext().getContentResolver(), CallLog.CONTENT_URI);
         }
         return c;
     }
 
+    /**
+     * Gets an integer query parameter from a given uri.
+     *
+     * @param uri The uri to extract the query parameter from.
+     * @param key The query parameter key.
+     * @param defaultValue A default value to return if the query parameter does not exist.
+     * @return The value from the query parameter in the Uri.  Or the default value if the parameter
+     * does not exist in the uri.
+     * @throws IllegalArgumentException when the value in the query parameter is not an integer.
+     */
+    private int getIntParam(Uri uri, String key, int defaultValue) {
+        String valueString = uri.getQueryParameter(key);
+        if (valueString == null) {
+            return defaultValue;
+        }
+
+        try {
+            return Integer.parseInt(valueString);
+        } catch (NumberFormatException e) {
+            String msg = "Integer required for " + key + " parameter but value '" + valueString +
+                    "' was found instead.";
+            throw new IllegalArgumentException(msg, e);
+        }
+    }
+
     @Override
     public String getType(Uri uri) {
         int match = sURIMatcher.match(uri);
diff --git a/src/com/android/providers/contacts/ContactDirectoryManager.java b/src/com/android/providers/contacts/ContactDirectoryManager.java
index 7116ed6..f243e79 100644
--- a/src/com/android/providers/contacts/ContactDirectoryManager.java
+++ b/src/com/android/providers/contacts/ContactDirectoryManager.java
@@ -16,13 +16,6 @@
 
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.ContactsDatabaseHelper.DbProperties;
-import com.android.providers.contacts.ContactsDatabaseHelper.DirectoryColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
-import com.google.android.collect.Lists;
-import com.google.android.collect.Sets;
-import com.google.common.annotations.VisibleForTesting;
-
 import android.content.ContentValues;
 import android.content.Context;
 import android.content.pm.PackageInfo;
@@ -41,6 +34,13 @@ import android.provider.ContactsContract.Directory;
 import android.text.TextUtils;
 import android.util.Log;
 
+import com.android.providers.contacts.ContactsDatabaseHelper.DbProperties;
+import com.android.providers.contacts.ContactsDatabaseHelper.DirectoryColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
+import com.google.android.collect.Lists;
+import com.google.android.collect.Sets;
+import com.google.common.annotations.VisibleForTesting;
+
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
diff --git a/src/com/android/providers/contacts/ContactLocaleUtils.java b/src/com/android/providers/contacts/ContactLocaleUtils.java
index 2eb2ad6..c63f7fc 100644
--- a/src/com/android/providers/contacts/ContactLocaleUtils.java
+++ b/src/com/android/providers/contacts/ContactLocaleUtils.java
@@ -16,79 +16,342 @@
 
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.HanziToPinyin.Token;
-
 import android.provider.ContactsContract.FullNameStyle;
-import android.util.SparseArray;
+import android.provider.ContactsContract.PhoneticNameStyle;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.android.providers.contacts.HanziToPinyin.Token;
 
+import java.lang.Character.UnicodeBlock;
+import java.util.Arrays;
 import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Locale;
+import java.util.Map;
+import java.util.Set;
+
+import libcore.icu.AlphabeticIndex;
+import libcore.icu.AlphabeticIndex.ImmutableIndex;
+import libcore.icu.Transliterator;
 
 /**
- * This utility class provides customized sort key and name lookup key according the locale.
+ * This utility class provides specialized handling for locale specific
+ * information: labels, name lookup keys.
  */
 public class ContactLocaleUtils {
+    public static final String TAG = "ContactLocale";
+
+    public static final Locale LOCALE_ARABIC = new Locale("ar");
+    public static final Locale LOCALE_GREEK = new Locale("el");
+    public static final Locale LOCALE_HEBREW = new Locale("he");
+    // Ukrainian labels are superset of Russian
+    public static final Locale LOCALE_UKRAINIAN = new Locale("uk");
+    public static final Locale LOCALE_THAI = new Locale("th");
 
     /**
-     * This class is the default implementation.
-     * <p>
-     * It should be the base class for other locales' implementation.
+     * This class is the default implementation and should be the base class
+     * for other locales.
+     *
+     * sortKey: same as name
+     * nameLookupKeys: none
+     * labels: uses ICU AlphabeticIndex for labels and extends by labeling
+     *     phone numbers "#".  Eg English labels are: [A-Z], #, " "
      */
-    public class ContactLocaleUtilsBase {
-        public String getSortKey(String displayName) {
-            return displayName;
+    private static class ContactLocaleUtilsBase {
+        private static final String EMPTY_STRING = "";
+        private static final String NUMBER_STRING = "#";
+
+        protected final ImmutableIndex mAlphabeticIndex;
+        private final int mAlphabeticIndexBucketCount;
+        private final int mNumberBucketIndex;
+
+        public ContactLocaleUtilsBase(Locale locale) {
+            // AlphabeticIndex.getBucketLabel() uses a binary search across
+            // the entire label set so care should be taken about growing this
+            // set too large. The following set determines for which locales
+            // we will show labels other than your primary locale. General rules
+            // of thumb for adding a locale: should be a supported locale; and
+            // should not be included if from a name it is not deterministic
+            // which way to label it (so eg Chinese cannot be added because
+            // the labeling of a Chinese character varies between Simplified,
+            // Traditional, and Japanese locales). Use English only for all
+            // Latin based alphabets. Ukrainian is chosen for Cyrillic because
+            // its alphabet is a superset of Russian.
+            mAlphabeticIndex = new AlphabeticIndex(locale)
+                .setMaxLabelCount(300)
+                .addLabels(Locale.ENGLISH)
+                .addLabels(Locale.JAPANESE)
+                .addLabels(Locale.KOREAN)
+                .addLabels(LOCALE_THAI)
+                .addLabels(LOCALE_ARABIC)
+                .addLabels(LOCALE_HEBREW)
+                .addLabels(LOCALE_GREEK)
+                .addLabels(LOCALE_UKRAINIAN)
+                .getImmutableIndex();
+            mAlphabeticIndexBucketCount = mAlphabeticIndex.getBucketCount();
+            mNumberBucketIndex = mAlphabeticIndexBucketCount - 1;
+        }
+
+        public String getSortKey(String name) {
+            return name;
+        }
+
+        /**
+         * Returns the bucket index for the specified string. AlphabeticIndex
+         * sorts strings into buckets numbered in order from 0 to N, where the
+         * exact value of N depends on how many representative index labels are
+         * used in a particular locale. This routine adds one additional bucket
+         * for phone numbers. It attempts to detect phone numbers and shifts
+         * the bucket indexes returned by AlphabeticIndex in order to make room
+         * for the new # bucket, so the returned range becomes 0 to N+1.
+         */
+        public int getBucketIndex(String name) {
+            boolean prefixIsNumeric = false;
+            final int length = name.length();
+            int offset = 0;
+            while (offset < length) {
+                int codePoint = Character.codePointAt(name, offset);
+                // Ignore standard phone number separators and identify any
+                // string that otherwise starts with a number.
+                if (Character.isDigit(codePoint)) {
+                    prefixIsNumeric = true;
+                    break;
+                } else if (!Character.isSpaceChar(codePoint) &&
+                           codePoint != '+' && codePoint != '(' &&
+                           codePoint != ')' && codePoint != '.' &&
+                           codePoint != '-' && codePoint != '#') {
+                    break;
+                }
+                offset += Character.charCount(codePoint);
+            }
+            if (prefixIsNumeric) {
+                return mNumberBucketIndex;
+            }
+
+            final int bucket = mAlphabeticIndex.getBucketIndex(name);
+            if (bucket < 0) {
+                return -1;
+            }
+            if (bucket >= mNumberBucketIndex) {
+                return bucket + 1;
+            }
+            return bucket;
         }
+
+        /**
+         * Returns the number of buckets in use (one more than AlphabeticIndex
+         * uses, because this class adds a bucket for phone numbers).
+         */
+        public int getBucketCount() {
+            return mAlphabeticIndexBucketCount + 1;
+        }
+
+        /**
+         * Returns the label for the specified bucket index if a valid index,
+         * otherwise returns an empty string. '#' is returned for the phone
+         * number bucket; for all others, the AlphabeticIndex label is returned.
+         */
+        public String getBucketLabel(int bucketIndex) {
+            if (bucketIndex < 0 || bucketIndex >= getBucketCount()) {
+                return EMPTY_STRING;
+            } else if (bucketIndex == mNumberBucketIndex) {
+                return NUMBER_STRING;
+            } else if (bucketIndex > mNumberBucketIndex) {
+                --bucketIndex;
+            }
+            return mAlphabeticIndex.getBucketLabel(bucketIndex);
+        }
+
         @SuppressWarnings("unused")
-        public Iterator<String> getNameLookupKeys(String name) {
+        public Iterator<String> getNameLookupKeys(String name, int nameStyle) {
             return null;
         }
+
+        public ArrayList<String> getLabels() {
+            final int bucketCount = getBucketCount();
+            final ArrayList<String> labels = new ArrayList<String>(bucketCount);
+            for(int i = 0; i < bucketCount; ++i) {
+                labels.add(getBucketLabel(i));
+            }
+            return labels;
+        }
     }
 
     /**
-     * The classes to generate the Chinese style sort and search keys.
-     * <p>
-     * The sorting key is generated as each Chinese character' pinyin proceeding with
-     * space and character itself. If the character's pinyin unable to find, the character
-     * itself will be used.
-     * <p>
-     * The below additional name lookup keys will be generated.
-     * a. Chinese character's pinyin and pinyin's initial character.
-     * b. Latin word and the initial character for Latin word.
-     * The name lookup keys are generated to make sure the name can be found by from any
-     * initial character.
+     * Japanese specific locale overrides.
+     *
+     * sortKey: unchanged (same as name)
+     * nameLookupKeys: unchanged (none)
+     * labels: extends default labels by labeling unlabeled CJ characters
+     *     with the Japanese character 他 ("misc"). Japanese labels are:
+     *     あ, か, さ, た, な, は, ま, や, ら, わ, 他, [A-Z], #, " "
      */
-    private class ChineseContactUtils extends ContactLocaleUtilsBase {
+    private static class JapaneseContactUtils extends ContactLocaleUtilsBase {
+        // \u4ed6 is Japanese character 他 ("misc")
+        private static final String JAPANESE_MISC_LABEL = "\u4ed6";
+        private final int mMiscBucketIndex;
+
+        public JapaneseContactUtils(Locale locale) {
+            super(locale);
+            // Determine which bucket AlphabeticIndex is lumping unclassified
+            // Japanese characters into by looking up the bucket index for
+            // a representative Kanji/CJK unified ideograph (\u65e5 is the
+            // character '日').
+            mMiscBucketIndex = super.getBucketIndex("\u65e5");
+        }
+
+        // Set of UnicodeBlocks for unified CJK (Chinese) characters and
+        // Japanese characters. This includes all code blocks that might
+        // contain a character used in Japanese (which is why unified CJK
+        // blocks are included but Korean Hangul and jamo are not).
+        private static final Set<Character.UnicodeBlock> CJ_BLOCKS;
+        static {
+            Set<UnicodeBlock> set = new HashSet<UnicodeBlock>();
+            set.add(UnicodeBlock.HIRAGANA);
+            set.add(UnicodeBlock.KATAKANA);
+            set.add(UnicodeBlock.KATAKANA_PHONETIC_EXTENSIONS);
+            set.add(UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS);
+            set.add(UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS);
+            set.add(UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A);
+            set.add(UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B);
+            set.add(UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION);
+            set.add(UnicodeBlock.CJK_RADICALS_SUPPLEMENT);
+            set.add(UnicodeBlock.CJK_COMPATIBILITY);
+            set.add(UnicodeBlock.CJK_COMPATIBILITY_FORMS);
+            set.add(UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS);
+            set.add(UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT);
+            CJ_BLOCKS = Collections.unmodifiableSet(set);
+        }
+
+        /**
+         * Helper routine to identify unlabeled Chinese or Japanese characters
+         * to put in a 'misc' bucket.
+         *
+         * @return true if the specified Unicode code point is Chinese or
+         *              Japanese
+         */
+        private static boolean isChineseOrJapanese(int codePoint) {
+            return CJ_BLOCKS.contains(UnicodeBlock.of(codePoint));
+        }
+
+        /**
+         * Returns the bucket index for the specified string. Adds an
+         * additional 'misc' bucket for Kanji characters to the base class set.
+         */
         @Override
-        public String getSortKey(String displayName) {
-            ArrayList<Token> tokens = HanziToPinyin.getInstance().get(displayName);
-            if (tokens != null && tokens.size() > 0) {
-                StringBuilder sb = new StringBuilder();
-                for (Token token : tokens) {
-                    // Put Chinese character's pinyin, then proceed with the
-                    // character itself.
-                    if (Token.PINYIN == token.type) {
-                        if (sb.length() > 0) {
-                            sb.append(' ');
-                        }
-                        sb.append(token.target);
-                        sb.append(' ');
-                        sb.append(token.source);
-                    } else {
-                        if (sb.length() > 0) {
-                            sb.append(' ');
-                        }
-                        sb.append(token.source);
+        public int getBucketIndex(String name) {
+            final int bucketIndex = super.getBucketIndex(name);
+            if ((bucketIndex == mMiscBucketIndex &&
+                 !isChineseOrJapanese(Character.codePointAt(name, 0))) ||
+                bucketIndex > mMiscBucketIndex) {
+                return bucketIndex + 1;
+            }
+            return bucketIndex;
+        }
+
+        /**
+         * Returns the number of buckets in use (one more than the base class
+         * uses, because this class adds a bucket for Kanji).
+         */
+        @Override
+        public int getBucketCount() {
+            return super.getBucketCount() + 1;
+        }
+
+        /**
+         * Returns the label for the specified bucket index if a valid index,
+         * otherwise returns an empty string. '他' is returned for unclassified
+         * Kanji; for all others, the label determined by the base class is
+         * returned.
+         */
+        @Override
+        public String getBucketLabel(int bucketIndex) {
+            if (bucketIndex == mMiscBucketIndex) {
+                return JAPANESE_MISC_LABEL;
+            } else if (bucketIndex > mMiscBucketIndex) {
+                --bucketIndex;
+            }
+            return super.getBucketLabel(bucketIndex);
+        }
+
+        @Override
+        public Iterator<String> getNameLookupKeys(String name, int nameStyle) {
+            // Hiragana and Katakana will be positively identified as Japanese.
+            if (nameStyle == PhoneticNameStyle.JAPANESE) {
+                return getRomajiNameLookupKeys(name);
+            }
+            return null;
+        }
+
+        private static boolean mInitializedTransliterator;
+        private static Transliterator mJapaneseTransliterator;
+
+        private static Transliterator getJapaneseTransliterator() {
+            synchronized(JapaneseContactUtils.class) {
+                if (!mInitializedTransliterator) {
+                    mInitializedTransliterator = true;
+                    Transliterator t = null;
+                    try {
+                        t = new Transliterator("Hiragana-Latin; Katakana-Latin;"
+                                + " Latin-Ascii");
+                    } catch (RuntimeException e) {
+                        Log.w(TAG, "Hiragana/Katakana-Latin transliterator data"
+                                + " is missing");
                     }
+                    mJapaneseTransliterator = t;
                 }
-                return sb.toString();
+                return mJapaneseTransliterator;
+            }
+        }
+
+        public static Iterator<String> getRomajiNameLookupKeys(String name) {
+            final Transliterator t = getJapaneseTransliterator();
+            if (t == null) {
+                return null;
             }
-            return super.getSortKey(displayName);
+            final String romajiName = t.transliterate(name);
+            if (TextUtils.isEmpty(romajiName) ||
+                    TextUtils.equals(name, romajiName)) {
+                return null;
+            }
+            final HashSet<String> keys = new HashSet<String>();
+            keys.add(romajiName);
+            return keys.iterator();
+        }
+    }
+
+    /**
+     * Simplified Chinese specific locale overrides. Uses ICU Transliterator
+     * for generating pinyin transliteration.
+     *
+     * sortKey: unchanged (same as name)
+     * nameLookupKeys: adds additional name lookup keys
+     *     - Chinese character's pinyin and pinyin's initial character.
+     *     - Latin word and initial character.
+     * labels: unchanged
+     *     Simplified Chinese labels are the same as English: [A-Z], #, " "
+     */
+    private static class SimplifiedChineseContactUtils
+        extends ContactLocaleUtilsBase {
+        public SimplifiedChineseContactUtils(Locale locale) {
+            super(locale);
         }
 
         @Override
-        public Iterator<String> getNameLookupKeys(String name) {
+        public Iterator<String> getNameLookupKeys(String name, int nameStyle) {
+            if (nameStyle != FullNameStyle.JAPANESE &&
+                    nameStyle != FullNameStyle.KOREAN) {
+                return getPinyinNameLookupKeys(name);
+            }
+            return null;
+        }
+
+        public static Iterator<String> getPinyinNameLookupKeys(String name) {
             // TODO : Reduce the object allocation.
             HashSet<String> keys = new HashSet<String>();
             ArrayList<Token> tokens = HanziToPinyin.getInstance().get(name);
@@ -96,11 +359,14 @@ public class ContactLocaleUtils {
             final StringBuilder keyPinyin = new StringBuilder();
             final StringBuilder keyInitial = new StringBuilder();
             // There is no space among the Chinese Characters, the variant name
-            // lookup key wouldn't work for Chinese. The keyOrignal is used to
+            // lookup key wouldn't work for Chinese. The keyOriginal is used to
             // build the lookup keys for itself.
-            final StringBuilder keyOrignal = new StringBuilder();
+            final StringBuilder keyOriginal = new StringBuilder();
             for (int i = tokenCount - 1; i >= 0; i--) {
                 final Token token = tokens.get(i);
+                if (Token.UNKNOWN == token.type) {
+                    continue;
+                }
                 if (Token.PINYIN == token.type) {
                     keyPinyin.insert(0, token.target);
                     keyInitial.insert(0, token.target.charAt(0));
@@ -109,14 +375,14 @@ public class ContactLocaleUtils {
                     if (keyPinyin.length() > 0) {
                         keyPinyin.insert(0, ' ');
                     }
-                    if (keyOrignal.length() > 0) {
-                        keyOrignal.insert(0, ' ');
+                    if (keyOriginal.length() > 0) {
+                        keyOriginal.insert(0, ' ');
                     }
                     keyPinyin.insert(0, token.source);
                     keyInitial.insert(0, token.source.charAt(0));
                 }
-                keyOrignal.insert(0, token.source);
-                keys.add(keyOrignal.toString());
+                keyOriginal.insert(0, token.source);
+                keys.add(keyOriginal.toString());
                 keys.add(keyPinyin.toString());
                 keys.add(keyInitial.toString());
             }
@@ -129,84 +395,89 @@ public class ContactLocaleUtils {
     private static final String KOREAN_LANGUAGE = Locale.KOREAN.getLanguage().toLowerCase();
 
     private static ContactLocaleUtils sSingleton;
-    private final SparseArray<ContactLocaleUtilsBase> mUtils =
-            new SparseArray<ContactLocaleUtilsBase>();
 
-    private final ContactLocaleUtilsBase mBase = new ContactLocaleUtilsBase();
+    private final Locale mLocale;
+    private final String mLanguage;
+    private final ContactLocaleUtilsBase mUtils;
 
-    private String mLanguage;
+    private ContactLocaleUtils(Locale locale) {
+        if (locale == null) {
+            mLocale = Locale.getDefault();
+        } else {
+            mLocale = locale;
+        }
+        mLanguage = mLocale.getLanguage().toLowerCase();
+        if (mLanguage.equals(JAPANESE_LANGUAGE)) {
+            mUtils = new JapaneseContactUtils(mLocale);
+        } else if (mLocale.equals(Locale.CHINA)) {
+            mUtils = new SimplifiedChineseContactUtils(mLocale);
+        } else {
+            mUtils = new ContactLocaleUtilsBase(mLocale);
+        }
+        Log.i(TAG, "AddressBook Labels [" + mLocale.toString() + "]: "
+              + getLabels().toString());
+    }
 
-    private ContactLocaleUtils() {
-        setLocale(null);
+    public boolean isLocale(Locale locale) {
+        return mLocale.equals(locale);
     }
 
-    public void setLocale(Locale currentLocale) {
-        if (currentLocale == null) {
-            mLanguage = Locale.getDefault().getLanguage().toLowerCase();
-        } else {
-            mLanguage = currentLocale.getLanguage().toLowerCase();
+    public static synchronized ContactLocaleUtils getInstance() {
+        if (sSingleton == null) {
+            sSingleton = new ContactLocaleUtils(null);
         }
+        return sSingleton;
     }
 
-    public String getSortKey(String displayName, int nameStyle) {
-        return getForSort(Integer.valueOf(nameStyle)).getSortKey(displayName);
+    public static synchronized void setLocale(Locale locale) {
+        if (sSingleton == null || !sSingleton.isLocale(locale)) {
+            sSingleton = new ContactLocaleUtils(locale);
+        }
     }
 
-    public Iterator<String> getNameLookupKeys(String name, int nameStyle) {
-        return getForNameLookup(Integer.valueOf(nameStyle)).getNameLookupKeys(name);
+    public String getSortKey(String name, int nameStyle) {
+        return mUtils.getSortKey(name);
     }
 
-    /**
-     *  Determine which utility should be used for generating NameLookupKey.
-     *  <p>
-     *  a. For Western style name, if the current language is Chinese, the
-     *     ChineseContactUtils should be used.
-     *  b. For Chinese and CJK style name if current language is neither Japanese or Korean,
-     *     the ChineseContactUtils should be used.
-     */
-    private ContactLocaleUtilsBase getForNameLookup(Integer nameStyle) {
-        int nameStyleInt = nameStyle.intValue();
-        Integer adjustedUtil = Integer.valueOf(getAdjustedStyle(nameStyleInt));
-        if (CHINESE_LANGUAGE.equals(mLanguage) && nameStyleInt == FullNameStyle.WESTERN) {
-            adjustedUtil = Integer.valueOf(FullNameStyle.CHINESE);
-        }
-        return get(adjustedUtil);
+    public int getBucketIndex(String name) {
+        return mUtils.getBucketIndex(name);
     }
 
-    private synchronized ContactLocaleUtilsBase get(Integer nameStyle) {
-        ContactLocaleUtilsBase utils = mUtils.get(nameStyle);
-        if (utils == null) {
-            if (nameStyle.intValue() == FullNameStyle.CHINESE) {
-                utils = new ChineseContactUtils();
-                mUtils.put(nameStyle, utils);
-            }
-        }
-        return (utils == null) ? mBase : utils;
+    public int getBucketCount() {
+        return mUtils.getBucketCount();
     }
 
-    /**
-     *  Determine the which utility should be used for generating sort key.
-     *  <p>
-     *  For Chinese and CJK style name if current language is neither Japanese or Korean,
-     *  the ChineseContactUtils should be used.
-     */
-    private ContactLocaleUtilsBase getForSort(Integer nameStyle) {
-        return get(Integer.valueOf(getAdjustedStyle(nameStyle.intValue())));
+    public String getBucketLabel(int bucketIndex) {
+        return mUtils.getBucketLabel(bucketIndex);
     }
 
-    public static synchronized ContactLocaleUtils getIntance() {
-        if (sSingleton == null) {
-            sSingleton = new ContactLocaleUtils();
-        }
-        return sSingleton;
+    public String getLabel(String name) {
+        return getBucketLabel(getBucketIndex(name));
     }
 
-    private int getAdjustedStyle(int nameStyle) {
-        if (nameStyle == FullNameStyle.CJK  && !JAPANESE_LANGUAGE.equals(mLanguage) &&
+    public ArrayList<String> getLabels() {
+        return mUtils.getLabels();
+    }
+
+    /**
+     *  Determine which utility should be used for generating NameLookupKey.
+     *  (ie, whether we generate Pinyin lookup keys or not)
+     *
+     *  Hiragana and Katakana are tagged as JAPANESE; Kanji is unclassified
+     *  and tagged as CJK. For Hiragana/Katakana names, generate Romaji
+     *  lookup keys when not in a Chinese or Korean locale.
+     *
+     *  Otherwise, use the default behavior of that locale:
+     *  a. For Japan, generate Romaji lookup keys for Hiragana/Katakana.
+     *  b. For Simplified Chinese locale, generate Pinyin lookup keys.
+     */
+    public Iterator<String> getNameLookupKeys(String name, int nameStyle) {
+        if (nameStyle == FullNameStyle.JAPANESE &&
+                !CHINESE_LANGUAGE.equals(mLanguage) &&
                 !KOREAN_LANGUAGE.equals(mLanguage)) {
-            return FullNameStyle.CHINESE;
-        } else {
-            return nameStyle;
+            return JapaneseContactUtils.getRomajiNameLookupKeys(name);
         }
+        return mUtils.getNameLookupKeys(name, nameStyle);
     }
+
 }
diff --git a/src/com/android/providers/contacts/ContactsDatabaseHelper.java b/src/com/android/providers/contacts/ContactsDatabaseHelper.java
index 67429ca..1c0fd7f 100644
--- a/src/com/android/providers/contacts/ContactsDatabaseHelper.java
+++ b/src/com/android/providers/contacts/ContactsDatabaseHelper.java
@@ -16,14 +16,10 @@
 
 package com.android.providers.contacts;
 
-import com.android.common.content.SyncStateContentProviderHelper;
-import com.android.providers.contacts.aggregation.util.CommonNicknameCache;
-import com.android.providers.contacts.util.NeededForTesting;
-import com.google.android.collect.Sets;
-
 import android.content.ContentResolver;
 import android.content.ContentValues;
 import android.content.Context;
+import android.content.Intent;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
 import android.content.pm.PackageManager.NameNotFoundException;
@@ -80,10 +76,20 @@ import android.text.util.Rfc822Token;
 import android.text.util.Rfc822Tokenizer;
 import android.util.Log;
 
+import com.android.common.content.SyncStateContentProviderHelper;
+import com.android.providers.contacts.aggregation.util.CommonNicknameCache;
+import com.android.providers.contacts.database.ContactsTableUtil;
+import com.android.providers.contacts.database.DeletedContactsTableUtil;
+import com.android.providers.contacts.database.MoreDatabaseUtils;
+import com.android.providers.contacts.util.NeededForTesting;
+import com.google.android.collect.Sets;
+
 import java.util.HashMap;
 import java.util.Locale;
 import java.util.Set;
 
+import libcore.icu.ICU;
+
 /**
  * Database helper for contacts. Designed as a singleton to make sure that all
  * {@link android.content.ContentProvider} users get the same reference.
@@ -107,13 +113,14 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
      *   700-799 Jelly Bean
      * </pre>
      */
-    static final int DATABASE_VERSION = 704;
+    static final int DATABASE_VERSION = 710;
 
     private static final String DATABASE_NAME = "contacts2.db";
     private static final String DATABASE_PRESENCE = "presence_db";
 
     public interface Tables {
         public static final String CONTACTS = "contacts";
+        public static final String DELETED_CONTACTS = "deleted_contacts";
         public static final String RAW_CONTACTS = "raw_contacts";
         public static final String STREAM_ITEMS = "stream_items";
         public static final String STREAM_ITEM_PHOTOS = "stream_item_photos";
@@ -359,6 +366,12 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
                 + Contacts.SEND_TO_VOICEMAIL;
         public static final String CONCRETE_LOOKUP_KEY = Tables.CONTACTS + "."
                 + Contacts.LOOKUP_KEY;
+        public static final String CONCRETE_CONTACT_LAST_UPDATED_TIMESTAMP = Tables.CONTACTS + "."
+                + Contacts.CONTACT_LAST_UPDATED_TIMESTAMP;
+        public static final String PHONEBOOK_LABEL_PRIMARY = "phonebook_label";
+        public static final String PHONEBOOK_BUCKET_PRIMARY = "phonebook_bucket";
+        public static final String PHONEBOOK_LABEL_ALTERNATIVE = "phonebook_label_alt";
+        public static final String PHONEBOOK_BUCKET_ALTERNATIVE = "phonebook_bucket_alt";
     }
 
     public interface RawContactsColumns {
@@ -403,7 +416,15 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
         public static final String CONCRETE_CONTACT_ID =
                 Tables.RAW_CONTACTS + "." + RawContacts.CONTACT_ID;
         public static final String CONCRETE_NAME_VERIFIED =
-                Tables.RAW_CONTACTS + "." + RawContacts.NAME_VERIFIED;
+            Tables.RAW_CONTACTS + "." + RawContacts.NAME_VERIFIED;
+        public static final String PHONEBOOK_LABEL_PRIMARY =
+            ContactsColumns.PHONEBOOK_LABEL_PRIMARY;
+        public static final String PHONEBOOK_BUCKET_PRIMARY =
+            ContactsColumns.PHONEBOOK_BUCKET_PRIMARY;
+        public static final String PHONEBOOK_LABEL_ALTERNATIVE =
+            ContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE;
+        public static final String PHONEBOOK_BUCKET_ALTERNATIVE =
+            ContactsColumns.PHONEBOOK_BUCKET_ALTERNATIVE;
     }
 
     public interface ViewRawContactsColumns {
@@ -694,6 +715,8 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
         String DIRECTORY_SCAN_COMPLETE = "directoryScanComplete";
         String AGGREGATION_ALGORITHM = "aggregation_v2";
         String KNOWN_ACCOUNTS = "known_accounts";
+        String ICU_VERSION = "icu_version";
+        String LOCALE = "locale";
     }
 
     /** In-memory cache of previously found MIME-type mappings */
@@ -779,6 +802,10 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
                         com.android.internal.R.bool.config_use_strict_phone_number_comparation);
     }
 
+    public SQLiteDatabase getDatabase(boolean writable) {
+        return writable ? getWritableDatabase() : getReadableDatabase();
+    }
+
     /**
      * Clear all the cached database information and re-initialize it.
      *
@@ -941,16 +968,14 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
                 Contacts.STARRED + " INTEGER NOT NULL DEFAULT 0," +
                 Contacts.HAS_PHONE_NUMBER + " INTEGER NOT NULL DEFAULT 0," +
                 Contacts.LOOKUP_KEY + " TEXT," +
-                ContactsColumns.LAST_STATUS_UPDATE_ID + " INTEGER REFERENCES data(_id)" +
+                ContactsColumns.LAST_STATUS_UPDATE_ID + " INTEGER REFERENCES data(_id)," +
+                Contacts.CONTACT_LAST_UPDATED_TIMESTAMP + " INTEGER" +
         ");");
 
-        db.execSQL("CREATE INDEX contacts_has_phone_index ON " + Tables.CONTACTS + " (" +
-                Contacts.HAS_PHONE_NUMBER +
-        ");");
+        ContactsTableUtil.createIndexes(db);
 
-        db.execSQL("CREATE INDEX contacts_name_raw_contact_id_index ON " + Tables.CONTACTS + " (" +
-                Contacts.NAME_RAW_CONTACT_ID +
-        ");");
+        // deleted_contacts table
+        DeletedContactsTableUtil.create(db);
 
         // Raw_contacts table
         db.execSQL("CREATE TABLE " + Tables.RAW_CONTACTS + " (" +
@@ -976,11 +1001,18 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
                 RawContacts.DISPLAY_NAME_SOURCE + " INTEGER NOT NULL DEFAULT " +
                         DisplayNameSources.UNDEFINED + "," +
                 RawContacts.PHONETIC_NAME + " TEXT," +
+                // TODO: PHONETIC_NAME_STYLE should be INTEGER. There is a
+                // mismatch between how the column is created here (TEXT) and
+                // how it is created in upgradeToVersion205 (INTEGER).
                 RawContacts.PHONETIC_NAME_STYLE + " TEXT," +
                 RawContacts.SORT_KEY_PRIMARY + " TEXT COLLATE " +
                         ContactsProvider2.PHONEBOOK_COLLATOR_NAME + "," +
+                RawContactsColumns.PHONEBOOK_LABEL_PRIMARY + " TEXT," +
+                RawContactsColumns.PHONEBOOK_BUCKET_PRIMARY + " INTEGER," +
                 RawContacts.SORT_KEY_ALTERNATIVE + " TEXT COLLATE " +
                         ContactsProvider2.PHONEBOOK_COLLATOR_NAME + "," +
+                RawContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE + " TEXT," +
+                RawContactsColumns.PHONEBOOK_BUCKET_ALTERNATIVE + " INTEGER," +
                 RawContacts.NAME_VERIFIED + " INTEGER NOT NULL DEFAULT 0," +
                 RawContacts.SYNC1 + " TEXT, " +
                 RawContacts.SYNC2 + " TEXT, " +
@@ -1272,7 +1304,7 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
         ");");
 
         createDirectoriesTable(db);
-        createSearchIndexTable(db);
+        createSearchIndexTable(db, false /* we build stats table later */);
 
         db.execSQL("CREATE TABLE " + Tables.DATA_USAGE_STAT + "(" +
                 DataUsageStatColumns._ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
@@ -1293,7 +1325,7 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
         createContactsViews(db);
         createGroupsView(db);
         createContactsTriggers(db);
-        createContactsIndexes(db);
+        createContactsIndexes(db, false /* we build stats table later */);
 
         loadNicknameLookupTable(db);
 
@@ -1312,6 +1344,12 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
 
         ContentResolver.requestSync(null /* all accounts */,
                 ContactsContract.AUTHORITY, new Bundle());
+
+        // Only send broadcasts for regular contacts db.
+        if (dbForProfile() == 0) {
+            mContext.sendBroadcast(new Intent(ContactsContract.Intents.CONTACTS_DATABASE_CREATED),
+                    android.Manifest.permission.READ_CONTACTS);
+        }
     }
 
     protected void initializeAutoIncrementSequences(SQLiteDatabase db) {
@@ -1340,7 +1378,7 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
         setProperty(db, DbProperties.DIRECTORY_SCAN_COMPLETE, "0");
     }
 
-    public void createSearchIndexTable(SQLiteDatabase db) {
+    public void createSearchIndexTable(SQLiteDatabase db, boolean rebuildSqliteStats) {
         db.execSQL("DROP TABLE IF EXISTS " + Tables.SEARCH_INDEX);
         db.execSQL("CREATE VIRTUAL TABLE " + Tables.SEARCH_INDEX
                 + " USING FTS4 ("
@@ -1349,6 +1387,9 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
                     + SearchIndexColumns.NAME + " TEXT, "
                     + SearchIndexColumns.TOKENS + " TEXT"
                 + ")");
+        if (rebuildSqliteStats) {
+            updateSqliteStats(db);
+        }
     }
 
     private void createContactsTriggers(SQLiteDatabase db) {
@@ -1488,7 +1529,7 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
                 + " END");
     }
 
-    private void createContactsIndexes(SQLiteDatabase db) {
+    private void createContactsIndexes(SQLiteDatabase db, boolean rebuildSqliteStats) {
         db.execSQL("DROP INDEX IF EXISTS name_lookup_index");
         db.execSQL("CREATE INDEX name_lookup_index ON " + Tables.NAME_LOOKUP + " (" +
                 NameLookupColumns.NORMALIZED_NAME + "," +
@@ -1506,6 +1547,10 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
         db.execSQL("CREATE INDEX raw_contact_sort_key2_index ON " + Tables.RAW_CONTACTS + " (" +
                 RawContacts.SORT_KEY_ALTERNATIVE +
         ");");
+
+        if (rebuildSqliteStats) {
+            updateSqliteStats(db);
+        }
     }
 
     private void createContactsViews(SQLiteDatabase db) {
@@ -1574,7 +1619,8 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
                 + Contacts.PHOTO_FILE_ID + ", "
                 + "CAST(" + Clauses.CONTACT_VISIBLE + " AS INTEGER) AS "
                         + Contacts.IN_VISIBLE_GROUP + ", "
-                + ContactsColumns.LAST_STATUS_UPDATE_ID;
+                + ContactsColumns.LAST_STATUS_UPDATE_ID + ", "
+                + ContactsColumns.CONCRETE_CONTACT_LAST_UPDATED_TIMESTAMP;
 
         String contactOptionColumns =
                 ContactsColumns.CONCRETE_CUSTOM_RINGTONE
@@ -1601,8 +1647,16 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
                         + " AS " + Contacts.PHONETIC_NAME_STYLE + ", "
                 + "name_raw_contact." + RawContacts.SORT_KEY_PRIMARY
                         + " AS " + Contacts.SORT_KEY_PRIMARY + ", "
+                + "name_raw_contact." + RawContactsColumns.PHONEBOOK_LABEL_PRIMARY
+                        + " AS " + ContactsColumns.PHONEBOOK_LABEL_PRIMARY + ", "
+                + "name_raw_contact." + RawContactsColumns.PHONEBOOK_BUCKET_PRIMARY
+                        + " AS " + ContactsColumns.PHONEBOOK_BUCKET_PRIMARY + ", "
                 + "name_raw_contact." + RawContacts.SORT_KEY_ALTERNATIVE
-                        + " AS " + Contacts.SORT_KEY_ALTERNATIVE;
+                        + " AS " + Contacts.SORT_KEY_ALTERNATIVE + ", "
+                + "name_raw_contact." + RawContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE
+                        + " AS " + ContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE + ", "
+                + "name_raw_contact." + RawContactsColumns.PHONEBOOK_BUCKET_ALTERNATIVE
+                        + " AS " + ContactsColumns.PHONEBOOK_BUCKET_ALTERNATIVE;
 
         String dataSelect = "SELECT "
                 + DataColumns.CONCRETE_ID + " AS " + Data._ID + ","
@@ -1659,7 +1713,11 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
                 + RawContacts.PHONETIC_NAME  + ", "
                 + RawContacts.PHONETIC_NAME_STYLE  + ", "
                 + RawContacts.SORT_KEY_PRIMARY  + ", "
+                + RawContactsColumns.PHONEBOOK_LABEL_PRIMARY  + ", "
+                + RawContactsColumns.PHONEBOOK_BUCKET_PRIMARY  + ", "
                 + RawContacts.SORT_KEY_ALTERNATIVE + ", "
+                + RawContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE  + ", "
+                + RawContactsColumns.PHONEBOOK_BUCKET_ALTERNATIVE  + ", "
                 + dbForProfile() + " AS " + RawContacts.RAW_CONTACT_IS_USER_PROFILE + ", "
                 + rawContactOptionColumns + ", "
                 + syncColumns
@@ -1901,6 +1959,16 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
     }
 
     @Override
+    public void onDowngrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+        Log.i(TAG, "ContactsProvider cannot proceed because downgrading your database is not " +
+                "supported. To continue, please either re-upgrade to your previous Android " +
+                "version, or clear all application data in Contacts Storage (this will result " +
+                "in the loss of all local contacts that are not synced). To avoid data loss, " +
+                "your contacts database will not be wiped automatically.");
+        super.onDowngrade(db, oldVersion, newVersion);
+    }
+
+    @Override
     public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
         if (oldVersion < 99) {
             Log.i(TAG, "Upgrading from version " + oldVersion + " to " + newVersion
@@ -1936,6 +2004,8 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
         boolean upgradeLegacyApiSupport = false;
         boolean upgradeSearchIndex = false;
         boolean rescanDirectories = false;
+        boolean rebuildSqliteStats = false;
+        boolean upgradeLocaleSpecificData = false;
 
         if (oldVersion == 99) {
             upgradeViewsAndTriggers = true;
@@ -2371,26 +2441,75 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
             oldVersion = 704;
         }
 
+        if (oldVersion < 705) {
+            // Before this version, we didn't rebuild the search index on locale changes, so
+            // if the locale has changed after sync, the index contains gets stale.
+            // To correct the issue we have to rebuild the index here.
+            upgradeSearchIndex = true;
+            oldVersion = 705;
+        }
+
+        if (oldVersion < 706) {
+            // Prior to this version, we didn't rebuild the stats table after drop operations,
+            // which resulted in losing some of the rows from the stats table.
+            rebuildSqliteStats = true;
+            oldVersion = 706;
+        }
+
+        if (oldVersion < 707) {
+            upgradeToVersion707(db);
+            upgradeViewsAndTriggers = true;
+            oldVersion = 707;
+        }
+
+        if (oldVersion < 708) {
+            // Sort keys, phonebook labels and buckets, and search keys have
+            // changed so force a rebuild.
+            upgradeLocaleSpecificData = true;
+            oldVersion = 708;
+        }
+        if (oldVersion < 709) {
+            // Added secondary locale phonebook labels; changed Japanese
+            // and Chinese sort keys.
+            upgradeLocaleSpecificData = true;
+            oldVersion = 709;
+        }
+
+        if (oldVersion < 710) {
+            upgradeToVersion710(db);
+            upgradeViewsAndTriggers = true;
+            oldVersion = 710;
+        }
+
         if (upgradeViewsAndTriggers) {
             createContactsViews(db);
             createGroupsView(db);
             createContactsTriggers(db);
-            createContactsIndexes(db);
-            updateSqliteStats(db);
+            createContactsIndexes(db, false /* we build stats table later */);
             upgradeLegacyApiSupport = true;
+            rebuildSqliteStats = true;
         }
 
         if (upgradeLegacyApiSupport) {
             LegacyApiSupport.createViews(db);
         }
 
+        if (upgradeLocaleSpecificData) {
+            upgradeLocaleData(db, false /* we build stats table later */);
+            // Name lookups are rebuilt as part of the full locale rebuild
+            upgradeNameLookup = false;
+            upgradeSearchIndex = true;
+            rebuildSqliteStats = true;
+        }
+
         if (upgradeNameLookup) {
-            rebuildNameLookup(db);
+            rebuildNameLookup(db, false /* we build stats table later */);
+            rebuildSqliteStats = true;
         }
 
         if (upgradeSearchIndex) {
-            createSearchIndexTable(db);
-            setProperty(db, SearchIndexManager.PROPERTY_SEARCH_INDEX_VERSION, "0");
+            rebuildSearchIndex(db, false /* we build stats table later */);
+            rebuildSqliteStats = true;
         }
 
         if (rescanDirectories) {
@@ -2399,6 +2518,10 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
             setProperty(db, DbProperties.DIRECTORY_SCAN_COMPLETE, "0");
         }
 
+        if (rebuildSqliteStats) {
+            updateSqliteStats(db);
+        }
+
         if (oldVersion != newVersion) {
             throw new IllegalStateException(
                     "error upgrading the database to version " + newVersion);
@@ -2532,8 +2655,6 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
                 + " ADD " + RawContacts.SORT_KEY_ALTERNATIVE
                 + " TEXT COLLATE " + ContactsProvider2.PHONEBOOK_COLLATOR_NAME + ";");
 
-        final Locale locale = Locale.getDefault();
-
         NameSplitter splitter = createNameSplitter();
 
         SQLiteStatement rawContactUpdate = db.compileStatement(
@@ -2677,8 +2798,7 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
                 sortKey = sortKeyAlternative = phoneticName;
             } else if (name.fullNameStyle == FullNameStyle.CHINESE ||
                     name.fullNameStyle == FullNameStyle.CJK) {
-                sortKey = sortKeyAlternative = ContactLocaleUtils.getIntance()
-                        .getSortKey(displayName, name.fullNameStyle);
+                sortKey = sortKeyAlternative = displayName;
             }
 
             if (sortKey == null) {
@@ -2735,20 +2855,7 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
                 organizationUpdate.bindLong(2, dataId);
                 organizationUpdate.execute();
 
-                String sortKey = null;
-                if (phoneticName == null && company != null) {
-                    int nameStyle = splitter.guessFullNameStyle(company);
-                    nameStyle = splitter.getAdjustedFullNameStyle(nameStyle);
-                    if (nameStyle == FullNameStyle.CHINESE ||
-                            nameStyle == FullNameStyle.CJK ) {
-                        sortKey = ContactLocaleUtils.getIntance()
-                                .getSortKey(company, nameStyle);
-                    }
-                }
-
-                if (sortKey == null) {
-                    sortKey = company;
-                }
+                String sortKey = company;
 
                 updateRawContact205(rawContactUpdate, rawContactId, company,
                         company, phoneticNameStyle, phoneticName, sortKey, sortKey);
@@ -2960,31 +3067,87 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
                 "WHERE NOT EXISTS (SELECT 1 FROM raw_contacts WHERE contact_id=contacts._id)");
     }
 
-    private void rebuildNameLookup(SQLiteDatabase db) {
+    private void rebuildNameLookup(SQLiteDatabase db, boolean rebuildSqliteStats) {
         db.execSQL("DROP INDEX IF EXISTS name_lookup_index");
         insertNameLookup(db);
-        createContactsIndexes(db);
+        createContactsIndexes(db, rebuildSqliteStats);
+    }
+
+    protected void rebuildSearchIndex() {
+        rebuildSearchIndex(getWritableDatabase(), true);
+    }
+
+    private void rebuildSearchIndex(SQLiteDatabase db, boolean rebuildSqliteStats) {
+        createSearchIndexTable(db, rebuildSqliteStats);
+        setProperty(db, SearchIndexManager.PROPERTY_SEARCH_INDEX_VERSION, "0");
     }
 
     /**
-     * Regenerates all locale-sensitive data: nickname_lookup, name_lookup and sort keys.
+     * Checks whether the current ICU code version matches that used to build
+     * the locale specific data in the ContactsDB.
      */
-    public void setLocale(ContactsProvider2 provider, Locale locale) {
-        Log.i(TAG, "Switching to locale " + locale);
+    public boolean needsToUpdateLocaleData(Locale locale) {
+        final String dbLocale = getProperty(DbProperties.LOCALE, "");
+        if (!dbLocale.equals(locale.toString())) {
+            return true;
+        }
+        final String curICUVersion = ICU.getIcuVersion();
+        final String dbICUVersion = getProperty(DbProperties.ICU_VERSION,
+                "(unknown)");
+        if (!curICUVersion.equals(dbICUVersion)) {
+            Log.i(TAG, "ICU version has changed. Current version is "
+                    + curICUVersion + "; DB was built with " + dbICUVersion);
+            return true;
+        }
+        return false;
+    }
+
+    private void upgradeLocaleData(SQLiteDatabase db, boolean rebuildSqliteStats) {
+        final Locale locale = Locale.getDefault();
+        Log.i(TAG, "Upgrading locale data for " + locale
+                + " (ICU v" + ICU.getIcuVersion() + ")");
+        final long start = SystemClock.elapsedRealtime();
+        initializeCache(db);
+        rebuildLocaleData(db, locale, rebuildSqliteStats);
+        Log.i(TAG, "Locale update completed in " + (SystemClock.elapsedRealtime() - start) + "ms");
+    }
+
+    private void rebuildLocaleData(SQLiteDatabase db, Locale locale,
+            boolean rebuildSqliteStats) {
+        db.execSQL("DROP INDEX raw_contact_sort_key1_index");
+        db.execSQL("DROP INDEX raw_contact_sort_key2_index");
+        db.execSQL("DROP INDEX IF EXISTS name_lookup_index");
+
+        loadNicknameLookupTable(db);
+        insertNameLookup(db);
+        rebuildSortKeys(db);
+        createContactsIndexes(db, rebuildSqliteStats);
+
+        FastScrollingIndexCache.getInstance(mContext).invalidate();
+        // Update the ICU version used to generate the locale derived data
+        // so we can tell when we need to rebuild with new ICU versions.
+        setProperty(db, DbProperties.ICU_VERSION, ICU.getIcuVersion());
+        setProperty(db, DbProperties.LOCALE, locale.toString());
+    }
+
+    /**
+     * Regenerates all locale-sensitive data if needed:
+     * nickname_lookup, name_lookup and sort keys. Invalidates the fast
+     * scrolling index cache.
+     */
+    public void setLocale(Locale locale) {
+        if (!needsToUpdateLocaleData(locale)) {
+            return;
+        }
+        Log.i(TAG, "Switching to locale " + locale
+                + " (ICU v" + ICU.getIcuVersion() + ")");
 
         final long start = SystemClock.elapsedRealtime();
         SQLiteDatabase db = getWritableDatabase();
         db.setLocale(locale);
         db.beginTransaction();
         try {
-            db.execSQL("DROP INDEX raw_contact_sort_key1_index");
-            db.execSQL("DROP INDEX raw_contact_sort_key2_index");
-            db.execSQL("DROP INDEX IF EXISTS name_lookup_index");
-
-            loadNicknameLookupTable(db);
-            insertNameLookup(db);
-            rebuildSortKeys(db, provider);
-            createContactsIndexes(db);
+            rebuildLocaleData(db, locale, true);
             db.setTransactionSuccessful();
         } finally {
             db.endTransaction();
@@ -2996,7 +3159,7 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
     /**
      * Regenerates sort keys for all contacts.
      */
-    private void rebuildSortKeys(SQLiteDatabase db, ContactsProvider2 provider) {
+    private void rebuildSortKeys(SQLiteDatabase db) {
         Cursor cursor = db.query(Tables.RAW_CONTACTS, new String[]{RawContacts._ID},
                 null, null, null, null, null);
         try {
@@ -3769,6 +3932,40 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
         }
     }
 
+    private void upgradeToVersion707(SQLiteDatabase db) {
+        db.execSQL("ALTER TABLE " + Tables.RAW_CONTACTS
+                + " ADD " + RawContactsColumns.PHONEBOOK_LABEL_PRIMARY + " TEXT;");
+        db.execSQL("ALTER TABLE " + Tables.RAW_CONTACTS
+                + " ADD " + RawContactsColumns.PHONEBOOK_BUCKET_PRIMARY + " INTEGER;");
+        db.execSQL("ALTER TABLE " + Tables.RAW_CONTACTS
+                + " ADD " + RawContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE + " TEXT;");
+        db.execSQL("ALTER TABLE " + Tables.RAW_CONTACTS
+                + " ADD " + RawContactsColumns.PHONEBOOK_BUCKET_ALTERNATIVE + " INTEGER;");
+    }
+
+    private void upgradeToVersion710(SQLiteDatabase db) {
+
+        // Adding timestamp to contacts table.
+        db.execSQL("ALTER TABLE contacts"
+                + " ADD contact_last_updated_timestamp INTEGER;");
+
+        db.execSQL("UPDATE contacts"
+                + " SET contact_last_updated_timestamp"
+                + " = " + System.currentTimeMillis());
+
+        db.execSQL("CREATE INDEX contacts_contact_last_updated_timestamp_index "
+                + "ON contacts(contact_last_updated_timestamp)");
+
+        // New deleted contacts table.
+        db.execSQL("CREATE TABLE deleted_contacts (" +
+                "contact_id INTEGER PRIMARY KEY," +
+                "contact_deleted_timestamp INTEGER NOT NULL default 0"
+                + ");");
+
+        db.execSQL("CREATE INDEX deleted_contacts_contact_deleted_timestamp_index "
+                + "ON deleted_contacts(contact_deleted_timestamp)");
+    }
+
     public String extractHandleFromEmailAddress(String email) {
         Rfc822Token[] tokens = Rfc822Tokenizer.tokenize(email);
         if (tokens.length == 0) {
@@ -3834,22 +4031,59 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
 
     /**
      * Adds index stats into the SQLite database to force it to always use the lookup indexes.
+     *
+     * Note if you drop a table or an index, the corresponding row will be removed from this table.
+     * Make sure to call this method after such operations.
      */
     private void updateSqliteStats(SQLiteDatabase db) {
+        if (!mDatabaseOptimizationEnabled) {
+            return; // We don't use sqlite_stat1 during tests.
+        }
 
         // Specific stats strings are based on an actual large database after running ANALYZE
         // Important here are relative sizes. Raw-Contacts is slightly bigger than Contacts
         // Warning: Missing tables in here will make SQLite assume to contain 1000000 rows,
         // which can lead to catastrophic query plans for small tables
 
-        // See the latest of version of http://www.sqlite.org/cgi/src/finfo?name=src/analyze.c
-        // for what these numbers mean.
+        // What these numbers mean is described in this file.
+        // http://www.sqlite.org/cgi/src/finfo?name=src/analyze.c
+
+        // Excerpt:
+        /*
+        ** Format of sqlite_stat1:
+        **
+        ** There is normally one row per index, with the index identified by the
+        ** name in the idx column.  The tbl column is the name of the table to
+        ** which the index belongs.  In each such row, the stat column will be
+        ** a string consisting of a list of integers.  The first integer in this
+        ** list is the number of rows in the index and in the table.  The second
+        ** integer is the average number of rows in the index that have the same
+        ** value in the first column of the index.  The third integer is the average
+        ** number of rows in the index that have the same value for the first two
+        ** columns.  The N-th integer (for N>1) is the average number of rows in
+        ** the index which have the same value for the first N-1 columns.  For
+        ** a K-column index, there will be K+1 integers in the stat column.  If
+        ** the index is unique, then the last integer will be 1.
+        **
+        ** The list of integers in the stat column can optionally be followed
+        ** by the keyword "unordered".  The "unordered" keyword, if it is present,
+        ** must be separated from the last integer by a single space.  If the
+        ** "unordered" keyword is present, then the query planner assumes that
+        ** the index is unordered and will not use the index for a range query.
+        **
+        ** If the sqlite_stat1.idx column is NULL, then the sqlite_stat1.stat
+        ** column contains a single integer which is the (estimated) number of
+        ** rows in the table identified by sqlite_stat1.tbl.
+        */
+
         try {
             db.execSQL("DELETE FROM sqlite_stat1");
             updateIndexStats(db, Tables.CONTACTS,
                     "contacts_has_phone_index", "9000 500");
             updateIndexStats(db, Tables.CONTACTS,
                     "contacts_name_raw_contact_id_index", "9000 1");
+            updateIndexStats(db, Tables.CONTACTS, MoreDatabaseUtils.buildIndexName(Tables.CONTACTS,
+                    Contacts.CONTACT_LAST_UPDATED_TIMESTAMP), "9000 10");
 
             updateIndexStats(db, Tables.RAW_CONTACTS,
                     "raw_contacts_contact_id_index", "10000 2");
@@ -3997,6 +4231,7 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
         db.execSQL("DELETE FROM " + Tables.CALLS + ";");
         db.execSQL("DELETE FROM " + Tables.DIRECTORIES + ";");
         db.execSQL("DELETE FROM " + Tables.SEARCH_INDEX + ";");
+        db.execSQL("DELETE FROM " + Tables.DELETED_CONTACTS + ";");
 
         initializeCache(db);
 
@@ -4449,20 +4684,35 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
     }
 
     /**
-     * As opposed to {@link #buildPhoneLookupAndContactQuery}, this phone lookup will only do
-     * a comparison based on the last seven digits of the given phone number.  This is only intended
-     * to be used as a fallback, in case the regular lookup does not return any results.
+     * Phone lookup method that uses the custom SQLite function phone_number_compare_loose
+     * that serves as a fallback in case the regular lookup does not return any results.
      * @param qb The query builder.
      * @param number The phone number to search for.
      */
-    public void buildMinimalPhoneLookupAndContactQuery(SQLiteQueryBuilder qb, String number) {
-        String minMatch = PhoneNumberUtils.toCallerIDMinMatch(number);
-        StringBuilder sb = new StringBuilder();
-        appendPhoneLookupTables(sb, minMatch, true);
+    public void buildFallbackPhoneLookupAndContactQuery(SQLiteQueryBuilder qb, String number) {
+        final String minMatch = PhoneNumberUtils.toCallerIDMinMatch(number);
+        final StringBuilder sb = new StringBuilder();
+        //append lookup tables
+        sb.append(Tables.RAW_CONTACTS);
+        sb.append(" JOIN " + Views.CONTACTS + " as contacts_view"
+                + " ON (contacts_view._id = " + Tables.RAW_CONTACTS
+                + "." + RawContacts.CONTACT_ID + ")" +
+                " JOIN (SELECT " + PhoneLookupColumns.DATA_ID + "," +
+                PhoneLookupColumns.NORMALIZED_NUMBER + " FROM "+ Tables.PHONE_LOOKUP + " "
+                + "WHERE (" + Tables.PHONE_LOOKUP + "." + PhoneLookupColumns.MIN_MATCH + " = '");
+        sb.append(minMatch);
+        sb.append("')) AS lookup " +
+                "ON lookup." + PhoneLookupColumns.DATA_ID + "=" + Tables.DATA + "." + Data._ID
+                + " JOIN " + Tables.DATA + " "
+                + "ON " + Tables.DATA + "." + Data.RAW_CONTACT_ID + "=" + Tables.RAW_CONTACTS + "."
+                + RawContacts._ID);
+
         qb.setTables(sb.toString());
 
-        sb = new StringBuilder();
-        appendPhoneLookupSelection(sb, null, null);
+        sb.setLength(0);
+        sb.append("PHONE_NUMBERS_EQUAL(" + Tables.DATA + "." + Phone.NUMBER + ", ");
+        DatabaseUtils.appendEscapedSQLString(sb, number);
+        sb.append(mUseStrictPhoneNumberComparison ? ", 1)" : ", 0)");
         qb.appendWhere(sb.toString());
     }
 
@@ -4522,28 +4772,33 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
                 sb.append(" OR ");
             }
             if (hasNumber) {
-                int numberLen = number.length();
-                sb.append(" lookup.len <= ");
-                sb.append(numberLen);
-                sb.append(" AND substr(");
-                DatabaseUtils.appendEscapedSQLString(sb, number);
-                sb.append(',');
-                sb.append(numberLen);
-                sb.append(" - lookup.len + 1) = lookup.normalized_number");
-
-                // Some countries (e.g. Brazil) can have incoming calls which contain only the local
-                // number (no country calling code and no area code). This case is handled below.
-                // Details see b/5197612.
-                // This also handles a Gingerbread -> ICS upgrade issue; see b/5638376.
-                sb.append(" OR (");
-                sb.append(" lookup.len > ");
-                sb.append(numberLen);
-                sb.append(" AND substr(lookup.normalized_number,");
-                sb.append("lookup.len + 1 - ");
-                sb.append(numberLen);
-                sb.append(") = ");
-                DatabaseUtils.appendEscapedSQLString(sb, number);
-                sb.append(")");
+                // skip the suffix match entirely if we are using strict number comparison
+                if (!mUseStrictPhoneNumberComparison) {
+                    int numberLen = number.length();
+                    sb.append(" lookup.len <= ");
+                    sb.append(numberLen);
+                    sb.append(" AND substr(");
+                    DatabaseUtils.appendEscapedSQLString(sb, number);
+                    sb.append(',');
+                    sb.append(numberLen);
+                    sb.append(" - lookup.len + 1) = lookup.normalized_number");
+
+                    // Some countries (e.g. Brazil) can have incoming calls which contain only the local
+                    // number (no country calling code and no area code). This case is handled below.
+                    // Details see b/5197612.
+                    // This also handles a Gingerbread -> ICS upgrade issue; see b/5638376.
+                    sb.append(" OR (");
+                    sb.append(" lookup.len > ");
+                    sb.append(numberLen);
+                    sb.append(" AND substr(lookup.normalized_number,");
+                    sb.append("lookup.len + 1 - ");
+                    sb.append(numberLen);
+                    sb.append(") = ");
+                    DatabaseUtils.appendEscapedSQLString(sb, number);
+                    sb.append(")");
+                } else {
+                    sb.append("0");
+                }
             }
             sb.append(')');
         }
@@ -4623,33 +4878,14 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
     }
 
     /**
-     * Delete the aggregate contact if it has no constituent raw contacts other
-     * than the supplied one.
-     */
-    public void removeContactIfSingleton(long rawContactId) {
-        SQLiteDatabase db = getWritableDatabase();
-
-        // Obtain contact ID from the supplied raw contact ID
-        String contactIdFromRawContactId = "(SELECT " + RawContacts.CONTACT_ID + " FROM "
-                + Tables.RAW_CONTACTS + " WHERE " + RawContacts._ID + "=" + rawContactId + ")";
-
-        // Find other raw contacts in the same aggregate contact
-        String otherRawContacts = "(SELECT contacts1." + RawContacts._ID + " FROM "
-                + Tables.RAW_CONTACTS + " contacts1 JOIN " + Tables.RAW_CONTACTS + " contacts2 ON ("
-                + "contacts1." + RawContacts.CONTACT_ID + "=contacts2." + RawContacts.CONTACT_ID
-                + ") WHERE contacts1." + RawContacts._ID + "!=" + rawContactId + ""
-                + " AND contacts2." + RawContacts._ID + "=" + rawContactId + ")";
-
-        db.execSQL("DELETE FROM " + Tables.CONTACTS
-                + " WHERE " + Contacts._ID + "=" + contactIdFromRawContactId
-                + " AND NOT EXISTS " + otherRawContacts + ";");
-    }
-
-    /**
      * Returns the value from the {@link Tables#PROPERTIES} table.
      */
     public String getProperty(String key, String defaultValue) {
-        Cursor cursor = getReadableDatabase().query(Tables.PROPERTIES,
+        return getProperty(getReadableDatabase(), key, defaultValue);
+    }
+
+    public String getProperty(SQLiteDatabase db, String key, String defaultValue) {
+        Cursor cursor = db.query(Tables.PROPERTIES,
                 new String[]{PropertiesColumns.PROPERTY_VALUE},
                 PropertiesColumns.PROPERTY_KEY + "=?",
                 new String[]{key}, null, null, null);
@@ -4895,6 +5131,9 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
                 " FROM " + Tables.DATA +
                 " WHERE " + Data.RAW_CONTACT_ID + "=?" +
                         " AND (" + Data.DATA1 + " NOT NULL OR " +
+                                Data.DATA8 + " NOT NULL OR " +
+                                Data.DATA9 + " NOT NULL OR " +
+                                Data.DATA10 + " NOT NULL OR " +  // Phonetic name not empty
                                 Organization.TITLE + " NOT NULL)";
 
         public static final int MIMETYPE = 0;
@@ -5049,11 +5288,20 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
         }
 
         if (bestPhoneticName != null) {
+            if (displayNamePrimary == null) {
+                displayNamePrimary = bestPhoneticName;
+            }
+            if (displayNameAlternative == null) {
+                displayNameAlternative = bestPhoneticName;
+            }
+            // Phonetic names disregard name order so displayNamePrimary and displayNameAlternative
+            // are the same.
             sortKeyPrimary = sortKeyAlternative = bestPhoneticName;
             if (bestPhoneticNameStyle == PhoneticNameStyle.UNDEFINED) {
                 bestPhoneticNameStyle = mNameSplitter.guessPhoneticNameStyle(bestPhoneticName);
             }
         } else {
+            bestPhoneticNameStyle = PhoneticNameStyle.UNDEFINED;
             if (displayNameStyle == FullNameStyle.UNDEFINED) {
                 displayNameStyle = mNameSplitter.guessFullNameStyle(bestDisplayName);
                 if (displayNameStyle == FullNameStyle.UNDEFINED
@@ -5065,9 +5313,7 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
             }
             if (displayNameStyle == FullNameStyle.CHINESE ||
                     displayNameStyle == FullNameStyle.CJK) {
-                sortKeyPrimary = sortKeyAlternative =
-                        ContactLocaleUtils.getIntance().getSortKey(
-                                sortNamePrimary, displayNameStyle);
+                sortKeyPrimary = sortKeyAlternative = sortNamePrimary;
             }
         }
 
@@ -5076,6 +5322,21 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
             sortKeyAlternative = sortNameAlternative;
         }
 
+        String phonebookLabelPrimary = "";
+        String phonebookLabelAlternative = "";
+        int phonebookBucketPrimary = 0;
+        int phonebookBucketAlternative = 0;
+        ContactLocaleUtils localeUtils = ContactLocaleUtils.getInstance();
+
+        if (sortKeyPrimary != null) {
+            phonebookBucketPrimary = localeUtils.getBucketIndex(sortKeyPrimary);
+            phonebookLabelPrimary = localeUtils.getBucketLabel(phonebookBucketPrimary);
+        }
+        if (sortKeyAlternative != null) {
+            phonebookBucketAlternative = localeUtils.getBucketIndex(sortKeyAlternative);
+            phonebookLabelAlternative = localeUtils.getBucketLabel(phonebookBucketAlternative);
+        }
+
         if (mRawContactDisplayNameUpdate == null) {
             mRawContactDisplayNameUpdate = db.compileStatement(
                     "UPDATE " + Tables.RAW_CONTACTS +
@@ -5086,7 +5347,11 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
                             RawContacts.PHONETIC_NAME + "=?," +
                             RawContacts.PHONETIC_NAME_STYLE + "=?," +
                             RawContacts.SORT_KEY_PRIMARY + "=?," +
-                            RawContacts.SORT_KEY_ALTERNATIVE + "=?" +
+                            RawContactsColumns.PHONEBOOK_LABEL_PRIMARY + "=?," +
+                            RawContactsColumns.PHONEBOOK_BUCKET_PRIMARY + "=?," +
+                            RawContacts.SORT_KEY_ALTERNATIVE + "=?," +
+                            RawContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE + "=?," +
+                            RawContactsColumns.PHONEBOOK_BUCKET_ALTERNATIVE + "=?" +
                     " WHERE " + RawContacts._ID + "=?");
         }
 
@@ -5096,8 +5361,12 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
         bindString(mRawContactDisplayNameUpdate, 4, bestPhoneticName);
         mRawContactDisplayNameUpdate.bindLong(5, bestPhoneticNameStyle);
         bindString(mRawContactDisplayNameUpdate, 6, sortKeyPrimary);
-        bindString(mRawContactDisplayNameUpdate, 7, sortKeyAlternative);
-        mRawContactDisplayNameUpdate.bindLong(8, rawContactId);
+        bindString(mRawContactDisplayNameUpdate, 7, phonebookLabelPrimary);
+        mRawContactDisplayNameUpdate.bindLong(8, phonebookBucketPrimary);
+        bindString(mRawContactDisplayNameUpdate, 9, sortKeyAlternative);
+        bindString(mRawContactDisplayNameUpdate, 10, phonebookLabelAlternative);
+        mRawContactDisplayNameUpdate.bindLong(11, phonebookBucketAlternative);
+        mRawContactDisplayNameUpdate.bindLong(12, rawContactId);
         mRawContactDisplayNameUpdate.execute();
     }
 
@@ -5272,6 +5541,16 @@ public class ContactsDatabaseHelper extends SQLiteOpenHelper {
     }
 
     @NeededForTesting
+    /* package */ void setUseStrictPhoneNumberComparisonForTest(boolean useStrict) {
+        mUseStrictPhoneNumberComparison = useStrict;
+    }
+
+    @NeededForTesting
+    /* package */ boolean getUseStrictPhoneNumberComparisonForTest() {
+        return mUseStrictPhoneNumberComparison;
+    }
+
+    @NeededForTesting
     /* package */ String querySearchIndexContentForTest(long contactId) {
         return DatabaseUtils.stringForQuery(getReadableDatabase(),
                 "SELECT " + SearchIndexColumns.CONTENT +
diff --git a/src/com/android/providers/contacts/ContactsProvider2.java b/src/com/android/providers/contacts/ContactsProvider2.java
index c321489..5754ced 100644
--- a/src/com/android/providers/contacts/ContactsProvider2.java
+++ b/src/com/android/providers/contacts/ContactsProvider2.java
@@ -16,54 +16,10 @@
 
 package com.android.providers.contacts;
 
-import com.android.common.content.ProjectionMap;
-import com.android.common.content.SyncStateContentProviderHelper;
-import com.android.providers.contacts.ContactLookupKey.LookupKeySegment;
-import com.android.providers.contacts.ContactsDatabaseHelper.AccountsColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.AggregatedPresenceColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.AggregationExceptionColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.Clauses;
-import com.android.providers.contacts.ContactsDatabaseHelper.ContactsColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.ContactsStatusUpdatesColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.DataColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.DataUsageStatColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.DbProperties;
-import com.android.providers.contacts.ContactsDatabaseHelper.GroupsColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.Joins;
-import com.android.providers.contacts.ContactsDatabaseHelper.NameLookupColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.NameLookupType;
-import com.android.providers.contacts.ContactsDatabaseHelper.PhoneLookupColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.PhotoFilesColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.PresenceColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.Projections;
-import com.android.providers.contacts.ContactsDatabaseHelper.RawContactsColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.SearchIndexColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.SettingsColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.StatusUpdatesColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.StreamItemPhotosColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.StreamItemsColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
-import com.android.providers.contacts.ContactsDatabaseHelper.ViewGroupsColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.Views;
-import com.android.providers.contacts.SearchIndexManager.FtsQueryBuilder;
-import com.android.providers.contacts.aggregation.ContactAggregator;
-import com.android.providers.contacts.aggregation.ContactAggregator.AggregationSuggestionParameter;
-import com.android.providers.contacts.aggregation.util.CommonNicknameCache;
-import com.android.providers.contacts.aggregation.ProfileAggregator;
-import com.android.providers.contacts.util.Clock;
-import com.android.providers.contacts.util.DbQueryUtils;
-import com.android.providers.contacts.util.NeededForTesting;
-import com.android.vcard.VCardComposer;
-import com.android.vcard.VCardConfig;
-import com.google.android.collect.Lists;
-import com.google.android.collect.Maps;
-import com.google.android.collect.Sets;
-import com.google.common.annotations.VisibleForTesting;
-import com.google.common.base.Preconditions;
-
 import android.accounts.Account;
 import android.accounts.AccountManager;
 import android.accounts.OnAccountsUpdateListener;
+import android.app.AppOpsManager;
 import android.app.SearchManager;
 import android.content.ContentProviderOperation;
 import android.content.ContentProviderResult;
@@ -113,6 +69,7 @@ import android.provider.BaseColumns;
 import android.provider.ContactsContract;
 import android.provider.ContactsContract.AggregationExceptions;
 import android.provider.ContactsContract.Authorization;
+import android.provider.ContactsContract.CommonDataKinds.Contactables;
 import android.provider.ContactsContract.CommonDataKinds.Email;
 import android.provider.ContactsContract.CommonDataKinds.GroupMembership;
 import android.provider.ContactsContract.CommonDataKinds.Identity;
@@ -151,6 +108,54 @@ import android.telephony.TelephonyManager;
 import android.text.TextUtils;
 import android.util.Log;
 
+import com.android.common.content.ProjectionMap;
+import com.android.common.content.SyncStateContentProviderHelper;
+import com.android.common.io.MoreCloseables;
+import com.android.providers.contacts.ContactLookupKey.LookupKeySegment;
+import com.android.providers.contacts.ContactsDatabaseHelper.AccountsColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.AggregatedPresenceColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.AggregationExceptionColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.Clauses;
+import com.android.providers.contacts.ContactsDatabaseHelper.ContactsColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.ContactsStatusUpdatesColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.DataColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.DataUsageStatColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.DbProperties;
+import com.android.providers.contacts.ContactsDatabaseHelper.GroupsColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.Joins;
+import com.android.providers.contacts.ContactsDatabaseHelper.NameLookupColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.NameLookupType;
+import com.android.providers.contacts.ContactsDatabaseHelper.PhoneLookupColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.PhotoFilesColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.PresenceColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.Projections;
+import com.android.providers.contacts.ContactsDatabaseHelper.RawContactsColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.SearchIndexColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.SettingsColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.StatusUpdatesColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.StreamItemPhotosColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.StreamItemsColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
+import com.android.providers.contacts.ContactsDatabaseHelper.ViewGroupsColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.Views;
+import com.android.providers.contacts.SearchIndexManager.FtsQueryBuilder;
+import com.android.providers.contacts.aggregation.ContactAggregator;
+import com.android.providers.contacts.aggregation.ContactAggregator.AggregationSuggestionParameter;
+import com.android.providers.contacts.aggregation.ProfileAggregator;
+import com.android.providers.contacts.aggregation.util.CommonNicknameCache;
+import com.android.providers.contacts.database.ContactsTableUtil;
+import com.android.providers.contacts.database.DeletedContactsTableUtil;
+import com.android.providers.contacts.util.Clock;
+import com.android.providers.contacts.util.DbQueryUtils;
+import com.android.providers.contacts.util.NeededForTesting;
+import com.android.vcard.VCardComposer;
+import com.android.vcard.VCardConfig;
+import com.google.android.collect.Lists;
+import com.google.android.collect.Maps;
+import com.google.android.collect.Sets;
+import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Preconditions;
+
 import java.io.BufferedWriter;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -192,6 +197,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
     private static final int BACKGROUND_TASK_UPDATE_DIRECTORIES = 8;
     private static final int BACKGROUND_TASK_CHANGE_LOCALE = 9;
     private static final int BACKGROUND_TASK_CLEANUP_PHOTOS = 10;
+    private static final int BACKGROUND_TASK_CLEAN_DELETE_LOG = 11;
 
     /** Default for the maximum number of returned aggregation suggestions. */
     private static final int DEFAULT_MAX_SUGGESTIONS = 5;
@@ -208,6 +214,8 @@ public class ContactsProvider2 extends AbstractContactsProvider
      */
     private static final int DEFAULT_PREAUTHORIZED_URI_EXPIRATION = 5 * 60 * 1000;
 
+    private static final int USAGE_TYPE_ALL = -1;
+
     /**
      * Random URI parameter that will be appended to preauthorized URIs for uniqueness.
      */
@@ -303,6 +311,8 @@ public class ContactsProvider2 extends AbstractContactsProvider
     private static final int CALLABLES = 3011;
     private static final int CALLABLES_ID = 3012;
     private static final int CALLABLES_FILTER = 3013;
+    private static final int CONTACTABLES = 3014;
+    private static final int CONTACTABLES_FILTER = 3015;
 
     private static final int PHONE_LOOKUP = 4000;
 
@@ -363,6 +373,9 @@ public class ContactsProvider2 extends AbstractContactsProvider
     private static final int DISPLAY_PHOTO_ID = 22000;
     private static final int PHOTO_DIMENSIONS = 22001;
 
+    private static final int DELETED_CONTACTS = 23000;
+    private static final int DELETED_CONTACTS_ID = 23001;
+
     // Inserts into URIs in this map will direct to the profile database if the parent record's
     // value (looked up from the ContentValues object with the key specified by the value in this
     // map) is in the profile ID-space (see {@link ProfileDatabaseHelper#PROFILE_ID_SPACE}).
@@ -513,11 +526,11 @@ public class ContactsProvider2 extends AbstractContactsProvider
      */
     private static final String EMAIL_FILTER_SORT_ORDER =
         Contacts.STARRED + " DESC, "
+        + Data.IS_SUPER_PRIMARY + " DESC, "
         + SORT_BY_DATA_USAGE + ", "
         + Contacts.IN_VISIBLE_GROUP + " DESC, "
         + Contacts.DISPLAY_NAME + ", "
         + Data.CONTACT_ID + ", "
-        + Data.IS_SUPER_PRIMARY + " DESC, "
         + Data.IS_PRIMARY + " DESC";
 
     /** Currently same as {@link #EMAIL_FILTER_SORT_ORDER} */
@@ -564,9 +577,14 @@ public class ContactsProvider2 extends AbstractContactsProvider
             .add(Contacts.SEND_TO_VOICEMAIL)
             .add(Contacts.SORT_KEY_ALTERNATIVE)
             .add(Contacts.SORT_KEY_PRIMARY)
+            .add(ContactsColumns.PHONEBOOK_LABEL_PRIMARY)
+            .add(ContactsColumns.PHONEBOOK_BUCKET_PRIMARY)
+            .add(ContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE)
+            .add(ContactsColumns.PHONEBOOK_BUCKET_ALTERNATIVE)
             .add(Contacts.STARRED)
             .add(Contacts.TIMES_CONTACTED)
             .add(Contacts.HAS_PHONE_NUMBER)
+            .add(Contacts.CONTACT_LAST_UPDATED_TIMESTAMP)
             .build();
 
     private static final ProjectionMap sContactsPresenceColumns = ProjectionMap.builder()
@@ -663,6 +681,11 @@ public class ContactsProvider2 extends AbstractContactsProvider
             .add(Data.STATUS_ICON, StatusUpdatesColumns.CONCRETE_STATUS_ICON)
             .build();
 
+    private static final ProjectionMap sDataUsageColumns = ProjectionMap.builder()
+            .add(Data.TIMES_USED, Tables.DATA_USAGE_STAT + "." + Data.TIMES_USED)
+            .add(Data.LAST_TIME_USED, Tables.DATA_USAGE_STAT + "." + Data.LAST_TIME_USED)
+            .build();
+
     /** Contains just BaseColumns._COUNT */
     private static final ProjectionMap sCountProjectionMap = ProjectionMap.builder()
             .add(BaseColumns._COUNT, "COUNT(*)")
@@ -751,6 +774,10 @@ public class ContactsProvider2 extends AbstractContactsProvider
             .add(RawContacts.PHONETIC_NAME_STYLE)
             .add(RawContacts.SORT_KEY_PRIMARY)
             .add(RawContacts.SORT_KEY_ALTERNATIVE)
+            .add(RawContactsColumns.PHONEBOOK_LABEL_PRIMARY)
+            .add(RawContactsColumns.PHONEBOOK_BUCKET_PRIMARY)
+            .add(RawContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE)
+            .add(RawContactsColumns.PHONEBOOK_BUCKET_ALTERNATIVE)
             .add(RawContacts.TIMES_CONTACTED)
             .add(RawContacts.LAST_TIME_CONTACTED)
             .add(RawContacts.CUSTOM_RINGTONE)
@@ -812,6 +839,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
             .addAll(sRawContactColumns)
             .addAll(sContactsColumns)
             .addAll(sContactPresenceColumns)
+            .addAll(sDataUsageColumns)
             .build();
 
     /** Contains columns from the data view used for SIP address lookup. */
@@ -829,6 +857,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
             .addAll(sDataPresenceColumns)
             .addAll(sContactsColumns)
             .addAll(sContactPresenceColumns)
+            .addAll(sDataUsageColumns)
             .build();
 
     /** Contains columns from the data view used for SIP address lookup. */
@@ -885,6 +914,11 @@ public class ContactsProvider2 extends AbstractContactsProvider
             .add(Groups.SYNC4)
             .build();
 
+    private static final ProjectionMap sDeletedContactsProjectionMap = ProjectionMap.builder()
+            .add(ContactsContract.DeletedContacts.CONTACT_ID)
+            .add(ContactsContract.DeletedContacts.CONTACT_DELETED_TIMESTAMP)
+            .build();
+
     /**
      * Contains {@link Groups} columns along with summary details.
      *
@@ -1144,6 +1178,11 @@ public class ContactsProvider2 extends AbstractContactsProvider
         matcher.addURI(ContactsContract.AUTHORITY, "data/callables/filter", CALLABLES_FILTER);
         matcher.addURI(ContactsContract.AUTHORITY, "data/callables/filter/*", CALLABLES_FILTER);
 
+        matcher.addURI(ContactsContract.AUTHORITY, "data/contactables/", CONTACTABLES);
+        matcher.addURI(ContactsContract.AUTHORITY, "data/contactables/filter", CONTACTABLES_FILTER);
+        matcher.addURI(ContactsContract.AUTHORITY, "data/contactables/filter/*",
+                CONTACTABLES_FILTER);
+
         matcher.addURI(ContactsContract.AUTHORITY, "groups", GROUPS);
         matcher.addURI(ContactsContract.AUTHORITY, "groups/#", GROUPS_ID);
         matcher.addURI(ContactsContract.AUTHORITY, "groups_summary", GROUPS_SUMMARY);
@@ -1211,6 +1250,9 @@ public class ContactsProvider2 extends AbstractContactsProvider
 
         matcher.addURI(ContactsContract.AUTHORITY, "display_photo/#", DISPLAY_PHOTO_ID);
         matcher.addURI(ContactsContract.AUTHORITY, "photo_dimensions", PHOTO_DIMENSIONS);
+
+        matcher.addURI(ContactsContract.AUTHORITY, "deleted_contacts", DELETED_CONTACTS);
+        matcher.addURI(ContactsContract.AUTHORITY, "deleted_contacts/#", DELETED_CONTACTS_ID);
     }
 
     private static class DirectoryInfo {
@@ -1264,13 +1306,6 @@ public class ContactsProvider2 extends AbstractContactsProvider
     /* package */ static final String PROFILE_DB_TAG = "profile";
 
     /**
-     * The active (thread-local) database.  This will be switched between a contacts-specific
-     * database and a profile-specific database, depending on what the current operation is
-     * targeted to.
-     */
-    private final ThreadLocal<SQLiteDatabase> mActiveDb = new ThreadLocal<SQLiteDatabase>();
-
-    /**
      * The thread-local holder of the active transaction.  Shared between this and the profile
      * provider, to keep transactions on both databases synchronized.
      */
@@ -1361,6 +1396,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
             Log.d(Constants.PERFORMANCE_TAG, "ContactsProvider2.onCreate start");
         }
         super.onCreate();
+        setAppOps(AppOpsManager.OP_READ_CONTACTS, AppOpsManager.OP_WRITE_CONTACTS);
         try {
             return initialize();
         } catch (RuntimeException e) {
@@ -1387,13 +1423,13 @@ public class ContactsProvider2 extends AbstractContactsProvider
         StrictMode.setThreadPolicy(
                 new StrictMode.ThreadPolicy.Builder().detectAll().penaltyLog().build());
 
-        mFastScrollingIndexCache = new FastScrollingIndexCache(getContext());
+        mFastScrollingIndexCache = FastScrollingIndexCache.getInstance(getContext());
 
         mContactsHelper = getDatabaseHelper(getContext());
         mDbHelper.set(mContactsHelper);
 
         // Set up the DB helper for keeping transactions serialized.
-        setDbHelperToSerializeOn(mContactsHelper, CONTACTS_DB_TAG);
+        setDbHelperToSerializeOn(mContactsHelper, CONTACTS_DB_TAG, this);
 
         mContactDirectoryManager = new ContactDirectoryManager(this);
         mGlobalSearchSupport = new GlobalSearchSupport(this);
@@ -1413,8 +1449,8 @@ public class ContactsProvider2 extends AbstractContactsProvider
         };
 
         // Set up the sub-provider for handling profiles.
-        mProfileProvider = getProfileProvider();
-        mProfileProvider.setDbHelperToSerializeOn(mContactsHelper, CONTACTS_DB_TAG);
+        mProfileProvider = newProfileProvider();
+        mProfileProvider.setDbHelperToSerializeOn(mContactsHelper, CONTACTS_DB_TAG, this);
         ProviderInfo profileInfo = new ProviderInfo();
         profileInfo.readPermission = "android.permission.READ_PROFILE";
         profileInfo.writePermission = "android.permission.WRITE_PROFILE";
@@ -1422,10 +1458,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
         mProfileHelper = mProfileProvider.getDatabaseHelper(getContext());
 
         // Initialize the pre-authorized URI duration.
-        mPreAuthorizedUriDuration = android.provider.Settings.Secure.getLong(
-                getContext().getContentResolver(),
-                android.provider.Settings.Secure.CONTACTS_PREAUTH_URI_EXPIRATION,
-                DEFAULT_PREAUTHORIZED_URI_EXPIRATION);
+        mPreAuthorizedUriDuration = DEFAULT_PREAUTHORIZED_URI_EXPIRATION;
 
         scheduleBackgroundTask(BACKGROUND_TASK_INITIALIZE);
         scheduleBackgroundTask(BACKGROUND_TASK_UPDATE_ACCOUNTS);
@@ -1451,7 +1484,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
         mNameLookupBuilder = new StructuredNameLookupBuilder(mNameSplitter);
         mPostalSplitter = new PostalSplitter(mCurrentLocale);
         mCommonNicknameCache = new CommonNicknameCache(mContactsHelper.getReadableDatabase());
-        ContactLocaleUtils.getIntance().setLocale(mCurrentLocale);
+        ContactLocaleUtils.setLocale(mCurrentLocale);
         mContactAggregator = new ContactAggregator(this, mContactsHelper,
                 createPhotoPriorityResolver(context), mNameSplitter, mCommonNicknameCache);
         mContactAggregator.setEnabled(SystemProperties.getBoolean(AGGREGATE_CONTACTS, true));
@@ -1521,6 +1554,8 @@ public class ContactsProvider2 extends AbstractContactsProvider
     }
 
     protected void performBackgroundTask(int task, Object arg) {
+        // Make sure we operate on the contacts db by default.
+        switchToContactMode();
         switch (task) {
             case BACKGROUND_TASK_INITIALIZE: {
                 initForDefaultLocale();
@@ -1551,6 +1586,8 @@ public class ContactsProvider2 extends AbstractContactsProvider
                 switchToProfileMode();
                 accountsChanged |= updateAccountsInBackground(accounts);
 
+                switchToContactMode();
+
                 updateContactsAccountCount(accounts);
                 updateDirectoriesInBackground(accountsChanged);
                 break;
@@ -1569,6 +1606,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
             case BACKGROUND_TASK_UPGRADE_AGGREGATION_ALGORITHM: {
                 if (isAggregationUpgradeNeeded()) {
                     upgradeAggregationAlgorithmInBackground();
+                    invalidateFastScrollingIndexCache();
                 }
                 break;
             }
@@ -1601,9 +1639,16 @@ public class ContactsProvider2 extends AbstractContactsProvider
                     cleanupPhotoStore();
                     switchToProfileMode();
                     cleanupPhotoStore();
+
+                    switchToContactMode(); // Switch to the default, just in case.
                     break;
                 }
             }
+
+            case BACKGROUND_TASK_CLEAN_DELETE_LOG: {
+                final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
+                DeletedContactsTableUtil.deleteOldLogs(db);
+            }
         }
     }
 
@@ -1616,6 +1661,26 @@ public class ContactsProvider2 extends AbstractContactsProvider
         scheduleBackgroundTask(BACKGROUND_TASK_CHANGE_LOCALE);
     }
 
+    private static boolean needsToUpdateLocaleData(SharedPreferences prefs,
+            Locale locale,ContactsDatabaseHelper contactsHelper,
+            ProfileDatabaseHelper profileHelper) {
+        final String providerLocale = prefs.getString(PREF_LOCALE, null);
+
+        // If locale matches that of the provider, and neither DB needs
+        // updating, there's nothing to do. A DB might require updating
+        // as a result of a system upgrade.
+        if (!locale.toString().equals(providerLocale)) {
+            Log.i(TAG, "Locale has changed from " + providerLocale
+                    + " to " + locale.toString());
+            return true;
+        }
+        if (contactsHelper.needsToUpdateLocaleData(locale) ||
+                profileHelper.needsToUpdateLocaleData(locale)) {
+            return true;
+        }
+        return false;
+    }
+
     /**
      * Verifies that the contacts database is properly configured for the current locale.
      * If not, changes the database locale to the current locale using an asynchronous task.
@@ -1630,22 +1695,44 @@ public class ContactsProvider2 extends AbstractContactsProvider
             return;
         }
 
-        final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getContext());
-        final String providerLocale = prefs.getString(PREF_LOCALE, null);
         final Locale currentLocale = mCurrentLocale;
-        if (currentLocale.toString().equals(providerLocale)) {
+        final SharedPreferences prefs =
+            PreferenceManager.getDefaultSharedPreferences(getContext());
+        if (!needsToUpdateLocaleData(prefs, currentLocale,
+                        mContactsHelper, mProfileHelper)) {
             return;
         }
 
         int providerStatus = mProviderStatus;
         setProviderStatus(ProviderStatus.STATUS_CHANGING_LOCALE);
-        mContactsHelper.setLocale(this, currentLocale);
-        mProfileHelper.setLocale(this, currentLocale);
-        prefs.edit().putString(PREF_LOCALE, currentLocale.toString()).apply();
-        invalidateFastScrollingIndexCache();
+        mContactsHelper.setLocale(currentLocale);
+        mProfileHelper.setLocale(currentLocale);
+        mSearchIndexManager.updateIndex(true);
+        prefs.edit().putString(PREF_LOCALE, currentLocale.toString()).commit();
         setProviderStatus(providerStatus);
     }
 
+    // Static update routine for use by ContactsUpgradeReceiver during startup.
+    // This clears the search index and marks it to be rebuilt, but doesn't
+    // actually rebuild it. That is done later by
+    // BACKGROUND_TASK_UPDATE_SEARCH_INDEX.
+    protected static void updateLocaleOffline(Context context,
+            ContactsDatabaseHelper contactsHelper,
+            ProfileDatabaseHelper profileHelper) {
+        final Locale currentLocale = Locale.getDefault();
+        final SharedPreferences prefs =
+            PreferenceManager.getDefaultSharedPreferences(context);
+        if (!needsToUpdateLocaleData(prefs, currentLocale,
+                        contactsHelper, profileHelper)) {
+            return;
+        }
+
+        contactsHelper.setLocale(currentLocale);
+        profileHelper.setLocale(currentLocale);
+        contactsHelper.rebuildSearchIndex();
+        prefs.edit().putString(PREF_LOCALE, currentLocale.toString()).commit();
+    }
+
     /**
      * Reinitializes the provider for a new locale.
      */
@@ -1671,7 +1758,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
     }
 
     protected void updateSearchIndexInBackground() {
-        mSearchIndexManager.updateIndex();
+        mSearchIndexManager.updateIndex(false);
     }
 
     protected void updateDirectoriesInBackground(boolean rescan) {
@@ -1705,8 +1792,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
 
     @VisibleForTesting
     protected void cleanupPhotoStore() {
-        SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
-        mActiveDb.set(db);
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
 
         // Assemble the set of photo store file IDs that are in use, and send those to the photo
         // store.  Any photos that aren't in that set will be deleted, and any photos that no
@@ -1759,7 +1845,9 @@ public class ContactsProvider2 extends AbstractContactsProvider
         // using internal APIs or direct DB access to avoid permission errors.
         if (!missingPhotoIds.isEmpty()) {
             try {
-                db.beginTransactionWithListener(this);
+                // Need to set the db listener because we need to run onCommit afterwards.
+                // Make sure to use the proper listener depending on the current mode.
+                db.beginTransactionWithListener(inProfileMode() ? mProfileProvider : this);
                 for (long missingPhotoId : missingPhotoIds) {
                     if (photoFileIdToDataId.containsKey(missingPhotoId)) {
                         long dataId = photoFileIdToDataId.get(missingPhotoId);
@@ -1796,7 +1884,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
         return mTransactionHolder;
     }
 
-    public ProfileProvider getProfileProvider() {
+    public ProfileProvider newProfileProvider() {
         return new ProfileProvider(this);
     }
 
@@ -1835,7 +1923,8 @@ public class ContactsProvider2 extends AbstractContactsProvider
         return Locale.getDefault();
     }
 
-    private boolean inProfileMode() {
+    @VisibleForTesting
+    final boolean inProfileMode() {
         Boolean profileMode = mInProfileMode.get();
         return profileMode != null && profileMode;
     }
@@ -1921,7 +2010,10 @@ public class ContactsProvider2 extends AbstractContactsProvider
      * Switches the provider's thread-local context variables to prepare for performing
      * a profile operation.
      */
-    protected void switchToProfileMode() {
+    private void switchToProfileMode() {
+        if (ENABLE_TRANSACTION_LOG) {
+            Log.i(TAG, "switchToProfileMode", new RuntimeException("switchToProfileMode"));
+        }
         mDbHelper.set(mProfileHelper);
         mTransactionContext.set(mProfileTransactionContext);
         mAggregator.set(mProfileAggregator);
@@ -1933,15 +2025,15 @@ public class ContactsProvider2 extends AbstractContactsProvider
      * Switches the provider's thread-local context variables to prepare for performing
      * a contacts operation.
      */
-    protected void switchToContactMode() {
+    private void switchToContactMode() {
+        if (ENABLE_TRANSACTION_LOG) {
+            Log.i(TAG, "switchToContactMode", new RuntimeException("switchToContactMode"));
+        }
         mDbHelper.set(mContactsHelper);
         mTransactionContext.set(mContactTransactionContext);
         mAggregator.set(mContactAggregator);
         mPhotoStore.set(mContactsPhotoStore);
         mInProfileMode.set(false);
-
-        // Clear out the active database; modification operations will set this to the contacts DB.
-        mActiveDb.set(null);
     }
 
     @Override
@@ -2000,17 +2092,10 @@ public class ContactsProvider2 extends AbstractContactsProvider
         }
     }
 
-    /**
-     * Replaces the current (thread-local) database to use for the operation with the given one.
-     * @param db The database to use.
-     */
-    /* package */ void substituteDb(SQLiteDatabase db) {
-        mActiveDb.set(db);
-    }
-
     @Override
     public Bundle call(String method, String arg, Bundle extras) {
         waitForAccess(mReadAccessLatch);
+        switchToContactMode();
         if (method.equals(Authorization.AUTHORIZATION_METHOD)) {
             Uri uri = (Uri) extras.getParcelable(Authorization.KEY_URI_TO_AUTHORIZE);
 
@@ -2110,13 +2195,20 @@ public class ContactsProvider2 extends AbstractContactsProvider
 
     @Override
     public void onBegin() {
-        if (VERBOSE_LOGGING) {
-            Log.v(TAG, "onBeginTransaction: " + (inProfileMode() ? "profile" : "contacts"));
+        onBeginTransactionInternal(false);
+    }
+
+    protected void onBeginTransactionInternal(boolean forProfile) {
+        if (ENABLE_TRANSACTION_LOG) {
+            Log.i(TAG, "onBeginTransaction: " + (forProfile ? "profile" : "contacts"),
+                    new RuntimeException("onBeginTransactionInternal"));
         }
-        if (inProfileMode()) {
+        if (forProfile) {
+            switchToProfileMode();
             mProfileAggregator.clearPendingAggregations();
             mProfileTransactionContext.clearExceptSearchIndexUpdates();
         } else {
+            switchToContactMode();
             mContactAggregator.clearPendingAggregations();
             mContactTransactionContext.clearExceptSearchIndexUpdates();
         }
@@ -2124,11 +2216,23 @@ public class ContactsProvider2 extends AbstractContactsProvider
 
     @Override
     public void onCommit() {
-        if (VERBOSE_LOGGING) {
-            Log.v(TAG, "beforeTransactionCommit: " + (inProfileMode() ? "profile" : "contacts"));
+        onCommitTransactionInternal(false);
+    }
+
+    protected void onCommitTransactionInternal(boolean forProfile) {
+        if (ENABLE_TRANSACTION_LOG) {
+            Log.i(TAG, "onCommitTransactionInternal: " + (forProfile ? "profile" : "contacts"),
+                    new RuntimeException("onCommitTransactionInternal"));
         }
+        if (forProfile) {
+            switchToProfileMode();
+        } else {
+            switchToContactMode();
+        }
+
         flushTransactionalChanges();
-        mAggregator.get().aggregateInTransaction(mTransactionContext.get(), mActiveDb.get());
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
+        mAggregator.get().aggregateInTransaction(mTransactionContext.get(), db);
         if (mVisibleTouched) {
             mVisibleTouched = false;
             mDbHelper.get().updateAllVisible();
@@ -2147,13 +2251,21 @@ public class ContactsProvider2 extends AbstractContactsProvider
 
     @Override
     public void onRollback() {
-        if (VERBOSE_LOGGING) {
-            Log.v(TAG, "beforeTransactionRollback: " + (inProfileMode() ? "profile" : "contacts"));
+        onRollbackTransactionInternal(false);
+    }
+
+    protected void onRollbackTransactionInternal(boolean forProfile) {
+        if (ENABLE_TRANSACTION_LOG) {
+            Log.i(TAG, "onRollbackTransactionInternal: " + (forProfile ? "profile" : "contacts"),
+                    new RuntimeException("onRollbackTransactionInternal"));
+        }
+        if (forProfile) {
+            switchToProfileMode();
+        } else {
+            switchToContactMode();
         }
-        // mDbHelper may not be pointing at the "right" db helper due to a bug,
-        // so we invalidate both for now.
-        mContactsHelper.invalidateAllCache();
-        mProfileHelper.invalidateAllCache();
+
+        mDbHelper.get().invalidateAllCache();
     }
 
     private void updateSearchIndexInTransaction() {
@@ -2167,12 +2279,13 @@ public class ContactsProvider2 extends AbstractContactsProvider
 
     private void flushTransactionalChanges() {
         if (VERBOSE_LOGGING) {
-            Log.v(TAG, "flushTransactionChanges");
+            Log.v(TAG, "flushTransactionalChanges: " + (inProfileMode() ? "profile" : "contacts"));
         }
 
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
         for (long rawContactId : mTransactionContext.get().getInsertedRawContactIds()) {
-            mDbHelper.get().updateRawContactDisplayName(mActiveDb.get(), rawContactId);
-            mAggregator.get().onRawContactInsert(mTransactionContext.get(), mActiveDb.get(),
+            mDbHelper.get().updateRawContactDisplayName(db, rawContactId);
+            mAggregator.get().onRawContactInsert(mTransactionContext.get(), db,
                     rawContactId);
         }
 
@@ -2182,7 +2295,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
             mSb.append(UPDATE_RAW_CONTACT_SET_DIRTY_SQL);
             appendIds(mSb, dirtyRawContacts);
             mSb.append(")");
-            mActiveDb.get().execSQL(mSb.toString());
+            db.execSQL(mSb.toString());
         }
 
         Set<Long> updatedRawContacts = mTransactionContext.get().getUpdatedRawContactIds();
@@ -2191,13 +2304,16 @@ public class ContactsProvider2 extends AbstractContactsProvider
             mSb.append(UPDATE_RAW_CONTACT_SET_VERSION_SQL);
             appendIds(mSb, updatedRawContacts);
             mSb.append(")");
-            mActiveDb.get().execSQL(mSb.toString());
+            db.execSQL(mSb.toString());
         }
 
+        final Set<Long> changedRawContacts = mTransactionContext.get().getChangedRawContactIds();
+        ContactsTableUtil.updateContactLastUpdateByRawContactId(db, changedRawContacts);
+
         // Update sync states.
         for (Map.Entry<Long, Object> entry : mTransactionContext.get().getUpdatedSyncStates()) {
             long id = entry.getKey();
-            if (mDbHelper.get().getSyncState().update(mActiveDb.get(), id, entry.getValue()) <= 0) {
+            if (mDbHelper.get().getSyncState().update(db, id, entry.getValue()) <= 0) {
                 throw new IllegalStateException(
                         "unable to update sync state, does it still exist?");
             }
@@ -2265,10 +2381,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
             Log.v(TAG, "insertInTransaction: uri=" + uri + "  values=[" + values + "]");
         }
 
-        // Default active DB to the contacts DB if none has been set.
-        if (mActiveDb.get() == null) {
-            mActiveDb.set(mContactsHelper.getWritableDatabase());
-        }
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
 
         final boolean callerIsSyncAdapter =
                 readBooleanQueryParameter(uri, ContactsContract.CALLER_IS_SYNCADAPTER, false);
@@ -2279,7 +2392,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
         switch (match) {
             case SYNCSTATE:
             case PROFILE_SYNCSTATE:
-                id = mDbHelper.get().getSyncState().insert(mActiveDb.get(), values);
+                id = mDbHelper.get().getSyncState().insert(db, values);
                 break;
 
             case CONTACTS: {
@@ -2506,7 +2619,9 @@ public class ContactsProvider2 extends AbstractContactsProvider
             mValues.put(RawContacts.AGGREGATION_MODE, RawContacts.AGGREGATION_MODE_DISABLED);
         }
 
-        long rawContactId = mActiveDb.get().insert(Tables.RAW_CONTACTS,
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
+
+        long rawContactId = db.insert(Tables.RAW_CONTACTS,
                 RawContacts.CONTACT_ID, mValues);
         int aggregationMode = RawContacts.AGGREGATION_MODE_DEFAULT;
         if (mValues.containsKey(RawContacts.AGGREGATION_MODE)) {
@@ -2538,7 +2653,8 @@ public class ContactsProvider2 extends AbstractContactsProvider
     }
 
     private Long findGroupByRawContactId(String selection, long rawContactId) {
-        Cursor c = mActiveDb.get().query(Tables.GROUPS + "," + Tables.RAW_CONTACTS,
+        final SQLiteDatabase db = mDbHelper.get().getReadableDatabase();
+        Cursor c = db.query(Tables.GROUPS + "," + Tables.RAW_CONTACTS,
                 PROJECTION_GROUP_ID, selection,
                 new String[]{Long.toString(rawContactId)},
                 null /* groupBy */, null /* having */, null /* orderBy */);
@@ -2570,7 +2686,8 @@ public class ContactsProvider2 extends AbstractContactsProvider
         groupMembershipValues.put(GroupMembership.RAW_CONTACT_ID, rawContactId);
         groupMembershipValues.put(DataColumns.MIMETYPE_ID,
                 mDbHelper.get().getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE));
-        mActiveDb.get().insert(Tables.DATA, null, groupMembershipValues);
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
+        db.insert(Tables.DATA, null, groupMembershipValues);
     }
 
     private void deleteDataGroupMembership(long rawContactId, long groupId) {
@@ -2578,7 +2695,8 @@ public class ContactsProvider2 extends AbstractContactsProvider
                 Long.toString(mDbHelper.get().getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE)),
                 Long.toString(groupId),
                 Long.toString(rawContactId)};
-        mActiveDb.get().delete(Tables.DATA, SELECTION_GROUPMEMBERSHIP_DATA, selectionArgs);
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
+        db.delete(Tables.DATA, SELECTION_GROUPMEMBERSHIP_DATA, selectionArgs);
     }
 
     /**
@@ -2611,10 +2729,9 @@ public class ContactsProvider2 extends AbstractContactsProvider
         mValues.remove(Data.MIMETYPE);
 
         DataRowHandler rowHandler = getDataRowHandler(mimeType);
-        id = rowHandler.insert(mActiveDb.get(), mTransactionContext.get(), rawContactId, mValues);
-        if (!callerIsSyncAdapter) {
-            mTransactionContext.get().markRawContactDirty(rawContactId);
-        }
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
+        id = rowHandler.insert(db, mTransactionContext.get(), rawContactId, mValues);
+        mTransactionContext.get().markRawContactDirtyAndChanged(rawContactId, callerIsSyncAdapter);
         mTransactionContext.get().rawContactUpdated(rawContactId);
         return id;
     }
@@ -2642,7 +2759,8 @@ public class ContactsProvider2 extends AbstractContactsProvider
         mValues.remove(RawContacts.ACCOUNT_TYPE);
 
         // Insert the new stream item.
-        id = mActiveDb.get().insert(Tables.STREAM_ITEMS, null, mValues);
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
+        id = db.insert(Tables.STREAM_ITEMS, null, mValues);
         if (id == -1) {
             // Insertion failed.
             return 0;
@@ -2682,7 +2800,8 @@ public class ContactsProvider2 extends AbstractContactsProvider
             // Process the photo and store it.
             if (processStreamItemPhoto(mValues, false)) {
                 // Insert the stream item photo.
-                id = mActiveDb.get().insert(Tables.STREAM_ITEM_PHOTOS, null, mValues);
+                final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
+                id = db.insert(Tables.STREAM_ITEM_PHOTOS, null, mValues);
             }
         }
         return id;
@@ -2734,7 +2853,8 @@ public class ContactsProvider2 extends AbstractContactsProvider
      */
     private long lookupRawContactIdForStreamId(long streamItemId) {
         long rawContactId = -1;
-        Cursor c = mActiveDb.get().query(Tables.STREAM_ITEMS,
+        final SQLiteDatabase db = mDbHelper.get().getReadableDatabase();
+        Cursor c = db.query(Tables.STREAM_ITEMS,
                 new String[]{StreamItems.RAW_CONTACT_ID},
                 StreamItems._ID + "=?", new String[]{String.valueOf(streamItemId)},
                 null, null, null);
@@ -2786,7 +2906,8 @@ public class ContactsProvider2 extends AbstractContactsProvider
      */
     private long cleanUpOldStreamItems(long rawContactId, long insertedStreamItemId) {
         long postCleanupInsertedStreamId = insertedStreamItemId;
-        Cursor c = mActiveDb.get().query(Tables.STREAM_ITEMS, new String[]{StreamItems._ID},
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
+        Cursor c = db.query(Tables.STREAM_ITEMS, new String[]{StreamItems._ID},
                 StreamItems.RAW_CONTACT_ID + "=?", new String[]{String.valueOf(rawContactId)},
                 null, null, StreamItems.TIMESTAMP + " DESC, " + StreamItems._ID + " DESC");
         try {
@@ -2802,7 +2923,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                         // The stream item just inserted is being deleted.
                         postCleanupInsertedStreamId = 0;
                     }
-                    deleteStreamItem(c.getLong(0));
+                    deleteStreamItem(db, c.getLong(0));
                     c.moveToPrevious();
                 }
             }
@@ -2818,6 +2939,8 @@ public class ContactsProvider2 extends AbstractContactsProvider
     private int deleteData(String selection, String[] selectionArgs, boolean callerIsSyncAdapter) {
         int count = 0;
 
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
+
         // Note that the query will return data according to the access restrictions,
         // so we don't need to worry about deleting data we don't have permission to read.
         Uri dataUri = inProfileMode()
@@ -2830,10 +2953,9 @@ public class ContactsProvider2 extends AbstractContactsProvider
                 long rawContactId = c.getLong(DataRowHandler.DataDeleteQuery.RAW_CONTACT_ID);
                 String mimeType = c.getString(DataRowHandler.DataDeleteQuery.MIMETYPE);
                 DataRowHandler rowHandler = getDataRowHandler(mimeType);
-                count += rowHandler.delete(mActiveDb.get(), mTransactionContext.get(), c);
-                if (!callerIsSyncAdapter) {
-                    mTransactionContext.get().markRawContactDirty(rawContactId);
-                }
+                count += rowHandler.delete(db, mTransactionContext.get(), c);
+                mTransactionContext.get().markRawContactDirtyAndChanged(rawContactId,
+                        callerIsSyncAdapter);
             }
         } finally {
             c.close();
@@ -2847,6 +2969,8 @@ public class ContactsProvider2 extends AbstractContactsProvider
      */
     public int deleteData(long dataId, String[] allowedMimeTypes) {
 
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
+
         // Note that the query will return data according to the access restrictions,
         // so we don't need to worry about deleting data we don't have permission to read.
         mSelectionArgs1[0] = String.valueOf(dataId);
@@ -2872,7 +2996,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                         + Lists.newArrayList(allowedMimeTypes));
             }
             DataRowHandler rowHandler = getDataRowHandler(mimeType);
-            return rowHandler.delete(mActiveDb.get(), mTransactionContext.get(), c);
+            return rowHandler.delete(db, mTransactionContext.get(), c);
         } finally {
             c.close();
         }
@@ -2907,12 +3031,14 @@ public class ContactsProvider2 extends AbstractContactsProvider
             mValues.put(Groups.DIRTY, 1);
         }
 
-        long result = mActiveDb.get().insert(Tables.GROUPS, Groups.TITLE, mValues);
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
+
+        long result = db.insert(Tables.GROUPS, Groups.TITLE, mValues);
 
         if (!callerIsSyncAdapter && isFavoritesGroup) {
             // If the inserted group is a favorite group, add all starred raw contacts to it.
             mSelectionArgs1[0] = Long.toString(accountId);
-            Cursor c = mActiveDb.get().query(Tables.RAW_CONTACTS,
+            Cursor c = db.query(Tables.RAW_CONTACTS,
                     new String[]{RawContacts._ID, RawContacts.STARRED},
                     RawContactsColumns.CONCRETE_ACCOUNT_ID + "=?", mSelectionArgs1,
                     null, null, null);
@@ -2921,7 +3047,8 @@ public class ContactsProvider2 extends AbstractContactsProvider
                     if (c.getLong(1) != 0) {
                         final long rawContactId = c.getLong(0);
                         insertDataGroupMembership(rawContactId, result);
-                        mTransactionContext.get().markRawContactDirty(rawContactId);
+                        mTransactionContext.get().markRawContactDirtyAndChanged(rawContactId,
+                                callerIsSyncAdapter);
                     }
                 }
             } finally {
@@ -2975,8 +3102,10 @@ public class ContactsProvider2 extends AbstractContactsProvider
             c.close();
         }
 
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
+
         // If we didn't find a duplicate, we're fine to insert.
-        final long id = mActiveDb.get().insert(Tables.SETTINGS, null, values);
+        final long id = db.insert(Tables.SETTINGS, null, values);
 
         if (values.containsKey(Settings.UNGROUPED_VISIBLE)) {
             mVisibleTouched = true;
@@ -2993,6 +3122,8 @@ public class ContactsProvider2 extends AbstractContactsProvider
         final Integer protocol = values.getAsInteger(StatusUpdates.PROTOCOL);
         String customProtocol = null;
 
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
+
         if (protocol != null && protocol == Im.PROTOCOL_CUSTOM) {
             customProtocol = values.getAsString(StatusUpdates.CUSTOM_PROTOCOL);
             if (TextUtils.isEmpty(customProtocol)) {
@@ -3068,7 +3199,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
 
         Cursor cursor = null;
         try {
-            cursor = mActiveDb.get().query(DataContactsQuery.TABLE, DataContactsQuery.PROJECTION,
+            cursor = db.query(DataContactsQuery.TABLE, DataContactsQuery.PROJECTION,
                     mSb.toString(), mSelectionArgs.toArray(EMPTY_STRING_ARRAY), null, null,
                     Clauses.CONTACT_VISIBLE + " DESC, " + Data.RAW_CONTACT_ID);
             if (cursor.moveToFirst()) {
@@ -3110,7 +3241,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                     values.getAsString(StatusUpdates.CHAT_CAPABILITY));
 
             // Insert the presence update
-            mActiveDb.get().replace(Tables.PRESENCE, null, mValues);
+            db.replace(Tables.PRESENCE, null, mValues);
         }
 
 
@@ -3237,10 +3368,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                     "  selection=[" + selection + "]  args=" + Arrays.toString(selectionArgs));
         }
 
-        // Default active DB to the contacts DB if none has been set.
-        if (mActiveDb.get() == null) {
-            mActiveDb.set(mContactsHelper.getWritableDatabase());
-        }
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
 
         flushTransactionalChanges();
         final boolean callerIsSyncAdapter =
@@ -3249,14 +3377,14 @@ public class ContactsProvider2 extends AbstractContactsProvider
         switch (match) {
             case SYNCSTATE:
             case PROFILE_SYNCSTATE:
-                return mDbHelper.get().getSyncState().delete(mActiveDb.get(), selection,
+                return mDbHelper.get().getSyncState().delete(db, selection,
                         selectionArgs);
 
             case SYNCSTATE_ID: {
                 String selectionWithId =
                         (SyncStateContract.Columns._ID + "=" + ContentUris.parseId(uri) + " ")
                         + (selection == null ? "" : " AND (" + selection + ")");
-                return mDbHelper.get().getSyncState().delete(mActiveDb.get(), selectionWithId,
+                return mDbHelper.get().getSyncState().delete(db, selectionWithId,
                         selectionArgs);
             }
 
@@ -3264,7 +3392,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                 String selectionWithId =
                         (SyncStateContract.Columns._ID + "=" + ContentUris.parseId(uri) + " ")
                         + (selection == null ? "" : " AND (" + selection + ")");
-                return mProfileHelper.getSyncState().delete(mActiveDb.get(), selectionWithId,
+                return mProfileHelper.getSyncState().delete(db, selectionWithId,
                         selectionArgs);
             }
 
@@ -3289,7 +3417,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                             "Missing a lookup key", uri));
                 }
                 final String lookupKey = pathSegments.get(2);
-                final long contactId = lookupContactIdByLookupKey(mActiveDb.get(), lookupKey);
+                final long contactId = lookupContactIdByLookupKey(db, lookupKey);
                 return deleteContact(contactId, callerIsSyncAdapter);
             }
 
@@ -3311,7 +3439,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                 args[0] = String.valueOf(contactId);
                 args[1] = Uri.encode(lookupKey);
                 lookupQb.appendWhere(Contacts._ID + "=? AND " + Contacts.LOOKUP_KEY + "=?");
-                Cursor c = query(mActiveDb.get(), lookupQb, null, selection, args, null, null,
+                Cursor c = query(db, lookupQb, null, selection, args, null, null,
                         null, null, null);
                 try {
                     if (c.getCount() == 1) {
@@ -3335,7 +3463,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
             case PROFILE_RAW_CONTACTS: {
                 invalidateFastScrollingIndexCache();
                 int numDeletes = 0;
-                Cursor c = mActiveDb.get().query(Views.RAW_CONTACTS,
+                Cursor c = db.query(Views.RAW_CONTACTS,
                         new String[]{RawContacts._ID, RawContacts.CONTACT_ID},
                         appendAccountIdToSelection(uri, selection), selectionArgs,
                         null, null, null);
@@ -3388,7 +3516,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
 
             case GROUPS: {
                 int numDeletes = 0;
-                Cursor c = mActiveDb.get().query(Views.GROUPS, Projections.ID,
+                Cursor c = db.query(Views.GROUPS, Projections.ID,
                         appendAccountIdToSelection(uri, selection), selectionArgs,
                         null, null, null);
                 try {
@@ -3464,21 +3592,22 @@ public class ContactsProvider2 extends AbstractContactsProvider
     }
 
     public int deleteGroup(Uri uri, long groupId, boolean callerIsSyncAdapter) {
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
         mGroupIdCache.clear();
         final long groupMembershipMimetypeId = mDbHelper.get()
                 .getMimeTypeId(GroupMembership.CONTENT_ITEM_TYPE);
-        mActiveDb.get().delete(Tables.DATA, DataColumns.MIMETYPE_ID + "="
+        db.delete(Tables.DATA, DataColumns.MIMETYPE_ID + "="
                 + groupMembershipMimetypeId + " AND " + GroupMembership.GROUP_ROW_ID + "="
                 + groupId, null);
 
         try {
             if (callerIsSyncAdapter) {
-                return mActiveDb.get().delete(Tables.GROUPS, Groups._ID + "=" + groupId, null);
+                return db.delete(Tables.GROUPS, Groups._ID + "=" + groupId, null);
             } else {
                 mValues.clear();
                 mValues.put(Groups.DELETED, 1);
                 mValues.put(Groups.DIRTY, 1);
-                return mActiveDb.get().update(Tables.GROUPS, mValues, Groups._ID + "=" + groupId,
+                return db.update(Tables.GROUPS, mValues, Groups._ID + "=" + groupId,
                         null);
             }
         } finally {
@@ -3487,20 +3616,22 @@ public class ContactsProvider2 extends AbstractContactsProvider
     }
 
     private int deleteSettings(Uri uri, String selection, String[] selectionArgs) {
-        final int count = mActiveDb.get().delete(Tables.SETTINGS, selection, selectionArgs);
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
+        final int count = db.delete(Tables.SETTINGS, selection, selectionArgs);
         mVisibleTouched = true;
         return count;
     }
 
     private int deleteContact(long contactId, boolean callerIsSyncAdapter) {
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
         mSelectionArgs1[0] = Long.toString(contactId);
-        Cursor c = mActiveDb.get().query(Tables.RAW_CONTACTS, new String[]{RawContacts._ID},
+        Cursor c = db.query(Tables.RAW_CONTACTS, new String[]{RawContacts._ID},
                 RawContacts.CONTACT_ID + "=?", mSelectionArgs1,
                 null, null, null);
         try {
             while (c.moveToNext()) {
                 long rawContactId = c.getLong(0);
-                markRawContactAsDeleted(rawContactId, callerIsSyncAdapter);
+                markRawContactAsDeleted(db, rawContactId, callerIsSyncAdapter);
             }
         } finally {
             c.close();
@@ -3508,36 +3639,50 @@ public class ContactsProvider2 extends AbstractContactsProvider
 
         mProviderStatusUpdateNeeded = true;
 
-        return mActiveDb.get().delete(Tables.CONTACTS, Contacts._ID + "=" + contactId, null);
+        int result = ContactsTableUtil.deleteContact(db, contactId);
+        scheduleBackgroundTask(BACKGROUND_TASK_CLEAN_DELETE_LOG);
+        return result;
     }
 
     public int deleteRawContact(long rawContactId, long contactId, boolean callerIsSyncAdapter) {
         mAggregator.get().invalidateAggregationExceptionCache();
         mProviderStatusUpdateNeeded = true;
 
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
+
         // Find and delete stream items associated with the raw contact.
-        Cursor c = mActiveDb.get().query(Tables.STREAM_ITEMS,
+        Cursor c = db.query(Tables.STREAM_ITEMS,
                 new String[]{StreamItems._ID},
                 StreamItems.RAW_CONTACT_ID + "=?", new String[]{String.valueOf(rawContactId)},
                 null, null, null);
         try {
             while (c.moveToNext()) {
-                deleteStreamItem(c.getLong(0));
+                deleteStreamItem(db, c.getLong(0));
             }
         } finally {
             c.close();
         }
 
         if (callerIsSyncAdapter || rawContactIsLocal(rawContactId)) {
-            mActiveDb.get().delete(Tables.PRESENCE,
+
+            // When a raw contact is deleted, a sqlite trigger deletes the parent contact.
+            // TODO: all contact deletes was consolidated into ContactTableUtil but this one can't
+            // because it's in a trigger.  Consider removing trigger and replacing with java code.
+            // This has to happen before the raw contact is deleted since it relies on the number
+            // of raw contacts.
+            ContactsTableUtil.deleteContactIfSingleton(db, rawContactId);
+
+            db.delete(Tables.PRESENCE,
                     PresenceColumns.RAW_CONTACT_ID + "=" + rawContactId, null);
-            int count = mActiveDb.get().delete(Tables.RAW_CONTACTS,
+            int count = db.delete(Tables.RAW_CONTACTS,
                     RawContacts._ID + "=" + rawContactId, null);
+
             mAggregator.get().updateAggregateData(mTransactionContext.get(), contactId);
+            mTransactionContext.get().markRawContactChangedOrDeletedOrInserted(rawContactId);
             return count;
         } else {
-            mDbHelper.get().removeContactIfSingleton(rawContactId);
-            return markRawContactAsDeleted(rawContactId, callerIsSyncAdapter);
+            ContactsTableUtil.deleteContactIfSingleton(db, rawContactId);
+            return markRawContactAsDeleted(db, rawContactId, callerIsSyncAdapter);
         }
     }
 
@@ -3545,7 +3690,8 @@ public class ContactsProvider2 extends AbstractContactsProvider
      * Returns whether the given raw contact ID is local (i.e. has no account associated with it).
      */
     private boolean rawContactIsLocal(long rawContactId) {
-        Cursor c = mActiveDb.get().query(Tables.RAW_CONTACTS, Projections.LITERAL_ONE,
+        final SQLiteDatabase db = mDbHelper.get().getReadableDatabase();
+        Cursor c = db.query(Tables.RAW_CONTACTS, Projections.LITERAL_ONE,
                 RawContactsColumns.CONCRETE_ID + "=? AND " +
                 RawContactsColumns.ACCOUNT_ID + "=" + Clauses.LOCAL_ACCOUNT_ID,
                 new String[] {String.valueOf(rawContactId)}, null, null, null);
@@ -3562,20 +3708,22 @@ public class ContactsProvider2 extends AbstractContactsProvider
       if (VERBOSE_LOGGING) {
           Log.v(TAG, "deleting data from status_updates for " + selection);
       }
-      mActiveDb.get().delete(Tables.STATUS_UPDATES, getWhereClauseForStatusUpdatesTable(selection),
+      final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
+      db.delete(Tables.STATUS_UPDATES, getWhereClauseForStatusUpdatesTable(selection),
           selectionArgs);
-      return mActiveDb.get().delete(Tables.PRESENCE, selection, selectionArgs);
+      return db.delete(Tables.PRESENCE, selection, selectionArgs);
     }
 
     private int deleteStreamItems(Uri uri, ContentValues values, String selection,
             String[] selectionArgs) {
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
         int count = 0;
-        final Cursor c = mActiveDb.get().query(Views.STREAM_ITEMS, Projections.ID,
+        final Cursor c = db.query(Views.STREAM_ITEMS, Projections.ID,
                 selection, selectionArgs, null, null, null);
         try {
             c.moveToPosition(-1);
             while (c.moveToNext()) {
-                count += deleteStreamItem(c.getLong(0));
+                count += deleteStreamItem(db, c.getLong(0));
             }
         } finally {
             c.close();
@@ -3583,25 +3731,28 @@ public class ContactsProvider2 extends AbstractContactsProvider
         return count;
     }
 
-    private int deleteStreamItem(long streamItemId) {
+    private int deleteStreamItem(SQLiteDatabase db, long streamItemId) {
         deleteStreamItemPhotos(streamItemId);
-        return mActiveDb.get().delete(Tables.STREAM_ITEMS, StreamItems._ID + "=?",
+        return db.delete(Tables.STREAM_ITEMS, StreamItems._ID + "=?",
                 new String[]{String.valueOf(streamItemId)});
     }
 
     private int deleteStreamItemPhotos(Uri uri, ContentValues values, String selection,
             String[] selectionArgs) {
-        return mActiveDb.get().delete(Tables.STREAM_ITEM_PHOTOS, selection, selectionArgs);
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
+        return db.delete(Tables.STREAM_ITEM_PHOTOS, selection, selectionArgs);
     }
 
     private int deleteStreamItemPhotos(long streamItemId) {
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
         // Note that this does not enforce the modifying account.
-        return mActiveDb.get().delete(Tables.STREAM_ITEM_PHOTOS,
+        return db.delete(Tables.STREAM_ITEM_PHOTOS,
                 StreamItemPhotos.STREAM_ITEM_ID + "=?",
                 new String[]{String.valueOf(streamItemId)});
     }
 
-    private int markRawContactAsDeleted(long rawContactId, boolean callerIsSyncAdapter) {
+    private int markRawContactAsDeleted(SQLiteDatabase db, long rawContactId,
+            boolean callerIsSyncAdapter) {
         mSyncToNetwork = true;
 
         mValues.clear();
@@ -3610,11 +3761,11 @@ public class ContactsProvider2 extends AbstractContactsProvider
         mValues.put(RawContactsColumns.AGGREGATION_NEEDED, 1);
         mValues.putNull(RawContacts.CONTACT_ID);
         mValues.put(RawContacts.DIRTY, 1);
-        return updateRawContact(rawContactId, mValues, callerIsSyncAdapter);
+        return updateRawContact(db, rawContactId, mValues, callerIsSyncAdapter);
     }
 
     private int deleteDataUsage() {
-        final SQLiteDatabase db = mActiveDb.get();
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
         db.execSQL("UPDATE " + Tables.RAW_CONTACTS + " SET " +
                 Contacts.TIMES_CONTACTED + "=0," +
                 Contacts.LAST_TIME_CONTACTED + "=NULL"
@@ -3637,10 +3788,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                     "  values=[" + values + "]");
         }
 
-        // Default active DB to the contacts DB if none has been set.
-        if (mActiveDb.get() == null) {
-            mActiveDb.set(mContactsHelper.getWritableDatabase());
-        }
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
 
         int count = 0;
 
@@ -3657,7 +3805,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
         switch(match) {
             case SYNCSTATE:
             case PROFILE_SYNCSTATE:
-                return mDbHelper.get().getSyncState().update(mActiveDb.get(), values,
+                return mDbHelper.get().getSyncState().update(db, values,
                         appendAccountToSelection(uri, selection), selectionArgs);
 
             case SYNCSTATE_ID: {
@@ -3665,7 +3813,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                 String selectionWithId =
                         (SyncStateContract.Columns._ID + "=" + ContentUris.parseId(uri) + " ")
                         + (selection == null ? "" : " AND (" + selection + ")");
-                return mDbHelper.get().getSyncState().update(mActiveDb.get(), values,
+                return mDbHelper.get().getSyncState().update(db, values,
                         selectionWithId, selectionArgs);
             }
 
@@ -3674,7 +3822,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                 String selectionWithId =
                         (SyncStateContract.Columns._ID + "=" + ContentUris.parseId(uri) + " ")
                         + (selection == null ? "" : " AND (" + selection + ")");
-                return mProfileHelper.getSyncState().update(mActiveDb.get(), values,
+                return mProfileHelper.getSyncState().update(db, values,
                         selectionWithId, selectionArgs);
             }
 
@@ -3687,7 +3835,8 @@ public class ContactsProvider2 extends AbstractContactsProvider
 
             case CONTACTS_ID: {
                 invalidateFastScrollingIndexCache();
-                count = updateContactOptions(ContentUris.parseId(uri), values, callerIsSyncAdapter);
+                count = updateContactOptions(db, ContentUris.parseId(uri), values,
+                        callerIsSyncAdapter);
                 break;
             }
 
@@ -3701,8 +3850,8 @@ public class ContactsProvider2 extends AbstractContactsProvider
                             "Missing a lookup key", uri));
                 }
                 final String lookupKey = pathSegments.get(2);
-                final long contactId = lookupContactIdByLookupKey(mActiveDb.get(), lookupKey);
-                count = updateContactOptions(contactId, values, callerIsSyncAdapter);
+                final long contactId = lookupContactIdByLookupKey(db, lookupKey);
+                count = updateContactOptions(db, contactId, values, callerIsSyncAdapter);
                 break;
             }
 
@@ -3790,7 +3939,8 @@ public class ContactsProvider2 extends AbstractContactsProvider
             }
 
             case AGGREGATION_EXCEPTIONS: {
-                count = updateAggregationException(mActiveDb.get(), values);
+                count = updateAggregationException(db, values);
+                invalidateFastScrollingIndexCache();
                 break;
             }
 
@@ -3875,12 +4025,13 @@ public class ContactsProvider2 extends AbstractContactsProvider
 
     private int updateStatusUpdate(Uri uri, ContentValues values, String selection,
         String[] selectionArgs) {
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
         // update status_updates table, if status is provided
         // TODO should account type/name be appended to the where clause?
         int updateCount = 0;
         ContentValues settableValues = getSettableColumnsForStatusUpdatesTable(values);
         if (settableValues.size() > 0) {
-          updateCount = mActiveDb.get().update(Tables.STATUS_UPDATES,
+          updateCount = db.update(Tables.STATUS_UPDATES,
                     settableValues,
                     getWhereClauseForStatusUpdatesTable(selection),
                     selectionArgs);
@@ -3889,7 +4040,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
         // now update the Presence table
         settableValues = getSettableColumnsForPresenceTable(values);
         if (settableValues.size() > 0) {
-          updateCount = mActiveDb.get().update(Tables.PRESENCE, settableValues,
+          updateCount = db.update(Tables.PRESENCE, settableValues,
                     selection, selectionArgs);
         }
         // TODO updateCount is not entirely a valid count of updated rows because 2 tables could
@@ -3906,8 +4057,10 @@ public class ContactsProvider2 extends AbstractContactsProvider
         values.remove(RawContacts.ACCOUNT_NAME);
         values.remove(RawContacts.ACCOUNT_TYPE);
 
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
+
         // If there's been no exception, the update should be fine.
-        return mActiveDb.get().update(Tables.STREAM_ITEMS, values, selection, selectionArgs);
+        return db.update(Tables.STREAM_ITEMS, values, selection, selectionArgs);
     }
 
     private int updateStreamItemPhotos(Uri uri, ContentValues values, String selection,
@@ -3920,10 +4073,12 @@ public class ContactsProvider2 extends AbstractContactsProvider
         values.remove(RawContacts.ACCOUNT_NAME);
         values.remove(RawContacts.ACCOUNT_TYPE);
 
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
+
         // Process the photo (since we're updating, it's valid for the photo to not be present).
         if (processStreamItemPhoto(values, true)) {
             // If there's been no exception, the update should be fine.
-            return mActiveDb.get().update(Tables.STREAM_ITEM_PHOTOS, values, selection,
+            return db.update(Tables.STREAM_ITEM_PHOTOS, values, selection,
                     selectionArgs);
         }
         return 0;
@@ -3983,7 +4138,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
             String[] selectionArgs, boolean callerIsSyncAdapter) {
         mGroupIdCache.clear();
 
-        final SQLiteDatabase db = mActiveDb.get();
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
         final ContactsDatabaseHelper dbHelper = mDbHelper.get();
 
         final ContentValues updatedValues = new ContentValues();
@@ -4068,7 +4223,8 @@ public class ContactsProvider2 extends AbstractContactsProvider
 
     private int updateSettings(Uri uri, ContentValues values, String selection,
             String[] selectionArgs) {
-        final int count = mActiveDb.get().update(Tables.SETTINGS, values, selection, selectionArgs);
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
+        final int count = db.update(Tables.SETTINGS, values, selection, selectionArgs);
         if (values.containsKey(Settings.UNGROUPED_VISIBLE)) {
             mVisibleTouched = true;
         }
@@ -4088,13 +4244,14 @@ public class ContactsProvider2 extends AbstractContactsProvider
         }
 
         int count = 0;
-        Cursor cursor = mActiveDb.get().query(Views.RAW_CONTACTS,
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
+        Cursor cursor = db.query(Views.RAW_CONTACTS,
                 Projections.ID, selection,
                 selectionArgs, null, null, null);
         try {
             while (cursor.moveToNext()) {
                 long rawContactId = cursor.getLong(0);
-                updateRawContact(rawContactId, values, callerIsSyncAdapter);
+                updateRawContact(db, rawContactId, values, callerIsSyncAdapter);
                 count++;
             }
         } finally {
@@ -4104,7 +4261,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
         return count;
     }
 
-    private int updateRawContact(long rawContactId, ContentValues values,
+    private int updateRawContact(SQLiteDatabase db, long rawContactId, ContentValues values,
             boolean callerIsSyncAdapter) {
         final String selection = RawContactsColumns.CONCRETE_ID + " = ?";
         mSelectionArgs1[0] = Long.toString(rawContactId);
@@ -4127,7 +4284,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
         String oldDataSet = null;
 
         if (requestUndoDelete || isAccountChanging) {
-            Cursor cursor = mActiveDb.get().query(RawContactsQuery.TABLE, RawContactsQuery.COLUMNS,
+            Cursor cursor = db.query(RawContactsQuery.TABLE, RawContactsQuery.COLUMNS,
                     selection, mSelectionArgs1, null, null, null);
             try {
                 if (cursor.moveToFirst()) {
@@ -4172,7 +4329,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                     ContactsContract.RawContacts.AGGREGATION_MODE_DEFAULT);
         }
 
-        int count = mActiveDb.get().update(Tables.RAW_CONTACTS, values, selection, mSelectionArgs1);
+        int count = db.update(Tables.RAW_CONTACTS, values, selection, mSelectionArgs1);
         if (count != 0) {
             if (values.containsKey(RawContacts.AGGREGATION_MODE)) {
                 int aggregationMode = values.getAsInteger(RawContacts.AGGREGATION_MODE);
@@ -4195,7 +4352,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                 // If it is starred, add a group membership, if one doesn't already exist
                 // otherwise delete any matching group memberships.
                 if (!callerIsSyncAdapter && isAccountChanging) {
-                    boolean starred = 0 != DatabaseUtils.longForQuery(mActiveDb.get(),
+                    boolean starred = 0 != DatabaseUtils.longForQuery(db,
                             SELECTION_STARRED_FROM_RAW_CONTACTS,
                             new String[]{Long.toString(rawContactId)});
                     updateFavoritesMembership(rawContactId, starred);
@@ -4209,7 +4366,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
             }
 
             if (values.containsKey(RawContacts.SOURCE_ID)) {
-                mAggregator.get().updateLookupKeyForRawContact(mActiveDb.get(), rawContactId);
+                mAggregator.get().updateLookupKeyForRawContact(db, rawContactId);
             }
             if (values.containsKey(RawContacts.NAME_VERIFIED)) {
 
@@ -4218,7 +4375,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                 if (values.getAsInteger(RawContacts.NAME_VERIFIED) != 0) {
                     mDbHelper.get().resetNameVerifiedForOtherRawContacts(rawContactId);
                 }
-                mAggregator.get().updateDisplayNameForRawContact(mActiveDb.get(), rawContactId);
+                mAggregator.get().updateDisplayNameForRawContact(db, rawContactId);
             }
             if (requestUndoDelete && previousDeleted == 1) {
                 // Note before the accounts refactoring, we used to use the *old* account here,
@@ -4227,6 +4384,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                 // and change accounts at the same time.)
                 mTransactionContext.get().rawContactInserted(rawContactId, accountId);
             }
+            mTransactionContext.get().markRawContactChangedOrDeletedOrInserted(rawContactId);
         }
         return count;
     }
@@ -4273,10 +4431,12 @@ public class ContactsProvider2 extends AbstractContactsProvider
             return 0;
         }
 
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
+
         final String mimeType = c.getString(DataRowHandler.DataUpdateQuery.MIMETYPE);
         DataRowHandler rowHandler = getDataRowHandler(mimeType);
         boolean updated =
-                rowHandler.update(mActiveDb.get(), mTransactionContext.get(), values, c,
+                rowHandler.update(db, mTransactionContext.get(), values, c,
                         callerIsSyncAdapter);
         if (Photo.CONTENT_ITEM_TYPE.equals(mimeType)) {
             scheduleBackgroundTask(BACKGROUND_TASK_CLEANUP_PHOTOS);
@@ -4287,13 +4447,15 @@ public class ContactsProvider2 extends AbstractContactsProvider
     private int updateContactOptions(ContentValues values, String selection,
             String[] selectionArgs, boolean callerIsSyncAdapter) {
         int count = 0;
-        Cursor cursor = mActiveDb.get().query(Views.CONTACTS,
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
+
+        Cursor cursor = db.query(Views.CONTACTS,
                 new String[] { Contacts._ID }, selection, selectionArgs, null, null, null);
         try {
             while (cursor.moveToNext()) {
                 long contactId = cursor.getLong(0);
 
-                updateContactOptions(contactId, values, callerIsSyncAdapter);
+                updateContactOptions(db, contactId, values, callerIsSyncAdapter);
                 count++;
             }
         } finally {
@@ -4303,7 +4465,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
         return count;
     }
 
-    private int updateContactOptions(long contactId, ContentValues values,
+    private int updateContactOptions(SQLiteDatabase db, long contactId, ContentValues values,
             boolean callerIsSyncAdapter) {
 
         mValues.clear();
@@ -4329,11 +4491,11 @@ public class ContactsProvider2 extends AbstractContactsProvider
         }
 
         mSelectionArgs1[0] = String.valueOf(contactId);
-        mActiveDb.get().update(Tables.RAW_CONTACTS, mValues, RawContacts.CONTACT_ID + "=?"
+        db.update(Tables.RAW_CONTACTS, mValues, RawContacts.CONTACT_ID + "=?"
                 + " AND " + RawContacts.RAW_CONTACT_IS_READ_ONLY + "=0", mSelectionArgs1);
 
         if (mValues.containsKey(RawContacts.STARRED) && !callerIsSyncAdapter) {
-            Cursor cursor = mActiveDb.get().query(Views.RAW_CONTACTS,
+            Cursor cursor = db.query(Views.RAW_CONTACTS,
                     new String[] { RawContacts._ID }, RawContacts.CONTACT_ID + "=?",
                     mSelectionArgs1, null, null, null);
             try {
@@ -4360,14 +4522,16 @@ public class ContactsProvider2 extends AbstractContactsProvider
                 values, Contacts.TIMES_CONTACTED);
         ContactsDatabaseHelper.copyLongValue(mValues, RawContacts.STARRED,
                 values, Contacts.STARRED);
+        mValues.put(Contacts.CONTACT_LAST_UPDATED_TIMESTAMP,
+                Clock.getInstance().currentTimeMillis());
 
-        int rslt = mActiveDb.get().update(Tables.CONTACTS, mValues, Contacts._ID + "=?",
+        int rslt = db.update(Tables.CONTACTS, mValues, Contacts._ID + "=?",
                 mSelectionArgs1);
 
         if (values.containsKey(Contacts.LAST_TIME_CONTACTED) &&
                 !values.containsKey(Contacts.TIMES_CONTACTED)) {
-            mActiveDb.get().execSQL(UPDATE_TIMES_CONTACTED_CONTACTS_TABLE, mSelectionArgs1);
-            mActiveDb.get().execSQL(UPDATE_TIMES_CONTACTED_RAWCONTACTS_TABLE, mSelectionArgs1);
+            db.execSQL(UPDATE_TIMES_CONTACTED_CONTACTS_TABLE, mSelectionArgs1);
+            db.execSQL(UPDATE_TIMES_CONTACTED_RAWCONTACTS_TABLE, mSelectionArgs1);
         }
         return rslt;
     }
@@ -4416,6 +4580,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
         return 1;
     }
 
+    @Override
     public void onAccountsUpdated(Account[] accounts) {
         scheduleBackgroundTask(BACKGROUND_TASK_UPDATE_ACCOUNTS);
     }
@@ -4499,12 +4664,19 @@ public class ContactsProvider2 extends AbstractContactsProvider
 
         final ContactsDatabaseHelper dbHelper = mDbHelper.get();
         final SQLiteDatabase db = dbHelper.getWritableDatabase();
-        mActiveDb.set(db);
         db.beginTransaction();
 
         // WARNING: This method can be run in either contacts mode or profile mode.  It is
         // absolutely imperative that no calls be made inside the following try block that can
-        // interact with the contacts DB.  Otherwise it is quite possible for a deadlock to occur.
+        // interact with a specific contacts or profile DB.  Otherwise it is quite possible for a
+        // deadlock to occur.  i.e. always use the current database in mDbHelper and do not access
+        // mContactsHelper or mProfileHelper directly.
+        //
+        // The problem may be a bit more subtle if you also access something that stores the current
+        // db instance in it's constructor.  updateSearchIndexInTransaction relies on the
+        // SearchIndexManager which upon construction, stores the current db. In this case,
+        // SearchIndexManager always contains the contact DB. This is why the
+        // updateSearchIndexInTransaction is protected with !isInProfileMode now.
         try {
             // First, remove stale rows from raw_contacts, groups, and related tables.
 
@@ -4529,8 +4701,9 @@ public class ContactsProvider2 extends AbstractContactsProvider
 
                     // getAccountIdOrNull() really shouldn't return null here, but just in case...
                     if (accountIdOrNull != null) {
+                        final String accountId = Long.toString(accountIdOrNull);
                         final String[] accountIdParams =
-                                new String[] {Long.toString(accountIdOrNull)};
+                                new String[] {accountId};
                         db.execSQL(
                                 "DELETE FROM " + Tables.GROUPS +
                                 " WHERE " + GroupsColumns.ACCOUNT_ID + " = ?",
@@ -4559,6 +4732,63 @@ public class ContactsProvider2 extends AbstractContactsProvider
                                         " FROM " + Tables.RAW_CONTACTS +
                                         " WHERE " + RawContactsColumns.ACCOUNT_ID + " = ?)",
                                         accountIdParams);
+
+                        // Delta api is only needed for regular contacts.
+                        if (!inProfileMode()) {
+                            // Contacts are deleted by a trigger on the raw_contacts table.
+                            // But we also need to insert the contact into the delete log.
+                            // This logic is being consolidated into the ContactsTableUtil.
+
+                            // deleteContactIfSingleton() does not work in this case because raw
+                            // contacts will be deleted in a single batch below.  Contacts with
+                            // multiple raw contacts in the same account will be missed.
+
+                            // Find all contacts that do not have raw contacts in other accounts.
+                            // These should be deleted.
+                            Cursor cursor = db.rawQuery(
+                                    "SELECT " + RawContactsColumns.CONCRETE_CONTACT_ID +
+                                            " FROM " + Tables.RAW_CONTACTS +
+                                            " WHERE " + RawContactsColumns.ACCOUNT_ID + " = ?1" +
+                                            " AND " + RawContactsColumns.CONCRETE_CONTACT_ID +
+                                            " NOT IN (" +
+                                            "    SELECT " + RawContactsColumns.CONCRETE_CONTACT_ID +
+                                            "    FROM " + Tables.RAW_CONTACTS +
+                                            "    WHERE " + RawContactsColumns.ACCOUNT_ID + " != ?1"
+                                            + ")", accountIdParams);
+                            try {
+                                while (cursor.moveToNext()) {
+                                    final long contactId = cursor.getLong(0);
+                                    ContactsTableUtil.deleteContact(db, contactId);
+                                }
+                            } finally {
+                                MoreCloseables.closeQuietly(cursor);
+                            }
+
+                            // If the contact was not deleted, it's last updated timestamp needs to
+                            // be refreshed since one of it's raw contacts got removed.
+                            // Find all contacts that will not be deleted (i.e. contacts with
+                            // raw contacts in other accounts)
+                            cursor = db.rawQuery(
+                                    "SELECT DISTINCT " + RawContactsColumns.CONCRETE_CONTACT_ID +
+                                            " FROM " + Tables.RAW_CONTACTS +
+                                            " WHERE " + RawContactsColumns.ACCOUNT_ID + " = ?1" +
+                                            " AND " + RawContactsColumns.CONCRETE_CONTACT_ID +
+                                            " IN (" +
+                                            "    SELECT " + RawContactsColumns.CONCRETE_CONTACT_ID +
+                                            "    FROM " + Tables.RAW_CONTACTS +
+                                            "    WHERE " + RawContactsColumns.ACCOUNT_ID + " != ?1"
+                                            + ")", accountIdParams);
+                            try {
+                                while (cursor.moveToNext()) {
+                                    final long contactId = cursor.getLong(0);
+                                    ContactsTableUtil.updateContactLastUpdateByContactId(db,
+                                            contactId);
+                                }
+                            } finally {
+                                MoreCloseables.closeQuietly(cursor);
+                            }
+                        }
+
                         db.execSQL(
                                 "DELETE FROM " + Tables.RAW_CONTACTS +
                                 " WHERE " + RawContactsColumns.ACCOUNT_ID + " = ?",
@@ -4716,7 +4946,6 @@ public class ContactsProvider2 extends AbstractContactsProvider
 
         // Otherwise proceed with a normal query against the contacts DB.
         switchToContactMode();
-        mActiveDb.set(mContactsHelper.getReadableDatabase());
         String directory = getQueryParameter(uri, ContactsContract.DIRECTORY_PARAM_KEY);
         if (directory == null) {
             return addSnippetExtrasToCursor(uri,
@@ -4868,10 +5097,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
             String[] selectionArgs, String sortOrder, final long directoryId,
             final CancellationSignal cancellationSignal) {
 
-        // Default active DB to the contacts DB if none has been set.
-        if (mActiveDb.get() == null) {
-            mActiveDb.set(mContactsHelper.getReadableDatabase());
-        }
+        final SQLiteDatabase db = mDbHelper.get().getReadableDatabase();
 
         SQLiteQueryBuilder qb = new SQLiteQueryBuilder();
         String groupBy = null;
@@ -4886,7 +5112,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
         switch (match) {
             case SYNCSTATE:
             case PROFILE_SYNCSTATE:
-                return mDbHelper.get().getSyncState().query(mActiveDb.get(), projection, selection,
+                return mDbHelper.get().getSyncState().query(db, projection, selection,
                         selectionArgs, sortOrder);
 
             case CONTACTS: {
@@ -4918,7 +5144,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                     SQLiteQueryBuilder lookupQb = new SQLiteQueryBuilder();
                     setTablesAndProjectionMapForContacts(lookupQb, uri, projection);
 
-                    Cursor c = queryWithContactIdAndLookupKey(lookupQb, mActiveDb.get(), uri,
+                    Cursor c = queryWithContactIdAndLookupKey(lookupQb, db, uri,
                             projection, selection, selectionArgs, sortOrder, groupBy, limit,
                             Contacts._ID, contactId, Contacts.LOOKUP_KEY, lookupKey,
                             cancellationSignal);
@@ -4929,7 +5155,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
 
                 setTablesAndProjectionMapForContacts(qb, uri, projection);
                 selectionArgs = insertSelectionArg(selectionArgs,
-                        String.valueOf(lookupContactIdByLookupKey(mActiveDb.get(), lookupKey)));
+                        String.valueOf(lookupContactIdByLookupKey(db, lookupKey)));
                 qb.appendWhere(Contacts._ID + "=?");
                 break;
             }
@@ -4953,7 +5179,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                         lookupQb.appendWhere(" AND " + Data._ID + "=" + Contacts.PHOTO_ID);
                     }
                     lookupQb.appendWhere(" AND ");
-                    Cursor c = queryWithContactIdAndLookupKey(lookupQb, mActiveDb.get(), uri,
+                    Cursor c = queryWithContactIdAndLookupKey(lookupQb, db, uri,
                             projection, selection, selectionArgs, sortOrder, groupBy, limit,
                             Data.CONTACT_ID, contactId, Data.LOOKUP_KEY, lookupKey,
                             cancellationSignal);
@@ -4965,7 +5191,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                 }
 
                 setTablesAndProjectionMapForData(qb, uri, projection, false);
-                long contactId = lookupContactIdByLookupKey(mActiveDb.get(), lookupKey);
+                long contactId = lookupContactIdByLookupKey(db, lookupKey);
                 selectionArgs = insertSelectionArg(selectionArgs,
                         String.valueOf(contactId));
                 if (match == CONTACTS_LOOKUP_PHOTO || match == CONTACTS_LOOKUP_ID_PHOTO) {
@@ -4996,7 +5222,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                     long contactId = Long.parseLong(pathSegments.get(3));
                     SQLiteQueryBuilder lookupQb = new SQLiteQueryBuilder();
                     setTablesAndProjectionMapForStreamItems(lookupQb);
-                    Cursor c = queryWithContactIdAndLookupKey(lookupQb, mActiveDb.get(), uri,
+                    Cursor c = queryWithContactIdAndLookupKey(lookupQb, db, uri,
                             projection, selection, selectionArgs, sortOrder, groupBy, limit,
                             StreamItems.CONTACT_ID, contactId,
                             StreamItems.CONTACT_LOOKUP_KEY, lookupKey,
@@ -5007,7 +5233,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                 }
 
                 setTablesAndProjectionMapForStreamItems(qb);
-                long contactId = lookupContactIdByLookupKey(mActiveDb.get(), lookupKey);
+                long contactId = lookupContactIdByLookupKey(db, lookupKey);
                 selectionArgs = insertSelectionArg(selectionArgs, String.valueOf(contactId));
                 qb.appendWhere(RawContacts.CONTACT_ID + "=?");
                 break;
@@ -5015,7 +5241,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
 
             case CONTACTS_AS_VCARD: {
                 final String lookupKey = Uri.encode(uri.getPathSegments().get(2));
-                long contactId = lookupContactIdByLookupKey(mActiveDb.get(), lookupKey);
+                long contactId = lookupContactIdByLookupKey(db, lookupKey);
                 qb.setTables(Views.CONTACTS);
                 qb.setProjectionMap(sContactsVCardProjectionMap);
                 selectionArgs = insertSelectionArg(selectionArgs,
@@ -5025,9 +5251,9 @@ public class ContactsProvider2 extends AbstractContactsProvider
             }
 
             case CONTACTS_AS_MULTI_VCARD: {
-                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd_HHmmss");
+                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.US);
                 String currentDateString = dateFormat.format(new Date()).toString();
-                return mActiveDb.get().rawQuery(
+                return db.rawQuery(
                     "SELECT" +
                     " 'vcards_' || ? || '.vcf' AS " + OpenableColumns.DISPLAY_NAME + "," +
                     " NULL AS " + OpenableColumns.SIZE,
@@ -5173,7 +5399,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                     System.arraycopy(selectionArgs, 0, doubledSelectionArgs, length, length);
                 }
 
-                Cursor cursor = mActiveDb.get().rawQuery(unionQuery, doubledSelectionArgs);
+                Cursor cursor = db.rawQuery(unionQuery, doubledSelectionArgs);
                 if (cursor != null) {
                     cursor.setNotificationUri(getContext().getContentResolver(),
                             ContactsContract.AUTHORITY_URI);
@@ -5262,7 +5488,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                     setTablesAndProjectionMapForEntities(lookupQb, uri, projection);
                     lookupQb.appendWhere(" AND ");
 
-                    Cursor c = queryWithContactIdAndLookupKey(lookupQb, mActiveDb.get(), uri,
+                    Cursor c = queryWithContactIdAndLookupKey(lookupQb, db, uri,
                             projection, selection, selectionArgs, sortOrder, groupBy, limit,
                             Contacts.Entity.CONTACT_ID, contactId,
                             Contacts.Entity.LOOKUP_KEY, lookupKey,
@@ -5274,7 +5500,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
 
                 setTablesAndProjectionMapForEntities(qb, uri, projection);
                 selectionArgs = insertSelectionArg(selectionArgs,
-                        String.valueOf(lookupContactIdByLookupKey(mActiveDb.get(), lookupKey)));
+                        String.valueOf(lookupContactIdByLookupKey(db, lookupKey)));
                 qb.appendWhere(" AND " + Contacts.Entity.CONTACT_ID + "=?");
                 break;
             }
@@ -5411,7 +5637,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                     final String ftsMatchQuery =
                             searchDisplayName
                             ? SearchIndexManager.getFtsMatchQuery(filterParam,
-                                    FtsQueryBuilder.UNSCOPED_NORMALIZING)
+                                    FtsQueryBuilder.SCOPED_NAME_NORMALIZING)
                             : null;
                     if (!TextUtils.isEmpty(ftsMatchQuery)) {
                         sb.append(Data.RAW_CONTACT_ID + " IN " +
@@ -5420,7 +5646,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                                 " JOIN " + Tables.RAW_CONTACTS +
                                 " ON (" + Tables.SEARCH_INDEX + "." + SearchIndexColumns.CONTACT_ID
                                         + "=" + RawContactsColumns.CONCRETE_CONTACT_ID + ")" +
-                                " WHERE " + SearchIndexColumns.NAME + " MATCH '");
+                                " WHERE " + Tables.SEARCH_INDEX + " MATCH '");
                         sb.append(ftsMatchQuery);
                         sb.append("')");
                         hasCondition = true;
@@ -5593,10 +5819,132 @@ public class ContactsProvider2 extends AbstractContactsProvider
                     } else {
                         sortOrder = EMAIL_FILTER_SORT_ORDER;
                     }
+
+                    final String primaryAccountName =
+                            uri.getQueryParameter(ContactsContract.PRIMARY_ACCOUNT_NAME);
+                    if (!TextUtils.isEmpty(primaryAccountName)) {
+                        final int index = primaryAccountName.indexOf('@');
+                        if (index != -1) {
+                            // Purposely include '@' in matching.
+                            final String domain = primaryAccountName.substring(index);
+                            final char escapeChar = '\\';
+
+                            final StringBuilder likeValue = new StringBuilder();
+                            likeValue.append('%');
+                            DbQueryUtils.escapeLikeValue(likeValue, domain, escapeChar);
+                            selectionArgs = appendSelectionArg(selectionArgs, likeValue.toString());
+
+                            // similar email domains is the last sort preference.
+                            sortOrder += ", (CASE WHEN " + Data.DATA1 + " like ? ESCAPE '" +
+                                    escapeChar + "' THEN 0 ELSE 1 END)";
+                        }
+                    }
                 }
                 break;
             }
 
+            case CONTACTABLES:
+            case CONTACTABLES_FILTER: {
+                setTablesAndProjectionMapForData(qb, uri, projection, false);
+
+                String filterParam = null;
+
+                final int uriPathSize = uri.getPathSegments().size();
+                if (uriPathSize > 3) {
+                    filterParam = uri.getLastPathSegment();
+                    if (TextUtils.isEmpty(filterParam)) {
+                        filterParam = null;
+                    }
+                }
+
+                // CONTACTABLES_FILTER but no query provided, return an empty cursor
+                if (uriPathSize > 2 && filterParam == null) {
+                    qb.appendWhere(" AND 0");
+                    break;
+                }
+
+                if (uri.getBooleanQueryParameter(Contactables.VISIBLE_CONTACTS_ONLY, false)) {
+                    qb.appendWhere(" AND " + Data.CONTACT_ID + " in " +
+                            Tables.DEFAULT_DIRECTORY);
+                    }
+
+                final StringBuilder sb = new StringBuilder();
+
+                // we only want data items that are either email addresses or phone numbers
+                sb.append(" AND (");
+                sb.append(DataColumns.MIMETYPE_ID + " IN (");
+                sb.append(mDbHelper.get().getMimeTypeIdForEmail());
+                sb.append(",");
+                sb.append(mDbHelper.get().getMimeTypeIdForPhone());
+                sb.append("))");
+
+                // Rest of the query is only relevant if we are handling CONTACTABLES_FILTER
+                if (uriPathSize < 3) {
+                    qb.appendWhere(sb);
+                    break;
+                }
+
+                // but we want all the email addresses and phone numbers that belong to
+                // all contacts that have any data items (or name) that match the query
+                sb.append(" AND ");
+                sb.append("(" + Data.CONTACT_ID + " IN (");
+
+                // All contacts where the email address data1 column matches the query
+                sb.append(
+                        "SELECT " + RawContacts.CONTACT_ID +
+                        " FROM " + Tables.DATA + " JOIN " + Tables.RAW_CONTACTS +
+                        " ON " + Tables.DATA + "." + Data.RAW_CONTACT_ID + "=" +
+                        Tables.RAW_CONTACTS + "." + RawContacts._ID +
+                        " WHERE (" + DataColumns.MIMETYPE_ID + "=");
+                sb.append(mDbHelper.get().getMimeTypeIdForEmail());
+
+                sb.append(" AND " + Data.DATA1 + " LIKE ");
+                DatabaseUtils.appendEscapedSQLString(sb, filterParam + '%');
+                sb.append(")");
+
+                // All contacts where the phone number matches the query (determined by checking
+                // Tables.PHONE_LOOKUP
+                final String number = PhoneNumberUtils.normalizeNumber(filterParam);
+                if (!TextUtils.isEmpty(number)) {
+                    sb.append("UNION SELECT DISTINCT " + RawContacts.CONTACT_ID +
+                            " FROM " + Tables.PHONE_LOOKUP + " JOIN " + Tables.RAW_CONTACTS +
+                            " ON (" + Tables.PHONE_LOOKUP + "." +
+                            PhoneLookupColumns.RAW_CONTACT_ID + "=" +
+                            Tables.RAW_CONTACTS + "." + RawContacts._ID + ")" +
+                            " WHERE " + PhoneLookupColumns.NORMALIZED_NUMBER + " LIKE '");
+                    sb.append(number);
+                    sb.append("%'");
+                }
+
+                // All contacts where the name matches the query (determined by checking
+                // Tables.SEARCH_INDEX
+                sb.append(
+                        " UNION SELECT " + Data.CONTACT_ID +
+                        " FROM " + Tables.DATA + " JOIN " + Tables.RAW_CONTACTS +
+                        " ON " + Tables.DATA + "." + Data.RAW_CONTACT_ID + "=" +
+                        Tables.RAW_CONTACTS + "." + RawContacts._ID +
+
+                        " WHERE " + Data.RAW_CONTACT_ID + " IN " +
+
+                        "(SELECT " + RawContactsColumns.CONCRETE_ID +
+                        " FROM " + Tables.SEARCH_INDEX +
+                        " JOIN " + Tables.RAW_CONTACTS +
+                        " ON (" + Tables.SEARCH_INDEX + "." + SearchIndexColumns.CONTACT_ID
+                        + "=" + RawContactsColumns.CONCRETE_CONTACT_ID + ")" +
+
+                        " WHERE " + SearchIndexColumns.NAME + " MATCH '");
+
+                final String ftsMatchQuery = SearchIndexManager.getFtsMatchQuery(
+                        filterParam, FtsQueryBuilder.UNSCOPED_NORMALIZING);
+                sb.append(ftsMatchQuery);
+                sb.append("')");
+
+                sb.append("))");
+                qb.appendWhere(sb);
+
+                break;
+            }
+
             case POSTALS: {
                 setTablesAndProjectionMapForData(qb, uri, projection, false);
                 qb.appendWhere(" AND " + DataColumns.MIMETYPE_ID + " = "
@@ -5677,7 +6025,13 @@ public class ContactsProvider2 extends AbstractContactsProvider
 
             case DATA:
             case PROFILE_DATA: {
-                setTablesAndProjectionMapForData(qb, uri, projection, false);
+                final String usageType = uri.getQueryParameter(DataUsageFeedback.USAGE_TYPE);
+                final int typeInt = getDataUsageFeedbackType(usageType, USAGE_TYPE_ALL);
+                setTablesAndProjectionMapForData(qb, uri, projection, false, typeInt);
+                if (uri.getBooleanQueryParameter(Data.VISIBLE_CONTACTS_ONLY, false)) {
+                    qb.appendWhere(" AND " + Data.CONTACT_ID + " in " +
+                            Tables.DEFAULT_DIRECTORY);
+                }
                 break;
             }
 
@@ -5713,10 +6067,13 @@ public class ContactsProvider2 extends AbstractContactsProvider
                     selectionArgs = mDbHelper.get().buildSipContactQuery(sb, sipAddress);
                     selection = sb.toString();
                 } else {
+                    // Use this flag to track whether sortOrder was originally empty
+                    boolean sortOrderIsEmpty = false;
                     if (TextUtils.isEmpty(sortOrder)) {
                         // Default the sort order to something reasonable so we get consistent
                         // results when callers don't request an ordering
                         sortOrder = " length(lookup.normalized_number) DESC";
+                        sortOrderIsEmpty = true;
                     }
 
                     String number = uri.getPathSegments().size() > 1
@@ -5731,19 +6088,26 @@ public class ContactsProvider2 extends AbstractContactsProvider
 
                     // Peek at the results of the first query (which attempts to use fully
                     // normalized and internationalized numbers for comparison).  If no results
-                    // were returned, fall back to doing a match of the trailing 7 digits.
+                    // were returned, fall back to using the SQLite function
+                    // phone_number_compare_loose.
                     qb.setStrict(true);
                     boolean foundResult = false;
-                    Cursor cursor = query(mActiveDb.get(), qb, projection, selection, selectionArgs,
+                    Cursor cursor = query(db, qb, projection, selection, selectionArgs,
                             sortOrder, groupBy, null, limit, cancellationSignal);
                     try {
                         if (cursor.getCount() > 0) {
                             foundResult = true;
                             return cursor;
                         } else {
+                            // Use fallback lookup method
+
                             qb = new SQLiteQueryBuilder();
-                            mDbHelper.get().buildMinimalPhoneLookupAndContactQuery(
-                                    qb, normalizedNumber);
+
+                            // use the raw number instead of the normalized number because
+                            // phone_number_compare_loose in SQLite works only with non-normalized
+                            // numbers
+                            mDbHelper.get().buildFallbackPhoneLookupAndContactQuery(qb, number);
+
                             qb.setProjectionMap(sPhoneLookupProjectionMap);
                         }
                     } finally {
@@ -5867,7 +6231,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
 
             case SEARCH_SUGGESTIONS: {
                 return mGlobalSearchSupport.handleSearchSuggestionsQuery(
-                        mActiveDb.get(), uri, projection, limit);
+                        db, uri, projection, limit, cancellationSignal);
             }
 
             case SEARCH_SHORTCUT: {
@@ -5875,7 +6239,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                 String filter = getQueryParameter(
                         uri, SearchManager.SUGGEST_COLUMN_INTENT_EXTRA_DATA);
                 return mGlobalSearchSupport.handleSearchShortcutRefresh(
-                        mActiveDb.get(), projection, lookupKey, filter);
+                        db, projection, lookupKey, filter, cancellationSignal);
             }
 
             case RAW_CONTACT_ENTITIES:
@@ -5917,6 +6281,21 @@ public class ContactsProvider2 extends AbstractContactsProvider
                 return completeName(uri, projection);
             }
 
+            case DELETED_CONTACTS: {
+                qb.setTables(Tables.DELETED_CONTACTS);
+                qb.setProjectionMap(sDeletedContactsProjectionMap);
+                break;
+            }
+
+            case DELETED_CONTACTS_ID: {
+                String id = uri.getLastPathSegment();
+                qb.setTables(Tables.DELETED_CONTACTS);
+                qb.setProjectionMap(sDeletedContactsProjectionMap);
+                qb.appendWhere(ContactsContract.DeletedContacts.CONTACT_ID + "=?");
+                selectionArgs = insertSelectionArg(selectionArgs, id);
+                break;
+            }
+
             default:
                 return mLegacyApiSupport.query(uri, projection, selection, selectionArgs,
                         sortOrder, limit);
@@ -5924,12 +6303,14 @@ public class ContactsProvider2 extends AbstractContactsProvider
 
         qb.setStrict(true);
 
+        // Auto-rewrite SORT_KEY_{PRIMARY, ALTERNATIVE} sort orders.
+        String localizedSortOrder = getLocalizedSortOrder(sortOrder);
         Cursor cursor =
-                query(mActiveDb.get(), qb, projection, selection, selectionArgs, sortOrder, groupBy,
+                query(db, qb, projection, selection, selectionArgs, localizedSortOrder, groupBy,
                 having, limit, cancellationSignal);
 
         if (readBooleanQueryParameter(uri, ContactCounts.ADDRESS_BOOK_INDEX_EXTRAS, false)) {
-            bundleFastScrollingIndexExtras(cursor, uri, mActiveDb.get(), qb, selection,
+            bundleFastScrollingIndexExtras(cursor, uri, db, qb, selection,
                     selectionArgs, sortOrder, addressBookIndexerCountExpression,
                     cancellationSignal);
         }
@@ -5941,6 +6322,34 @@ public class ContactsProvider2 extends AbstractContactsProvider
     }
 
 
+    // Rewrites query sort orders using SORT_KEY_{PRIMARY, ALTERNATIVE}
+    // to use PHONEBOOK_BUCKET_{PRIMARY, ALTERNATIVE} as primary key; all
+    // other sort orders are returned unchanged. Preserves ordering
+    // (eg 'DESC') if present.
+    protected static String getLocalizedSortOrder(String sortOrder) {
+        String localizedSortOrder = sortOrder;
+        if (sortOrder != null) {
+            String sortKey;
+            String sortOrderSuffix = "";
+            int spaceIndex = sortOrder.indexOf(' ');
+            if (spaceIndex != -1) {
+                sortKey = sortOrder.substring(0, spaceIndex);
+                sortOrderSuffix = sortOrder.substring(spaceIndex);
+            } else {
+                sortKey = sortOrder;
+            }
+            if (TextUtils.equals(sortKey, Contacts.SORT_KEY_PRIMARY)) {
+                localizedSortOrder = ContactsColumns.PHONEBOOK_BUCKET_PRIMARY
+                    + sortOrderSuffix + ", " + sortOrder;
+            } else if (TextUtils.equals(sortKey, Contacts.SORT_KEY_ALTERNATIVE)) {
+                localizedSortOrder = ContactsColumns.PHONEBOOK_BUCKET_ALTERNATIVE
+                    + sortOrderSuffix + ", " + sortOrder;
+            }
+        }
+        return localizedSortOrder;
+    }
+
+
     private Cursor query(final SQLiteDatabase db, SQLiteQueryBuilder qb, String[] projection,
             String selection, String[] selectionArgs, String sortOrder, String groupBy,
             String having, String limit, CancellationSignal cancellationSignal) {
@@ -5990,10 +6399,6 @@ public class ContactsProvider2 extends AbstractContactsProvider
     }
 
     private void invalidateFastScrollingIndexCache() {
-        if (VERBOSE_LOGGING) {
-            Log.v(TAG, "invalidatemFastScrollingIndexCache");
-        }
-
         // FastScrollingIndexCache is thread-safe, no need to synchronize here.
         mFastScrollingIndexCache.invalidate();
     }
@@ -6039,7 +6444,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                 final long start = System.currentTimeMillis();
 
                 b = getFastScrollingIndexExtras(queryUri, db, qb, selection, selectionArgs,
-                        sortOrder, countExpression, cancellationSignal, getLocale());
+                        sortOrder, countExpression, cancellationSignal);
 
                 final long end = System.currentTimeMillis();
                 final int time = (int) (end - start);
@@ -6055,32 +6460,33 @@ public class ContactsProvider2 extends AbstractContactsProvider
     }
 
     private static final class AddressBookIndexQuery {
-        public static final String LETTER = "letter";
-        public static final String TITLE = "title";
+        public static final String NAME = "name";
+        public static final String BUCKET = "bucket";
+        public static final String LABEL = "label";
         public static final String COUNT = "count";
 
         public static final String[] COLUMNS = new String[] {
-                LETTER, TITLE, COUNT
+            NAME, BUCKET, LABEL, COUNT
         };
 
-        public static final int COLUMN_LETTER = 0;
-        public static final int COLUMN_TITLE = 1;
-        public static final int COLUMN_COUNT = 2;
+        public static final int COLUMN_NAME = 0;
+        public static final int COLUMN_BUCKET = 1;
+        public static final int COLUMN_LABEL = 2;
+        public static final int COLUMN_COUNT = 3;
 
-        // The first letter of the sort key column is what is used for the index headings.
-        public static final String SECTION_HEADING = "SUBSTR(%1$s,1,1)";
-
-        public static final String ORDER_BY = LETTER + " COLLATE " + PHONEBOOK_COLLATOR_NAME;
+        public static final String GROUP_BY = BUCKET + ", " + LABEL;
+        public static final String ORDER_BY =
+            BUCKET + ", " +  NAME + " COLLATE " + PHONEBOOK_COLLATOR_NAME;
     }
 
     /**
-     * Computes counts by the address book index titles and returns it as {@link Bundle} which
+     * Computes counts by the address book index labels and returns it as {@link Bundle} which
      * will be appended to a {@link Cursor} as extras.
      */
     private static Bundle getFastScrollingIndexExtras(final Uri queryUri, final SQLiteDatabase db,
             final SQLiteQueryBuilder qb, final String selection, final String[] selectionArgs,
             final String sortOrder, String countExpression,
-            final CancellationSignal cancellationSignal, final Locale currentLocale) {
+            final CancellationSignal cancellationSignal) {
         String sortKey;
 
         // The sort order suffix could be something like "DESC".
@@ -6099,72 +6505,54 @@ public class ContactsProvider2 extends AbstractContactsProvider
             sortKey = Contacts.SORT_KEY_PRIMARY;
         }
 
+        String bucketKey;
+        String labelKey;
+        if (TextUtils.equals(sortKey, Contacts.SORT_KEY_PRIMARY)) {
+            bucketKey = ContactsColumns.PHONEBOOK_BUCKET_PRIMARY;
+            labelKey = ContactsColumns.PHONEBOOK_LABEL_PRIMARY;
+        } else if (TextUtils.equals(sortKey, Contacts.SORT_KEY_ALTERNATIVE)) {
+            bucketKey = ContactsColumns.PHONEBOOK_BUCKET_ALTERNATIVE;
+            labelKey = ContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE;
+        } else {
+            return null;
+        }
+
         HashMap<String, String> projectionMap = Maps.newHashMap();
-        String sectionHeading = String.format(Locale.US, AddressBookIndexQuery.SECTION_HEADING,
-                sortKey);
-        projectionMap.put(AddressBookIndexQuery.LETTER,
-                sectionHeading + " AS " + AddressBookIndexQuery.LETTER);
+        projectionMap.put(AddressBookIndexQuery.NAME,
+                sortKey + " AS " + AddressBookIndexQuery.NAME);
+        projectionMap.put(AddressBookIndexQuery.BUCKET,
+                bucketKey + " AS " + AddressBookIndexQuery.BUCKET);
+        projectionMap.put(AddressBookIndexQuery.LABEL,
+                labelKey + " AS " + AddressBookIndexQuery.LABEL);
 
         // If "what to count" is not specified, we just count all records.
         if (TextUtils.isEmpty(countExpression)) {
             countExpression = "*";
         }
 
-        /**
-         * Use the GET_PHONEBOOK_INDEX function, which is an android extension for SQLite3,
-         * to map the first letter of the sort key to a character that is traditionally
-         * used in phonebooks to represent that letter.  For example, in Korean it will
-         * be the first consonant in the letter; for Japanese it will be Hiragana rather
-         * than Katakana.
-         */
-        projectionMap.put(AddressBookIndexQuery.TITLE,
-                "GET_PHONEBOOK_INDEX(" + sectionHeading + ",'" + currentLocale.toString() + "')"
-                        + " AS " + AddressBookIndexQuery.TITLE);
         projectionMap.put(AddressBookIndexQuery.COUNT,
                 "COUNT(" + countExpression + ") AS " + AddressBookIndexQuery.COUNT);
         qb.setProjectionMap(projectionMap);
+        String orderBy = AddressBookIndexQuery.BUCKET + sortOrderSuffix
+            + ", " + AddressBookIndexQuery.NAME + " COLLATE "
+            + PHONEBOOK_COLLATOR_NAME + sortOrderSuffix;
 
         Cursor indexCursor = qb.query(db, AddressBookIndexQuery.COLUMNS, selection, selectionArgs,
-                AddressBookIndexQuery.ORDER_BY, null /* having */,
-                AddressBookIndexQuery.ORDER_BY + sortOrderSuffix,
-                null, cancellationSignal);
+                AddressBookIndexQuery.GROUP_BY, null /* having */,
+                orderBy, null, cancellationSignal);
 
         try {
-            int groupCount = indexCursor.getCount();
-            String titles[] = new String[groupCount];
-            int counts[] = new int[groupCount];
-            int indexCount = 0;
-            String currentTitle = null;
-
-            // Since GET_PHONEBOOK_INDEX is a many-to-1 function, we may end up
-            // with multiple entries for the same title.  The following code
-            // collapses those duplicates.
-            for (int i = 0; i < groupCount; i++) {
+            int numLabels = indexCursor.getCount();
+            String labels[] = new String[numLabels];
+            int counts[] = new int[numLabels];
+
+            for (int i = 0; i < numLabels; i++) {
                 indexCursor.moveToNext();
-                String title = indexCursor.getString(AddressBookIndexQuery.COLUMN_TITLE);
-                if (title == null) {
-                    title = "";
-                }
-                int count = indexCursor.getInt(AddressBookIndexQuery.COLUMN_COUNT);
-                if (indexCount == 0 || !TextUtils.equals(title, currentTitle)) {
-                    titles[indexCount] = currentTitle = title;
-                    counts[indexCount] = count;
-                    indexCount++;
-                } else {
-                    counts[indexCount - 1] += count;
-                }
+                labels[i] = indexCursor.getString(AddressBookIndexQuery.COLUMN_LABEL);
+                counts[i] = indexCursor.getInt(AddressBookIndexQuery.COLUMN_COUNT);
             }
 
-            if (indexCount < groupCount) {
-                String[] newTitles = new String[indexCount];
-                System.arraycopy(titles, 0, newTitles, 0, indexCount);
-                titles = newTitles;
-
-                int[] newCounts = new int[indexCount];
-                System.arraycopy(counts, 0, newCounts, 0, indexCount);
-                counts = newCounts;
-            }
-            return FastScrollingIndexCache.buildExtraBundle(titles, counts);
+            return FastScrollingIndexCache.buildExtraBundle(labels, counts);
         } finally {
             indexCursor.close();
         }
@@ -6750,9 +7138,8 @@ public class ContactsProvider2 extends AbstractContactsProvider
         appendDataPresenceJoin(sb, projection, DataColumns.CONCRETE_ID);
         appendDataStatusUpdateJoin(sb, projection, DataColumns.CONCRETE_ID);
 
-        if (usageType != null) {
-            appendDataUsageStatJoin(sb, usageType, DataColumns.CONCRETE_ID);
-        }
+        appendDataUsageStatJoin(sb, usageType == null ? USAGE_TYPE_ALL : usageType,
+                DataColumns.CONCRETE_ID);
 
         qb.setTables(sb.toString());
 
@@ -6849,9 +7236,29 @@ public class ContactsProvider2 extends AbstractContactsProvider
     }
 
     private void appendDataUsageStatJoin(StringBuilder sb, int usageType, String dataIdColumn) {
-        sb.append(" LEFT OUTER JOIN " + Tables.DATA_USAGE_STAT +
-                " ON (" + DataUsageStatColumns.CONCRETE_DATA_ID + "=" + dataIdColumn +
-                " AND " + DataUsageStatColumns.CONCRETE_USAGE_TYPE + "=" + usageType + ")");
+        if (usageType != USAGE_TYPE_ALL) {
+            sb.append(" LEFT OUTER JOIN " + Tables.DATA_USAGE_STAT +
+                    " ON (" + DataUsageStatColumns.CONCRETE_DATA_ID + "=");
+            sb.append(dataIdColumn);
+            sb.append(" AND " + DataUsageStatColumns.CONCRETE_USAGE_TYPE + "=");
+            sb.append(usageType);
+            sb.append(")");
+        } else {
+            sb.append(
+                    " LEFT OUTER JOIN " +
+                        "(SELECT " +
+                            DataUsageStatColumns.CONCRETE_DATA_ID + ", " +
+                            "SUM(" + DataUsageStatColumns.CONCRETE_TIMES_USED +
+                                ") as " + DataUsageStatColumns.TIMES_USED + ", " +
+                            "MAX(" + DataUsageStatColumns.CONCRETE_LAST_TIME_USED +
+                                ") as " + DataUsageStatColumns.LAST_TIME_USED +
+                        " FROM " + Tables.DATA_USAGE_STAT + " GROUP BY " +
+                            DataUsageStatColumns.DATA_ID + ") as " + Tables.DATA_USAGE_STAT
+                    );
+            sb.append(" ON (" + DataUsageStatColumns.CONCRETE_DATA_ID + "=");
+            sb.append(dataIdColumn);
+            sb.append(")");
+        }
     }
 
     private void appendContactPresenceJoin(StringBuilder sb, String[] projection,
@@ -7077,21 +7484,32 @@ public class ContactsProvider2 extends AbstractContactsProvider
 
     public AssetFileDescriptor openAssetFileLocal(Uri uri, String mode)
             throws FileNotFoundException {
-
-        // Default active DB to the contacts DB if none has been set.
-        if (mActiveDb.get() == null) {
-            if (mode.equals("r")) {
-                mActiveDb.set(mContactsHelper.getReadableDatabase());
-            } else {
-                mActiveDb.set(mContactsHelper.getWritableDatabase());
-            }
+        // In some cases to implement this, we will need to do further queries
+        // on the content provider.  We have already done the permission check for
+        // access to the uri given here, so we don't need to do further checks on
+        // the queries we will do to populate it.  Also this makes sure that when
+        // we go through any app ops checks for those queries that the calling uid
+        // and package names match at that point.
+        final long ident = Binder.clearCallingIdentity();
+        try {
+            return openAssetFileInner(uri, mode);
+        } finally {
+            Binder.restoreCallingIdentity(ident);
         }
+    }
+
+    private AssetFileDescriptor openAssetFileInner(Uri uri, String mode)
+            throws FileNotFoundException {
+
+        final boolean writing = mode.contains("w");
+
+        final SQLiteDatabase db = mDbHelper.get().getDatabase(writing);
 
         int match = sUriMatcher.match(uri);
         switch (match) {
             case CONTACTS_ID_PHOTO: {
                 long contactId = Long.parseLong(uri.getPathSegments().get(1));
-                return openPhotoAssetFile(mActiveDb.get(), uri, mode,
+                return openPhotoAssetFile(db, uri, mode,
                         Data._ID + "=" + Contacts.PHOTO_ID + " AND " +
                                 RawContacts.CONTACT_ID + "=?",
                         new String[]{String.valueOf(contactId)});
@@ -7103,7 +7521,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                             "Display photos retrieved by contact ID can only be read.");
                 }
                 long contactId = Long.parseLong(uri.getPathSegments().get(1));
-                Cursor c = mActiveDb.get().query(Tables.CONTACTS,
+                Cursor c = db.query(Tables.CONTACTS,
                         new String[]{Contacts.PHOTO_FILE_ID},
                         Contacts._ID + "=?", new String[]{String.valueOf(contactId)},
                         null, null, null);
@@ -7125,7 +7543,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                     throw new IllegalArgumentException(
                             "Display photos retrieved by contact ID can only be read.");
                 }
-                Cursor c = mActiveDb.get().query(Tables.CONTACTS,
+                Cursor c = db.query(Tables.CONTACTS,
                         new String[]{Contacts.PHOTO_FILE_ID}, null, null, null, null, null);
                 try {
                     if (c.moveToFirst()) {
@@ -7163,7 +7581,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                     long contactId = Long.parseLong(pathSegments.get(3));
                     SQLiteQueryBuilder lookupQb = new SQLiteQueryBuilder();
                     setTablesAndProjectionMapForContacts(lookupQb, uri, projection);
-                    Cursor c = queryWithContactIdAndLookupKey(lookupQb, mActiveDb.get(), uri,
+                    Cursor c = queryWithContactIdAndLookupKey(lookupQb, db, uri,
                             projection, null, null, null, null, null,
                             Contacts._ID, contactId, Contacts.LOOKUP_KEY, lookupKey, null);
                     if (c != null) {
@@ -7175,7 +7593,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                                 return openDisplayPhotoForRead(photoFileId);
                             } else {
                                 long photoId = c.getLong(c.getColumnIndex(Contacts.PHOTO_ID));
-                                return openPhotoAssetFile(mActiveDb.get(), uri, mode,
+                                return openPhotoAssetFile(db, uri, mode,
                                         Data._ID + "=?", new String[]{String.valueOf(photoId)});
                             }
                         } finally {
@@ -7186,8 +7604,8 @@ public class ContactsProvider2 extends AbstractContactsProvider
 
                 SQLiteQueryBuilder qb = new SQLiteQueryBuilder();
                 setTablesAndProjectionMapForContacts(qb, uri, projection);
-                long contactId = lookupContactIdByLookupKey(mActiveDb.get(), lookupKey);
-                Cursor c = qb.query(mActiveDb.get(), projection, Contacts._ID + "=?",
+                long contactId = lookupContactIdByLookupKey(db, lookupKey);
+                Cursor c = qb.query(db, projection, Contacts._ID + "=?",
                         new String[]{String.valueOf(contactId)}, null, null, null);
                 try {
                     c.moveToFirst();
@@ -7196,7 +7614,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                         return openDisplayPhotoForRead(photoFileId);
                     } else {
                         long photoId = c.getLong(c.getColumnIndex(Contacts.PHOTO_ID));
-                        return openPhotoAssetFile(mActiveDb.get(), uri, mode,
+                        return openPhotoAssetFile(db, uri, mode,
                                 Data._ID + "=?", new String[]{String.valueOf(photoId)});
                     }
                 } finally {
@@ -7213,7 +7631,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                 String[] projection = new String[]{Data._ID, Photo.PHOTO_FILE_ID};
                 setTablesAndProjectionMapForData(qb, uri, projection, false);
                 long photoMimetypeId = mDbHelper.get().getMimeTypeId(Photo.CONTENT_ITEM_TYPE);
-                Cursor c = qb.query(mActiveDb.get(), projection,
+                Cursor c = qb.query(db, projection,
                         Data.RAW_CONTACT_ID + "=? AND " + DataColumns.MIMETYPE_ID + "=?",
                         new String[]{String.valueOf(rawContactId), String.valueOf(photoMimetypeId)},
                         null, null, Data.IS_PRIMARY + " DESC");
@@ -7251,7 +7669,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
             case DATA_ID: {
                 long dataId = Long.parseLong(uri.getPathSegments().get(1));
                 long photoMimetypeId = mDbHelper.get().getMimeTypeId(Photo.CONTENT_ITEM_TYPE);
-                return openPhotoAssetFile(mActiveDb.get(), uri, mode,
+                return openPhotoAssetFile(db, uri, mode,
                         Data._ID + "=? AND " + DataColumns.MIMETYPE_ID + "=" + photoMimetypeId,
                         new String[]{String.valueOf(dataId)});
             }
@@ -7290,7 +7708,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
                         inBuilder.append(",");
                     }
                     // TODO: Figure out what to do if the profile contact is in the list.
-                    long contactId = lookupContactIdByLookupKey(mActiveDb.get(), lookupKey);
+                    long contactId = lookupContactIdByLookupKey(db, lookupKey);
                     inBuilder.append(contactId);
                     index++;
                 }
@@ -7804,6 +8222,18 @@ public class ContactsProvider2 extends AbstractContactsProvider
         }
     }
 
+    private String[] appendSelectionArg(String[] selectionArgs, String arg) {
+        if (selectionArgs == null) {
+            return new String[]{arg};
+        } else {
+            int newLength = selectionArgs.length + 1;
+            String[] newSelectionArgs = new String[newLength];
+            newSelectionArgs[newLength] = arg;
+            System.arraycopy(selectionArgs, 0, newSelectionArgs, 0, selectionArgs.length - 1);
+            return newSelectionArgs;
+        }
+    }
+
     protected Account getDefaultAccount() {
         AccountManager accountManager = AccountManager.get(getContext());
         try {
@@ -7954,40 +8384,65 @@ public class ContactsProvider2 extends AbstractContactsProvider
             int count = 0;
             SQLiteDatabase db = null;
             boolean success = false;
+            boolean transactionStarted = false;
             try {
-                // Re-aggregation os only for the contacts DB.
+                // Re-aggregation is only for the contacts DB.
                 switchToContactMode();
                 db = mContactsHelper.getWritableDatabase();
-                mActiveDb.set(db);
 
                 // Start the actual process.
                 db.beginTransaction();
+                transactionStarted = true;
 
                 count = mContactAggregator.markAllVisibleForAggregation(db);
                 mContactAggregator.aggregateInTransaction(mTransactionContext.get(), db);
 
                 updateSearchIndexInTransaction();
 
-                mContactsHelper.setProperty(DbProperties.AGGREGATION_ALGORITHM,
-                        String.valueOf(PROPERTY_AGGREGATION_ALGORITHM_VERSION));
+                updateAggregationAlgorithmVersion();
 
                 db.setTransactionSuccessful();
 
                 success = true;
             } finally {
                 mTransactionContext.get().clearAll();
-                if (db != null) {
+                if (transactionStarted) {
                     db.endTransaction();
                 }
                 final long end = SystemClock.elapsedRealtime();
                 Log.i(TAG, "Aggregation algorithm upgraded for " + count + " raw contacts"
                         + (success ? (" in " + (end - start) + "ms") : " failed"));
             }
+        } catch (RuntimeException e) {
+            Log.e(TAG, "Failed to upgrade aggregation algorithm; continuing anyway.", e);
+
+            // Got some exception during re-aggregation.  Re-aggregation isn't that important, so
+            // just bump the aggregation algorithm version and let the provider start normally.
+            try {
+                final SQLiteDatabase db =  mContactsHelper.getWritableDatabase();
+                db.beginTransaction();
+                try {
+                    updateAggregationAlgorithmVersion();
+                    db.setTransactionSuccessful();
+                } finally {
+                    db.endTransaction();
+                }
+            } catch (RuntimeException e2) {
+                // Couldn't even update the algorithm version...  There's really nothing we can do
+                // here, so just go ahead and start the provider.  Next time the provider starts
+                // it'll try re-aggregation again, which may or may not succeed.
+                Log.e(TAG, "Failed to bump aggregation algorithm version; continuing anyway.", e2);
+            }
         } finally { // Need one more finally because endTransaction() may fail.
             setProviderStatus(ProviderStatus.STATUS_NORMAL);
         }
     }
 
+    private void updateAggregationAlgorithmVersion() {
+        mContactsHelper.setProperty(DbProperties.AGGREGATION_ALGORITHM,
+                String.valueOf(PROPERTY_AGGREGATION_ALGORITHM_VERSION));
+    }
+
     @VisibleForTesting
     boolean isPhone() {
         if (!mIsPhoneInitialized) {
@@ -8038,7 +8493,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
         }
         rawContactIdSelect.append(")");
 
-        final SQLiteDatabase db = mActiveDb.get();
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
 
         mSelectionArgs1[0] = String.valueOf(currentTimeMillis);
 
@@ -8080,7 +8535,7 @@ public class ContactsProvider2 extends AbstractContactsProvider
     /* package */ int updateDataUsageStat(
             List<Long> dataIds, String type, long currentTimeMillis) {
 
-        final SQLiteDatabase db = mActiveDb.get();
+        final SQLiteDatabase db = mDbHelper.get().getWritableDatabase();
 
         final String typeString = String.valueOf(getDataUsageFeedbackType(type, null));
         final String currentTimeMillisString = String.valueOf(currentTimeMillis);
@@ -8170,7 +8625,16 @@ public class ContactsProvider2 extends AbstractContactsProvider
      * @return a boolean indicating if the query is one word or not
      */
     private boolean isSingleWordQuery(String query) {
-        return query.split(QUERY_TOKENIZER_REGEX).length == 1;
+        // Split can remove empty trailing tokens but cannot remove starting empty tokens so we
+        // have to loop.
+        String[] tokens = query.split(QUERY_TOKENIZER_REGEX, 0);
+        int count = 0;
+        for (String token : tokens) {
+            if (!"".equals(token)) {
+                count++;
+            }
+        }
+        return count == 1;
     }
 
     /**
@@ -8253,4 +8717,15 @@ public class ContactsProvider2 extends AbstractContactsProvider
         }
         throw new IllegalArgumentException("Invalid usage type " + type);
     }
+
+    /** Use only for debug logging */
+    @Override
+    public String toString() {
+        return "ContactsProvider2";
+    }
+
+    @NeededForTesting
+    public void switchToProfileModeForTest() {
+        switchToProfileMode();
+    }
 }
diff --git a/src/com/android/providers/contacts/ContactsTransaction.java b/src/com/android/providers/contacts/ContactsTransaction.java
index 7a92cae..c6c11d9 100644
--- a/src/com/android/providers/contacts/ContactsTransaction.java
+++ b/src/com/android/providers/contacts/ContactsTransaction.java
@@ -16,11 +16,12 @@
 
 package com.android.providers.contacts;
 
-import com.google.android.collect.Lists;
-import com.google.android.collect.Maps;
-
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteTransactionListener;
+import android.util.Log;
+
+import com.google.android.collect.Lists;
+import com.google.android.collect.Maps;
 
 import java.util.List;
 import java.util.Map;
@@ -40,13 +41,16 @@ public class ContactsTransaction {
 
     /**
      * The list of databases that have been enlisted in this transaction.
+     *
+     * Note we insert elements to the head of the list, so that we endTransaction() in the reverse
+     * order.
      */
-    private List<SQLiteDatabase> mDatabasesForTransaction;
+    private final List<SQLiteDatabase> mDatabasesForTransaction;
 
     /**
      * The mapping of tags to databases involved in this transaction.
      */
-    private Map<String, SQLiteDatabase> mDatabaseTagMap;
+    private final Map<String, SQLiteDatabase> mDatabaseTagMap;
 
     /**
      * Whether any actual changes have been made successfully in this transaction.
@@ -97,8 +101,16 @@ public class ContactsTransaction {
      */
     public void startTransactionForDb(SQLiteDatabase db, String tag,
             SQLiteTransactionListener listener) {
+        if (AbstractContactsProvider.ENABLE_TRANSACTION_LOG) {
+            Log.i(AbstractContactsProvider.TAG, "startTransactionForDb: db=" + db.getPath() +
+                    "  tag=" + tag + "  listener=" + listener +
+                    "  startTransaction=" + !hasDbInTransaction(tag),
+                    new RuntimeException("startTransactionForDb"));
+        }
         if (!hasDbInTransaction(tag)) {
-            mDatabasesForTransaction.add(db);
+            // Insert a new db into the head of the list, so that we'll endTransaction() in
+            // the reverse order.
+            mDatabasesForTransaction.add(0, db);
             mDatabaseTagMap.put(tag, db);
             if (listener != null) {
                 db.beginTransactionWithListener(listener);
@@ -154,13 +166,33 @@ public class ContactsTransaction {
     }
 
     /**
+     * @return the tag for a database.  Only intended to be used for logging.
+     */
+    private String getTagForDb(SQLiteDatabase db) {
+        for (String tag : mDatabaseTagMap.keySet()) {
+            if (db == mDatabaseTagMap.get(tag)) {
+                return tag;
+            }
+        }
+        return null;
+    }
+
+    /**
      * Completes the transaction, ending the DB transactions for all associated databases.
      * @param callerIsBatch Whether this is being performed in the context of a batch operation.
      *     If it is not, and the transaction is marked as batch, this call is a no-op.
      */
     public void finish(boolean callerIsBatch) {
+        if (AbstractContactsProvider.ENABLE_TRANSACTION_LOG) {
+            Log.i(AbstractContactsProvider.TAG, "ContactsTransaction.finish  callerIsBatch=" +
+                    callerIsBatch, new RuntimeException("ContactsTransaction.finish"));
+        }
         if (!mBatch || callerIsBatch) {
             for (SQLiteDatabase db : mDatabasesForTransaction) {
+                if (AbstractContactsProvider.ENABLE_TRANSACTION_LOG) {
+                    Log.i(AbstractContactsProvider.TAG, "ContactsTransaction.finish: " +
+                            "endTransaction for " + getTagForDb(db));
+                }
                 // If an exception was thrown while yielding, it's possible that we no longer have
                 // a lock on this database, so we need to check before attempting to end its
                 // transaction.  Otherwise, we should always expect to be in a transaction (and will
diff --git a/src/com/android/providers/contacts/ContactsUpgradeReceiver.java b/src/com/android/providers/contacts/ContactsUpgradeReceiver.java
index e259ffe..ba8acb8 100644
--- a/src/com/android/providers/contacts/ContactsUpgradeReceiver.java
+++ b/src/com/android/providers/contacts/ContactsUpgradeReceiver.java
@@ -26,6 +26,8 @@ import android.content.pm.PackageManager;
 import android.os.RemoteException;
 import android.util.Log;
 
+import libcore.icu.ICU;
+
 /**
  * This will be launched during system boot, after the core system has
  * been brought up but before any non-persistent processes have been
@@ -39,6 +41,7 @@ import android.util.Log;
 public class ContactsUpgradeReceiver extends BroadcastReceiver {
     static final String TAG = "ContactsUpgradeReceiver";
     static final String PREF_DB_VERSION = "db_version";
+    static final String PREF_ICU_VERSION = "icu_version";
 
     @Override
     public void onReceive(Context context, Intent intent) {
@@ -50,33 +53,37 @@ public class ContactsUpgradeReceiver extends BroadcastReceiver {
 
             // Lookup the last known database version
             SharedPreferences prefs = context.getSharedPreferences(TAG, Context.MODE_PRIVATE);
-            int prefVersion = prefs.getInt(PREF_DB_VERSION, 0);
+            int prefDbVersion = prefs.getInt(PREF_DB_VERSION, 0);
+            final String curIcuVersion = ICU.getIcuVersion();
+            final String prefIcuVersion = prefs.getString(PREF_ICU_VERSION, "");
 
             // If the version is old go ahead and attempt to create or upgrade the database.
-            if (prefVersion != ContactsDatabaseHelper.DATABASE_VERSION) {
+            if (prefDbVersion != ContactsDatabaseHelper.DATABASE_VERSION ||
+                    !prefIcuVersion.equals(curIcuVersion)) {
                 // Store the current version so this receiver isn't run again until the database
                 // version number changes. This is intentionally done even before the upgrade path
                 // is attempted to be conservative. If the upgrade fails for some reason and we
                 // crash and burn we don't want to get into a loop doing so.
-                prefs.edit().putInt(
-                    PREF_DB_VERSION, ContactsDatabaseHelper.DATABASE_VERSION).commit();
+                SharedPreferences.Editor editor = prefs.edit();
+                editor.putInt(PREF_DB_VERSION, ContactsDatabaseHelper.DATABASE_VERSION);
+                editor.putString(PREF_ICU_VERSION, curIcuVersion);
+                editor.commit();
 
                 // Ask for a reference to the database to force the helper to either
                 // create the database or open it up, performing any necessary upgrades
                 // in the process.
                 ContactsDatabaseHelper helper = ContactsDatabaseHelper.getInstance(context);
-                if (context.getDatabasePath(helper.getDatabaseName()).exists()) {
-                    Log.i(TAG, "Creating or opening contacts database");
-                    try {
-                        ActivityManagerNative.getDefault().showBootMessage(
-                                context.getText(R.string.upgrade_msg), true);
-                    } catch (RemoteException e) {
-                    }
-                    helper.getWritableDatabase();
+                ProfileDatabaseHelper profileHelper = ProfileDatabaseHelper.getInstance(context);
+                Log.i(TAG, "Creating or opening contacts database");
+                try {
+                    ActivityManagerNative.getDefault().showBootMessage(
+                            context.getText(R.string.upgrade_msg), true);
+                } catch (RemoteException e) {
                 }
 
-                ProfileDatabaseHelper profileHelper = ProfileDatabaseHelper.getInstance(context);
+                helper.getWritableDatabase();
                 profileHelper.getWritableDatabase();
+                ContactsProvider2.updateLocaleOffline(context, helper, profileHelper);
 
                 // Log the total time taken for the receiver to perform the operation
                 EventLogTags.writeContactsUpgradeReceiver(System.currentTimeMillis() - startTime);
diff --git a/src/com/android/providers/contacts/DataRowHandler.java b/src/com/android/providers/contacts/DataRowHandler.java
index b98f6c7..a20da06 100644
--- a/src/com/android/providers/contacts/DataRowHandler.java
+++ b/src/com/android/providers/contacts/DataRowHandler.java
@@ -15,12 +15,6 @@
  */
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.ContactsDatabaseHelper.DataColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.MimetypesColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.PresenceColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
-import com.android.providers.contacts.aggregation.ContactAggregator;
-
 import android.content.ContentValues;
 import android.content.Context;
 import android.database.Cursor;
@@ -33,6 +27,12 @@ import android.provider.ContactsContract.CommonDataKinds.StructuredName;
 import android.provider.ContactsContract.Data;
 import android.text.TextUtils;
 
+import com.android.providers.contacts.ContactsDatabaseHelper.DataColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.MimetypesColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.PresenceColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
+import com.android.providers.contacts.aggregation.ContactAggregator;
+
 /**
  * Handles inserts and update for a specific Data type.
  */
@@ -162,9 +162,7 @@ public abstract class DataRowHandler {
             txContext.invalidateSearchIndexForRawContact(rawContactId);
         }
 
-        if (!callerIsSyncAdapter) {
-            txContext.markRawContactDirty(rawContactId);
-        }
+        txContext.markRawContactDirtyAndChanged(rawContactId, callerIsSyncAdapter);
 
         return true;
     }
diff --git a/src/com/android/providers/contacts/DataRowHandlerForCommonDataKind.java b/src/com/android/providers/contacts/DataRowHandlerForCommonDataKind.java
index b717d31..0bb17c2 100644
--- a/src/com/android/providers/contacts/DataRowHandlerForCommonDataKind.java
+++ b/src/com/android/providers/contacts/DataRowHandlerForCommonDataKind.java
@@ -15,8 +15,6 @@
  */
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.aggregation.ContactAggregator;
-
 import android.content.ContentValues;
 import android.content.Context;
 import android.database.Cursor;
@@ -24,6 +22,8 @@ import android.database.sqlite.SQLiteDatabase;
 import android.provider.ContactsContract.CommonDataKinds.BaseTypes;
 import android.text.TextUtils;
 
+import com.android.providers.contacts.aggregation.ContactAggregator;
+
 /**
  * Superclass for data row handlers that deal with types (e.g. Home, Work, Other) and
  * labels, which are custom types.
diff --git a/src/com/android/providers/contacts/DataRowHandlerForCustomMimetype.java b/src/com/android/providers/contacts/DataRowHandlerForCustomMimetype.java
index 0202fd6..502b835 100644
--- a/src/com/android/providers/contacts/DataRowHandlerForCustomMimetype.java
+++ b/src/com/android/providers/contacts/DataRowHandlerForCustomMimetype.java
@@ -15,10 +15,10 @@
  */
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.aggregation.ContactAggregator;
-
 import android.content.Context;
 
+import com.android.providers.contacts.aggregation.ContactAggregator;
+
 public class DataRowHandlerForCustomMimetype extends DataRowHandler {
 
     public DataRowHandlerForCustomMimetype(Context context,
diff --git a/src/com/android/providers/contacts/DataRowHandlerForEmail.java b/src/com/android/providers/contacts/DataRowHandlerForEmail.java
index f1fa941..38cb2e1 100644
--- a/src/com/android/providers/contacts/DataRowHandlerForEmail.java
+++ b/src/com/android/providers/contacts/DataRowHandlerForEmail.java
@@ -15,15 +15,15 @@
  */
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.SearchIndexManager.IndexBuilder;
-import com.android.providers.contacts.aggregation.ContactAggregator;
-
 import android.content.ContentValues;
 import android.content.Context;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.provider.ContactsContract.CommonDataKinds.Email;
 
+import com.android.providers.contacts.SearchIndexManager.IndexBuilder;
+import com.android.providers.contacts.aggregation.ContactAggregator;
+
 /**
  * Handler for email address data rows.
  */
diff --git a/src/com/android/providers/contacts/DataRowHandlerForGroupMembership.java b/src/com/android/providers/contacts/DataRowHandlerForGroupMembership.java
index 3a4b167..0d2427a 100644
--- a/src/com/android/providers/contacts/DataRowHandlerForGroupMembership.java
+++ b/src/com/android/providers/contacts/DataRowHandlerForGroupMembership.java
@@ -15,15 +15,6 @@
  */
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.ContactsDatabaseHelper.Clauses;
-import com.android.providers.contacts.ContactsDatabaseHelper.DataColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.GroupsColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.Projections;
-import com.android.providers.contacts.ContactsDatabaseHelper.RawContactsColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
-import com.android.providers.contacts.ContactsProvider2.GroupIdCacheEntry;
-import com.android.providers.contacts.aggregation.ContactAggregator;
-
 import android.content.ContentValues;
 import android.content.Context;
 import android.database.Cursor;
@@ -33,6 +24,15 @@ import android.provider.ContactsContract.CommonDataKinds.GroupMembership;
 import android.provider.ContactsContract.Groups;
 import android.provider.ContactsContract.RawContacts;
 
+import com.android.providers.contacts.ContactsDatabaseHelper.Clauses;
+import com.android.providers.contacts.ContactsDatabaseHelper.DataColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.GroupsColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.Projections;
+import com.android.providers.contacts.ContactsDatabaseHelper.RawContactsColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
+import com.android.providers.contacts.ContactsProvider2.GroupIdCacheEntry;
+import com.android.providers.contacts.aggregation.ContactAggregator;
+
 import java.util.ArrayList;
 import java.util.HashMap;
 
diff --git a/src/com/android/providers/contacts/DataRowHandlerForIdentity.java b/src/com/android/providers/contacts/DataRowHandlerForIdentity.java
index 440e430..48ce5e4 100644
--- a/src/com/android/providers/contacts/DataRowHandlerForIdentity.java
+++ b/src/com/android/providers/contacts/DataRowHandlerForIdentity.java
@@ -15,14 +15,14 @@
  */
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.aggregation.ContactAggregator;
-
 import android.content.ContentValues;
 import android.content.Context;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.provider.ContactsContract.CommonDataKinds.Identity;
 
+import com.android.providers.contacts.aggregation.ContactAggregator;
+
 /**
  * Handler for Identity data rows.
  */
diff --git a/src/com/android/providers/contacts/DataRowHandlerForIm.java b/src/com/android/providers/contacts/DataRowHandlerForIm.java
index 009bb89..faf10ad 100644
--- a/src/com/android/providers/contacts/DataRowHandlerForIm.java
+++ b/src/com/android/providers/contacts/DataRowHandlerForIm.java
@@ -15,13 +15,13 @@
  */
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.SearchIndexManager.IndexBuilder;
-import com.android.providers.contacts.aggregation.ContactAggregator;
-
 import android.content.ContentValues;
 import android.content.Context;
 import android.provider.ContactsContract.CommonDataKinds.Im;
 
+import com.android.providers.contacts.SearchIndexManager.IndexBuilder;
+import com.android.providers.contacts.aggregation.ContactAggregator;
+
 /**
  * Handler for IM address data rows.
  */
diff --git a/src/com/android/providers/contacts/DataRowHandlerForNickname.java b/src/com/android/providers/contacts/DataRowHandlerForNickname.java
index 0fec6ee..95f24f5 100644
--- a/src/com/android/providers/contacts/DataRowHandlerForNickname.java
+++ b/src/com/android/providers/contacts/DataRowHandlerForNickname.java
@@ -15,9 +15,6 @@
  */
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.SearchIndexManager.IndexBuilder;
-import com.android.providers.contacts.aggregation.ContactAggregator;
-
 import android.content.ContentValues;
 import android.content.Context;
 import android.database.Cursor;
@@ -25,6 +22,9 @@ import android.database.sqlite.SQLiteDatabase;
 import android.provider.ContactsContract.CommonDataKinds.Nickname;
 import android.text.TextUtils;
 
+import com.android.providers.contacts.SearchIndexManager.IndexBuilder;
+import com.android.providers.contacts.aggregation.ContactAggregator;
+
 /**
  * Handler for nickname data rows.
  */
diff --git a/src/com/android/providers/contacts/DataRowHandlerForNote.java b/src/com/android/providers/contacts/DataRowHandlerForNote.java
index 317af1a..ea73637 100644
--- a/src/com/android/providers/contacts/DataRowHandlerForNote.java
+++ b/src/com/android/providers/contacts/DataRowHandlerForNote.java
@@ -15,13 +15,13 @@
  */
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.SearchIndexManager.IndexBuilder;
-import com.android.providers.contacts.aggregation.ContactAggregator;
-
 import android.content.ContentValues;
 import android.content.Context;
 import android.provider.ContactsContract.CommonDataKinds.Note;
 
+import com.android.providers.contacts.SearchIndexManager.IndexBuilder;
+import com.android.providers.contacts.aggregation.ContactAggregator;
+
 /**
  * Handler for note data rows.
  */
diff --git a/src/com/android/providers/contacts/DataRowHandlerForOrganization.java b/src/com/android/providers/contacts/DataRowHandlerForOrganization.java
index 7384ccb..44146e8 100644
--- a/src/com/android/providers/contacts/DataRowHandlerForOrganization.java
+++ b/src/com/android/providers/contacts/DataRowHandlerForOrganization.java
@@ -15,10 +15,6 @@
  */
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
-import com.android.providers.contacts.SearchIndexManager.IndexBuilder;
-import com.android.providers.contacts.aggregation.ContactAggregator;
-
 import android.content.ContentValues;
 import android.content.Context;
 import android.database.Cursor;
@@ -27,6 +23,10 @@ import android.database.sqlite.SQLiteDatabase;
 import android.provider.ContactsContract.CommonDataKinds.Organization;
 import android.provider.ContactsContract.Data;
 
+import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
+import com.android.providers.contacts.SearchIndexManager.IndexBuilder;
+import com.android.providers.contacts.aggregation.ContactAggregator;
+
 /**
  * Handler for organization data rows.
  */
diff --git a/src/com/android/providers/contacts/DataRowHandlerForPhoneNumber.java b/src/com/android/providers/contacts/DataRowHandlerForPhoneNumber.java
index 99313e9..16faf2a 100644
--- a/src/com/android/providers/contacts/DataRowHandlerForPhoneNumber.java
+++ b/src/com/android/providers/contacts/DataRowHandlerForPhoneNumber.java
@@ -15,11 +15,6 @@
  */
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.ContactsDatabaseHelper.PhoneLookupColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
-import com.android.providers.contacts.SearchIndexManager.IndexBuilder;
-import com.android.providers.contacts.aggregation.ContactAggregator;
-
 import android.content.ContentValues;
 import android.content.Context;
 import android.database.Cursor;
@@ -28,6 +23,11 @@ import android.provider.ContactsContract.CommonDataKinds.Phone;
 import android.telephony.PhoneNumberUtils;
 import android.text.TextUtils;
 
+import com.android.providers.contacts.ContactsDatabaseHelper.PhoneLookupColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
+import com.android.providers.contacts.SearchIndexManager.IndexBuilder;
+import com.android.providers.contacts.aggregation.ContactAggregator;
+
 /**
  * Handler for phone number data rows.
  */
@@ -93,9 +93,7 @@ public class DataRowHandlerForPhoneNumber extends DataRowHandlerForCommonDataKin
         if (number != null && numberE164 == null) {
             final String newNumberE164 = PhoneNumberUtils.formatNumberToE164(number,
                     mDbHelper.getCurrentCountryIso());
-            if (newNumberE164 != null) {
-                values.put(Phone.NORMALIZED_NUMBER, newNumberE164);
-            }
+            values.put(Phone.NORMALIZED_NUMBER, newNumberE164);
         }
     }
 
diff --git a/src/com/android/providers/contacts/DataRowHandlerForPhoto.java b/src/com/android/providers/contacts/DataRowHandlerForPhoto.java
index 7560ed4..bfaa501 100644
--- a/src/com/android/providers/contacts/DataRowHandlerForPhoto.java
+++ b/src/com/android/providers/contacts/DataRowHandlerForPhoto.java
@@ -15,8 +15,6 @@
  */
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.aggregation.ContactAggregator;
-
 import android.content.ContentValues;
 import android.content.Context;
 import android.database.Cursor;
@@ -24,6 +22,8 @@ import android.database.sqlite.SQLiteDatabase;
 import android.provider.ContactsContract.CommonDataKinds.Photo;
 import android.util.Log;
 
+import com.android.providers.contacts.aggregation.ContactAggregator;
+
 import java.io.IOException;
 
 /**
diff --git a/src/com/android/providers/contacts/DataRowHandlerForStructuredName.java b/src/com/android/providers/contacts/DataRowHandlerForStructuredName.java
index c84d2e8..8781d2f 100644
--- a/src/com/android/providers/contacts/DataRowHandlerForStructuredName.java
+++ b/src/com/android/providers/contacts/DataRowHandlerForStructuredName.java
@@ -15,17 +15,18 @@
  */
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.SearchIndexManager.IndexBuilder;
-import com.android.providers.contacts.aggregation.ContactAggregator;
-
 import android.content.ContentValues;
 import android.content.Context;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.provider.ContactsContract.CommonDataKinds.StructuredName;
 import android.provider.ContactsContract.FullNameStyle;
+import android.provider.ContactsContract.PhoneticNameStyle;
 import android.text.TextUtils;
 
+import com.android.providers.contacts.SearchIndexManager.IndexBuilder;
+import com.android.providers.contacts.aggregation.ContactAggregator;
+
 /**
  * Handler for email address data rows.
  */
@@ -141,6 +142,7 @@ public class DataRowHandlerForStructuredName extends DataRowHandler {
             name.fromValues(augmented);
             // As the name could be changed, let's guess the name style again.
             name.fullNameStyle = FullNameStyle.UNDEFINED;
+            name.phoneticNameStyle = PhoneticNameStyle.UNDEFINED;
             mSplitter.guessNameStyle(name);
             int unadjustedFullNameStyle = name.fullNameStyle;
             name.fullNameStyle = mSplitter.getAdjustedFullNameStyle(name.fullNameStyle);
@@ -155,8 +157,11 @@ public class DataRowHandlerForStructuredName extends DataRowHandler {
                         mSplitter.guessFullNameStyle(unstruct));
             }
             if (!update.containsKey(StructuredName.PHONETIC_NAME_STYLE)) {
-                update.put(StructuredName.PHONETIC_NAME_STYLE,
-                        mSplitter.guessPhoneticNameStyle(unstruct));
+                NameSplitter.Name name = new NameSplitter.Name();
+                name.fromValues(update);
+                name.phoneticNameStyle = PhoneticNameStyle.UNDEFINED;
+                mSplitter.guessNameStyle(name);
+                update.put(StructuredName.PHONETIC_NAME_STYLE, name.phoneticNameStyle);
             }
         }
     }
@@ -219,7 +224,14 @@ public class DataRowHandlerForStructuredName extends DataRowHandler {
                 builder.appendName(phoneticGiven);
                 mSb.append(phoneticGiven);
             }
-            builder.appendName(mSb.toString().trim());
+            final String phoneticName = mSb.toString().trim();
+            int phoneticNameStyle = builder.getInt(StructuredName.PHONETIC_NAME_STYLE);
+            if (phoneticNameStyle == PhoneticNameStyle.UNDEFINED) {
+                phoneticNameStyle = mSplitter.guessPhoneticNameStyle(phoneticName);
+            }
+            builder.appendName(phoneticName);
+            mNameLookupBuilder.appendNameShorthandLookup(builder, phoneticName,
+                    phoneticNameStyle);
         }
     }
 }
diff --git a/src/com/android/providers/contacts/DataRowHandlerForStructuredPostal.java b/src/com/android/providers/contacts/DataRowHandlerForStructuredPostal.java
index 6898a43..26483ed 100644
--- a/src/com/android/providers/contacts/DataRowHandlerForStructuredPostal.java
+++ b/src/com/android/providers/contacts/DataRowHandlerForStructuredPostal.java
@@ -15,9 +15,6 @@
  */
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.SearchIndexManager.IndexBuilder;
-import com.android.providers.contacts.aggregation.ContactAggregator;
-
 import android.content.ContentValues;
 import android.content.Context;
 import android.database.Cursor;
@@ -25,6 +22,9 @@ import android.database.sqlite.SQLiteDatabase;
 import android.provider.ContactsContract.CommonDataKinds.StructuredPostal;
 import android.text.TextUtils;
 
+import com.android.providers.contacts.SearchIndexManager.IndexBuilder;
+import com.android.providers.contacts.aggregation.ContactAggregator;
+
 /**
  * Handler for postal address data rows.
  */
diff --git a/src/com/android/providers/contacts/DbModifierWithNotification.java b/src/com/android/providers/contacts/DbModifierWithNotification.java
index c13f4a8..fda8321 100644
--- a/src/com/android/providers/contacts/DbModifierWithNotification.java
+++ b/src/com/android/providers/contacts/DbModifierWithNotification.java
@@ -20,11 +20,6 @@ package com.android.providers.contacts;
 import static android.Manifest.permission.ADD_VOICEMAIL;
 import static com.android.providers.contacts.Manifest.permission.READ_WRITE_ALL_VOICEMAIL;
 
-import com.android.common.io.MoreCloseables;
-import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
-import com.android.providers.contacts.util.DbQueryUtils;
-import com.google.android.collect.Lists;
-
 import android.content.ComponentName;
 import android.content.ContentUris;
 import android.content.ContentValues;
@@ -43,6 +38,11 @@ import android.provider.VoicemailContract.Status;
 import android.provider.VoicemailContract.Voicemails;
 import android.util.Log;
 
+import com.android.common.io.MoreCloseables;
+import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
+import com.android.providers.contacts.util.DbQueryUtils;
+import com.google.android.collect.Lists;
+
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashSet;
diff --git a/src/com/android/providers/contacts/DefaultCallLogInsertionHelper.java b/src/com/android/providers/contacts/DefaultCallLogInsertionHelper.java
index 6777e43..fcda8f1 100644
--- a/src/com/android/providers/contacts/DefaultCallLogInsertionHelper.java
+++ b/src/com/android/providers/contacts/DefaultCallLogInsertionHelper.java
@@ -16,16 +16,15 @@
 
 package com.android.providers.contacts;
 
+import android.content.ContentValues;
+import android.content.Context;
+import android.provider.CallLog.Calls;
+
 import com.android.i18n.phonenumbers.NumberParseException;
 import com.android.i18n.phonenumbers.PhoneNumberUtil;
 import com.android.i18n.phonenumbers.Phonenumber.PhoneNumber;
 import com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;
 
-import android.content.ContentValues;
-import android.content.Context;
-import android.provider.CallLog.Calls;
-import android.util.Log;
-
 import java.util.Locale;
 
 /**
diff --git a/src/com/android/providers/contacts/FastScrollingIndexCache.java b/src/com/android/providers/contacts/FastScrollingIndexCache.java
index c1c5602..e535225 100644
--- a/src/com/android/providers/contacts/FastScrollingIndexCache.java
+++ b/src/com/android/providers/contacts/FastScrollingIndexCache.java
@@ -16,11 +16,9 @@
 
 package com.android.providers.contacts;
 
-import com.google.android.collect.Maps;
-import com.google.common.annotations.VisibleForTesting;
-
 import android.content.Context;
 import android.content.SharedPreferences;
+import android.database.Cursor;
 import android.net.Uri;
 import android.os.Bundle;
 import android.preference.PreferenceManager;
@@ -28,6 +26,9 @@ import android.provider.ContactsContract.ContactCounts;
 import android.text.TextUtils;
 import android.util.Log;
 
+import com.google.android.collect.Maps;
+import com.google.common.annotations.VisibleForTesting;
+
 import java.util.Map;
 import java.util.regex.Pattern;
 
@@ -84,16 +85,24 @@ public class FastScrollingIndexCache {
      */
     private final Map<String, String> mCache = Maps.newHashMap();
 
-    public FastScrollingIndexCache(Context context) {
-        this(PreferenceManager.getDefaultSharedPreferences(context));
+    private static FastScrollingIndexCache sSingleton;
 
-        // At this point, the SharedPreferences might just have been generated and may still be
-        // loading from the file, in which case loading from the preferences would be blocked.
-        // To avoid that, we load lazily.
+    public static FastScrollingIndexCache getInstance(Context context) {
+        if (sSingleton == null) {
+            SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+            sSingleton = new FastScrollingIndexCache(prefs);
+        }
+        return sSingleton;
     }
 
     @VisibleForTesting
-    FastScrollingIndexCache(SharedPreferences prefs) {
+    static synchronized FastScrollingIndexCache getInstanceForTest(
+            SharedPreferences prefs) {
+        sSingleton = new FastScrollingIndexCache(prefs);
+        return sSingleton;
+    }
+
+    private FastScrollingIndexCache(SharedPreferences prefs) {
         mPrefs = prefs;
     }
 
@@ -237,7 +246,7 @@ public class FastScrollingIndexCache {
 
     public void invalidate() {
         synchronized (mCache) {
-            mPrefs.edit().remove(PREFERENCE_KEY).apply();
+            mPrefs.edit().remove(PREFERENCE_KEY).commit();
             mCache.clear();
             mPreferenceLoaded = true;
 
diff --git a/src/com/android/providers/contacts/GlobalSearchSupport.java b/src/com/android/providers/contacts/GlobalSearchSupport.java
index d4cddee..0febf56 100644
--- a/src/com/android/providers/contacts/GlobalSearchSupport.java
+++ b/src/com/android/providers/contacts/GlobalSearchSupport.java
@@ -22,6 +22,7 @@ import android.database.Cursor;
 import android.database.MatrixCursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.net.Uri;
+import android.os.CancellationSignal;
 import android.provider.ContactsContract.CommonDataKinds.Email;
 import android.provider.ContactsContract.CommonDataKinds.Organization;
 import android.provider.ContactsContract.CommonDataKinds.Phone;
@@ -178,8 +179,8 @@ public class GlobalSearchSupport {
         }
     }
 
-    public Cursor handleSearchSuggestionsQuery(
-            SQLiteDatabase db, Uri uri, String[] projection, String limit) {
+    public Cursor handleSearchSuggestionsQuery(SQLiteDatabase db, Uri uri, String[] projection,
+            String limit, CancellationSignal cancellationSignal) {
         final MatrixCursor cursor = new MatrixCursor(
                 projection == null ? SEARCH_SUGGESTIONS_COLUMNS : projection);
 
@@ -189,7 +190,7 @@ public class GlobalSearchSupport {
             String selection = null;
             String searchClause = uri.getLastPathSegment();
             addSearchSuggestionsBasedOnFilter(
-                    cursor, db, projection, selection, searchClause, limit);
+                    cursor, db, projection, selection, searchClause, limit, cancellationSignal);
         }
 
         return cursor;
@@ -206,7 +207,7 @@ public class GlobalSearchSupport {
      * instead of the lookup key.
      */
     public Cursor handleSearchShortcutRefresh(SQLiteDatabase db, String[] projection,
-            String lookupKey, String filter) {
+            String lookupKey, String filter, CancellationSignal cancellationSignal) {
         long contactId;
         try {
             contactId = mContactsProvider.lookupContactIdByLookupKey(db, lookupKey);
@@ -216,11 +217,13 @@ public class GlobalSearchSupport {
         MatrixCursor cursor = new MatrixCursor(
                 projection == null ? SEARCH_SUGGESTIONS_COLUMNS : projection);
         return addSearchSuggestionsBasedOnFilter(cursor,
-                db, projection, ContactsColumns.CONCRETE_ID + "=" + contactId, filter, null);
+                db, projection, ContactsColumns.CONCRETE_ID + "=" + contactId, filter, null,
+                cancellationSignal);
     }
 
     private Cursor addSearchSuggestionsBasedOnFilter(MatrixCursor cursor, SQLiteDatabase db,
-            String[] projection, String selection, String filter, String limit) {
+            String[] projection, String selection, String filter, String limit,
+            CancellationSignal cancellationSignal) {
         StringBuilder sb = new StringBuilder();
         final boolean haveFilter = !TextUtils.isEmpty(filter);
         sb.append("SELECT "
@@ -247,7 +250,7 @@ public class GlobalSearchSupport {
         if (limit != null) {
             sb.append(" LIMIT " + limit);
         }
-        Cursor c = db.rawQuery(sb.toString(), null);
+        Cursor c = db.rawQuery(sb.toString(), null, cancellationSignal);
         SearchSuggestion suggestion = new SearchSuggestion();
         suggestion.filter = filter;
         try {
diff --git a/src/com/android/providers/contacts/HanziToPinyin.java b/src/com/android/providers/contacts/HanziToPinyin.java
index d8f0c91..0c35e21 100644
--- a/src/com/android/providers/contacts/HanziToPinyin.java
+++ b/src/com/android/providers/contacts/HanziToPinyin.java
@@ -19,234 +19,23 @@ package com.android.providers.contacts;
 import android.text.TextUtils;
 import android.util.Log;
 
-import java.text.Collator;
 import java.util.ArrayList;
 import java.util.Locale;
 
+import libcore.icu.Transliterator;
+
 /**
- * An object to convert Chinese character to its corresponding pinyin string. For characters with
- * multiple possible pinyin string, only one is selected according to collator. Polyphone is not
- * supported in this implementation. This class is implemented to achieve the best runtime
- * performance and minimum runtime resources with tolerable sacrifice of accuracy. This
- * implementation highly depends on zh_CN ICU collation data and must be always synchronized with
- * ICU.
- *
- * Currently this file is aligned to zh.txt in ICU 4.6
+ * An object to convert Chinese character to its corresponding pinyin string.
+ * For characters with multiple possible pinyin string, only one is selected
+ * according to ICU Transliterator class. Polyphone is not supported in this
+ * implementation.
  */
 public class HanziToPinyin {
     private static final String TAG = "HanziToPinyin";
 
-    // Turn on this flag when we want to check internal data structure.
-    private static final boolean DEBUG = false;
-
-    /**
-     * Unihans array. Each unihans is the first one within same pinyin. Use it to determine pinyin
-     * for all ~20k unihans.
-     */
-    public static final char[] UNIHANS = {
-            '\u5475', '\u54ce', '\u5b89', '\u80ae', '\u51f9',
-            '\u516b', '\u6300', '\u6273', '\u90a6', '\u5305', '\u5351', '\u5954', '\u4f3b',
-            '\u5c44', '\u8fb9', '\u6807', '\u618b', '\u90a0', '\u69df', '\u7676', '\u5cec',
-            '\u5693', '\u5a47', '\u98e1', '\u4ed3', '\u64cd', '\u518a', '\u5d7e', '\u564c',
-            '\u53c9', '\u9497', '\u8fbf', '\u4f25', '\u6284', '\u8f66', '\u62bb', '\u67fd',
-            '\u5403', '\u5145', '\u62bd', '\u51fa', '\u6b3b', '\u63e3', '\u5ddd', '\u75ae',
-            '\u5439', '\u6776', '\u9034', '\u75b5', '\u5306', '\u51d1', '\u7c97', '\u6c46',
-            '\u5d14', '\u90a8', '\u6413', '\u5491', '\u5927', '\u75b8', '\u5f53', '\u5200',
-            '\u6dc2', '\u5f97', '\u6265', '\u706f', '\u6c10', '\u55f2', '\u7538', '\u5201',
-            '\u7239', '\u4ec3', '\u4e1f', '\u4e1c', '\u5517', '\u561f', '\u5073', '\u5806',
-            '\u9413', '\u591a', '\u5a40', '\u8bf6', '\u5940', '\u97a5', '\u800c', '\u53d1',
-            '\u5e06', '\u65b9', '\u98de', '\u5206', '\u4e30', '\u8985', '\u4ecf', '\u7d11',
-            '\u4f15', '\u65ee', '\u8be5', '\u7518', '\u5188', '\u768b', '\u6208', '\u7d66',
-            '\u6839', '\u5e9a', '\u5de5', '\u52fe', '\u4f30', '\u74dc', '\u7f6b', '\u5173',
-            '\u5149', '\u5f52', '\u886e', '\u5459', '\u54c8', '\u54b3', '\u9878', '\u82c0',
-            '\u84bf', '\u8bc3', '\u9ed2', '\u62eb', '\u4ea8', '\u5677', '\u543d', '\u9f41',
-            '\u5322', '\u82b1', '\u6000', '\u72bf', '\u5ddf', '\u7070', '\u660f', '\u5419',
-            '\u4e0c', '\u52a0', '\u620b', '\u6c5f', '\u827d', '\u9636', '\u5dfe', '\u52a4',
-            '\u5182', '\u52fc', '\u530a', '\u5a1f', '\u5658', '\u519b', '\u5494', '\u5f00',
-            '\u520a', '\u95f6', '\u5c3b', '\u533c', '\u524b', '\u80af', '\u962c', '\u7a7a',
-            '\u62a0', '\u5233', '\u5938', '\u84af', '\u5bbd', '\u5321', '\u4e8f', '\u5764',
-            '\u6269', '\u5783', '\u6765', '\u5170', '\u5577', '\u635e', '\u4ec2', '\u52d2',
-            '\u5844', '\u5215', '\u5006', '\u5941', '\u826f', '\u64a9', '\u5217', '\u62ce',
-            '\u3007', '\u6e9c', '\u9f99', '\u779c', '\u565c', '\u5a08', '\u7567', '\u62a1',
-            '\u7f57', '\u5463', '\u5988', '\u973e', '\u5ada', '\u9099', '\u732b', '\u9ebc',
-            '\u6c92', '\u95e8', '\u753f', '\u54aa', '\u7720', '\u55b5', '\u54a9', '\u6c11',
-            '\u540d', '\u8c2c', '\u6478', '\u54de', '\u6bea', '\u62cf', '\u5b7b', '\u56e1',
-            '\u56ca', '\u5b6c', '\u8bb7', '\u9981', '\u6041', '\u80fd', '\u59ae', '\u62c8',
-            '\u5b22', '\u9e1f', '\u634f', '\u60a8', '\u5b81', '\u599e', '\u519c', '\u7fba',
-            '\u5974', '\u597b', '\u8650', '\u632a', '\u5594', '\u8bb4', '\u8db4', '\u62cd',
-            '\u7705', '\u4e53', '\u629b', '\u5478', '\u55b7', '\u5309', '\u4e15', '\u504f',
-            '\u527d', '\u6c15', '\u59d8', '\u4e52', '\u948b', '\u5256', '\u4ec6', '\u4e03',
-            '\u6390', '\u5343', '\u545b', '\u6084', '\u767f', '\u4fb5', '\u9751', '\u909b',
-            '\u4e18', '\u66f2', '\u5f2e', '\u7f3a', '\u590b', '\u5465', '\u7a63', '\u5a06',
-            '\u60f9', '\u4eba', '\u6254', '\u65e5', '\u8338', '\u53b9', '\u5982', '\u5827',
-            '\u6875', '\u95f0', '\u82e5', '\u4ee8', '\u6be2', '\u4e09', '\u6852', '\u63bb',
-            '\u8272', '\u68ee', '\u50e7', '\u6740', '\u7b5b', '\u5c71', '\u4f24', '\u5f30',
-            '\u5962', '\u7533', '\u5347', '\u5c38', '\u53ce', '\u4e66', '\u5237', '\u6454',
-            '\u95e9', '\u53cc', '\u8c01', '\u542e', '\u5981', '\u53b6', '\u5fea', '\u635c',
-            '\u82cf', '\u72fb', '\u590a', '\u5b59', '\u5506', '\u4ed6', '\u82d4', '\u574d',
-            '\u94f4', '\u5932', '\u5fd1', '\u71a5', '\u5254', '\u5929', '\u4f7b', '\u5e16',
-            '\u5385', '\u56f2', '\u5077', '\u92c0', '\u6e4d', '\u63a8', '\u541e', '\u6258',
-            '\u6316', '\u6b6a', '\u5f2f', '\u5c2a', '\u5371', '\u586d', '\u7fc1', '\u631d',
-            '\u5140', '\u5915', '\u867e', '\u4eda', '\u4e61', '\u7071', '\u4e9b', '\u5fc3',
-            '\u661f', '\u51f6', '\u4f11', '\u65f4', '\u8f69', '\u75b6', '\u52cb', '\u4e2b',
-            '\u6079', '\u592e', '\u5e7a', '\u8036', '\u4e00', '\u6b2d', '\u5e94', '\u54df',
-            '\u4f63', '\u4f18', '\u625c', '\u9e22', '\u66f0', '\u6655', '\u531d', '\u707d',
-            '\u7ccc', '\u7242', '\u50ae', '\u5219', '\u8d3c', '\u600e', '\u5897', '\u5412',
-            '\u635a', '\u6cbe', '\u5f20', '\u948a', '\u8707', '\u8d1e', '\u4e89', '\u4e4b',
-            '\u4e2d', '\u5dde', '\u6731', '\u6293', '\u8de9', '\u4e13', '\u5986', '\u96b9',
-            '\u5b92', '\u5353', '\u5b5c', '\u5b97', '\u90b9', '\u79df', '\u94bb', '\u539c',
-            '\u5c0a', '\u6628', };
-
-    /**
-     * Pinyin array. Each pinyin is corresponding to unihans of same offset in the unihans array.
-     */
-    public static final byte[][] PINYINS = {
-            { 65, 0, 0, 0, 0, 0 }, { 65, 73, 0, 0, 0, 0 }, { 65, 78, 0, 0, 0, 0 },
-            { 65, 78, 71, 0, 0, 0 }, { 65, 79, 0, 0, 0, 0 }, { 66, 65, 0, 0, 0, 0 },
-            { 66, 65, 73, 0, 0, 0 }, { 66, 65, 78, 0, 0, 0 }, { 66, 65, 78, 71, 0, 0 },
-            { 66, 65, 79, 0, 0, 0 }, { 66, 69, 73, 0, 0, 0 }, { 66, 69, 78, 0, 0, 0 },
-            { 66, 69, 78, 71, 0, 0 }, { 66, 73, 0, 0, 0, 0 }, { 66, 73, 65, 78, 0, 0 },
-            { 66, 73, 65, 79, 0, 0 }, { 66, 73, 69, 0, 0, 0 }, { 66, 73, 78, 0, 0, 0 },
-            { 66, 73, 78, 71, 0, 0 }, { 66, 79, 0, 0, 0, 0 }, { 66, 85, 0, 0, 0, 0 },
-            { 67, 65, 0, 0, 0, 0 }, { 67, 65, 73, 0, 0, 0 },
-            { 67, 65, 78, 0, 0, 0 }, { 67, 65, 78, 71, 0, 0 }, { 67, 65, 79, 0, 0, 0 },
-            { 67, 69, 0, 0, 0, 0 }, { 67, 69, 78, 0, 0, 0 }, { 67, 69, 78, 71, 0, 0 },
-            { 67, 72, 65, 0, 0, 0 }, { 67, 72, 65, 73, 0, 0 }, { 67, 72, 65, 78, 0, 0 },
-            { 67, 72, 65, 78, 71, 0 }, { 67, 72, 65, 79, 0, 0 }, { 67, 72, 69, 0, 0, 0 },
-            { 67, 72, 69, 78, 0, 0 }, { 67, 72, 69, 78, 71, 0 }, { 67, 72, 73, 0, 0, 0 },
-            { 67, 72, 79, 78, 71, 0 }, { 67, 72, 79, 85, 0, 0 }, { 67, 72, 85, 0, 0, 0 },
-            { 67, 72, 85, 65, 0, 0 }, { 67, 72, 85, 65, 73, 0 }, { 67, 72, 85, 65, 78, 0 },
-            { 67, 72, 85, 65, 78, 71 }, { 67, 72, 85, 73, 0, 0 }, { 67, 72, 85, 78, 0, 0 },
-            { 67, 72, 85, 79, 0, 0 }, { 67, 73, 0, 0, 0, 0 }, { 67, 79, 78, 71, 0, 0 },
-            { 67, 79, 85, 0, 0, 0 }, { 67, 85, 0, 0, 0, 0 }, { 67, 85, 65, 78, 0, 0 },
-            { 67, 85, 73, 0, 0, 0 }, { 67, 85, 78, 0, 0, 0 }, { 67, 85, 79, 0, 0, 0 },
-            { 68, 65, 0, 0, 0, 0 }, { 68, 65, 73, 0, 0, 0 }, { 68, 65, 78, 0, 0, 0 },
-            { 68, 65, 78, 71, 0, 0 }, { 68, 65, 79, 0, 0, 0 }, { 68, 69, 0, 0, 0, 0 },
-            { 68, 69, 73, 0, 0, 0 }, { 68, 69, 78, 0, 0, 0 }, { 68, 69, 78, 71, 0, 0 },
-            { 68, 73, 0, 0, 0, 0 }, { 68, 73, 65, 0, 0, 0 }, { 68, 73, 65, 78, 0, 0 },
-            { 68, 73, 65, 79, 0, 0 }, { 68, 73, 69, 0, 0, 0 }, { 68, 73, 78, 71, 0, 0 },
-            { 68, 73, 85, 0, 0, 0 }, { 68, 79, 78, 71, 0, 0 }, { 68, 79, 85, 0, 0, 0 },
-            { 68, 85, 0, 0, 0, 0 }, { 68, 85, 65, 78, 0, 0 }, { 68, 85, 73, 0, 0, 0 },
-            { 68, 85, 78, 0, 0, 0 }, { 68, 85, 79, 0, 0, 0 }, { 69, 0, 0, 0, 0, 0 },
-            { 69, 73, 0, 0, 0, 0 }, { 69, 78, 0, 0, 0, 0 }, { 69, 78, 71, 0, 0, 0 },
-            { 69, 82, 0, 0, 0, 0 }, { 70, 65, 0, 0, 0, 0 }, { 70, 65, 78, 0, 0, 0 },
-            { 70, 65, 78, 71, 0, 0 }, { 70, 69, 73, 0, 0, 0 }, { 70, 69, 78, 0, 0, 0 },
-            { 70, 69, 78, 71, 0, 0 }, { 70, 73, 65, 79, 0, 0 }, { 70, 79, 0, 0, 0, 0 },
-            { 70, 79, 85, 0, 0, 0 }, { 70, 85, 0, 0, 0, 0 }, { 71, 65, 0, 0, 0, 0 },
-            { 71, 65, 73, 0, 0, 0 }, { 71, 65, 78, 0, 0, 0 }, { 71, 65, 78, 71, 0, 0 },
-            { 71, 65, 79, 0, 0, 0 }, { 71, 69, 0, 0, 0, 0 }, { 71, 69, 73, 0, 0, 0 },
-            { 71, 69, 78, 0, 0, 0 }, { 71, 69, 78, 71, 0, 0 }, { 71, 79, 78, 71, 0, 0 },
-            { 71, 79, 85, 0, 0, 0 }, { 71, 85, 0, 0, 0, 0 }, { 71, 85, 65, 0, 0, 0 },
-            { 71, 85, 65, 73, 0, 0 }, { 71, 85, 65, 78, 0, 0 }, { 71, 85, 65, 78, 71, 0 },
-            { 71, 85, 73, 0, 0, 0 }, { 71, 85, 78, 0, 0, 0 }, { 71, 85, 79, 0, 0, 0 },
-            { 72, 65, 0, 0, 0, 0 }, { 72, 65, 73, 0, 0, 0 }, { 72, 65, 78, 0, 0, 0 },
-            { 72, 65, 78, 71, 0, 0 }, { 72, 65, 79, 0, 0, 0 }, { 72, 69, 0, 0, 0, 0 },
-            { 72, 69, 73, 0, 0, 0 }, { 72, 69, 78, 0, 0, 0 }, { 72, 69, 78, 71, 0, 0 },
-            { 72, 77, 0, 0, 0, 0 }, { 72, 79, 78, 71, 0, 0 }, { 72, 79, 85, 0, 0, 0 },
-            { 72, 85, 0, 0, 0, 0 }, { 72, 85, 65, 0, 0, 0 }, { 72, 85, 65, 73, 0, 0 },
-            { 72, 85, 65, 78, 0, 0 }, { 72, 85, 65, 78, 71, 0 }, { 72, 85, 73, 0, 0, 0 },
-            { 72, 85, 78, 0, 0, 0 }, { 72, 85, 79, 0, 0, 0 }, { 74, 73, 0, 0, 0, 0 },
-            { 74, 73, 65, 0, 0, 0 }, { 74, 73, 65, 78, 0, 0 }, { 74, 73, 65, 78, 71, 0 },
-            { 74, 73, 65, 79, 0, 0 }, { 74, 73, 69, 0, 0, 0 }, { 74, 73, 78, 0, 0, 0 },
-            { 74, 73, 78, 71, 0, 0 }, { 74, 73, 79, 78, 71, 0 }, { 74, 73, 85, 0, 0, 0 },
-            { 74, 85, 0, 0, 0, 0 }, { 74, 85, 65, 78, 0, 0 }, { 74, 85, 69, 0, 0, 0 },
-            { 74, 85, 78, 0, 0, 0 }, { 75, 65, 0, 0, 0, 0 }, { 75, 65, 73, 0, 0, 0 },
-            { 75, 65, 78, 0, 0, 0 }, { 75, 65, 78, 71, 0, 0 }, { 75, 65, 79, 0, 0, 0 },
-            { 75, 69, 0, 0, 0, 0 }, { 75, 69, 73, 0, 0, 0 }, { 75, 69, 78, 0, 0, 0 },
-            { 75, 69, 78, 71, 0, 0 }, { 75, 79, 78, 71, 0, 0 }, { 75, 79, 85, 0, 0, 0 },
-            { 75, 85, 0, 0, 0, 0 }, { 75, 85, 65, 0, 0, 0 }, { 75, 85, 65, 73, 0, 0 },
-            { 75, 85, 65, 78, 0, 0 }, { 75, 85, 65, 78, 71, 0 }, { 75, 85, 73, 0, 0, 0 },
-            { 75, 85, 78, 0, 0, 0 }, { 75, 85, 79, 0, 0, 0 }, { 76, 65, 0, 0, 0, 0 },
-            { 76, 65, 73, 0, 0, 0 }, { 76, 65, 78, 0, 0, 0 }, { 76, 65, 78, 71, 0, 0 },
-            { 76, 65, 79, 0, 0, 0 }, { 76, 69, 0, 0, 0, 0 }, { 76, 69, 73, 0, 0, 0 },
-            { 76, 69, 78, 71, 0, 0 }, { 76, 73, 0, 0, 0, 0 }, { 76, 73, 65, 0, 0, 0 },
-            { 76, 73, 65, 78, 0, 0 }, { 76, 73, 65, 78, 71, 0 }, { 76, 73, 65, 79, 0, 0 },
-            { 76, 73, 69, 0, 0, 0 }, { 76, 73, 78, 0, 0, 0 }, { 76, 73, 78, 71, 0, 0 },
-            { 76, 73, 85, 0, 0, 0 }, { 76, 79, 78, 71, 0, 0 }, { 76, 79, 85, 0, 0, 0 },
-            { 76, 85, 0, 0, 0, 0 }, { 76, 85, 65, 78, 0, 0 }, { 76, 85, 69, 0, 0, 0 },
-            { 76, 85, 78, 0, 0, 0 }, { 76, 85, 79, 0, 0, 0 }, { 77, 0, 0, 0, 0, 0 },
-            { 77, 65, 0, 0, 0, 0 }, { 77, 65, 73, 0, 0, 0 }, { 77, 65, 78, 0, 0, 0 },
-            { 77, 65, 78, 71, 0, 0 }, { 77, 65, 79, 0, 0, 0 }, { 77, 69, 0, 0, 0, 0 },
-            { 77, 69, 73, 0, 0, 0 }, { 77, 69, 78, 0, 0, 0 }, { 77, 69, 78, 71, 0, 0 },
-            { 77, 73, 0, 0, 0, 0 }, { 77, 73, 65, 78, 0, 0 }, { 77, 73, 65, 79, 0, 0 },
-            { 77, 73, 69, 0, 0, 0 }, { 77, 73, 78, 0, 0, 0 }, { 77, 73, 78, 71, 0, 0 },
-            { 77, 73, 85, 0, 0, 0 }, { 77, 79, 0, 0, 0, 0 }, { 77, 79, 85, 0, 0, 0 },
-            { 77, 85, 0, 0, 0, 0 }, { 78, 65, 0, 0, 0, 0 }, { 78, 65, 73, 0, 0, 0 },
-            { 78, 65, 78, 0, 0, 0 }, { 78, 65, 78, 71, 0, 0 }, { 78, 65, 79, 0, 0, 0 },
-            { 78, 69, 0, 0, 0, 0 }, { 78, 69, 73, 0, 0, 0 }, { 78, 69, 78, 0, 0, 0 },
-            { 78, 69, 78, 71, 0, 0 }, { 78, 73, 0, 0, 0, 0 }, { 78, 73, 65, 78, 0, 0 },
-            { 78, 73, 65, 78, 71, 0 }, { 78, 73, 65, 79, 0, 0 }, { 78, 73, 69, 0, 0, 0 },
-            { 78, 73, 78, 0, 0, 0 }, { 78, 73, 78, 71, 0, 0 }, { 78, 73, 85, 0, 0, 0 },
-            { 78, 79, 78, 71, 0, 0 }, { 78, 79, 85, 0, 0, 0 }, { 78, 85, 0, 0, 0, 0 },
-            { 78, 85, 65, 78, 0, 0 }, { 78, 85, 69, 0, 0, 0 }, { 78, 85, 79, 0, 0, 0 },
-            { 79, 0, 0, 0, 0, 0 }, { 79, 85, 0, 0, 0, 0 }, { 80, 65, 0, 0, 0, 0 },
-            { 80, 65, 73, 0, 0, 0 }, { 80, 65, 78, 0, 0, 0 }, { 80, 65, 78, 71, 0, 0 },
-            { 80, 65, 79, 0, 0, 0 }, { 80, 69, 73, 0, 0, 0 }, { 80, 69, 78, 0, 0, 0 },
-            { 80, 69, 78, 71, 0, 0 }, { 80, 73, 0, 0, 0, 0 }, { 80, 73, 65, 78, 0, 0 },
-            { 80, 73, 65, 79, 0, 0 }, { 80, 73, 69, 0, 0, 0 }, { 80, 73, 78, 0, 0, 0 },
-            { 80, 73, 78, 71, 0, 0 }, { 80, 79, 0, 0, 0, 0 }, { 80, 79, 85, 0, 0, 0 },
-            { 80, 85, 0, 0, 0, 0 }, { 81, 73, 0, 0, 0, 0 }, { 81, 73, 65, 0, 0, 0 },
-            { 81, 73, 65, 78, 0, 0 }, { 81, 73, 65, 78, 71, 0 }, { 81, 73, 65, 79, 0, 0 },
-            { 81, 73, 69, 0, 0, 0 }, { 81, 73, 78, 0, 0, 0 }, { 81, 73, 78, 71, 0, 0 },
-            { 81, 73, 79, 78, 71, 0 }, { 81, 73, 85, 0, 0, 0 }, { 81, 85, 0, 0, 0, 0 },
-            { 81, 85, 65, 78, 0, 0 }, { 81, 85, 69, 0, 0, 0 }, { 81, 85, 78, 0, 0, 0 },
-            { 82, 65, 78, 0, 0, 0 }, { 82, 65, 78, 71, 0, 0 }, { 82, 65, 79, 0, 0, 0 },
-            { 82, 69, 0, 0, 0, 0 }, { 82, 69, 78, 0, 0, 0 }, { 82, 69, 78, 71, 0, 0 },
-            { 82, 73, 0, 0, 0, 0 }, { 82, 79, 78, 71, 0, 0 }, { 82, 79, 85, 0, 0, 0 },
-            { 82, 85, 0, 0, 0, 0 }, { 82, 85, 65, 78, 0, 0 }, { 82, 85, 73, 0, 0, 0 },
-            { 82, 85, 78, 0, 0, 0 }, { 82, 85, 79, 0, 0, 0 }, { 83, 65, 0, 0, 0, 0 },
-            { 83, 65, 73, 0, 0, 0 }, { 83, 65, 78, 0, 0, 0 }, { 83, 65, 78, 71, 0, 0 },
-            { 83, 65, 79, 0, 0, 0 }, { 83, 69, 0, 0, 0, 0 }, { 83, 69, 78, 0, 0, 0 },
-            { 83, 69, 78, 71, 0, 0 }, { 83, 72, 65, 0, 0, 0 }, { 83, 72, 65, 73, 0, 0 },
-            { 83, 72, 65, 78, 0, 0 }, { 83, 72, 65, 78, 71, 0 }, { 83, 72, 65, 79, 0, 0 },
-            { 83, 72, 69, 0, 0, 0 }, { 83, 72, 69, 78, 0, 0 }, { 83, 72, 69, 78, 71, 0 },
-            { 83, 72, 73, 0, 0, 0 }, { 83, 72, 79, 85, 0, 0 }, { 83, 72, 85, 0, 0, 0 },
-            { 83, 72, 85, 65, 0, 0 }, { 83, 72, 85, 65, 73, 0 }, { 83, 72, 85, 65, 78, 0 },
-            { 83, 72, 85, 65, 78, 71 }, { 83, 72, 85, 73, 0, 0 }, { 83, 72, 85, 78, 0, 0 },
-            { 83, 72, 85, 79, 0, 0 }, { 83, 73, 0, 0, 0, 0 }, { 83, 79, 78, 71, 0, 0 },
-            { 83, 79, 85, 0, 0, 0 }, { 83, 85, 0, 0, 0, 0 }, { 83, 85, 65, 78, 0, 0 },
-            { 83, 85, 73, 0, 0, 0 }, { 83, 85, 78, 0, 0, 0 }, { 83, 85, 79, 0, 0, 0 },
-            { 84, 65, 0, 0, 0, 0 }, { 84, 65, 73, 0, 0, 0 }, { 84, 65, 78, 0, 0, 0 },
-            { 84, 65, 78, 71, 0, 0 }, { 84, 65, 79, 0, 0, 0 }, { 84, 69, 0, 0, 0, 0 },
-            { 84, 69, 78, 71, 0, 0 }, { 84, 73, 0, 0, 0, 0 }, { 84, 73, 65, 78, 0, 0 },
-            { 84, 73, 65, 79, 0, 0 }, { 84, 73, 69, 0, 0, 0 }, { 84, 73, 78, 71, 0, 0 },
-            { 84, 79, 78, 71, 0, 0 }, { 84, 79, 85, 0, 0, 0 }, { 84, 85, 0, 0, 0, 0 },
-            { 84, 85, 65, 78, 0, 0 }, { 84, 85, 73, 0, 0, 0 }, { 84, 85, 78, 0, 0, 0 },
-            { 84, 85, 79, 0, 0, 0 }, { 87, 65, 0, 0, 0, 0 }, { 87, 65, 73, 0, 0, 0 },
-            { 87, 65, 78, 0, 0, 0 }, { 87, 65, 78, 71, 0, 0 }, { 87, 69, 73, 0, 0, 0 },
-            { 87, 69, 78, 0, 0, 0 }, { 87, 69, 78, 71, 0, 0 }, { 87, 79, 0, 0, 0, 0 },
-            { 87, 85, 0, 0, 0, 0 }, { 88, 73, 0, 0, 0, 0 }, { 88, 73, 65, 0, 0, 0 },
-            { 88, 73, 65, 78, 0, 0 }, { 88, 73, 65, 78, 71, 0 }, { 88, 73, 65, 79, 0, 0 },
-            { 88, 73, 69, 0, 0, 0 }, { 88, 73, 78, 0, 0, 0 }, { 88, 73, 78, 71, 0, 0 },
-            { 88, 73, 79, 78, 71, 0 }, { 88, 73, 85, 0, 0, 0 }, { 88, 85, 0, 0, 0, 0 },
-            { 88, 85, 65, 78, 0, 0 }, { 88, 85, 69, 0, 0, 0 }, { 88, 85, 78, 0, 0, 0 },
-            { 89, 65, 0, 0, 0, 0 }, { 89, 65, 78, 0, 0, 0 }, { 89, 65, 78, 71, 0, 0 },
-            { 89, 65, 79, 0, 0, 0 }, { 89, 69, 0, 0, 0, 0 }, { 89, 73, 0, 0, 0, 0 },
-            { 89, 73, 78, 0, 0, 0 }, { 89, 73, 78, 71, 0, 0 }, { 89, 79, 0, 0, 0, 0 },
-            { 89, 79, 78, 71, 0, 0 }, { 89, 79, 85, 0, 0, 0 }, { 89, 85, 0, 0, 0, 0 },
-            { 89, 85, 65, 78, 0, 0 }, { 89, 85, 69, 0, 0, 0 }, { 89, 85, 78, 0, 0, 0 },
-            { 90, 65, 0, 0, 0, 0 }, { 90, 65, 73, 0, 0, 0 }, { 90, 65, 78, 0, 0, 0 },
-            { 90, 65, 78, 71, 0, 0 }, { 90, 65, 79, 0, 0, 0 }, { 90, 69, 0, 0, 0, 0 },
-            { 90, 69, 73, 0, 0, 0 }, { 90, 69, 78, 0, 0, 0 }, { 90, 69, 78, 71, 0, 0 },
-            { 90, 72, 65, 0, 0, 0 }, { 90, 72, 65, 73, 0, 0 }, { 90, 72, 65, 78, 0, 0 },
-            { 90, 72, 65, 78, 71, 0 }, { 90, 72, 65, 79, 0, 0 }, { 90, 72, 69, 0, 0, 0 },
-            { 90, 72, 69, 78, 0, 0 }, { 90, 72, 69, 78, 71, 0 }, { 90, 72, 73, 0, 0, 0 },
-            { 90, 72, 79, 78, 71, 0 }, { 90, 72, 79, 85, 0, 0 }, { 90, 72, 85, 0, 0, 0 },
-            { 90, 72, 85, 65, 0, 0 }, { 90, 72, 85, 65, 73, 0 }, { 90, 72, 85, 65, 78, 0 },
-            { 90, 72, 85, 65, 78, 71 }, { 90, 72, 85, 73, 0, 0 }, { 90, 72, 85, 78, 0, 0 },
-            { 90, 72, 85, 79, 0, 0 }, { 90, 73, 0, 0, 0, 0 }, { 90, 79, 78, 71, 0, 0 },
-            { 90, 79, 85, 0, 0, 0 }, { 90, 85, 0, 0, 0, 0 }, { 90, 85, 65, 78, 0, 0 },
-            { 90, 85, 73, 0, 0, 0 }, { 90, 85, 78, 0, 0, 0 }, { 90, 85, 79, 0, 0, 0 }, };
-
-    /** First and last Chinese character with known Pinyin according to zh collation */
-    private static final String FIRST_PINYIN_UNIHAN = "\u963F";
-    private static final String LAST_PINYIN_UNIHAN = "\u84D9";
-    /** The first Chinese character in Unicode block */
-    private static final char FIRST_UNIHAN = '\u3400';
-    private static final Collator COLLATOR = Collator.getInstance(Locale.CHINA);
-
     private static HanziToPinyin sInstance;
-    private final boolean mHasChinaCollator;
+    private Transliterator mPinyinTransliterator;
+    private Transliterator mAsciiTransliterator;
 
     public static class Token {
         /**
@@ -282,172 +71,98 @@ public class HanziToPinyin {
         public String target;
     }
 
-    protected HanziToPinyin(boolean hasChinaCollator) {
-        mHasChinaCollator = hasChinaCollator;
+    private HanziToPinyin() {
+        try {
+            mPinyinTransliterator = new Transliterator("Han-Latin/Names; Latin-Ascii; Any-Upper");
+            mAsciiTransliterator = new Transliterator("Latin-Ascii");
+        } catch (RuntimeException e) {
+            Log.w(TAG, "Han-Latin/Names transliterator data is missing,"
+                  + " HanziToPinyin is disabled");
+        }
+    }
+
+    public boolean hasChineseTransliterator() {
+        return mPinyinTransliterator != null;
     }
 
     public static HanziToPinyin getInstance() {
         synchronized (HanziToPinyin.class) {
-            if (sInstance != null) {
-                return sInstance;
-            }
-            // Check if zh_CN collation data is available
-            final Locale locale[] = Collator.getAvailableLocales();
-            for (int i = 0; i < locale.length; i++) {
-                if (locale[i].equals(Locale.CHINA)) {
-                    // Do self validation just once.
-                    if (DEBUG) {
-                        Log.d(TAG, "Self validation. Result: " + doSelfValidation());
-                    }
-                    sInstance = new HanziToPinyin(true);
-                    return sInstance;
-                }
+            if (sInstance == null) {
+                sInstance = new HanziToPinyin();
             }
-            Log.w(TAG, "There is no Chinese collator, HanziToPinyin is disabled");
-            sInstance = new HanziToPinyin(false);
             return sInstance;
         }
     }
 
-    /**
-     * Validate if our internal table has some wrong value.
-     *
-     * @return true when the table looks correct.
-     */
-    private static boolean doSelfValidation() {
-        char lastChar = UNIHANS[0];
-        String lastString = Character.toString(lastChar);
-        for (char c : UNIHANS) {
-            if (lastChar == c) {
-                continue;
-            }
-            final String curString = Character.toString(c);
-            int cmp = COLLATOR.compare(lastString, curString);
-            if (cmp >= 0) {
-                Log.e(TAG, "Internal error in Unihan table. " + "The last string \"" + lastString
-                        + "\" is greater than current string \"" + curString + "\".");
-                return false;
-            }
-            lastString = curString;
+    private void tokenize(char character, Token token) {
+        token.source = Character.toString(character);
+
+        // ASCII
+        if (character < 128) {
+            token.type = Token.LATIN;
+            token.target = token.source;
+            return;
         }
-        return true;
-    }
 
-    private Token getToken(char character) {
-        Token token = new Token();
-        final String letter = Character.toString(character);
-        token.source = letter;
-        int offset = -1;
-        int cmp;
-        if (character < 256) {
+        // Extended Latin. Transcode these to ASCII equivalents
+        if (character < 0x250 || (0x1e00 <= character && character < 0x1eff)) {
             token.type = Token.LATIN;
-            token.target = letter;
-            return token;
-        } else if (character < FIRST_UNIHAN) {
-            token.type = Token.UNKNOWN;
-            token.target = letter;
-            return token;
-        } else {
-            cmp = COLLATOR.compare(letter, FIRST_PINYIN_UNIHAN);
-            if (cmp < 0) {
-                token.type = Token.UNKNOWN;
-                token.target = letter;
-                return token;
-            } else if (cmp == 0) {
-                token.type = Token.PINYIN;
-                offset = 0;
-            } else {
-                cmp = COLLATOR.compare(letter, LAST_PINYIN_UNIHAN);
-                if (cmp > 0) {
-                    token.type = Token.UNKNOWN;
-                    token.target = letter;
-                    return token;
-                } else if (cmp == 0) {
-                    token.type = Token.PINYIN;
-                    offset = UNIHANS.length - 1;
-                }
-            }
+            token.target = mAsciiTransliterator == null ? token.source :
+                mAsciiTransliterator.transliterate(token.source);
+            return;
         }
 
         token.type = Token.PINYIN;
-        if (offset < 0) {
-            int begin = 0;
-            int end = UNIHANS.length - 1;
-            while (begin <= end) {
-                offset = (begin + end) / 2;
-                final String unihan = Character.toString(UNIHANS[offset]);
-                cmp = COLLATOR.compare(letter, unihan);
-                if (cmp == 0) {
-                    break;
-                } else if (cmp > 0) {
-                    begin = offset + 1;
-                } else {
-                    end = offset - 1;
-                }
-            }
-        }
-        if (cmp < 0) {
-            offset--;
-        }
-        StringBuilder pinyin = new StringBuilder();
-        for (int j = 0; j < PINYINS[offset].length && PINYINS[offset][j] != 0; j++) {
-            pinyin.append((char) PINYINS[offset][j]);
+        token.target = mPinyinTransliterator.transliterate(token.source);
+        if (TextUtils.isEmpty(token.target) ||
+            TextUtils.equals(token.source, token.target)) {
+            token.type = Token.UNKNOWN;
+            token.target = token.source;
         }
-        token.target = pinyin.toString();
-        return token;
     }
 
     /**
      * Convert the input to a array of tokens. The sequence of ASCII or Unknown characters without
      * space will be put into a Token, One Hanzi character which has pinyin will be treated as a
-     * Token. If these is no China collator, the empty token array is returned.
+     * Token. If there is no Chinese transliterator, the empty token array is returned.
      */
     public ArrayList<Token> get(final String input) {
         ArrayList<Token> tokens = new ArrayList<Token>();
-        if (!mHasChinaCollator || TextUtils.isEmpty(input)) {
+        if (!hasChineseTransliterator() || TextUtils.isEmpty(input)) {
             // return empty tokens.
             return tokens;
         }
+
         final int inputLength = input.length();
         final StringBuilder sb = new StringBuilder();
         int tokenType = Token.LATIN;
+        Token token = new Token();
+
         // Go through the input, create a new token when
         // a. Token type changed
         // b. Get the Pinyin of current charater.
         // c. current character is space.
         for (int i = 0; i < inputLength; i++) {
             final char character = input.charAt(i);
-            if (character == ' ') {
+            if (Character.isSpaceChar(character)) {
                 if (sb.length() > 0) {
                     addToken(sb, tokens, tokenType);
                 }
-            } else if (character < 256) {
-                if (tokenType != Token.LATIN && sb.length() > 0) {
-                    addToken(sb, tokens, tokenType);
-                }
-                tokenType = Token.LATIN;
-                sb.append(character);
-            } else if (character < FIRST_UNIHAN) {
-                if (tokenType != Token.UNKNOWN && sb.length() > 0) {
-                    addToken(sb, tokens, tokenType);
-                }
-                tokenType = Token.UNKNOWN;
-                sb.append(character);
             } else {
-                Token t = getToken(character);
-                if (t.type == Token.PINYIN) {
+                tokenize(character, token);
+                if (token.type == Token.PINYIN) {
                     if (sb.length() > 0) {
                         addToken(sb, tokens, tokenType);
                     }
-                    tokens.add(t);
-                    tokenType = Token.PINYIN;
+                    tokens.add(token);
+                    token = new Token();
                 } else {
-                    if (tokenType != t.type && sb.length() > 0) {
+                    if (tokenType != token.type && sb.length() > 0) {
                         addToken(sb, tokens, tokenType);
                     }
-                    tokenType = t.type;
-                    sb.append(character);
+                    sb.append(token.target);
                 }
+                tokenType = token.type;
             }
         }
         if (sb.length() > 0) {
diff --git a/src/com/android/providers/contacts/LegacyApiSupport.java b/src/com/android/providers/contacts/LegacyApiSupport.java
index 78cbc9d..1ed7488 100644
--- a/src/com/android/providers/contacts/LegacyApiSupport.java
+++ b/src/com/android/providers/contacts/LegacyApiSupport.java
@@ -15,19 +15,6 @@
  */
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.ContactsDatabaseHelper.AccountsColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.DataColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.ExtensionsColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.GroupsColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.MimetypesColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.NameLookupColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.NameLookupType;
-import com.android.providers.contacts.ContactsDatabaseHelper.PhoneLookupColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.PresenceColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.RawContactsColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.StatusUpdatesColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
-
 import android.accounts.Account;
 import android.app.SearchManager;
 import android.content.ContentUris;
@@ -65,6 +52,19 @@ import android.provider.ContactsContract.StatusUpdates;
 import android.text.TextUtils;
 import android.util.Log;
 
+import com.android.providers.contacts.ContactsDatabaseHelper.AccountsColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.DataColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.ExtensionsColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.GroupsColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.MimetypesColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.NameLookupColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.NameLookupType;
+import com.android.providers.contacts.ContactsDatabaseHelper.PhoneLookupColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.PresenceColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.RawContactsColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.StatusUpdatesColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
+
 import java.util.HashMap;
 import java.util.Locale;
 
@@ -1877,13 +1877,13 @@ public class LegacyApiSupport {
 
             case SEARCH_SUGGESTIONS:
                 return mGlobalSearchSupport.handleSearchSuggestionsQuery(
-                        db, uri, projection, limit);
+                        db, uri, projection, limit, null);
 
             case SEARCH_SHORTCUT: {
                 String lookupKey = uri.getLastPathSegment();
                 String filter = ContactsProvider2.getQueryParameter(uri, "filter");
                 return mGlobalSearchSupport.handleSearchShortcutRefresh(
-                        db, projection, lookupKey, filter);
+                        db, projection, lookupKey, filter, null);
             }
 
             case LIVE_FOLDERS_PEOPLE:
diff --git a/src/com/android/providers/contacts/NameLookupBuilder.java b/src/com/android/providers/contacts/NameLookupBuilder.java
index 5ebbcd1..fb266da 100644
--- a/src/com/android/providers/contacts/NameLookupBuilder.java
+++ b/src/com/android/providers/contacts/NameLookupBuilder.java
@@ -16,11 +16,11 @@
 
 package com.android.providers.contacts;
 
+import android.provider.ContactsContract.FullNameStyle;
+
 import com.android.providers.contacts.ContactsDatabaseHelper.NameLookupType;
 import com.android.providers.contacts.SearchIndexManager.IndexBuilder;
 
-import android.provider.ContactsContract.FullNameStyle;
-
 import java.util.Arrays;
 import java.util.Comparator;
 import java.util.Iterator;
@@ -319,9 +319,14 @@ public abstract class NameLookupBuilder {
         }
     }
 
-    private void appendNameShorthandLookup(IndexBuilder builder, String name, int fullNameStyle) {
+    /**
+     * Insert more name indexes according to locale specifies for those locales
+     * for which we have alternative shorthand name methods (eg, Pinyin for
+     * Chinese, Romaji for Japanese).
+     */
+    public void appendNameShorthandLookup(IndexBuilder builder, String name, int fullNameStyle) {
         Iterator<String> it =
-                ContactLocaleUtils.getIntance().getNameLookupKeys(name, fullNameStyle);
+                ContactLocaleUtils.getInstance().getNameLookupKeys(name, fullNameStyle);
         if (it != null) {
             while (it.hasNext()) {
                 builder.appendName(it.next());
diff --git a/src/com/android/providers/contacts/NameNormalizer.java b/src/com/android/providers/contacts/NameNormalizer.java
index d91bd7c..e3f98a8 100644
--- a/src/com/android/providers/contacts/NameNormalizer.java
+++ b/src/com/android/providers/contacts/NameNormalizer.java
@@ -16,11 +16,12 @@
 package com.android.providers.contacts;
 
 import com.android.providers.contacts.util.Hex;
+import com.google.common.annotations.VisibleForTesting;
 
-import java.util.Locale;
-import java.text.Collator;
 import java.text.CollationKey;
+import java.text.Collator;
 import java.text.RuleBasedCollator;
+import java.util.Locale;
 
 /**
  * Converts a name to a normalized form by removing all non-letter characters and normalizing
@@ -28,17 +29,45 @@ import java.text.RuleBasedCollator;
  */
 public class NameNormalizer {
 
-    private static final RuleBasedCollator sCompressingCollator;
-    static {
-        sCompressingCollator = (RuleBasedCollator)Collator.getInstance(Locale.getDefault());
-        sCompressingCollator.setStrength(Collator.PRIMARY);
-        sCompressingCollator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);
+    private static final Object sCollatorLock = new Object();
+
+    private static Locale sCollatorLocale;
+
+    private static RuleBasedCollator sCachedCompressingCollator;
+    private static RuleBasedCollator sCachedComplexityCollator;
+
+    /**
+     * Ensure that the cached collators are for the current locale.
+     */
+    private static void ensureCollators() {
+        final Locale locale = Locale.getDefault();
+        if (locale.equals(sCollatorLocale)) {
+            return;
+        }
+        sCollatorLocale = locale;
+
+        sCachedCompressingCollator = (RuleBasedCollator) Collator.getInstance(locale);
+        sCachedCompressingCollator.setStrength(Collator.PRIMARY);
+        sCachedCompressingCollator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);
+
+        sCachedComplexityCollator = (RuleBasedCollator) Collator.getInstance(locale);
+        sCachedComplexityCollator.setStrength(Collator.SECONDARY);
     }
 
-    private static final RuleBasedCollator sComplexityCollator;
-    static {
-        sComplexityCollator = (RuleBasedCollator)Collator.getInstance(Locale.getDefault());
-        sComplexityCollator.setStrength(Collator.SECONDARY);
+    @VisibleForTesting
+    static RuleBasedCollator getCompressingCollator() {
+        synchronized (sCollatorLock) {
+            ensureCollators();
+            return sCachedCompressingCollator;
+        }
+    }
+
+    @VisibleForTesting
+    static RuleBasedCollator getComplexityCollator() {
+        synchronized (sCollatorLock) {
+            ensureCollators();
+            return sCachedComplexityCollator;
+        }
     }
 
     /**
@@ -46,7 +75,7 @@ public class NameNormalizer {
      * of names.  It ignores non-letter, non-digit characters, and removes accents.
      */
     public static String normalize(String name) {
-        CollationKey key = sCompressingCollator.getCollationKey(lettersAndDigitsOnly(name));
+        CollationKey key = getCompressingCollator().getCollationKey(lettersAndDigitsOnly(name));
         return Hex.encodeHex(key.toByteArray(), true);
     }
 
@@ -57,7 +86,7 @@ public class NameNormalizer {
     public static int compareComplexity(String name1, String name2) {
         String clean1 = lettersAndDigitsOnly(name1);
         String clean2 = lettersAndDigitsOnly(name2);
-        int diff = sComplexityCollator.compare(clean1, clean2);
+        int diff = getComplexityCollator().compare(clean1, clean2);
         if (diff != 0) {
             return diff;
         }
diff --git a/src/com/android/providers/contacts/NameSplitter.java b/src/com/android/providers/contacts/NameSplitter.java
index fd5b096..ebf6136 100644
--- a/src/com/android/providers/contacts/NameSplitter.java
+++ b/src/com/android/providers/contacts/NameSplitter.java
@@ -15,14 +15,14 @@
  */
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.util.NeededForTesting;
-
 import android.content.ContentValues;
+import android.provider.ContactsContract.CommonDataKinds.StructuredName;
 import android.provider.ContactsContract.FullNameStyle;
 import android.provider.ContactsContract.PhoneticNameStyle;
-import android.provider.ContactsContract.CommonDataKinds.StructuredName;
 import android.text.TextUtils;
 
+import com.android.providers.contacts.util.NeededForTesting;
+
 import java.lang.Character.UnicodeBlock;
 import java.util.HashSet;
 import java.util.Locale;
@@ -330,9 +330,6 @@ public class NameSplitter {
         }
 
         String firstToken = tokenizer.mTokens[tokenizer.mStartPointer];
-        if (mPrefixesSet.contains(firstToken.toUpperCase())) {
-           tokenizer.mStartPointer++;
-        }
         int count = 0;
         for (int i = tokenizer.mStartPointer; i < tokenizer.mEndPointer; i++) {
             tokens[count++] = tokenizer.mTokens[i];
diff --git a/src/com/android/providers/contacts/PhotoPriorityResolver.java b/src/com/android/providers/contacts/PhotoPriorityResolver.java
index c0dc4d9..150811c 100644
--- a/src/com/android/providers/contacts/PhotoPriorityResolver.java
+++ b/src/com/android/providers/contacts/PhotoPriorityResolver.java
@@ -16,22 +16,22 @@
 
 package com.android.providers.contacts;
 
-import com.android.internal.util.XmlUtils;
-import com.google.android.collect.Maps;
-
-import org.xmlpull.v1.XmlPullParser;
-import org.xmlpull.v1.XmlPullParserException;
-
 import android.accounts.AccountManager;
 import android.accounts.AuthenticatorDescription;
 import android.content.Context;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
-import android.content.pm.ServiceInfo;
 import android.content.pm.PackageManager.NameNotFoundException;
+import android.content.pm.ServiceInfo;
 import android.content.res.XmlResourceParser;
 import android.util.Log;
 
+import com.android.internal.util.XmlUtils;
+import com.google.android.collect.Maps;
+
+import org.xmlpull.v1.XmlPullParser;
+import org.xmlpull.v1.XmlPullParserException;
+
 import java.io.IOException;
 import java.util.HashMap;
 
diff --git a/src/com/android/providers/contacts/PhotoProcessor.java b/src/com/android/providers/contacts/PhotoProcessor.java
index cf81ff3..1b8fc3f 100644
--- a/src/com/android/providers/contacts/PhotoProcessor.java
+++ b/src/com/android/providers/contacts/PhotoProcessor.java
@@ -15,13 +15,18 @@
  */
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.util.MemoryUtils;
-
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
-import android.graphics.Matrix;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.graphics.RectF;
 import android.os.SystemProperties;
 
+import com.android.providers.contacts.util.MemoryUtils;
+import com.google.common.annotations.VisibleForTesting;
+
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 
@@ -43,6 +48,12 @@ import java.io.IOException;
     /** Compression for thumbnails that also have a display photo */
     private static final int COMPRESSION_THUMBNAIL_LOW = 90;
 
+    private static final Paint WHITE_PAINT = new Paint();
+
+    static {
+        WHITE_PAINT.setColor(Color.WHITE);
+    }
+
     private static int sMaxThumbnailDim;
     private static int sMaxDisplayPhotoDim;
 
@@ -169,43 +180,65 @@ import java.io.IOException;
         if (mOriginal == null) {
             throw new IOException("Invalid image file");
         }
-        mDisplayPhoto = getScaledBitmap(mMaxDisplayPhotoDim);
-        mThumbnailPhoto = getScaledBitmap(mMaxThumbnailPhotoDim);
+        mDisplayPhoto = getNormalizedBitmap(mOriginal, mMaxDisplayPhotoDim, mForceCropToSquare);
+        mThumbnailPhoto = getNormalizedBitmap(mOriginal,mMaxThumbnailPhotoDim, mForceCropToSquare);
     }
 
     /**
      * Scales down the original bitmap to fit within the given maximum width and height.
      * If the bitmap already fits in those dimensions, the original bitmap will be
      * returned unmodified unless the photo processor is set up to crop it to a square.
+     *
+     * Also, if the image has transparency, conevrt it to white.
+     *
+     * @param original Original bitmap
      * @param maxDim Maximum width and height (in pixels) for the image.
+     * @param forceCropToSquare See {@link #PhotoProcessor(Bitmap, int, int, boolean)}
      * @return A bitmap that fits the maximum dimensions.
      */
     @SuppressWarnings({"SuspiciousNameCombination"})
-    private Bitmap getScaledBitmap(int maxDim) {
-        Bitmap scaledBitmap = mOriginal;
-        int width = mOriginal.getWidth();
-        int height = mOriginal.getHeight();
+    @VisibleForTesting
+    static Bitmap getNormalizedBitmap(Bitmap original, int maxDim, boolean forceCropToSquare) {
+        final boolean originalHasAlpha = original.hasAlpha();
+
+        // All cropXxx's are in the original coordinate.
+        int cropWidth = original.getWidth();
+        int cropHeight = original.getHeight();
         int cropLeft = 0;
         int cropTop = 0;
-        if (mForceCropToSquare && width != height) {
+        if (forceCropToSquare && cropWidth != cropHeight) {
             // Crop the image to the square at its center.
-            if (height > width) {
-                cropTop = (height - width) / 2;
-                height = width;
+            if (cropHeight > cropWidth) {
+                cropTop = (cropHeight - cropWidth) / 2;
+                cropHeight = cropWidth;
             } else {
-                cropLeft = (width - height) / 2;
-                width = height;
+                cropLeft = (cropWidth - cropHeight) / 2;
+                cropWidth = cropHeight;
             }
         }
-        float scaleFactor = ((float) maxDim) / Math.max(width, height);
-        if (scaleFactor < 1.0f || cropLeft != 0 || cropTop != 0) {
-            // Need to scale or crop the photo.
-            Matrix matrix = new Matrix();
-            if (scaleFactor < 1.0f) matrix.setScale(scaleFactor, scaleFactor);
-            scaledBitmap = Bitmap.createBitmap(
-                    mOriginal, cropLeft, cropTop, width, height, matrix, true);
+        // Calculate the scale factor.  We don't want to scale up, so the max scale is 1f.
+        final float scaleFactor = Math.min(1f, ((float) maxDim) / Math.max(cropWidth, cropHeight));
+
+        if (scaleFactor < 1.0f || cropLeft != 0 || cropTop != 0 || originalHasAlpha) {
+            final int newWidth = (int) (cropWidth * scaleFactor);
+            final int newHeight = (int) (cropHeight * scaleFactor);
+            final Bitmap scaledBitmap = Bitmap.createBitmap(newWidth, newHeight,
+                    Bitmap.Config.ARGB_8888);
+            final Canvas c = new Canvas(scaledBitmap);
+
+            if (originalHasAlpha) {
+                c.drawRect(0, 0, scaledBitmap.getWidth(), scaledBitmap.getHeight(), WHITE_PAINT);
+            }
+
+            final Rect src = new Rect(cropLeft, cropTop,
+                    cropLeft + cropWidth, cropTop + cropHeight);
+            final RectF dst = new RectF(0, 0, scaledBitmap.getWidth(), scaledBitmap.getHeight());
+
+            c.drawBitmap(original, src, dst, null);
+            return scaledBitmap;
+        } else {
+            return original;
         }
-        return scaledBitmap;
     }
 
     /**
diff --git a/src/com/android/providers/contacts/PhotoStore.java b/src/com/android/providers/contacts/PhotoStore.java
index e0b5fb4..e7be48c 100644
--- a/src/com/android/providers/contacts/PhotoStore.java
+++ b/src/com/android/providers/contacts/PhotoStore.java
@@ -15,17 +15,16 @@
  */
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.ContactsDatabaseHelper.PhotoFilesColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
-
-import com.google.common.annotations.VisibleForTesting;
-
 import android.content.ContentValues;
 import android.database.sqlite.SQLiteDatabase;
 import android.graphics.Bitmap;
 import android.provider.ContactsContract.PhotoFiles;
 import android.util.Log;
 
+import com.android.providers.contacts.ContactsDatabaseHelper.PhotoFilesColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
+import com.google.common.annotations.VisibleForTesting;
+
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
diff --git a/src/com/android/providers/contacts/ProfileAwareUriMatcher.java b/src/com/android/providers/contacts/ProfileAwareUriMatcher.java
index de5cce1..051c60e 100644
--- a/src/com/android/providers/contacts/ProfileAwareUriMatcher.java
+++ b/src/com/android/providers/contacts/ProfileAwareUriMatcher.java
@@ -16,13 +16,13 @@
 
 package com.android.providers.contacts;
 
-import com.google.android.collect.Lists;
-import com.google.android.collect.Maps;
-
 import android.content.UriMatcher;
 import android.net.Uri;
 import android.provider.ContactsContract;
 
+import com.google.android.collect.Lists;
+import com.google.android.collect.Maps;
+
 import java.util.List;
 import java.util.Map;
 import java.util.regex.Pattern;
diff --git a/src/com/android/providers/contacts/ProfileDatabaseHelper.java b/src/com/android/providers/contacts/ProfileDatabaseHelper.java
index 9b707a3..a23e521 100644
--- a/src/com/android/providers/contacts/ProfileDatabaseHelper.java
+++ b/src/com/android/providers/contacts/ProfileDatabaseHelper.java
@@ -16,13 +16,13 @@
 
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.util.NeededForTesting;
-
 import android.content.ContentValues;
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.provider.ContactsContract.Profile;
 
+import com.android.providers.contacts.util.NeededForTesting;
+
 /**
  * A separate version of the contacts database helper for storing the user's profile data.
  */
diff --git a/src/com/android/providers/contacts/ProfileProvider.java b/src/com/android/providers/contacts/ProfileProvider.java
index d97760d..7fc0916 100644
--- a/src/com/android/providers/contacts/ProfileProvider.java
+++ b/src/com/android/providers/contacts/ProfileProvider.java
@@ -17,11 +17,13 @@ package com.android.providers.contacts;
 
 import android.content.ContentValues;
 import android.content.Context;
+import android.content.Intent;
 import android.content.res.AssetFileDescriptor;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.net.Uri;
 import android.os.CancellationSignal;
+import android.provider.ContactsContract.Intents;
 
 import java.io.FileNotFoundException;
 import java.util.Locale;
@@ -31,7 +33,6 @@ import java.util.Locale;
  * database from the rest of contacts.
  */
 public class ProfileProvider extends AbstractContactsProvider {
-
     private static final String READ_PERMISSION = "android.permission.READ_PROFILE";
     private static final String WRITE_PERMISSION = "android.permission.WRITE_PROFILE";
 
@@ -81,7 +82,6 @@ public class ProfileProvider extends AbstractContactsProvider {
     public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs,
             String sortOrder, CancellationSignal cancellationSignal) {
         enforceReadPermission(uri);
-        mDelegate.substituteDb(getDatabaseHelper().getReadableDatabase());
         return mDelegate.queryLocal(uri, projection, selection, selectionArgs, sortOrder, -1,
                 cancellationSignal);
     }
@@ -112,10 +112,8 @@ public class ProfileProvider extends AbstractContactsProvider {
     public AssetFileDescriptor openAssetFile(Uri uri, String mode) throws FileNotFoundException {
         if (mode != null && mode.contains("w")) {
             enforceWritePermission();
-            mDelegate.substituteDb(getDatabaseHelper().getWritableDatabase());
         } else {
             enforceReadPermission(uri);
-            mDelegate.substituteDb(getDatabaseHelper().getReadableDatabase());
         }
         return mDelegate.openAssetFileLocal(uri, mode);
     }
@@ -124,7 +122,6 @@ public class ProfileProvider extends AbstractContactsProvider {
         ContactsTransaction transaction = getCurrentTransaction();
         SQLiteDatabase db = getDatabaseHelper().getWritableDatabase();
         transaction.startTransactionForDb(db, ContactsProvider2.PROFILE_DB_TAG, this);
-        mDelegate.substituteDb(db);
     }
 
     @Override
@@ -142,20 +139,18 @@ public class ProfileProvider extends AbstractContactsProvider {
 
     @Override
     public void onBegin() {
-        mDelegate.switchToProfileMode();
-        mDelegate.onBegin();
+        mDelegate.onBeginTransactionInternal(true);
     }
 
     @Override
     public void onCommit() {
-        mDelegate.switchToProfileMode();
-        mDelegate.onCommit();
+        mDelegate.onCommitTransactionInternal(true);
+        sendProfileChangedBroadcast();
     }
 
     @Override
     public void onRollback() {
-        mDelegate.switchToProfileMode();
-        mDelegate.onRollback();
+        mDelegate.onRollbackTransactionInternal(true);
     }
 
     @Override
@@ -167,4 +162,15 @@ public class ProfileProvider extends AbstractContactsProvider {
     public String getType(Uri uri) {
         return mDelegate.getType(uri);
     }
+
+    /** Use only for debug logging */
+    @Override
+    public String toString() {
+        return "ProfileProvider";
+    }
+
+    private void sendProfileChangedBroadcast() {
+        final Intent intent = new Intent(Intents.ACTION_PROFILE_CHANGED);
+        getContext().sendBroadcast(intent, READ_PERMISSION);
+    }
 }
diff --git a/src/com/android/providers/contacts/SearchIndexManager.java b/src/com/android/providers/contacts/SearchIndexManager.java
index bd4e1cc..d45009e 100644
--- a/src/com/android/providers/contacts/SearchIndexManager.java
+++ b/src/com/android/providers/contacts/SearchIndexManager.java
@@ -15,14 +15,6 @@
  */
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.ContactsDatabaseHelper.DataColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.MimetypesColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.RawContactsColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.SearchIndexColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
-import com.google.android.collect.Lists;
-import com.google.common.annotations.VisibleForTesting;
-
 import android.content.ContentValues;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
@@ -37,6 +29,14 @@ import android.provider.ContactsContract.RawContacts;
 import android.text.TextUtils;
 import android.util.Log;
 
+import com.android.providers.contacts.ContactsDatabaseHelper.DataColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.MimetypesColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.RawContactsColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.SearchIndexColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
+import com.google.android.collect.Lists;
+import com.google.common.annotations.VisibleForTesting;
+
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.List;
@@ -243,13 +243,19 @@ public class SearchIndexManager {
         mDbHelper = (ContactsDatabaseHelper) mContactsProvider.getDatabaseHelper();
     }
 
-    public void updateIndex() {
-        if (getSearchIndexVersion() == SEARCH_INDEX_VERSION) {
-            return;
+    public void updateIndex(boolean force) {
+        if (force) {
+            setSearchIndexVersion(0);
+        } else {
+            if (getSearchIndexVersion() == SEARCH_INDEX_VERSION) {
+                return;
+            }
         }
         SQLiteDatabase db = mDbHelper.getWritableDatabase();
         db.beginTransaction();
         try {
+            // We do a version check again, because the version might have been modified after
+            // the first check.  We need to do the check again in a transaction to make sure.
             if (getSearchIndexVersion() != SEARCH_INDEX_VERSION) {
                 rebuildIndex(db);
                 setSearchIndexVersion(SEARCH_INDEX_VERSION);
@@ -265,7 +271,7 @@ public class SearchIndexManager {
         final long start = SystemClock.elapsedRealtime();
         int count = 0;
         try {
-            mDbHelper.createSearchIndexTable(db);
+            mDbHelper.createSearchIndexTable(db, true);
             count = buildAndInsertIndex(db, null);
         } finally {
             mContactsProvider.setProviderStatus(ProviderStatus.STATUS_NORMAL);
diff --git a/src/com/android/providers/contacts/TransactionContext.java b/src/com/android/providers/contacts/TransactionContext.java
index 2bbacf0..d8c93ef 100644
--- a/src/com/android/providers/contacts/TransactionContext.java
+++ b/src/com/android/providers/contacts/TransactionContext.java
@@ -35,6 +35,11 @@ public class TransactionContext  {
     private HashMap<Long, Long> mInsertedRawContactsAccounts;
     private HashSet<Long> mUpdatedRawContacts;
     private HashSet<Long> mDirtyRawContacts;
+    // Set used to track what has been changed and deleted. This is needed so we can update the
+    // contact last touch timestamp.  Dirty set above is only set when sync adapter is false.
+    // {@see android.provider.ContactsContract#CALLER_IS_SYNCADAPTER}. While the set below will
+    // contain all changed contacts.
+    private HashSet<Long> mChangedRawContacts;
     private HashSet<Long> mStaleSearchIndexRawContacts;
     private HashSet<Long> mStaleSearchIndexContacts;
     private HashMap<Long, Object> mUpdatedSyncStates;
@@ -50,6 +55,8 @@ public class TransactionContext  {
     public void rawContactInserted(long rawContactId, long accountId) {
         if (mInsertedRawContactsAccounts == null) mInsertedRawContactsAccounts = Maps.newHashMap();
         mInsertedRawContactsAccounts.put(rawContactId, accountId);
+
+        markRawContactChangedOrDeletedOrInserted(rawContactId);
     }
 
     public void rawContactUpdated(long rawContactId) {
@@ -57,9 +64,22 @@ public class TransactionContext  {
         mUpdatedRawContacts.add(rawContactId);
     }
 
-    public void markRawContactDirty(long rawContactId) {
-        if (mDirtyRawContacts == null) mDirtyRawContacts = Sets.newHashSet();
-        mDirtyRawContacts.add(rawContactId);
+    public void markRawContactDirtyAndChanged(long rawContactId, boolean isSyncAdapter) {
+        if (!isSyncAdapter) {
+            if (mDirtyRawContacts == null) {
+                mDirtyRawContacts = Sets.newHashSet();
+            }
+            mDirtyRawContacts.add(rawContactId);
+        }
+
+        markRawContactChangedOrDeletedOrInserted(rawContactId);
+    }
+
+    public void markRawContactChangedOrDeletedOrInserted(long rawContactId) {
+        if (mChangedRawContacts == null) {
+            mChangedRawContacts = Sets.newHashSet();
+        }
+        mChangedRawContacts.add(rawContactId);
     }
 
     public void syncStateUpdated(long rowId, Object data) {
@@ -92,6 +112,11 @@ public class TransactionContext  {
         return mDirtyRawContacts;
     }
 
+    public Set<Long> getChangedRawContactIds() {
+        if (mChangedRawContacts == null) mChangedRawContacts = Sets.newHashSet();
+        return mChangedRawContacts;
+    }
+
     public Set<Long> getStaleSearchIndexRawContactIds() {
         if (mStaleSearchIndexRawContacts == null) mStaleSearchIndexRawContacts = Sets.newHashSet();
         return mStaleSearchIndexRawContacts;
@@ -122,6 +147,7 @@ public class TransactionContext  {
         mUpdatedRawContacts = null;
         mUpdatedSyncStates = null;
         mDirtyRawContacts = null;
+        mChangedRawContacts = null;
     }
 
     public void clearSearchIndexUpdates() {
diff --git a/src/com/android/providers/contacts/VoicemailCleanupService.java b/src/com/android/providers/contacts/VoicemailCleanupService.java
index 39f5be5..4ad1406 100644
--- a/src/com/android/providers/contacts/VoicemailCleanupService.java
+++ b/src/com/android/providers/contacts/VoicemailCleanupService.java
@@ -16,8 +16,6 @@
 
 package com.android.providers.contacts;
 
-import com.google.common.annotations.VisibleForTesting;
-
 import android.app.IntentService;
 import android.content.ContentResolver;
 import android.content.Intent;
@@ -25,6 +23,8 @@ import android.provider.VoicemailContract.Status;
 import android.provider.VoicemailContract.Voicemails;
 import android.util.Log;
 
+import com.google.common.annotations.VisibleForTesting;
+
 /**
  * A service that cleans up voicemail related data for packages that are uninstalled.
  */
diff --git a/src/com/android/providers/contacts/VoicemailContentProvider.java b/src/com/android/providers/contacts/VoicemailContentProvider.java
index 79d8f92..b2f6b1e 100644
--- a/src/com/android/providers/contacts/VoicemailContentProvider.java
+++ b/src/com/android/providers/contacts/VoicemailContentProvider.java
@@ -19,11 +19,6 @@ import static android.provider.VoicemailContract.SOURCE_PACKAGE_FIELD;
 import static com.android.providers.contacts.util.DbQueryUtils.concatenateClauses;
 import static com.android.providers.contacts.util.DbQueryUtils.getEqualityClause;
 
-import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
-import com.android.providers.contacts.util.SelectionBuilder;
-import com.android.providers.contacts.util.TypedUriMatcherImpl;
-import com.google.common.annotations.VisibleForTesting;
-
 import android.content.ContentProvider;
 import android.content.ContentValues;
 import android.content.Context;
@@ -38,6 +33,11 @@ import android.provider.VoicemailContract;
 import android.provider.VoicemailContract.Voicemails;
 import android.util.Log;
 
+import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
+import com.android.providers.contacts.util.SelectionBuilder;
+import com.android.providers.contacts.util.TypedUriMatcherImpl;
+import com.google.common.annotations.VisibleForTesting;
+
 import java.io.FileNotFoundException;
 import java.util.List;
 
diff --git a/src/com/android/providers/contacts/VoicemailContentTable.java b/src/com/android/providers/contacts/VoicemailContentTable.java
index 3b72653..3f00b26 100644
--- a/src/com/android/providers/contacts/VoicemailContentTable.java
+++ b/src/com/android/providers/contacts/VoicemailContentTable.java
@@ -19,10 +19,6 @@ import static com.android.providers.contacts.util.DbQueryUtils.checkForSupported
 import static com.android.providers.contacts.util.DbQueryUtils.concatenateClauses;
 import static com.android.providers.contacts.util.DbQueryUtils.getEqualityClause;
 
-import com.android.common.content.ProjectionMap;
-import com.android.providers.contacts.VoicemailContentProvider.UriData;
-import com.android.providers.contacts.util.CloseUtils;
-
 import android.content.ContentUris;
 import android.content.ContentValues;
 import android.content.Context;
@@ -38,6 +34,10 @@ import android.provider.OpenableColumns;
 import android.provider.VoicemailContract.Voicemails;
 import android.util.Log;
 
+import com.android.common.content.ProjectionMap;
+import com.android.providers.contacts.VoicemailContentProvider.UriData;
+import com.android.providers.contacts.util.CloseUtils;
+
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
diff --git a/src/com/android/providers/contacts/VoicemailStatusTable.java b/src/com/android/providers/contacts/VoicemailStatusTable.java
index a0a61ba..2c1861b 100644
--- a/src/com/android/providers/contacts/VoicemailStatusTable.java
+++ b/src/com/android/providers/contacts/VoicemailStatusTable.java
@@ -18,9 +18,6 @@ package com.android.providers.contacts;
 
 import static com.android.providers.contacts.util.DbQueryUtils.concatenateClauses;
 
-import com.android.common.content.ProjectionMap;
-import com.android.providers.contacts.VoicemailContentProvider.UriData;
-
 import android.content.ContentUris;
 import android.content.ContentValues;
 import android.content.Context;
@@ -32,6 +29,9 @@ import android.net.Uri;
 import android.os.ParcelFileDescriptor;
 import android.provider.VoicemailContract.Status;
 
+import com.android.common.content.ProjectionMap;
+import com.android.providers.contacts.VoicemailContentProvider.UriData;
+
 /**
  * Implementation of {@link VoicemailTable.Delegate} for the voicemail status table.
  */
diff --git a/src/com/android/providers/contacts/VoicemailTable.java b/src/com/android/providers/contacts/VoicemailTable.java
index db35c98..9e6c431 100644
--- a/src/com/android/providers/contacts/VoicemailTable.java
+++ b/src/com/android/providers/contacts/VoicemailTable.java
@@ -16,13 +16,13 @@
 
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.VoicemailContentProvider.UriData;
-
 import android.content.ContentValues;
 import android.database.Cursor;
 import android.net.Uri;
 import android.os.ParcelFileDescriptor;
 
+import com.android.providers.contacts.VoicemailContentProvider.UriData;
+
 import java.io.FileNotFoundException;
 
 /**
diff --git a/src/com/android/providers/contacts/aggregation/ContactAggregator.java b/src/com/android/providers/contacts/aggregation/ContactAggregator.java
index 6ad93c9..6c53fa0 100644
--- a/src/com/android/providers/contacts/aggregation/ContactAggregator.java
+++ b/src/com/android/providers/contacts/aggregation/ContactAggregator.java
@@ -16,6 +16,29 @@
 
 package com.android.providers.contacts.aggregation;
 
+import android.database.Cursor;
+import android.database.DatabaseUtils;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteQueryBuilder;
+import android.database.sqlite.SQLiteStatement;
+import android.net.Uri;
+import android.provider.ContactsContract.AggregationExceptions;
+import android.provider.ContactsContract.CommonDataKinds.Email;
+import android.provider.ContactsContract.CommonDataKinds.Identity;
+import android.provider.ContactsContract.CommonDataKinds.Phone;
+import android.provider.ContactsContract.CommonDataKinds.Photo;
+import android.provider.ContactsContract.Contacts;
+import android.provider.ContactsContract.Contacts.AggregationSuggestions;
+import android.provider.ContactsContract.Data;
+import android.provider.ContactsContract.DisplayNameSources;
+import android.provider.ContactsContract.FullNameStyle;
+import android.provider.ContactsContract.PhotoFiles;
+import android.provider.ContactsContract.RawContacts;
+import android.provider.ContactsContract.StatusUpdates;
+import android.text.TextUtils;
+import android.util.EventLog;
+import android.util.Log;
+
 import com.android.providers.contacts.ContactLookupKey;
 import com.android.providers.contacts.ContactsDatabaseHelper;
 import com.android.providers.contacts.ContactsDatabaseHelper.AccountsColumns;
@@ -40,30 +63,10 @@ import com.android.providers.contacts.TransactionContext;
 import com.android.providers.contacts.aggregation.util.CommonNicknameCache;
 import com.android.providers.contacts.aggregation.util.ContactMatcher;
 import com.android.providers.contacts.aggregation.util.ContactMatcher.MatchScore;
-import com.google.android.collect.Maps;
+import com.android.providers.contacts.database.ContactsTableUtil;
+import com.android.providers.contacts.util.Clock;
 
-import android.database.Cursor;
-import android.database.DatabaseUtils;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteQueryBuilder;
-import android.database.sqlite.SQLiteStatement;
-import android.net.Uri;
-import android.provider.ContactsContract.AggregationExceptions;
-import android.provider.ContactsContract.CommonDataKinds.Email;
-import android.provider.ContactsContract.CommonDataKinds.Identity;
-import android.provider.ContactsContract.CommonDataKinds.Phone;
-import android.provider.ContactsContract.CommonDataKinds.Photo;
-import android.provider.ContactsContract.Contacts;
-import android.provider.ContactsContract.Contacts.AggregationSuggestions;
-import android.provider.ContactsContract.Data;
-import android.provider.ContactsContract.DisplayNameSources;
-import android.provider.ContactsContract.FullNameStyle;
-import android.provider.ContactsContract.PhotoFiles;
-import android.provider.ContactsContract.RawContacts;
-import android.provider.ContactsContract.StatusUpdates;
-import android.text.TextUtils;
-import android.util.EventLog;
-import android.util.Log;
+import com.google.android.collect.Maps;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -143,7 +146,6 @@ public class ContactAggregator {
     private SQLiteStatement mAggregatedPresenceReplace;
     private SQLiteStatement mPresenceContactIdUpdate;
     private SQLiteStatement mRawContactCountQuery;
-    private SQLiteStatement mContactDelete;
     private SQLiteStatement mAggregatedPresenceDelete;
     private SQLiteStatement mMarkForAggregation;
     private SQLiteStatement mPhotoIdUpdate;
@@ -300,10 +302,6 @@ public class ContactAggregator {
                 " WHERE " + RawContacts.CONTACT_ID + "=?"
                         + " AND " + RawContacts._ID + "<>?");
 
-        mContactDelete = db.compileStatement(
-                "DELETE FROM " + Tables.CONTACTS +
-                " WHERE " + Contacts._ID + "=?");
-
         mAggregatedPresenceDelete = db.compileStatement(
                 "DELETE FROM " + Tables.AGGREGATED_PRESENCE +
                 " WHERE " + AggregatedPresenceColumns.CONTACT_ID + "=?");
@@ -778,8 +776,7 @@ public class ContactAggregator {
             // Joining with an existing aggregate
             if (currentContactContentsCount == 0) {
                 // Delete a previous aggregate if it only contained this raw contact
-                mContactDelete.bindLong(1, currentContactId);
-                mContactDelete.execute();
+                ContactsTableUtil.deleteContact(db, currentContactId);
 
                 mAggregatedPresenceDelete.bindLong(1, currentContactId);
                 mAggregatedPresenceDelete.execute();
@@ -791,6 +788,10 @@ public class ContactAggregator {
             mContactUpdate.execute();
             mDbHelper.updateContactVisible(txContext, contactId);
             updateAggregatedStatusUpdate(contactId);
+            // Make sure the raw contact does not contribute to the current contact
+            if (currentContactId != 0) {
+                updateAggregateData(txContext, currentContactId);
+            }
         }
 
         if (contactIdToSplit != -1) {
@@ -1759,7 +1760,8 @@ public class ContactAggregator {
                         + Contacts.TIMES_CONTACTED + "=?, "
                         + Contacts.STARRED + "=?, "
                         + Contacts.HAS_PHONE_NUMBER + "=?, "
-                        + Contacts.LOOKUP_KEY + "=? " +
+                        + Contacts.LOOKUP_KEY + "=?, "
+                        + Contacts.CONTACT_LAST_UPDATED_TIMESTAMP + "=? " +
                 " WHERE " + Contacts._ID + "=?";
 
         String INSERT_SQL =
@@ -1773,8 +1775,10 @@ public class ContactAggregator {
                         + Contacts.TIMES_CONTACTED + ", "
                         + Contacts.STARRED + ", "
                         + Contacts.HAS_PHONE_NUMBER + ", "
-                        + Contacts.LOOKUP_KEY + ") " +
-                " VALUES (?,?,?,?,?,?,?,?,?,?)";
+                        + Contacts.LOOKUP_KEY + ", "
+                        + Contacts.CONTACT_LAST_UPDATED_TIMESTAMP
+                        + ") " +
+                " VALUES (?,?,?,?,?,?,?,?,?,?,?)";
 
         int NAME_RAW_CONTACT_ID = 1;
         int PHOTO_ID = 2;
@@ -1786,7 +1790,8 @@ public class ContactAggregator {
         int STARRED = 8;
         int HAS_PHONE_NUMBER = 9;
         int LOOKUP_KEY = 10;
-        int CONTACT_ID = 11;
+        int CONTACT_LAST_UPDATED_TIMESTAMP = 11;
+        int CONTACT_ID = 12;
     }
 
     /**
@@ -1950,6 +1955,8 @@ public class ContactAggregator {
                 hasPhoneNumber);
         statement.bindString(ContactReplaceSqlStatement.LOOKUP_KEY,
                 Uri.encode(lookupKey.toString()));
+        statement.bindLong(ContactReplaceSqlStatement.CONTACT_LAST_UPDATED_TIMESTAMP,
+                Clock.getInstance().currentTimeMillis());
     }
 
     /**
diff --git a/src/com/android/providers/contacts/aggregation/ProfileAggregator.java b/src/com/android/providers/contacts/aggregation/ProfileAggregator.java
index fedf5fe..276a05f 100644
--- a/src/com/android/providers/contacts/aggregation/ProfileAggregator.java
+++ b/src/com/android/providers/contacts/aggregation/ProfileAggregator.java
@@ -23,11 +23,11 @@ import android.provider.ContactsContract.Contacts;
 import com.android.providers.contacts.ContactLookupKey;
 import com.android.providers.contacts.ContactsDatabaseHelper;
 import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
-import com.android.providers.contacts.aggregation.util.CommonNicknameCache;
 import com.android.providers.contacts.ContactsProvider2;
 import com.android.providers.contacts.NameSplitter;
 import com.android.providers.contacts.PhotoPriorityResolver;
 import com.android.providers.contacts.TransactionContext;
+import com.android.providers.contacts.aggregation.util.CommonNicknameCache;
 
 /**
  * A version of the ContactAggregator for use against the profile database.
diff --git a/src/com/android/providers/contacts/aggregation/util/CommonNicknameCache.java b/src/com/android/providers/contacts/aggregation/util/CommonNicknameCache.java
index d6b799f..9643d81 100644
--- a/src/com/android/providers/contacts/aggregation/util/CommonNicknameCache.java
+++ b/src/com/android/providers/contacts/aggregation/util/CommonNicknameCache.java
@@ -16,13 +16,13 @@
 
 package com.android.providers.contacts.aggregation.util;
 
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+
 import com.android.providers.contacts.ContactsDatabaseHelper.NicknameLookupColumns;
 import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
 import com.google.android.collect.Maps;
 
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-
 import java.lang.ref.SoftReference;
 import java.util.BitSet;
 import java.util.HashMap;
diff --git a/src/com/android/providers/contacts/aggregation/util/ContactMatcher.java b/src/com/android/providers/contacts/aggregation/util/ContactMatcher.java
index a29735d..2e552e9 100644
--- a/src/com/android/providers/contacts/aggregation/util/ContactMatcher.java
+++ b/src/com/android/providers/contacts/aggregation/util/ContactMatcher.java
@@ -18,6 +18,8 @@ package com.android.providers.contacts.aggregation.util;
 import com.android.providers.contacts.ContactsDatabaseHelper.NameLookupType;
 import com.android.providers.contacts.util.Hex;
 
+import android.util.Log;
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -27,6 +29,7 @@ import java.util.List;
  * Logic for matching contacts' data and accumulating match scores.
  */
 public class ContactMatcher {
+    private static final String TAG = "ContactMatcher";
 
     // Best possible match score
     public static final int MAX_SCORE = 100;
@@ -296,8 +299,16 @@ public class ContactMatcher {
             return;
         }
 
-        byte[] decodedCandidateName = Hex.decodeHex(candidateName);
-        byte[] decodedName = Hex.decodeHex(name);
+        final byte[] decodedCandidateName;
+        final byte[] decodedName;
+        try {
+            decodedCandidateName = Hex.decodeHex(candidateName);
+            decodedName = Hex.decodeHex(name);
+        } catch (RuntimeException e) {
+            // How could this happen??  See bug 6827136
+            Log.e(TAG, "Failed to decode normalized name.  Skipping.", e);
+            return;
+        }
 
         NameDistance nameDistance = algorithm == MATCHING_ALGORITHM_CONSERVATIVE ?
                 mNameDistanceConservative : mNameDistanceApproximate;
diff --git a/src/com/android/providers/contacts/database/ContactsTableUtil.java b/src/com/android/providers/contacts/database/ContactsTableUtil.java
new file mode 100644
index 0000000..dbc3d3e
--- /dev/null
+++ b/src/com/android/providers/contacts/database/ContactsTableUtil.java
@@ -0,0 +1,146 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License
+ */
+
+package com.android.providers.contacts.database;
+
+import static android.provider.ContactsContract.Contacts;
+import static com.android.providers.contacts.ContactsDatabaseHelper.Tables;
+
+import android.content.ContentValues;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.provider.ContactsContract;
+import android.text.TextUtils;
+
+import com.android.common.io.MoreCloseables;
+import com.android.providers.contacts.util.Clock;
+
+import java.util.Set;
+
+/**
+ * Methods for operating on the contacts table.
+ */
+public class ContactsTableUtil {
+
+    /**
+     * Drop indexes if present.  Create indexes.
+     *
+     * @param db The sqlite database instance.
+     */
+    public static void createIndexes(SQLiteDatabase db) {
+        final String table = Tables.CONTACTS;
+
+        db.execSQL("CREATE INDEX contacts_has_phone_index ON " + table + " (" +
+                Contacts.HAS_PHONE_NUMBER +
+                ");");
+
+        db.execSQL("CREATE INDEX contacts_name_raw_contact_id_index ON " + table + " (" +
+                Contacts.NAME_RAW_CONTACT_ID +
+                ");");
+
+        db.execSQL(MoreDatabaseUtils.buildCreateIndexSql(table,
+                Contacts.CONTACT_LAST_UPDATED_TIMESTAMP));
+    }
+
+    public static void updateContactLastUpdateByContactId(SQLiteDatabase db, long contactId) {
+        final ContentValues values = new ContentValues();
+        values.put(Contacts.CONTACT_LAST_UPDATED_TIMESTAMP,
+                Clock.getInstance().currentTimeMillis());
+        db.update(Tables.CONTACTS, values, Contacts._ID + " = ?",
+                new String[] {String.valueOf(contactId)});
+    }
+
+    /**
+     * Refreshes the last updated timestamp of the contact with the current time.
+     *
+     * @param db The sqlite database instance.
+     * @param rawContactIds A set of raw contacts ids to refresh the contact for.
+     */
+    public static void updateContactLastUpdateByRawContactId(SQLiteDatabase db,
+            Set<Long> rawContactIds) {
+        if (rawContactIds.isEmpty()) {
+            return;
+        }
+
+        db.execSQL(buildUpdateLastUpdateSql(rawContactIds));
+    }
+
+    /**
+     * Build a sql to update the last updated timestamp for contacts.
+     *
+     * @param rawContactIds The raw contact ids that contacts should be updated for.
+     * @return The update sql statement.
+     */
+    private static String buildUpdateLastUpdateSql(Set<Long> rawContactIds) {
+        // Not using bind args here due to sqlite bind arg size limit.  Large number of bind args
+        // will cause a sqlite error:
+        //     android.database.sqlite.SQLiteException: too many SQL variables (code 1)
+        // Sql injection is not possible because input is a set of Long.  If any part of the sql
+        // is built with user input strings, then this must be converted to using bind args.
+        final String sql = "UPDATE " + Tables.CONTACTS
+                + " SET " + Contacts.CONTACT_LAST_UPDATED_TIMESTAMP + " = "
+                + Clock.getInstance().currentTimeMillis()
+                + " WHERE " + Contacts._ID + " IN ( "
+                + "  SELECT " + ContactsContract.RawContacts.CONTACT_ID
+                + "  FROM " + Tables.RAW_CONTACTS
+                + "  WHERE " + ContactsContract.RawContacts._ID
+                + " IN (" + TextUtils.join(",", rawContactIds) + ") "
+                + ")";
+        return sql;
+    }
+
+    /**
+     * Delete a contact identified by the contact id.
+     *
+     * @param db The sqlite database instance.
+     * @param contactId The contact id to delete.
+     * @return The number of records deleted.
+     */
+    public static int deleteContact(SQLiteDatabase db, long contactId) {
+        DeletedContactsTableUtil.insertDeletedContact(db, contactId);
+        return db.delete(Tables.CONTACTS, Contacts._ID + " = ?", new String[]{contactId + ""});
+    }
+
+    /**
+     * Delete the aggregate contact if it has no constituent raw contacts other than the supplied
+     * one.
+     */
+    public static void deleteContactIfSingleton(SQLiteDatabase db, long rawContactId) {
+        // This query will find a contact id if the contact has a raw contacts other than the one
+        // passed in.
+        final String sql = "select " + ContactsContract.RawContacts.CONTACT_ID + ", count(1)"
+                + " from " + Tables.RAW_CONTACTS
+                + " where " + ContactsContract.RawContacts.CONTACT_ID + " ="
+                + "  (select " + ContactsContract.RawContacts.CONTACT_ID
+                + "   from " + Tables.RAW_CONTACTS
+                + "   where " + ContactsContract.RawContacts._ID + " = ?)"
+                + " group by " + ContactsContract.RawContacts.CONTACT_ID;
+        final Cursor cursor = db.rawQuery(sql, new String[]{rawContactId + ""});
+        try {
+            if (cursor.moveToNext()) {
+                long contactId = cursor.getLong(0);
+                long numRawContacts = cursor.getLong(1);
+
+                if (numRawContacts == 1) {
+                    // Only one raw contact, we can delete the parent.
+                    deleteContact(db, contactId);
+                }
+            }
+        } finally {
+            MoreCloseables.closeQuietly(cursor);
+        }
+    }
+}
diff --git a/src/com/android/providers/contacts/database/DeletedContactsTableUtil.java b/src/com/android/providers/contacts/database/DeletedContactsTableUtil.java
new file mode 100644
index 0000000..31cf885
--- /dev/null
+++ b/src/com/android/providers/contacts/database/DeletedContactsTableUtil.java
@@ -0,0 +1,81 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License
+ */
+
+package com.android.providers.contacts.database;
+
+import android.content.ContentValues;
+import android.database.sqlite.SQLiteDatabase;
+import android.provider.ContactsContract;
+
+import com.android.providers.contacts.ContactsDatabaseHelper;
+import com.android.providers.contacts.util.Clock;
+
+/**
+ * Methods for operating on the deleted_contacts table.
+ */
+public class DeletedContactsTableUtil {
+
+    /**
+     * Create deleted_contacts tables and indexes.
+     *
+     * @param db The sqlite database instance.
+     */
+    public static void create(SQLiteDatabase db) {
+        // Deleted contacts log
+        db.execSQL("CREATE TABLE " + ContactsDatabaseHelper.Tables.DELETED_CONTACTS + " (" +
+                ContactsContract.DeletedContacts.CONTACT_ID + " INTEGER PRIMARY KEY," +
+                ContactsContract.DeletedContacts.CONTACT_DELETED_TIMESTAMP +
+                " INTEGER NOT NULL default 0"
+                + ");");
+
+        db.execSQL(MoreDatabaseUtils.buildCreateIndexSql(
+                ContactsDatabaseHelper.Tables.DELETED_CONTACTS,
+                ContactsContract.DeletedContacts.CONTACT_DELETED_TIMESTAMP));
+    }
+
+    /**
+     * Inserts a deleted contact log record.
+     *
+     * @param db The SQLiteDatabase instance.
+     * @param contactId The contact id to insert.
+     * @return The row id
+     */
+    public static long insertDeletedContact(SQLiteDatabase db, long contactId) {
+        ContentValues values = new ContentValues();
+        values.put(ContactsContract.DeletedContacts.CONTACT_ID, contactId);
+        values.put(ContactsContract.DeletedContacts.CONTACT_DELETED_TIMESTAMP,
+                Clock.getInstance().currentTimeMillis());
+        // a.k.a upsert
+        return db.insertWithOnConflict(ContactsDatabaseHelper.Tables.DELETED_CONTACTS, null, values,
+                SQLiteDatabase.CONFLICT_REPLACE);
+    }
+
+    /**
+     * Deletes old log records.
+     *
+     * @param db The database instance to use.
+     */
+    public static int deleteOldLogs(SQLiteDatabase db) {
+
+        long time = Clock.getInstance().currentTimeMillis() -
+                ContactsContract.DeletedContacts.DAYS_KEPT_MILLISECONDS;
+
+        String[] args = new String[]{time + ""};
+
+        return db.delete(ContactsDatabaseHelper.Tables.DELETED_CONTACTS,
+                ContactsContract.DeletedContacts.CONTACT_DELETED_TIMESTAMP + " < ?", args);
+    }
+}
diff --git a/src/com/android/providers/contacts/database/MoreDatabaseUtils.java b/src/com/android/providers/contacts/database/MoreDatabaseUtils.java
new file mode 100644
index 0000000..fa186bb
--- /dev/null
+++ b/src/com/android/providers/contacts/database/MoreDatabaseUtils.java
@@ -0,0 +1,79 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License
+ */
+
+package com.android.providers.contacts.database;
+
+import com.android.providers.contacts.util.NeededForTesting;
+
+/**
+ * Static methods for database operations.
+ */
+public class MoreDatabaseUtils {
+
+    /**
+     * Builds a CREATE INDEX ddl statement for a given table and field.
+     *
+     * @param table The table name.
+     * @param field The field to index.
+     * @return The create index sql statement.
+     */
+    public static String buildCreateIndexSql(String table, String field) {
+        return "CREATE INDEX " + buildIndexName(table, field) + " ON " + table
+                + "(" + field + ")";
+    }
+
+    /**
+     * Builds a DROP INDEX ddl statement for a given table and field.
+     *
+     * @param table The table name that was originally used to create the index.
+     * @param field The field that was originally used to create the index.
+     * @return The drop index sql statement.
+     */
+    @NeededForTesting
+    public static String buildDropIndexSql(String table, String field) {
+        return "DROP INDEX IF EXISTS " + buildIndexName(table, field);
+    }
+
+    /**
+     * The index is created with a name using the following convention:
+     * <p>
+     * [table name]_[field name]_index
+     */
+    public static String buildIndexName(String table, String field) {
+        return table + "_" + field + "_index";
+    }
+
+    /**
+     * Build a bind arg where clause.
+     * <p>
+     * e.g. Calling this method with value of 4 results in:
+     * <p>
+     * "?,?,?,?"
+     *
+     * @param numArgs The number of arguments.
+     * @return A string that can be used for bind args in a sql where clause.
+     */
+    @NeededForTesting
+    public static String buildBindArgString(int numArgs) {
+        final StringBuilder sb = new StringBuilder();
+        String delimiter = "";
+        for (int i = 0; i < numArgs; i++) {
+            sb.append(delimiter).append("?");
+            delimiter = ",";
+        }
+        return sb.toString();
+    }
+}
diff --git a/src/com/android/providers/contacts/debug/ContactsDumpActivity.java b/src/com/android/providers/contacts/debug/ContactsDumpActivity.java
new file mode 100644
index 0000000..359f3f8
--- /dev/null
+++ b/src/com/android/providers/contacts/debug/ContactsDumpActivity.java
@@ -0,0 +1,134 @@
+/*
+ * Copyright (C) 2012 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.providers.contacts.debug;
+
+import com.android.providers.contacts.R;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.Window;
+import android.widget.Button;
+
+import java.io.IOException;
+
+/**
+ * Activity to export all app data files as a zip file on sdcard, and send it via email.
+ *
+ * Usage:
+ * adb shell am start -a com.android.providers.contacts.DUMP_DATABASE
+ */
+public class ContactsDumpActivity extends Activity implements OnClickListener {
+    private static String TAG = "ContactsDumpActivity";
+    private Button mConfirmButton;
+    private Button mCancelButton;
+    private Button mDeleteButton;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        // Be sure to call the super class.
+        super.onCreate(savedInstanceState);
+
+        requestWindowFeature(Window.FEATURE_LEFT_ICON);
+
+        setContentView(R.layout.contact_dump_activity);
+
+        getWindow().setFeatureDrawableResource(Window.FEATURE_LEFT_ICON,
+                android.R.drawable.ic_dialog_alert);
+
+        mConfirmButton = (Button) findViewById(R.id.confirm);
+        mCancelButton = (Button) findViewById(R.id.cancel);
+        mDeleteButton = (Button) findViewById(R.id.delete);
+        updateDeleteButton();
+    }
+
+    private void updateDeleteButton() {
+        mDeleteButton.setEnabled(DataExporter.dumpFileExists(this));
+    }
+
+    @Override
+    public void onClick(View v) {
+        switch (v.getId()) {
+            case R.id.confirm:
+                mConfirmButton.setEnabled(false);
+                mCancelButton.setEnabled(false);
+                new DumpDbTask().execute();
+                break;
+            case R.id.delete:
+                cleanup();
+                updateDeleteButton();
+                break;
+            case R.id.cancel:
+                finish();
+                break;
+        }
+    }
+
+    private void cleanup() {
+        DataExporter.removeDumpFiles(this);
+    }
+
+    private class DumpDbTask extends AsyncTask<Void, Void, Uri> {
+        /**
+         * Starts spinner while task is running.
+         */
+        @Override
+        protected void onPreExecute() {
+            setProgressBarIndeterminateVisibility(true);
+        }
+
+        @Override
+        protected Uri doInBackground(Void... params) {
+            try {
+                return DataExporter.exportData(getApplicationContext());
+            } catch (IOException e) {
+                Log.e(TAG, "Failed to export", e);
+                return null;
+            }
+        }
+
+        @Override
+        protected void onPostExecute(Uri uri) {
+            if (uri != null) {
+                emailFile(uri);
+            }
+        }
+    }
+
+    private void emailFile(Uri uri) {
+        Log.i(TAG, "Drafting email");
+        Intent intent = new Intent(Intent.ACTION_SEND);
+        intent.putExtra(Intent.EXTRA_SUBJECT, getString(R.string.debug_dump_email_subject));
+        intent.putExtra(Intent.EXTRA_TEXT, getString(R.string.debug_dump_email_body));
+        intent.setType(DataExporter.ZIP_MIME_TYPE);
+        intent.putExtra(Intent.EXTRA_STREAM, uri);
+        startActivityForResult(Intent.createChooser(intent,
+                getString(R.string.debug_dump_email_sender_picker)), 0);
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        updateDeleteButton();
+        mConfirmButton.setEnabled(true);
+        mCancelButton.setEnabled(true);
+    }
+}
diff --git a/src/com/android/providers/contacts/debug/DataExporter.java b/src/com/android/providers/contacts/debug/DataExporter.java
new file mode 100644
index 0000000..84dc072
--- /dev/null
+++ b/src/com/android/providers/contacts/debug/DataExporter.java
@@ -0,0 +1,176 @@
+/*
+ * Copyright (C) 2012 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.providers.contacts.debug;
+
+import com.android.providers.contacts.util.Hex;
+import com.google.common.io.Closeables;
+
+import android.content.Context;
+import android.net.Uri;
+import android.util.Log;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.security.SecureRandom;
+import java.util.zip.Deflater;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipOutputStream;
+
+/**
+ * Compress all files under the app data dir into a single zip file.
+ *
+ * Make sure not to output dump filenames anywhere, including logcat.
+ */
+public class DataExporter {
+    private static String TAG = "DataExporter";
+
+    public static final String ZIP_MIME_TYPE = "application/zip";
+
+    public static final String DUMP_FILE_DIRECTORY_NAME = "dumpedfiles";
+
+    public static final String OUT_FILE_SUFFIX = "-contacts-db.zip";
+
+    /**
+     * Compress all files under the app data dir into a single zip file, and return the content://
+     * URI to the file, which can be read via {@link DumpFileProvider}.
+     */
+    public static Uri exportData(Context context) throws IOException {
+        final String fileName = generateRandomName() + OUT_FILE_SUFFIX;
+        final File outFile = getOutputFile(context, fileName);
+
+        // Remove all existing ones.
+        removeDumpFiles(context);
+
+        Log.i(TAG, "Dump started...");
+
+        ensureOutputDirectory(context);
+        final ZipOutputStream os = new ZipOutputStream(new FileOutputStream(outFile));
+        os.setLevel(Deflater.BEST_COMPRESSION);
+        try {
+            addDirectory(context, os, context.getFilesDir().getParentFile(), "contacts-files");
+        } finally {
+            Closeables.closeQuietly(os);
+        }
+        Log.i(TAG, "Dump finished.");
+        return DumpFileProvider.AUTHORITY_URI.buildUpon().appendPath(fileName).build();
+    }
+
+    /** @return long random string for a file name */
+    private static String generateRandomName() {
+        final SecureRandom rng = new SecureRandom();
+        final byte[] random = new byte[256 / 8];
+        rng.nextBytes(random);
+
+        return Hex.encodeHex(random, true);
+    }
+
+    private static File getOutputDirectory(Context context) {
+        return new File(context.getCacheDir(), DUMP_FILE_DIRECTORY_NAME);
+    }
+
+    private static void ensureOutputDirectory(Context context) {
+        final File directory = getOutputDirectory(context);
+        if (!directory.exists()) {
+            directory.mkdir();
+        }
+    }
+
+    public static File getOutputFile(Context context, String fileName) {
+        return new File(getOutputDirectory(context), fileName);
+    }
+
+    public static boolean dumpFileExists(Context context) {
+        return getOutputDirectory(context).exists();
+    }
+
+    public static void removeDumpFiles(Context context) {
+        removeFileOrDirectory(getOutputDirectory(context));
+    }
+
+    private static void removeFileOrDirectory(File file) {
+        if (!file.exists()) return;
+
+        if (file.isFile()) {
+            Log.i(TAG, "Removing " + file);
+            file.delete();
+            return;
+        }
+
+        if (file.isDirectory()) {
+            for (File child : file.listFiles()) {
+                removeFileOrDirectory(child);
+            }
+            Log.i(TAG, "Removing " + file);
+            file.delete();
+        }
+    }
+
+    /**
+     * Add all files under {@code current} to {@code os} zip stream
+     */
+    private static void addDirectory(Context context, ZipOutputStream os, File current,
+            String storedPath) throws IOException {
+        for (File child : current.listFiles()) {
+            final String childStoredPath = storedPath + "/" + child.getName();
+
+            if (child.isDirectory()) {
+                // Don't need the cache directory, which also contains the dump files.
+                if (child.equals(context.getCacheDir())) {
+                    continue;
+                }
+                // This check is redundant as the output directory should be in the cache dir,
+                // but just in case...
+                if (child.getName().equals(DUMP_FILE_DIRECTORY_NAME)) {
+                    continue;
+                }
+                addDirectory(context, os, child, childStoredPath);
+            } else if (child.isFile()) {
+                addFile(os, child, childStoredPath);
+            } else {
+                // Shouldn't happen; skip.
+            }
+        }
+    }
+
+    /**
+     * Add a single file {@code current} to {@code os} zip stream using the file name
+     * {@code storedPath}.
+     */
+    private static void addFile(ZipOutputStream os, File current, String storedPath)
+            throws IOException {
+        Log.i(TAG, "Adding " + current.getAbsolutePath() + " ...");
+        final InputStream is = new FileInputStream(current);
+        os.putNextEntry(new ZipEntry(storedPath));
+
+        final byte[] buf = new byte[32 * 1024];
+        int totalLen = 0;
+        while (true) {
+            int len = is.read(buf);
+            if (len <= 0) {
+                break;
+            }
+            os.write(buf, 0, len);
+            totalLen += len;
+        }
+        os.closeEntry();
+        Log.i(TAG, "Added " + current.getAbsolutePath() + " as " + storedPath +
+                " (" + totalLen + " bytes)");
+    }
+}
diff --git a/src/com/android/providers/contacts/debug/DumpFileProvider.java b/src/com/android/providers/contacts/debug/DumpFileProvider.java
new file mode 100644
index 0000000..f349dd2
--- /dev/null
+++ b/src/com/android/providers/contacts/debug/DumpFileProvider.java
@@ -0,0 +1,120 @@
+/*
+ * Copyright (C) 2012 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.providers.contacts.debug;
+
+import android.content.ContentProvider;
+import android.content.ContentValues;
+import android.database.Cursor;
+import android.database.MatrixCursor;
+import android.net.Uri;
+import android.os.ParcelFileDescriptor;
+import android.provider.OpenableColumns;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+
+/**
+ * Provider used to read dump files created by {@link DataExporter}.
+ *
+ * We send content: URI to sender apps (such as gmail).  This provider implement the URI.
+ */
+public class DumpFileProvider extends ContentProvider {
+    public static final String AUTHORITY = "com.android.contacts.dumpfile";
+    public static final Uri AUTHORITY_URI = Uri.parse("content://" + AUTHORITY);
+
+    @Override
+    public boolean onCreate() {
+        return true;
+    }
+
+    @Override
+    public Uri insert(Uri uri, ContentValues values) {
+        // Not needed.
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public int delete(Uri uri, String selection, String[] selectionArgs) {
+        // Not needed.
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
+        // Not needed.
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public String getType(Uri uri) {
+        return DataExporter.ZIP_MIME_TYPE;
+    }
+
+    /** @return the path part of a URI, without the beginning "/". */
+    private static String extractFileName(Uri uri) {
+        final String path = uri.getPath();
+        return path.startsWith("/") ? path.substring(1) : path;
+    }
+
+    /** @return file content */
+    @Override
+    public ParcelFileDescriptor openFile(Uri uri, String mode) throws FileNotFoundException {
+        if (!"r".equals(mode)) {
+            throw new UnsupportedOperationException();
+        }
+        final File file = DataExporter.getOutputFile(getContext(), extractFileName(uri));
+        return ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);
+    }
+
+    /**
+     * Used to provide {@link OpenableColumns#DISPLAY_NAME} and {@link OpenableColumns#SIZE}
+     * for a URI.
+     */
+    @Override
+    public Cursor query(Uri uri, String[] inProjection, String selection, String[] selectionArgs,
+            String sortOrder) {
+        final String[] projection = (inProjection != null) ? inProjection
+                : new String[] {OpenableColumns.DISPLAY_NAME, OpenableColumns.SIZE};
+
+        final MatrixCursor c = new MatrixCursor(projection);
+
+        // Result will always have one row.
+        final MatrixCursor.RowBuilder b = c.newRow();
+
+        for (int i = 0; i < c.getColumnCount(); i++) {
+            final String column = projection[i];
+            if (OpenableColumns.DISPLAY_NAME.equals(column)) {
+                // Just return the requested path as the display name.  We don't care if the file
+                // really exists.
+                b.add(extractFileName(uri));
+            } else if (OpenableColumns.SIZE.equals(column)) {
+                final File file = DataExporter.getOutputFile(getContext(), extractFileName(uri));
+
+                if (file.exists()) {
+                    b.add(file.length());
+                } else {
+                    // File doesn't exist -- return null for "unknown".
+                    b.add(null);
+                }
+            } else {
+                throw new IllegalArgumentException("Unknown column " + column);
+            }
+        }
+
+        return c;
+    }
+}
diff --git a/src/com/android/providers/contacts/util/DbQueryUtils.java b/src/com/android/providers/contacts/util/DbQueryUtils.java
index c853a96..c184613 100644
--- a/src/com/android/providers/contacts/util/DbQueryUtils.java
+++ b/src/com/android/providers/contacts/util/DbQueryUtils.java
@@ -94,4 +94,31 @@ public class DbQueryUtils {
             }
         }
     }
+
+    /**
+     * Escape values to be used in LIKE sqlite clause.
+     *
+     * The LIKE clause has two special characters: '%' and '_'.  If either of these
+     * characters need to be matched literally, then they must be escaped like so:
+     *
+     * WHERE value LIKE 'android\_%' ESCAPE '\'
+     *
+     * The ESCAPE clause is required and no default exists as the escape character in this context.
+     * Since the escape character needs to be defined as part of the sql string, it must be
+     * provided to this method so the escape characters match.
+     *
+     * @param sb The StringBuilder to append the escaped value to.
+     * @param value The value to be escaped.
+     * @param escapeChar The escape character to be defined in the sql ESCAPE clause.
+     */
+    public static void escapeLikeValue(StringBuilder sb, String value, char escapeChar) {
+        for (int i = 0; i < value.length(); i++) {
+            char ch = value.charAt(i);
+            if (ch == '%' || ch == '_') {
+                sb.append(escapeChar);
+            }
+            sb.append(ch);
+        }
+    }
+
 }
diff --git a/src/com/android/providers/contacts/util/Hex.java b/src/com/android/providers/contacts/util/Hex.java
index ad26f4b..c3e5e74 100644
--- a/src/com/android/providers/contacts/util/Hex.java
+++ b/src/com/android/providers/contacts/util/Hex.java
@@ -74,12 +74,16 @@ public class Hex {
 
     /**
      * Quickly converts a hexadecimal string to a byte array.
+     *
+     * TODO Use checked exceptions instead of RuntimeException.  Apparently normalized names *may*
+     * contain non-hex strings and we want to make sure the provider won't crash even with such
+     * input.
      */
     public static byte[] decodeHex(String hexString) {
         int length = hexString.length();
 
         if ((length & 0x01) != 0) {
-            throw new IllegalArgumentException("Odd number of characters.");
+            throw new IllegalArgumentException("Odd number of characters: " + hexString);
         }
 
         boolean badHex = false;
diff --git a/tests/res/drawable-nodpi/transparent_10x10.png b/tests/res/drawable-nodpi/transparent_10x10.png
new file mode 100644
index 0000000..d11c2cd
Binary files /dev/null and b/tests/res/drawable-nodpi/transparent_10x10.png differ
diff --git a/tests/src/com/android/providers/contacts/BaseContactsProvider2Test.java b/tests/src/com/android/providers/contacts/BaseContactsProvider2Test.java
index 1154186..a67785c 100644
--- a/tests/src/com/android/providers/contacts/BaseContactsProvider2Test.java
+++ b/tests/src/com/android/providers/contacts/BaseContactsProvider2Test.java
@@ -17,11 +17,7 @@
 package com.android.providers.contacts;
 
 import static com.android.providers.contacts.ContactsActor.PACKAGE_GREY;
-
-import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
-import com.android.providers.contacts.util.Hex;
-import com.android.providers.contacts.util.MockClock;
-import com.google.android.collect.Sets;
+import static com.android.providers.contacts.TestUtils.cv;
 
 import android.accounts.Account;
 import android.content.ContentProvider;
@@ -62,6 +58,15 @@ import android.test.MoreAsserts;
 import android.test.mock.MockContentResolver;
 import android.util.Log;
 
+import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
+import com.android.providers.contacts.testutil.CommonDatabaseUtils;
+import com.android.providers.contacts.testutil.DataUtil;
+import com.android.providers.contacts.testutil.RawContactUtil;
+import com.android.providers.contacts.testutil.TestUtil;
+import com.android.providers.contacts.util.Hex;
+import com.android.providers.contacts.util.MockClock;
+import com.google.android.collect.Sets;
+
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.BitSet;
@@ -150,38 +155,6 @@ public abstract class BaseContactsProvider2Test extends PhotoLoadingTestCase {
         return mActor.provider;
     }
 
-    protected Uri maybeAddAccountQueryParameters(Uri uri, Account account) {
-        if (account == null) {
-            return uri;
-        }
-        return uri.buildUpon()
-                .appendQueryParameter(RawContacts.ACCOUNT_NAME, account.name)
-                .appendQueryParameter(RawContacts.ACCOUNT_TYPE, account.type)
-                .build();
-    }
-
-    protected long createRawContact() {
-        return createRawContact(null);
-    }
-
-    protected long createRawContactWithName() {
-        return createRawContactWithName(null);
-    }
-
-    protected long createRawContactWithName(Account account) {
-        return createRawContactWithName("John", "Doe", account);
-    }
-
-    protected long createRawContactWithName(String firstName, String lastName) {
-        return createRawContactWithName(firstName, lastName, null);
-    }
-
-    protected long createRawContactWithName(String firstName, String lastName, Account account) {
-        long rawContactId = createRawContact(account);
-        insertStructuredName(rawContactId, firstName, lastName);
-        return rawContactId;
-    }
-
     protected Uri setCallerIsSyncAdapter(Uri uri, Account account) {
         if (account == null) {
             return uri;
@@ -193,14 +166,6 @@ public abstract class BaseContactsProvider2Test extends PhotoLoadingTestCase {
         return builder.build();
     }
 
-    protected long createRawContact(Account account, String... extras) {
-        ContentValues values = new ContentValues();
-        extrasVarArgsToValues(values, extras);
-        final Uri uri = maybeAddAccountQueryParameters(RawContacts.CONTENT_URI, account);
-        Uri contactUri = mResolver.insert(uri, values);
-        return ContentUris.parseId(contactUri);
-    }
-
     protected int updateItem(Uri uri, long id, String... extras) {
         Uri itemUri = ContentUris.withAppendedId(uri, id);
         return updateItem(itemUri, extras);
@@ -208,17 +173,10 @@ public abstract class BaseContactsProvider2Test extends PhotoLoadingTestCase {
 
     protected int updateItem(Uri uri, String... extras) {
         ContentValues values = new ContentValues();
-        extrasVarArgsToValues(values, extras);
+        CommonDatabaseUtils.extrasVarArgsToValues(values, extras);
         return mResolver.update(uri, values, null, null);
     }
 
-    private static void extrasVarArgsToValues(ContentValues values, String... extras) {
-        for (int i = 0; i < extras.length; ) {
-            values.put(extras[i], extras[i + 1]);
-            i += 2;
-        }
-    }
-
     protected long createGroup(Account account, String sourceId, String title) {
         return createGroup(account, sourceId, title, 1, false, false);
     }
@@ -240,7 +198,7 @@ public abstract class BaseContactsProvider2Test extends PhotoLoadingTestCase {
         values.put(Groups.GROUP_VISIBLE, visible);
         values.put(Groups.AUTO_ADD, autoAdd ? 1 : 0);
         values.put(Groups.FAVORITES, favorite ? 1 : 0);
-        final Uri uri = maybeAddAccountQueryParameters(Groups.CONTENT_URI, account);
+        final Uri uri = TestUtil.maybeAddAccountQueryParameters(Groups.CONTENT_URI, account);
         return ContentUris.parseId(mResolver.insert(uri, values));
     }
 
@@ -262,32 +220,6 @@ public abstract class BaseContactsProvider2Test extends PhotoLoadingTestCase {
         mResolver.insert(Settings.CONTENT_URI, values);
     }
 
-    protected Uri insertStructuredName(long rawContactId, String givenName, String familyName) {
-        ContentValues values = new ContentValues();
-        StringBuilder sb = new StringBuilder();
-        if (givenName != null) {
-            sb.append(givenName);
-        }
-        if (givenName != null && familyName != null) {
-            sb.append(" ");
-        }
-        if (familyName != null) {
-            sb.append(familyName);
-        }
-        values.put(StructuredName.DISPLAY_NAME, sb.toString());
-        values.put(StructuredName.GIVEN_NAME, givenName);
-        values.put(StructuredName.FAMILY_NAME, familyName);
-
-        return insertStructuredName(rawContactId, values);
-    }
-
-    protected Uri insertStructuredName(long rawContactId, ContentValues values) {
-        values.put(Data.RAW_CONTACT_ID, rawContactId);
-        values.put(Data.MIMETYPE, StructuredName.CONTENT_ITEM_TYPE);
-        Uri resultUri = mResolver.insert(Data.CONTENT_URI, values);
-        return resultUri;
-    }
-
     protected Uri insertOrganization(long rawContactId, ContentValues values) {
         return insertOrganization(rawContactId, values, false);
     }
@@ -335,8 +267,18 @@ public abstract class BaseContactsProvider2Test extends PhotoLoadingTestCase {
         return insertEmail(rawContactId, email, primary, Email.TYPE_HOME, null);
     }
 
+    protected Uri insertEmail(long rawContactId, String email, boolean primary,
+            boolean superPrimary) {
+        return insertEmail(rawContactId, email, primary, superPrimary, Email.TYPE_HOME, null);
+    }
+
     protected Uri insertEmail(long rawContactId, String email, boolean primary, int type,
             String label) {
+        return insertEmail(rawContactId, email, primary, false, type, label);
+    }
+
+    protected Uri insertEmail(long rawContactId, String email, boolean primary,
+            boolean superPrimary, int type,  String label) {
         ContentValues values = new ContentValues();
         values.put(Data.RAW_CONTACT_ID, rawContactId);
         values.put(Data.MIMETYPE, Email.CONTENT_ITEM_TYPE);
@@ -346,6 +288,9 @@ public abstract class BaseContactsProvider2Test extends PhotoLoadingTestCase {
         if (primary) {
             values.put(Data.IS_PRIMARY, 1);
         }
+        if (superPrimary) {
+            values.put(Data.IS_SUPER_PRIMARY, 1);
+        }
 
         Uri resultUri = mResolver.insert(Data.CONTENT_URI, values);
         return resultUri;
@@ -493,21 +438,17 @@ public abstract class BaseContactsProvider2Test extends PhotoLoadingTestCase {
 
     protected Uri insertStreamItem(long rawContactId, ContentValues values, Account account) {
         return mResolver.insert(
-                maybeAddAccountQueryParameters(
-                        Uri.withAppendedPath(
-                                ContentUris.withAppendedId(RawContacts.CONTENT_URI, rawContactId),
-                                RawContacts.StreamItems.CONTENT_DIRECTORY),
-                        account),
+                TestUtil.maybeAddAccountQueryParameters(Uri.withAppendedPath(
+                        ContentUris.withAppendedId(RawContacts.CONTENT_URI, rawContactId),
+                        RawContacts.StreamItems.CONTENT_DIRECTORY), account),
                 values);
     }
 
     protected Uri insertStreamItemPhoto(long streamItemId, ContentValues values, Account account) {
         return mResolver.insert(
-                maybeAddAccountQueryParameters(
-                        Uri.withAppendedPath(
-                                ContentUris.withAppendedId(StreamItems.CONTENT_URI, streamItemId),
-                                StreamItems.StreamItemPhotos.CONTENT_DIRECTORY),
-                        account),
+                TestUtil.maybeAddAccountQueryParameters(Uri.withAppendedPath(
+                        ContentUris.withAppendedId(StreamItems.CONTENT_URI, streamItemId),
+                        StreamItems.StreamItemPhotos.CONTENT_DIRECTORY), account),
                 values);
     }
 
@@ -1099,6 +1040,22 @@ public abstract class BaseContactsProvider2Test extends PhotoLoadingTestCase {
         assertTrue(message.toString(), result);
     }
 
+    protected void assertCursorContains(Cursor cursor, ContentValues expectedValues) {
+        final StringBuilder message = new StringBuilder();
+        boolean found = false;
+        cursor.moveToPosition(-1);
+        while (cursor.moveToNext()) {
+            message.setLength(0);
+            final int pos = cursor.getPosition();
+            found = equalsWithExpectedValues(cursor, expectedValues, message);
+            if (found) {
+                break;
+            }
+        }
+        assertTrue("Expected values can not be found " + expectedValues + "," + message.toString(),
+                found);
+    }
+
     protected void assertCursorValues(Cursor cursor, ContentValues... expectedValues) {
         StringBuilder message = new StringBuilder();
 
@@ -1166,6 +1123,25 @@ public abstract class BaseContactsProvider2Test extends PhotoLoadingTestCase {
         return true;
     }
 
+    private static final String[] DATA_USAGE_PROJECTION =
+            new String[] {Data.DATA1, Data.TIMES_USED, Data.LAST_TIME_USED};
+
+    protected void assertDataUsageCursorContains(Uri uri, String data1, int timesUsed,
+            int lastTimeUsed) {
+        final Cursor cursor = mResolver.query(uri, DATA_USAGE_PROJECTION, null, null,
+                null);
+        try {
+            assertCursorContains(cursor,
+                    cv(
+                            Data.DATA1, data1,
+                            Data.TIMES_USED, timesUsed,
+                            Data.LAST_TIME_USED, lastTimeUsed)
+            );
+        } finally {
+            cursor.close();
+        }
+    }
+
     private String[] buildProjection(ContentValues values) {
         String[] projection = new String[values.size()];
         Iterator<Entry<String, Object>> iter = values.valueSet().iterator();
@@ -1494,11 +1470,11 @@ public abstract class BaseContactsProvider2Test extends PhotoLoadingTestCase {
 
             final long groupId = createGroup(mAccount, "gsid1", "title1");
 
-            long rawContactId = createRawContact();
+            long rawContactId = RawContactUtil.createRawContact(mResolver);
             insertGroupMembership(rawContactId, groupId);
 
             if (givenName != null || familyName != null) {
-                insertStructuredName(rawContactId, givenName, familyName);
+                DataUtil.insertStructuredName(mResolver, rawContactId, givenName, familyName);
             }
             if (nickname != null) {
                 insertNickname(rawContactId, nickname);
diff --git a/tests/src/com/android/providers/contacts/CallLogProviderTest.java b/tests/src/com/android/providers/contacts/CallLogProviderTest.java
index 02aebb7..fc33e28 100644
--- a/tests/src/com/android/providers/contacts/CallLogProviderTest.java
+++ b/tests/src/com/android/providers/contacts/CallLogProviderTest.java
@@ -17,7 +17,7 @@
 package com.android.providers.contacts;
 
 import com.android.internal.telephony.CallerInfo;
-import com.android.internal.telephony.Connection;
+import com.android.internal.telephony.PhoneConstants;
 
 import android.content.ContentProvider;
 import android.content.ContentUris;
@@ -180,7 +180,7 @@ public class CallLogProviderTest extends BaseContactsProvider2Test {
         ci.numberType = Phone.TYPE_CUSTOM;
         ci.numberLabel = "Directory";
         Uri uri = Calls.addCall(ci, getMockContext(), "1-800-263-7643",
-                Connection.PRESENTATION_ALLOWED, Calls.OUTGOING_TYPE, 2000, 40);
+                PhoneConstants.PRESENTATION_ALLOWED, Calls.OUTGOING_TYPE, 2000, 40);
 
         ContentValues values = new ContentValues();
         values.put(Calls.TYPE, Calls.OUTGOING_TYPE);
@@ -209,6 +209,66 @@ public class CallLogProviderTest extends BaseContactsProvider2Test {
         assertEquals(3, getCount(Calls.CONTENT_URI_WITH_VOICEMAIL, null, null));
     }
 
+    public void testLimitParamReturnsCorrectLimit() {
+        for (int i=0; i<10; i++) {
+            insertCallRecord();
+        }
+        Uri uri = Calls.CONTENT_URI.buildUpon()
+                .appendQueryParameter(Calls.LIMIT_PARAM_KEY, "4")
+                .build();
+        assertEquals(4, getCount(uri, null, null));
+    }
+
+    public void testLimitAndOffsetParamReturnsCorrectEntries() {
+        for (int i=0; i<10; i++) {
+            mResolver.insert(Calls.CONTENT_URI, getDefaultValues(Calls.INCOMING_TYPE));
+        }
+        for (int i=0; i<10; i++) {
+            mResolver.insert(Calls.CONTENT_URI, getDefaultValues(Calls.MISSED_TYPE));
+        }
+        // Limit 4 records.  Discard first 8.
+        Uri uri = Calls.CONTENT_URI.buildUpon()
+                .appendQueryParameter(Calls.LIMIT_PARAM_KEY, "4")
+                .appendQueryParameter(Calls.OFFSET_PARAM_KEY, "8")
+                .build();
+        String[] projection = new String[] {Calls._ID, Calls.TYPE};
+        Cursor c = mResolver.query(uri, projection, null, null, null);
+        try {
+            // First two should be incoming, next two should be missed.
+            for (int i = 0; i < 2; i++) {
+                c.moveToNext();
+                assertEquals(Calls.INCOMING_TYPE, c.getInt(1));
+            }
+            for (int i = 0; i < 2; i++) {
+                c.moveToNext();
+                assertEquals(Calls.MISSED_TYPE, c.getInt(1));
+            }
+        } finally {
+            c.close();
+        }
+    }
+
+    public void testUriWithBadLimitParamThrowsException() {
+        assertParamThrowsIllegalArgumentException(Calls.LIMIT_PARAM_KEY, "notvalid");
+    }
+
+    public void testUriWithBadOffsetParamThrowsException() {
+        assertParamThrowsIllegalArgumentException(Calls.OFFSET_PARAM_KEY, "notvalid");
+    }
+
+    private void assertParamThrowsIllegalArgumentException(String key, String value) {
+        Uri uri = Calls.CONTENT_URI.buildUpon()
+                .appendQueryParameter(key, value)
+                .build();
+        try {
+            mResolver.query(uri, null, null, null, null);
+            fail();
+        } catch (IllegalArgumentException e) {
+            assertTrue("Error does not contain value in question.",
+                    e.toString().contains(value));
+        }
+    }
+
     // Test to check that none of the voicemail provider specific fields are
     // insertable through call_log provider.
     public void testCannotAccessVoicemailSpecificFields_Insert() {
diff --git a/tests/src/com/android/providers/contacts/CallerInfoIntegrationTest.java b/tests/src/com/android/providers/contacts/CallerInfoIntegrationTest.java
index 0ce9bca..78b9ec5 100644
--- a/tests/src/com/android/providers/contacts/CallerInfoIntegrationTest.java
+++ b/tests/src/com/android/providers/contacts/CallerInfoIntegrationTest.java
@@ -16,14 +16,15 @@
 
 package com.android.providers.contacts;
 
-import com.android.internal.telephony.CallerInfo;
-
 import android.content.ContentUris;
 import android.content.ContentValues;
 import android.net.Uri;
 import android.provider.ContactsContract.RawContacts;
 import android.test.suitebuilder.annotation.MediumTest;
 
+import com.android.internal.telephony.CallerInfo;
+import com.android.providers.contacts.testutil.DataUtil;
+
 /**
  * Integration test for {@link CallerInfo} and {@link ContactsProvider2}.
  *
@@ -44,7 +45,7 @@ public class CallerInfoIntegrationTest extends BaseContactsProvider2Test {
         Uri rawContactUri = mResolver.insert(RawContacts.CONTENT_URI, values);
         long rawContactId = ContentUris.parseId(rawContactUri);
 
-        insertStructuredName(rawContactId, "Hot", "Tamale");
+        DataUtil.insertStructuredName(mResolver, rawContactId, "Hot", "Tamale");
         insertPhoneNumber(rawContactId, "800-466-4411");
 
         CallerInfo callerInfo = CallerInfo.getCallerInfo(getProvider().getContext(), "18004664411");
diff --git a/tests/src/com/android/providers/contacts/ContactDirectoryManagerTest.java b/tests/src/com/android/providers/contacts/ContactDirectoryManagerTest.java
index f1ff776..be14f45 100644
--- a/tests/src/com/android/providers/contacts/ContactDirectoryManagerTest.java
+++ b/tests/src/com/android/providers/contacts/ContactDirectoryManagerTest.java
@@ -16,9 +16,6 @@
 
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.ContactsDatabaseHelper.AggregationExceptionColumns;
-import com.google.android.collect.Lists;
-
 import android.accounts.Account;
 import android.content.ContentValues;
 import android.content.Context;
@@ -39,6 +36,9 @@ import android.test.mock.MockContentProvider;
 import android.test.suitebuilder.annotation.MediumTest;
 import android.util.Log;
 
+import com.android.providers.contacts.ContactsDatabaseHelper.AggregationExceptionColumns;
+import com.google.android.collect.Lists;
+
 /**
  * Unit tests for {@link ContactDirectoryManager}. Run the test like this:
  *
@@ -63,7 +63,7 @@ public class ContactDirectoryManagerTest extends BaseContactsProvider2Test {
         private MatrixCursor mResponse;
 
         @Override
-        public void attachInfo(Context context, ProviderInfo info) {
+        public void attachInfoForTesting(Context context, ProviderInfo info) {
             mAuthority = info.authority;
         }
 
diff --git a/tests/src/com/android/providers/contacts/ContactLocaleUtilsTest.java b/tests/src/com/android/providers/contacts/ContactLocaleUtilsTest.java
index cf18155..ea4ef0f 100644
--- a/tests/src/com/android/providers/contacts/ContactLocaleUtilsTest.java
+++ b/tests/src/com/android/providers/contacts/ContactLocaleUtilsTest.java
@@ -21,14 +21,21 @@ import android.test.AndroidTestCase;
 import android.test.suitebuilder.annotation.SmallTest;
 
 import java.text.Collator;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Locale;
 
 @SmallTest
 public class ContactLocaleUtilsTest extends AndroidTestCase {
+    private static final String PHONE_NUMBER_1 = "+1 (650) 555-1212";
+    private static final String PHONE_NUMBER_2 = "650-555-1212";
     private static final String LATIN_NAME = "John Smith";
+    private static final String LATIN_NAME_2 = "John Paul Jones";
+    private static final String KANJI_NAME = "\u65e5";
+    private static final String ARABIC_NAME = "\u0646\u0648\u0631"; /* Noor */
     private static final String CHINESE_NAME = "\u675C\u9D51";
     private static final String CHINESE_LATIN_MIX_NAME_1 = "D\u675C\u9D51";
     private static final String CHINESE_LATIN_MIX_NAME_2 = "MARY \u675C\u9D51";
@@ -39,72 +46,223 @@ public class ContactLocaleUtilsTest extends AndroidTestCase {
     private static final String[] CHINESE_LATIN_MIX_NAME_2_KEY = {"\u9D51", "\u675C\u9D51",
         "MARY \u675C\u9D51", "JUAN", "DUJUAN", "MARY DUJUAN", "J", "DJ", "MDJ"};
     private static final String[] LATIN_NAME_KEY = {"John Smith", "Smith", "JS", "S"};
+    private static final String[] LATIN_NAME_KEY_2 = {
+        "John Paul Jones", "Paul Jones", "Jones", "JPJ", "PJ", "J"};
+    private static final String[] LABELS_EN_US = {
+        "", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
+        "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
+        "#", ""};
+    private static final String[] LABELS_DE = {
+        "", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
+        "N", "O", "P", "Q", "R", "S", "Sch", "St", "T", "U", "V", "W", "X",
+        "Y", "Z", "#", ""};
+    private static final String[] LABELS_JA_JP = {
+        "", "\u3042", "\u304B", "\u3055", "\u305F", "\u306A", "\u306F",
+        "\u307E", "\u3084", "\u3089", "\u308F", "\u4ED6",
+        "", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
+        "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
+        "#", ""};
+    private static final String[] LABELS_ZH_TW = {
+        "", "1\u5283", "2\u5283", "3\u5283", "4\u5283", "5\u5283", "6\u5283",
+        "7\u5283", "8\u5283", "9\u5283", "10\u5283", "11\u5283", "12\u5283",
+        "13\u5283", "14\u5283", "15\u5283", "16\u5283", "17\u5283", "18\u5283",
+        "19\u5283", "20\u5283", "21\u5283", "22\u5283", "23\u5283", "24\u5283",
+        "25\u5283", "26\u5283", "27\u5283", "28\u5283", "29\u5283", "30\u5283",
+        "31\u5283", "32\u5283", "33\u5283",
+        "35\u5283", "36\u5283", "39\u5283", "48\u5283",
+        "", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
+        "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
+        "#", ""};
+    private static final String[] LABELS_KO = {
+        "", "\u3131", "\u3134", "\u3137", "\u3139", "\u3141", "\u3142",
+        "\u3145", "\u3147", "\u3148", "\u314A", "\u314B", "\u314C", "\u314D",
+        "\u314E",
+        "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
+        "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
+        "#", ""};
+    private static final String[] LABELS_AR = {
+        "", "\u0627", "\u0628", "\u062a", "\u062b", "\u062c", "\u062d",
+        "\u062e", "\u062f", "\u0630", "\u0631", "\u0632", "\u0633", "\u0634",
+        "\u0635", "\u0636", "\u0637", "\u0638", "\u0639", "\u063a", "\u0641",
+        "\u0642", "\u0643", "\u0644", "\u0645", "\u0646", "\u0647", "\u0648",
+        "\u064a",
+        "", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
+        "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
+        "#", ""};
 
+    private static final String JAPANESE_MISC = "\u4ed6";
 
-    private ContactLocaleUtils mContactLocaleUtils = ContactLocaleUtils.getIntance();
+    private static final Locale LOCALE_ARABIC = new Locale("ar");
+    private boolean hasChineseCollator;
+    private boolean hasJapaneseCollator;
+    private boolean hasKoreanCollator;
+    private boolean hasArabicCollator;
+    private boolean hasGermanCollator;
 
-    public void testContactLocaleUtilsBase() throws Exception {
-        assertEquals(mContactLocaleUtils.getSortKey(LATIN_NAME, FullNameStyle.UNDEFINED),
-                LATIN_NAME);
-        assertNull(mContactLocaleUtils.getNameLookupKeys(LATIN_NAME,
-                FullNameStyle.UNDEFINED));
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        final Locale locale[] = Collator.getAvailableLocales();
+        for (int i = 0; i < locale.length; i++) {
+            if (locale[i].equals(Locale.CHINA)) {
+                hasChineseCollator = true;
+            } else if (locale[i].equals(Locale.JAPAN)) {
+                hasJapaneseCollator = true;
+            } else if (locale[i].equals(Locale.KOREA)) {
+                hasKoreanCollator = true;
+            } else if (locale[i].equals(LOCALE_ARABIC)) {
+                hasArabicCollator = true;
+            } else if (locale[i].equals(Locale.GERMANY)) {
+                hasGermanCollator = true;
+            }
+        }
     }
 
-    public void testChineseContactLocaleUtils() throws Exception {
-        if (!hasChineseCollator()) {
+    private String getLabel(String name) {
+        ContactLocaleUtils utils = ContactLocaleUtils.getInstance();
+        int bucketIndex = utils.getBucketIndex(name);
+        return utils.getBucketLabel(bucketIndex);
+    }
+
+    private Iterator<String> getNameLookupKeys(String name, int nameStyle) {
+        ContactLocaleUtils utils = ContactLocaleUtils.getInstance();
+        return utils.getNameLookupKeys(name, nameStyle);
+    }
+
+    private ArrayList<String> getLabels() {
+        ContactLocaleUtils utils = ContactLocaleUtils.getInstance();
+        return utils.getLabels();
+    }
+
+    public void testEnglishContactLocaleUtils() throws Exception {
+        ContactLocaleUtils.setLocale(Locale.ENGLISH);
+        assertEquals("#", getLabel(PHONE_NUMBER_1));
+        assertEquals("#", getLabel(PHONE_NUMBER_2));
+        assertEquals("J", getLabel(LATIN_NAME));
+        assertEquals("", getLabel(CHINESE_NAME));
+        assertEquals("D", getLabel(CHINESE_LATIN_MIX_NAME_1));
+        assertEquals("B", getLabel("Bob Smith"));
+
+        assertNull(getNameLookupKeys(LATIN_NAME, FullNameStyle.UNDEFINED));
+        verifyLabels(getLabels(), LABELS_EN_US);
+    }
+
+    public void testJapaneseContactLocaleUtils() throws Exception {
+        if (!hasJapaneseCollator) {
             return;
         }
 
-        assertTrue(mContactLocaleUtils.getSortKey(CHINESE_NAME,
-                FullNameStyle.CHINESE).equalsIgnoreCase("DU \u675C JUAN \u9D51"));
+        ContactLocaleUtils.setLocale(Locale.JAPAN);
+        assertEquals("#", getLabel(PHONE_NUMBER_1));
+        assertEquals("#", getLabel(PHONE_NUMBER_2));
+        assertEquals(JAPANESE_MISC, getLabel(KANJI_NAME));
+        assertEquals("J", getLabel(LATIN_NAME));
+        assertEquals(JAPANESE_MISC, getLabel(CHINESE_NAME));
+        assertEquals("D", getLabel(CHINESE_LATIN_MIX_NAME_1));
+
+        assertNull(getNameLookupKeys(CHINESE_NAME, FullNameStyle.CJK));
+        assertNull(getNameLookupKeys(CHINESE_NAME, FullNameStyle.CHINESE));
+
+        // Following two tests are broken with ICU 50
+        verifyLabels(getLabels(), LABELS_JA_JP);
+        assertEquals("B", getLabel("Bob Smith"));
+    }
+
+    public void testChineseContactLocaleUtils() throws Exception {
+        if (!hasChineseCollator) {
+            return;
+        }
 
-        assertTrue(mContactLocaleUtils.getSortKey(CHINESE_LATIN_MIX_NAME_1,
-                FullNameStyle.CHINESE).equalsIgnoreCase("d DU \u675C JUAN \u9D51"));
+        ContactLocaleUtils.setLocale(Locale.SIMPLIFIED_CHINESE);
+        assertEquals("#", getLabel(PHONE_NUMBER_1));
+        assertEquals("#", getLabel(PHONE_NUMBER_2));
+        assertEquals("J", getLabel(LATIN_NAME));
+        assertEquals("D", getLabel(CHINESE_NAME));
+        assertEquals("D", getLabel(CHINESE_LATIN_MIX_NAME_1));
+        assertEquals("B", getLabel("Bob Smith"));
+        verifyLabels(getLabels(), LABELS_EN_US);
 
-        assertTrue(mContactLocaleUtils.getSortKey(CHINESE_LATIN_MIX_NAME_2,
-                FullNameStyle.CHINESE).equalsIgnoreCase("mary DU \u675C JUAN \u9D51"));
+        ContactLocaleUtils.setLocale(Locale.TRADITIONAL_CHINESE);
+        assertEquals("#", getLabel(PHONE_NUMBER_1));
+        assertEquals("#", getLabel(PHONE_NUMBER_2));
+        assertEquals("J", getLabel(LATIN_NAME));
+        assertEquals("7\u5283", getLabel(CHINESE_NAME));
+        assertEquals("D", getLabel(CHINESE_LATIN_MIX_NAME_1));
 
-        Iterator<String> keys = mContactLocaleUtils.getNameLookupKeys(CHINESE_NAME,
+        ContactLocaleUtils.setLocale(Locale.SIMPLIFIED_CHINESE);
+        Iterator<String> keys = getNameLookupKeys(CHINESE_NAME,
                 FullNameStyle.CHINESE);
         verifyKeys(keys, CHINESE_NAME_KEY);
 
-        keys = mContactLocaleUtils.getNameLookupKeys(CHINESE_LATIN_MIX_NAME_1,
-                FullNameStyle.CHINESE);
+        keys = getNameLookupKeys(CHINESE_LATIN_MIX_NAME_1, FullNameStyle.CHINESE);
         verifyKeys(keys, CHINESE_LATIN_MIX_NAME_1_KEY);
 
-        keys = mContactLocaleUtils.getNameLookupKeys(CHINESE_LATIN_MIX_NAME_2,
-                FullNameStyle.CHINESE);
+        keys = getNameLookupKeys(CHINESE_LATIN_MIX_NAME_2, FullNameStyle.CHINESE);
         verifyKeys(keys, CHINESE_LATIN_MIX_NAME_2_KEY);
+
+        // Following test broken with ICU 50
+        ContactLocaleUtils.setLocale(Locale.TRADITIONAL_CHINESE);
+        verifyLabels(getLabels(), LABELS_ZH_TW);
+        assertEquals("B", getLabel("Bob Smith"));
     }
 
     public void testChineseStyleNameWithDifferentLocale() throws Exception {
-        if (!hasChineseCollator()) {
+        if (!hasChineseCollator) {
             return;
         }
-        mContactLocaleUtils.setLocale(Locale.ENGLISH);
-        assertEquals("DU \u675C JUAN \u9D51",
-                mContactLocaleUtils.getSortKey(CHINESE_NAME, FullNameStyle.CHINESE).toUpperCase());
-        assertEquals("DU \u675C JUAN \u9D51",
-                mContactLocaleUtils.getSortKey(CHINESE_NAME, FullNameStyle.CJK).toUpperCase());
-        mContactLocaleUtils.setLocale(Locale.CHINESE);
-        assertEquals("DU \u675C JUAN \u9D51",
-                mContactLocaleUtils.getSortKey(CHINESE_NAME, FullNameStyle.CHINESE).toUpperCase());
-        assertEquals("DU \u675C JUAN \u9D51",
-                mContactLocaleUtils.getSortKey(CHINESE_NAME, FullNameStyle.CJK).toUpperCase());
-        assertEquals(LATIN_NAME, mContactLocaleUtils.getSortKey(LATIN_NAME, FullNameStyle.WESTERN));
-
-        mContactLocaleUtils.setLocale(Locale.ENGLISH);
-        Iterator<String> keys = mContactLocaleUtils.getNameLookupKeys(CHINESE_NAME,
-                FullNameStyle.CHINESE);
-        verifyKeys(keys, CHINESE_NAME_KEY);
-        keys = mContactLocaleUtils.getNameLookupKeys(CHINESE_NAME, FullNameStyle.CJK);
-        verifyKeys(keys, CHINESE_NAME_KEY);
-        mContactLocaleUtils.setLocale(Locale.CHINESE);
-        keys = mContactLocaleUtils.getNameLookupKeys(CHINESE_NAME, FullNameStyle.CJK);
+
+        ContactLocaleUtils.setLocale(Locale.ENGLISH);
+        assertNull(getNameLookupKeys(CHINESE_NAME, FullNameStyle.CHINESE));
+        assertNull(getNameLookupKeys(CHINESE_NAME, FullNameStyle.CJK));
+
+        ContactLocaleUtils.setLocale(Locale.CHINA);
+        Iterator<String> keys = getNameLookupKeys(CHINESE_NAME,
+                FullNameStyle.CJK);
         verifyKeys(keys, CHINESE_NAME_KEY);
-        keys = mContactLocaleUtils.getNameLookupKeys(LATIN_NAME, FullNameStyle.WESTERN);
+        keys = getNameLookupKeys(LATIN_NAME, FullNameStyle.WESTERN);
         verifyKeys(keys, LATIN_NAME_KEY);
+        keys = getNameLookupKeys(LATIN_NAME_2, FullNameStyle.WESTERN);
+        verifyKeys(keys, LATIN_NAME_KEY_2);
 
+        ContactLocaleUtils.setLocale(Locale.TRADITIONAL_CHINESE);
+        assertNull(getNameLookupKeys(CHINESE_NAME, FullNameStyle.CJK));
+    }
+
+    public void testKoreanContactLocaleUtils() throws Exception {
+        if (!hasKoreanCollator) {
+            return;
+        }
+
+        ContactLocaleUtils.setLocale(Locale.KOREA);
+        assertEquals("\u3131", getLabel("\u1100"));
+        assertEquals("\u3131", getLabel("\u3131"));
+        assertEquals("\u3131", getLabel("\u1101"));
+        assertEquals("\u314e", getLabel("\u1161"));
+        assertEquals("B", getLabel("Bob Smith"));
+        verifyLabels(getLabels(), LABELS_KO);
+    }
+
+    public void testArabicContactLocaleUtils() throws Exception {
+        if (!hasArabicCollator) {
+            return;
+        }
+
+        ContactLocaleUtils.setLocale(LOCALE_ARABIC);
+        assertEquals("\u0646", getLabel(ARABIC_NAME));
+        assertEquals("B", getLabel("Bob Smith"));
+        verifyLabels(getLabels(), LABELS_AR);
+    }
+
+    public void testGermanContactLocaleUtils() throws Exception {
+        if (!hasGermanCollator) {
+            return;
+        }
+
+        ContactLocaleUtils.setLocale(Locale.GERMANY);
+        assertEquals("S", getLabel("Sacher"));
+        assertEquals("Sch", getLabel("Schiller"));
+        assertEquals("St", getLabel("Steiff"));
+        verifyLabels(getLabels(), LABELS_DE);
     }
 
     private void verifyKeys(final Iterator<String> resultKeys, final String[] expectedKeys)
@@ -113,16 +271,17 @@ public class ContactLocaleUtilsTest extends AndroidTestCase {
         while (resultKeys.hasNext()) {
             allKeys.add(resultKeys.next());
         }
-        assertEquals(allKeys, new HashSet<String>(Arrays.asList(expectedKeys)));
+        assertEquals(new HashSet<String>(Arrays.asList(expectedKeys)), allKeys);
     }
 
-    private boolean hasChineseCollator() {
-        final Locale locale[] = Collator.getAvailableLocales();
-        for (int i = 0; i < locale.length; i++) {
-            if (locale[i].equals(Locale.CHINA)) {
-                return true;
-            }
-        }
-        return false;
+    // Verify that the initial set of resultLabels matches the expectedLabels.
+    // Ignore the (large) number of secondary locale labels that make up the
+    // tail labels in the result set right before the final "#" and "" buckets.
+    private void verifyLabels(final ArrayList<String> resultLabels,
+            final String[] expectedLabels) throws Exception {
+        final List<String> expectedLabelList = Arrays.asList(expectedLabels);
+        final int numLabels = expectedLabelList.size() - 2;
+        assertEquals(expectedLabelList.subList(0, numLabels),
+                resultLabels.subList(0, numLabels));
     }
 }
diff --git a/tests/src/com/android/providers/contacts/ContactLookupKeyTest.java b/tests/src/com/android/providers/contacts/ContactLookupKeyTest.java
index 739b2cb..047e8ea 100644
--- a/tests/src/com/android/providers/contacts/ContactLookupKeyTest.java
+++ b/tests/src/com/android/providers/contacts/ContactLookupKeyTest.java
@@ -16,8 +16,6 @@
 
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.ContactLookupKey.LookupKeySegment;
-
 import android.content.ContentUris;
 import android.net.Uri;
 import android.provider.ContactsContract.AggregationExceptions;
@@ -25,6 +23,9 @@ import android.provider.ContactsContract.Contacts;
 import android.provider.ContactsContract.RawContacts;
 import android.test.suitebuilder.annotation.MediumTest;
 
+import com.android.providers.contacts.ContactLookupKey.LookupKeySegment;
+import com.android.providers.contacts.testutil.RawContactUtil;
+
 import java.util.ArrayList;
 
 /**
@@ -40,8 +41,8 @@ import java.util.ArrayList;
 public class ContactLookupKeyTest extends BaseContactsProvider2Test {
 
     public void testLookupKeyUsingDisplayNameAndNoAccount() {
-        long rawContactId1 = createRawContactWithName("John", "Doe");
-        long rawContactId2 = createRawContactWithName("johndoe", null);
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe");
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "johndoe", null);
         setAggregationException(
                 AggregationExceptions.TYPE_KEEP_TOGETHER, rawContactId1, rawContactId2);
 
@@ -68,13 +69,13 @@ public class ContactLookupKeyTest extends BaseContactsProvider2Test {
     }
 
     public void testLookupKeyUsingSourceIdAndNoAccount() {
-        long rawContactId1 = createRawContactWithName("John", "Doe");
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe");
         storeValue(RawContacts.CONTENT_URI, rawContactId1, RawContacts.SOURCE_ID, "123");
 
-        long rawContactId2 = createRawContactWithName("johndoe", null);
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "johndoe", null);
         storeValue(RawContacts.CONTENT_URI, rawContactId2, RawContacts.SOURCE_ID, "4.5.6");
 
-        long rawContactId3 = createRawContactWithName("john", "dough");
+        long rawContactId3 = RawContactUtil.createRawContactWithName(mResolver, "john", "dough");
         storeValue(RawContacts.CONTENT_URI, rawContactId3, RawContacts.SOURCE_ID, "http://foo?bar");
 
         setAggregationException(
@@ -94,12 +95,12 @@ public class ContactLookupKeyTest extends BaseContactsProvider2Test {
     }
 
     public void testLookupKeySameSourceIdDifferentAccounts() {
-        long rawContactId1 = createRawContactWithName("Dear", "Doe");
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "Dear", "Doe");
         storeValue(RawContacts.CONTENT_URI, rawContactId1, RawContacts.ACCOUNT_TYPE, "foo");
         storeValue(RawContacts.CONTENT_URI, rawContactId1, RawContacts.ACCOUNT_NAME, "FOO");
         storeValue(RawContacts.CONTENT_URI, rawContactId1, RawContacts.SOURCE_ID, "1");
 
-        long rawContactId2 = createRawContactWithName("Deer", "Dough");
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "Deer", "Dough");
         storeValue(RawContacts.CONTENT_URI, rawContactId2, RawContacts.ACCOUNT_TYPE, "bar");
         storeValue(RawContacts.CONTENT_URI, rawContactId2, RawContacts.ACCOUNT_NAME, "BAR");
         storeValue(RawContacts.CONTENT_URI, rawContactId2, RawContacts.SOURCE_ID, "1");
@@ -125,13 +126,13 @@ public class ContactLookupKeyTest extends BaseContactsProvider2Test {
     }
 
     public void testLookupKeyChoosingLargestContact() {
-        long rawContactId1 = createRawContactWithName("John", "Doe");
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe");
         storeValue(RawContacts.CONTENT_URI, rawContactId1, RawContacts.SOURCE_ID, "1");
 
-        long rawContactId2 = createRawContactWithName("John", "Doe");
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe");
         storeValue(RawContacts.CONTENT_URI, rawContactId2, RawContacts.SOURCE_ID, "2");
 
-        long rawContactId3 = createRawContactWithName("John", "Doe");
+        long rawContactId3 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe");
         storeValue(RawContacts.CONTENT_URI, rawContactId3, RawContacts.SOURCE_ID, "3");
         setAggregationException(
                 AggregationExceptions.TYPE_KEEP_TOGETHER, rawContactId1, rawContactId2);
@@ -165,7 +166,7 @@ public class ContactLookupKeyTest extends BaseContactsProvider2Test {
     }
 
     public void testGetLookupUri() {
-        long rawContactId1 = createRawContactWithName("John", "Doe");
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe");
         storeValue(RawContacts.CONTENT_URI, rawContactId1, RawContacts.SOURCE_ID, "1");
 
         long contactId = queryContactId(rawContactId1);
diff --git a/tests/src/com/android/providers/contacts/ContactsActor.java b/tests/src/com/android/providers/contacts/ContactsActor.java
index 038eb97..8da2800 100644
--- a/tests/src/com/android/providers/contacts/ContactsActor.java
+++ b/tests/src/com/android/providers/contacts/ContactsActor.java
@@ -16,9 +16,6 @@
 
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.util.MockSharedPreferences;
-import com.google.android.collect.Sets;
-
 import android.accounts.Account;
 import android.accounts.AccountManager;
 import android.accounts.AccountManagerCallback;
@@ -31,6 +28,7 @@ import android.content.ContentResolver;
 import android.content.ContentUris;
 import android.content.ContentValues;
 import android.content.Context;
+import android.content.Intent;
 import android.content.SharedPreferences;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
@@ -59,6 +57,9 @@ import android.test.RenamingDelegatingContext;
 import android.test.mock.MockContentResolver;
 import android.test.mock.MockContext;
 
+import com.android.providers.contacts.util.MockSharedPreferences;
+import com.google.android.collect.Sets;
+
 import java.io.File;
 import java.io.IOException;
 import java.util.Arrays;
@@ -198,7 +199,7 @@ public class ContactsActor {
         ContentProvider provider = providerClass.newInstance();
         ProviderInfo info = new ProviderInfo();
         info.authority = authority;
-        provider.attachInfo(mProviderContext, info);
+        provider.attachInfoForTesting(mProviderContext, info);
         resolver.addProvider(authority, provider);
         return provider;
     }
@@ -341,6 +342,16 @@ public class ContactsActor {
         public void enforceCallingOrSelfPermission(String permission, String message) {
             enforceCallingPermission(permission, message);
         }
+
+        @Override
+        public void sendBroadcast(Intent intent) {
+            mOverallContext.sendBroadcast(intent);
+        }
+
+        @Override
+        public void sendBroadcast(Intent intent, String receiverPermission) {
+            mOverallContext.sendBroadcast(intent, receiverPermission);
+        }
     }
 
     static String sCallingPackage = null;
diff --git a/tests/src/com/android/providers/contacts/ContactsDatabaseHelperTest.java b/tests/src/com/android/providers/contacts/ContactsDatabaseHelperTest.java
index a9d8a36..faddeea 100644
--- a/tests/src/com/android/providers/contacts/ContactsDatabaseHelperTest.java
+++ b/tests/src/com/android/providers/contacts/ContactsDatabaseHelperTest.java
@@ -16,11 +16,11 @@
 
 package com.android.providers.contacts;
 
+import android.test.suitebuilder.annotation.SmallTest;
+
 import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
 import com.google.android.collect.Sets;
 
-import android.test.suitebuilder.annotation.SmallTest;
-
 import java.util.Set;
 
 @SmallTest
diff --git a/tests/src/com/android/providers/contacts/ContactsMockPackageManager.java b/tests/src/com/android/providers/contacts/ContactsMockPackageManager.java
index 69cd9fa..694f0f3 100644
--- a/tests/src/com/android/providers/contacts/ContactsMockPackageManager.java
+++ b/tests/src/com/android/providers/contacts/ContactsMockPackageManager.java
@@ -15,8 +15,6 @@
  */
 package com.android.providers.contacts;
 
-import com.google.android.collect.Lists;
-
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageInfo;
@@ -26,6 +24,8 @@ import android.content.res.Resources;
 import android.os.Binder;
 import android.test.mock.MockPackageManager;
 
+import com.google.android.collect.Lists;
+
 import java.util.HashMap;
 import java.util.List;
 
diff --git a/tests/src/com/android/providers/contacts/ContactsMockResources.java b/tests/src/com/android/providers/contacts/ContactsMockResources.java
index 248d6da..6d98665 100644
--- a/tests/src/com/android/providers/contacts/ContactsMockResources.java
+++ b/tests/src/com/android/providers/contacts/ContactsMockResources.java
@@ -16,10 +16,10 @@
 
 package com.android.providers.contacts;
 
-import com.google.android.collect.Maps;
-
 import android.test.mock.MockResources;
 
+import com.google.android.collect.Maps;
+
 import java.util.Map;
 
 final class ContactsMockResources extends MockResources {
diff --git a/tests/src/com/android/providers/contacts/ContactsProvider2Test.java b/tests/src/com/android/providers/contacts/ContactsProvider2Test.java
index 5706925..58086e2 100644
--- a/tests/src/com/android/providers/contacts/ContactsProvider2Test.java
+++ b/tests/src/com/android/providers/contacts/ContactsProvider2Test.java
@@ -18,19 +18,10 @@ package com.android.providers.contacts;
 
 import static com.android.providers.contacts.TestUtils.cv;
 
-import com.android.internal.util.ArrayUtils;
-import com.android.providers.contacts.ContactsDatabaseHelper.AggregationExceptionColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.DataUsageStatColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.DbProperties;
-import com.android.providers.contacts.ContactsDatabaseHelper.PresenceColumns;
-import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
-import com.android.providers.contacts.tests.R;
-import com.google.android.collect.Lists;
-import com.google.android.collect.Sets;
-
 import android.accounts.Account;
 import android.content.ContentProviderOperation;
 import android.content.ContentProviderResult;
+import android.content.ContentResolver;
 import android.content.ContentUris;
 import android.content.ContentValues;
 import android.content.Entity;
@@ -42,6 +33,7 @@ import android.os.AsyncTask;
 import android.provider.ContactsContract;
 import android.provider.ContactsContract.AggregationExceptions;
 import android.provider.ContactsContract.CommonDataKinds.Callable;
+import android.provider.ContactsContract.CommonDataKinds.Contactables;
 import android.provider.ContactsContract.CommonDataKinds.Email;
 import android.provider.ContactsContract.CommonDataKinds.GroupMembership;
 import android.provider.ContactsContract.CommonDataKinds.Im;
@@ -76,12 +68,32 @@ import android.test.MoreAsserts;
 import android.test.suitebuilder.annotation.LargeTest;
 import android.text.TextUtils;
 
+import com.android.internal.util.ArrayUtils;
+import com.android.providers.contacts.ContactsDatabaseHelper.AggregationExceptionColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.ContactsColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.DataUsageStatColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.DbProperties;
+import com.android.providers.contacts.ContactsDatabaseHelper.PresenceColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.RawContactsColumns;
+import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
+import com.android.providers.contacts.testutil.CommonDatabaseUtils;
+import com.android.providers.contacts.testutil.ContactUtil;
+import com.android.providers.contacts.testutil.DataUtil;
+import com.android.providers.contacts.testutil.DatabaseAsserts;
+import com.android.providers.contacts.testutil.DeletedContactUtil;
+import com.android.providers.contacts.testutil.RawContactUtil;
+import com.android.providers.contacts.testutil.TestUtil;
+import com.android.providers.contacts.tests.R;
+import com.google.android.collect.Lists;
+import com.google.android.collect.Sets;
+
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.text.Collator;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Locale;
 import java.util.Set;
@@ -98,8 +110,7 @@ import java.util.Set;
 @LargeTest
 public class ContactsProvider2Test extends BaseContactsProvider2Test {
 
-    private static final Account ACCOUNT_1 = new Account("account_name_1", "account_type_1");
-    private static final Account ACCOUNT_2 = new Account("account_name_2", "account_type_2");
+    private static final String TAG = ContactsProvider2Test.class.getSimpleName();
 
     public void testContactsProjection() {
         assertProjection(Contacts.CONTENT_URI, new String[]{
@@ -111,6 +122,10 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
                 Contacts.PHONETIC_NAME_STYLE,
                 Contacts.SORT_KEY_PRIMARY,
                 Contacts.SORT_KEY_ALTERNATIVE,
+                ContactsColumns.PHONEBOOK_LABEL_PRIMARY,
+                ContactsColumns.PHONEBOOK_BUCKET_PRIMARY,
+                ContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE,
+                ContactsColumns.PHONEBOOK_BUCKET_ALTERNATIVE,
                 Contacts.LAST_TIME_CONTACTED,
                 Contacts.TIMES_CONTACTED,
                 Contacts.STARRED,
@@ -132,6 +147,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
                 Contacts.CONTACT_STATUS_RES_PACKAGE,
                 Contacts.CONTACT_STATUS_LABEL,
                 Contacts.CONTACT_STATUS_ICON,
+                Contacts.CONTACT_LAST_UPDATED_TIMESTAMP
         });
     }
 
@@ -145,6 +161,10 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
                 Contacts.PHONETIC_NAME_STYLE,
                 Contacts.SORT_KEY_PRIMARY,
                 Contacts.SORT_KEY_ALTERNATIVE,
+                ContactsColumns.PHONEBOOK_LABEL_PRIMARY,
+                ContactsColumns.PHONEBOOK_BUCKET_PRIMARY,
+                ContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE,
+                ContactsColumns.PHONEBOOK_BUCKET_ALTERNATIVE,
                 Contacts.LAST_TIME_CONTACTED,
                 Contacts.TIMES_CONTACTED,
                 Contacts.STARRED,
@@ -166,6 +186,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
                 Contacts.CONTACT_STATUS_RES_PACKAGE,
                 Contacts.CONTACT_STATUS_LABEL,
                 Contacts.CONTACT_STATUS_ICON,
+                Contacts.CONTACT_LAST_UPDATED_TIMESTAMP,
                 DataUsageStatColumns.TIMES_USED,
                 DataUsageStatColumns.LAST_TIME_USED,
         });
@@ -183,6 +204,10 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
                 Contacts.PHONETIC_NAME_STYLE,
                 Contacts.SORT_KEY_PRIMARY,
                 Contacts.SORT_KEY_ALTERNATIVE,
+                ContactsColumns.PHONEBOOK_LABEL_PRIMARY,
+                ContactsColumns.PHONEBOOK_BUCKET_PRIMARY,
+                ContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE,
+                ContactsColumns.PHONEBOOK_BUCKET_ALTERNATIVE,
                 Contacts.LAST_TIME_CONTACTED,
                 Contacts.TIMES_CONTACTED,
                 Contacts.STARRED,
@@ -204,6 +229,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
                 Contacts.CONTACT_STATUS_RES_PACKAGE,
                 Contacts.CONTACT_STATUS_LABEL,
                 Contacts.CONTACT_STATUS_ICON,
+                Contacts.CONTACT_LAST_UPDATED_TIMESTAMP,
                 DataUsageStatColumns.TIMES_USED,
                 DataUsageStatColumns.LAST_TIME_USED,
                 Phone.NUMBER,
@@ -223,6 +249,10 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
                 Contacts.PHONETIC_NAME_STYLE,
                 Contacts.SORT_KEY_PRIMARY,
                 Contacts.SORT_KEY_ALTERNATIVE,
+                ContactsColumns.PHONEBOOK_LABEL_PRIMARY,
+                ContactsColumns.PHONEBOOK_BUCKET_PRIMARY,
+                ContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE,
+                ContactsColumns.PHONEBOOK_BUCKET_ALTERNATIVE,
                 Contacts.LAST_TIME_CONTACTED,
                 Contacts.TIMES_CONTACTED,
                 Contacts.STARRED,
@@ -244,7 +274,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
                 Contacts.CONTACT_STATUS_RES_PACKAGE,
                 Contacts.CONTACT_STATUS_LABEL,
                 Contacts.CONTACT_STATUS_ICON,
-
+                Contacts.CONTACT_LAST_UPDATED_TIMESTAMP,
                 SearchSnippetColumns.SNIPPET,
         });
     }
@@ -270,6 +300,10 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
                 RawContacts.NAME_VERIFIED,
                 RawContacts.SORT_KEY_PRIMARY,
                 RawContacts.SORT_KEY_ALTERNATIVE,
+                RawContactsColumns.PHONEBOOK_LABEL_PRIMARY,
+                RawContactsColumns.PHONEBOOK_BUCKET_PRIMARY,
+                RawContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE,
+                RawContactsColumns.PHONEBOOK_BUCKET_ALTERNATIVE,
                 RawContacts.TIMES_CONTACTED,
                 RawContacts.LAST_TIME_CONTACTED,
                 RawContacts.CUSTOM_RINGTONE,
@@ -319,6 +353,8 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
                 Data.STATUS_RES_PACKAGE,
                 Data.STATUS_LABEL,
                 Data.STATUS_ICON,
+                Data.TIMES_USED,
+                Data.LAST_TIME_USED,
                 RawContacts.ACCOUNT_NAME,
                 RawContacts.ACCOUNT_TYPE,
                 RawContacts.DATA_SET,
@@ -336,6 +372,10 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
                 Contacts.PHONETIC_NAME_STYLE,
                 Contacts.SORT_KEY_PRIMARY,
                 Contacts.SORT_KEY_ALTERNATIVE,
+                ContactsColumns.PHONEBOOK_LABEL_PRIMARY,
+                ContactsColumns.PHONEBOOK_BUCKET_PRIMARY,
+                ContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE,
+                ContactsColumns.PHONEBOOK_BUCKET_ALTERNATIVE,
                 Contacts.LAST_TIME_CONTACTED,
                 Contacts.TIMES_CONTACTED,
                 Contacts.STARRED,
@@ -356,6 +396,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
                 Contacts.CONTACT_STATUS_RES_PACKAGE,
                 Contacts.CONTACT_STATUS_LABEL,
                 Contacts.CONTACT_STATUS_ICON,
+                Contacts.CONTACT_LAST_UPDATED_TIMESTAMP,
                 GroupMembership.GROUP_SOURCE_ID,
         });
     }
@@ -396,6 +437,8 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
                 Data.STATUS_RES_PACKAGE,
                 Data.STATUS_LABEL,
                 Data.STATUS_ICON,
+                Data.TIMES_USED,
+                Data.LAST_TIME_USED,
                 RawContacts.RAW_CONTACT_IS_USER_PROFILE,
                 Contacts._ID,
                 Contacts.DISPLAY_NAME_PRIMARY,
@@ -405,6 +448,10 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
                 Contacts.PHONETIC_NAME_STYLE,
                 Contacts.SORT_KEY_PRIMARY,
                 Contacts.SORT_KEY_ALTERNATIVE,
+                ContactsColumns.PHONEBOOK_LABEL_PRIMARY,
+                ContactsColumns.PHONEBOOK_BUCKET_PRIMARY,
+                ContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE,
+                ContactsColumns.PHONEBOOK_BUCKET_ALTERNATIVE,
                 Contacts.LAST_TIME_CONTACTED,
                 Contacts.TIMES_CONTACTED,
                 Contacts.STARRED,
@@ -424,6 +471,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
                 Contacts.CONTACT_STATUS_RES_PACKAGE,
                 Contacts.CONTACT_STATUS_LABEL,
                 Contacts.CONTACT_STATUS_ICON,
+                Contacts.CONTACT_LAST_UPDATED_TIMESTAMP,
                 GroupMembership.GROUP_SOURCE_ID,
         });
     }
@@ -489,6 +537,10 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
                 Contacts.PHONETIC_NAME_STYLE,
                 Contacts.SORT_KEY_PRIMARY,
                 Contacts.SORT_KEY_ALTERNATIVE,
+                ContactsColumns.PHONEBOOK_LABEL_PRIMARY,
+                ContactsColumns.PHONEBOOK_BUCKET_PRIMARY,
+                ContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE,
+                ContactsColumns.PHONEBOOK_BUCKET_ALTERNATIVE,
                 Contacts.LAST_TIME_CONTACTED,
                 Contacts.TIMES_CONTACTED,
                 Contacts.STARRED,
@@ -510,6 +562,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
                 Contacts.CONTACT_STATUS_RES_PACKAGE,
                 Contacts.CONTACT_STATUS_LABEL,
                 Contacts.CONTACT_STATUS_ICON,
+                Contacts.CONTACT_LAST_UPDATED_TIMESTAMP,
                 GroupMembership.GROUP_SOURCE_ID,
         });
     }
@@ -730,7 +783,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     public void testDataDirectoryWithLookupUri() {
         ContentValues values = new ContentValues();
 
-        long rawContactId = createRawContactWithName();
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver);
         insertPhoneNumber(rawContactId, "555-GOOG-411");
         insertEmail(rawContactId, "google@android.com");
 
@@ -777,12 +830,12 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         Account account1 = new Account("act1", "actype1");
         Account account2 = new Account("act2", "actype2");
 
-        long rawContactId1 = createRawContactWithName(account1);
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, account1);
         insertImHandle(rawContactId1, Im.PROTOCOL_GOOGLE_TALK, null, "gtalk");
         insertStatusUpdate(Im.PROTOCOL_GOOGLE_TALK, null, "gtalk", StatusUpdates.IDLE, "Busy", 90,
                 StatusUpdates.CAPABILITY_HAS_CAMERA, false);
 
-        long rawContactId2 = createRawContact(account2);
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, account2);
         setAggregationException(
                 AggregationExceptions.TYPE_KEEP_TOGETHER, rawContactId1, rawContactId2);
 
@@ -799,12 +852,12 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         Account account1 = new Account("act1", "actype1");
         Account account2 = new Account("act2", "actype2");
 
-        long rawContactId1 = createRawContactWithName(account1);
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, account1);
         insertImHandle(rawContactId1, Im.PROTOCOL_GOOGLE_TALK, null, "gtalk");
         insertStatusUpdate(Im.PROTOCOL_GOOGLE_TALK, null, "gtalk", StatusUpdates.IDLE, "Busy", 90,
                 StatusUpdates.CAPABILITY_HAS_CAMERA, false);
 
-        long rawContactId2 = createRawContact(account2);
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, account2);
         setAggregationException(
                 AggregationExceptions.TYPE_KEEP_TOGETHER, rawContactId1, rawContactId2);
 
@@ -891,7 +944,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testDataInsert() {
-        long rawContactId = createRawContactWithName("John", "Doe");
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe");
 
         ContentValues values = new ContentValues();
         putDataValues(values, rawContactId);
@@ -920,13 +973,13 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     public void testRawContactDataQuery() {
         Account account1 = new Account("a", "b");
         Account account2 = new Account("c", "d");
-        long rawContactId1 = createRawContact(account1);
-        Uri dataUri1 = insertStructuredName(rawContactId1, "John", "Doe");
-        long rawContactId2 = createRawContact(account2);
-        Uri dataUri2 = insertStructuredName(rawContactId2, "Jane", "Doe");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, account1);
+        Uri dataUri1 = DataUtil.insertStructuredName(mResolver, rawContactId1, "John", "Doe");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, account2);
+        Uri dataUri2 = DataUtil.insertStructuredName(mResolver, rawContactId2, "Jane", "Doe");
 
-        Uri uri1 = maybeAddAccountQueryParameters(dataUri1, account1);
-        Uri uri2 = maybeAddAccountQueryParameters(dataUri2, account2);
+        Uri uri1 = TestUtil.maybeAddAccountQueryParameters(dataUri1, account1);
+        Uri uri2 = TestUtil.maybeAddAccountQueryParameters(dataUri2, account2);
         assertStoredValue(uri1, Data._ID, ContentUris.parseId(dataUri1)) ;
         assertStoredValue(uri2, Data._ID, ContentUris.parseId(dataUri2)) ;
     }
@@ -943,7 +996,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         Uri rawContactUri = mResolver.insert(RawContacts.CONTENT_URI, values);
         long rawContactId = ContentUris.parseId(rawContactUri);
 
-        insertStructuredName(rawContactId, "Meghan", "Knox");
+        DataUtil.insertStructuredName(mResolver, rawContactId, "Meghan", "Knox");
         Uri uri = insertPhoneNumber(rawContactId, "18004664411");
         long phoneId = ContentUris.parseId(uri);
 
@@ -969,10 +1022,10 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testPhonesWithMergedContacts() {
-        long rawContactId1 = createRawContact();
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver);
         insertPhoneNumber(rawContactId1, "123456789", true);
 
-        long rawContactId2 = createRawContact();
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver);
         insertPhoneNumber(rawContactId2, "123456789", true);
 
         setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,
@@ -1008,7 +1061,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testPhonesNormalizedNumber() {
-        final long rawContactId = createRawContact();
+        final long rawContactId = RawContactUtil.createRawContact(mResolver);
 
         // Write both a number and a normalized number. Those should be written as-is
         final ContentValues values = new ContentValues();
@@ -1020,12 +1073,17 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
 
         final Uri dataUri = mResolver.insert(Data.CONTENT_URI, values);
 
-        // Ensure both can be looked up
+        // Check the lookup table.
         assertEquals(1,
                 getCount(Uri.withAppendedPath(Phone.CONTENT_FILTER_URI, "1234"), null, null));
         assertEquals(1,
                 getCount(Uri.withAppendedPath(Phone.CONTENT_FILTER_URI, "5678"), null, null));
 
+        // Check the data table.
+        assertStoredValues(dataUri,
+                cv(Phone.NUMBER, "1234", Phone.NORMALIZED_NUMBER, "5678")
+                );
+
         // Replace both in an UPDATE
         values.clear();
         values.put(Phone.NUMBER, "4321");
@@ -1040,28 +1098,68 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         assertEquals(1,
                 getCount(Uri.withAppendedPath(Phone.CONTENT_FILTER_URI, "8765"), null, null));
 
+        assertStoredValues(dataUri,
+                cv(Phone.NUMBER, "4321", Phone.NORMALIZED_NUMBER, "8765")
+                );
+
         // Replace only NUMBER ==> NORMALIZED_NUMBER will be inferred (we test that by making
         // sure the old manual value can not be found anymore)
         values.clear();
-        values.put(Phone.NUMBER, "1-800-466-5432");
+        values.put(Phone.NUMBER, "+1-800-466-5432");
         mResolver.update(dataUri, values, null, null);
         assertEquals(
                 1,
-                getCount(Uri.withAppendedPath(Phone.CONTENT_FILTER_URI, "1-800-466-5432"), null,
+                getCount(Uri.withAppendedPath(Phone.CONTENT_FILTER_URI, "+1-800-466-5432"), null,
                         null));
         assertEquals(0,
                 getCount(Uri.withAppendedPath(Phone.CONTENT_FILTER_URI, "8765"), null, null));
 
+        assertStoredValues(dataUri,
+                cv(Phone.NUMBER, "+1-800-466-5432", Phone.NORMALIZED_NUMBER, "+18004665432")
+                );
+
         // Replace only NORMALIZED_NUMBER ==> call is ignored, things will be unchanged
         values.clear();
         values.put(Phone.NORMALIZED_NUMBER, "8765");
         mResolver.update(dataUri, values, null, null);
         assertEquals(
                 1,
-                getCount(Uri.withAppendedPath(Phone.CONTENT_FILTER_URI, "1-800-466-5432"), null,
+                getCount(Uri.withAppendedPath(Phone.CONTENT_FILTER_URI, "+1-800-466-5432"), null,
                         null));
         assertEquals(0,
                 getCount(Uri.withAppendedPath(Phone.CONTENT_FILTER_URI, "8765"), null, null));
+
+        assertStoredValues(dataUri,
+                cv(Phone.NUMBER, "+1-800-466-5432", Phone.NORMALIZED_NUMBER, "+18004665432")
+                );
+
+        // Replace NUMBER with an "invalid" number which can't be normalized.  It should clear
+        // NORMALIZED_NUMBER.
+
+        // 1. Set 999 to NORMALIZED_NUMBER explicitly.
+        values.clear();
+        values.put(Phone.NUMBER, "888");
+        values.put(Phone.NORMALIZED_NUMBER, "999");
+        mResolver.update(dataUri, values, null, null);
+
+        assertEquals(1,
+                getCount(Uri.withAppendedPath(Phone.CONTENT_FILTER_URI, "999"), null, null));
+
+        assertStoredValues(dataUri,
+                cv(Phone.NUMBER, "888", Phone.NORMALIZED_NUMBER, "999")
+                );
+
+        // 2. Set an invalid number to NUMBER.
+        values.clear();
+        values.put(Phone.NUMBER, "1");
+        mResolver.update(dataUri, values, null, null);
+
+        assertEquals(0,
+                getCount(Uri.withAppendedPath(Phone.CONTENT_FILTER_URI, "999"), null, null));
+
+        assertStoredValues(dataUri,
+                cv(Phone.NUMBER, "1", Phone.NORMALIZED_NUMBER, null)
+                );
     }
 
     public void testPhonesFilterQuery() {
@@ -1083,10 +1181,12 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
                 Phone.CONTENT_FILTER_URI.equals(baseFilterUri)
                         || Callable.CONTENT_FILTER_URI.equals(baseFilterUri));
 
-        final long rawContactId1 = createRawContactWithName("Hot", "Tamale", ACCOUNT_1);
+        final long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "Hot",
+                "Tamale", TestUtil.ACCOUNT_1);
         insertPhoneNumber(rawContactId1, "1-800-466-4411");
 
-        final long rawContactId2 = createRawContactWithName("Chilled", "Guacamole", ACCOUNT_2);
+        final long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "Chilled",
+                "Guacamole", TestUtil.ACCOUNT_2);
         insertPhoneNumber(rawContactId2, "1-800-466-5432");
         insertPhoneNumber(rawContactId2, "0@example.com", false, Phone.TYPE_PAGER);
         insertPhoneNumber(rawContactId2, "1@example.com", false, Phone.TYPE_PAGER);
@@ -1134,7 +1234,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         values3.putNull(Phone.LABEL);
 
         final Uri filterUri6 = Uri.withAppendedPath(baseFilterUri, "Chilled");
-        assertStoredValues(filterUri6, new ContentValues[] {values1, values2, values3} );
+        assertStoredValues(filterUri6, new ContentValues[]{values1, values2, values3});
 
         // Insert a SIP address. From here, Phone URI and Callable URI may return different results
         // than each other.
@@ -1166,17 +1266,16 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         // Sanity test. Run tests for "Chilled Guacamole" again and see nothing changes
         // after the Sip address being inserted.
         assertStoredValues(filterUri2, values);
-        assertStoredValues(filterUri3, values);
         assertEquals(0, getCount(filterUri4, null, null));
         assertEquals(0, getCount(filterUri5, null, null));
         assertStoredValues(filterUri6, new ContentValues[] {values1, values2, values3} );
     }
 
     public void testPhonesFilterSearchParams() {
-        final long rid1 = createRawContactWithName("Dad", null);
+        final long rid1 = RawContactUtil.createRawContactWithName(mResolver, "Dad", null);
         insertPhoneNumber(rid1, "123-456-7890");
 
-        final long rid2 = createRawContactWithName("Mam", null);
+        final long rid2 = RawContactUtil.createRawContactWithName(mResolver, "Mam", null);
         insertPhoneNumber(rid2, "323-123-4567");
 
         // By default, "dad" will match both the display name and the phone number.
@@ -1201,10 +1300,10 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
                 );
         assertStoredValues(
                 Phone.CONTENT_FILTER_URI.buildUpon().appendPath("dad")
-                    .appendQueryParameter(Phone.SEARCH_DISPLAY_NAME_KEY, "0")
-                    .appendQueryParameter(Phone.SEARCH_PHONE_NUMBER_KEY, "0")
-                    .build()
-                );
+                        .appendQueryParameter(Phone.SEARCH_DISPLAY_NAME_KEY, "0")
+                        .appendQueryParameter(Phone.SEARCH_PHONE_NUMBER_KEY, "0")
+                        .build()
+        );
     }
 
     public void testPhoneLookup() {
@@ -1215,7 +1314,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         Uri rawContactUri = mResolver.insert(RawContacts.CONTENT_URI, values);
         long rawContactId = ContentUris.parseId(rawContactUri);
 
-        insertStructuredName(rawContactId, "Hot", "Tamale");
+        DataUtil.insertStructuredName(mResolver, rawContactId, "Hot", "Tamale");
         insertPhoneNumber(rawContactId, "18004664411");
 
         // We'll create two lookup records, 18004664411 and +18004664411, and the below lookup
@@ -1237,6 +1336,10 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         // call id should  match to both "8004664411" and "+18004664411".
         Uri lookupUri2 = Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI, "4664411");
         assertEquals(2, getCount(lookupUri2, null, null));
+
+        // A wrong area code 799 vs 800 should not be matched
+        lookupUri2 = Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI, "7994664411");
+        assertEquals(0, getCount(lookupUri2, null, null));
     }
 
     public void testPhoneLookupUseCases() {
@@ -1252,7 +1355,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         rawContactUri = mResolver.insert(RawContacts.CONTENT_URI, values);
         rawContactId = ContentUris.parseId(rawContactUri);
 
-        insertStructuredName(rawContactId, "Hot", "Tamale");
+        DataUtil.insertStructuredName(mResolver, rawContactId, "Hot", "Tamale");
         insertPhoneNumber(rawContactId, "+1-650-861-0000");
 
         values.clear();
@@ -1265,6 +1368,18 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         lookupUri2 = Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI, "650 861 0000");
         assertEquals(1, getCount(lookupUri2, null, null));
 
+        // does not match with wrong area code
+        lookupUri2 = Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI, "649 861 0000");
+        assertEquals(0, getCount(lookupUri2, null, null));
+
+        // does not match with missing digits in mistyped area code
+        lookupUri2 = Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI, "5 861 0000");
+        assertEquals(0, getCount(lookupUri2, null, null));
+
+        // does not match with missing digit in mistyped area code
+        lookupUri2 = Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI, "65 861 0000");
+        assertEquals(0, getCount(lookupUri2, null, null));
+
         // National format in contacts
         values.clear();
         values.put(RawContacts.CUSTOM_RINGTONE, "d");
@@ -1272,7 +1387,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         rawContactUri = mResolver.insert(RawContacts.CONTENT_URI, values);
         rawContactId = ContentUris.parseId(rawContactUri);
 
-        insertStructuredName(rawContactId, "Hot1", "Tamale");
+        DataUtil.insertStructuredName(mResolver, rawContactId, "Hot1", "Tamale");
         insertPhoneNumber(rawContactId, "650-861-0001");
 
         values.clear();
@@ -1292,7 +1407,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         rawContactUri = mResolver.insert(RawContacts.CONTENT_URI, values);
         rawContactId = ContentUris.parseId(rawContactUri);
 
-        insertStructuredName(rawContactId, "Hot2", "Tamale");
+        DataUtil.insertStructuredName(mResolver, rawContactId, "Hot2", "Tamale");
         insertPhoneNumber(rawContactId, "861-0002");
 
         values.clear();
@@ -1307,15 +1422,15 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testIntlPhoneLookupUseCases() {
-        // Checks the logic that relies on using the trailing 7-digits as a fallback for phone
-        // number lookups.
+        // Checks the logic that relies on phone_number_compare_loose(Gingerbread) as a fallback
+        //for phone number lookups.
         String fullNumber = "01197297427289";
 
         ContentValues values = new ContentValues();
         values.put(RawContacts.CUSTOM_RINGTONE, "d");
         values.put(RawContacts.SEND_TO_VOICEMAIL, 1);
         long rawContactId = ContentUris.parseId(mResolver.insert(RawContacts.CONTENT_URI, values));
-        insertStructuredName(rawContactId, "Senor", "Chang");
+        DataUtil.insertStructuredName(mResolver, rawContactId, "Senor", "Chang");
         insertPhoneNumber(rawContactId, fullNumber);
 
         // Full number should definitely match.
@@ -1326,9 +1441,9 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         assertEquals(2, getCount(Uri.withAppendedPath(
                 PhoneLookup.CONTENT_FILTER_URI, "097427289"), null, null));
 
-        // Shorter (local) number with +0 prefix should also match.
-        assertEquals(2, getCount(Uri.withAppendedPath(
-                PhoneLookup.CONTENT_FILTER_URI, "+097427289"), null, null));
+        // Number with international (+972) prefix should also match.
+        assertEquals(1, getCount(Uri.withAppendedPath(
+                PhoneLookup.CONTENT_FILTER_URI, "+97297427289"), null, null));
 
         // Same shorter number with dashes should match.
         assertEquals(2, getCount(Uri.withAppendedPath(
@@ -1351,7 +1466,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         values.put(RawContacts.CUSTOM_RINGTONE, "d");
         values.put(RawContacts.SEND_TO_VOICEMAIL, 1);
         long rawContactId = ContentUris.parseId(mResolver.insert(RawContacts.CONTENT_URI, values));
-        insertStructuredName(rawContactId, "Senor", "Chang");
+        DataUtil.insertStructuredName(mResolver, rawContactId, "Senor", "Chang");
         insertPhoneNumber(rawContactId, storedNumber);
 
         assertEquals(1, getCount(Uri.withAppendedPath(
@@ -1370,12 +1485,69 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
                 PhoneLookup.CONTENT_FILTER_URI, "4 879 601 0101"), null, null));
     }
 
+    public void testPhoneLookupUseStrictPhoneNumberCompare() {
+        // Test lookup cases when mUseStrictPhoneNumberComparison is true
+        final ContactsProvider2 cp = (ContactsProvider2) getProvider();
+        final ContactsDatabaseHelper dbHelper = cp.getThreadActiveDatabaseHelperForTest();
+        // Get and save the original value of mUseStrictPhoneNumberComparison so that we
+        // can restore it when we are done with the test
+        final boolean oldUseStrict = dbHelper.getUseStrictPhoneNumberComparisonForTest();
+        dbHelper.setUseStrictPhoneNumberComparisonForTest(true);
+
+
+        try {
+            String fullNumber = "01197297427289";
+            ContentValues values = new ContentValues();
+            values.put(RawContacts.CUSTOM_RINGTONE, "d");
+            values.put(RawContacts.SEND_TO_VOICEMAIL, 1);
+            long rawContactId = ContentUris.parseId(
+                    mResolver.insert(RawContacts.CONTENT_URI, values));
+            DataUtil.insertStructuredName(mResolver, rawContactId, "Senor", "Chang");
+            insertPhoneNumber(rawContactId, fullNumber);
+            insertPhoneNumber(rawContactId, "5103337596");
+            insertPhoneNumber(rawContactId, "+19012345678");
+            // One match for full number
+            assertEquals(1, getCount(Uri.withAppendedPath(
+                    PhoneLookup.CONTENT_FILTER_URI, fullNumber), null, null));
+
+            // No matches for extra digit at the front
+            assertEquals(0, getCount(Uri.withAppendedPath(
+                    PhoneLookup.CONTENT_FILTER_URI, "55103337596"), null, null));
+            // No matches for mispelled area code
+            assertEquals(0, getCount(Uri.withAppendedPath(
+                    PhoneLookup.CONTENT_FILTER_URI, "5123337596"), null, null));
+
+            // One match for matching number with dashes
+            assertEquals(1, getCount(Uri.withAppendedPath(
+                    PhoneLookup.CONTENT_FILTER_URI, "510-333-7596"), null, null));
+
+            // One match for matching number with international code
+            assertEquals(1, getCount(Uri.withAppendedPath(
+                    PhoneLookup.CONTENT_FILTER_URI, "+1-510-333-7596"), null, null));
+            values.clear();
+
+            // No matches for extra 0 in front
+            assertEquals(0, getCount(Uri.withAppendedPath(
+                    PhoneLookup.CONTENT_FILTER_URI, "0-510-333-7596"), null, null));
+            values.clear();
+
+            // No matches for different country code
+            assertEquals(0, getCount(Uri.withAppendedPath(
+                    PhoneLookup.CONTENT_FILTER_URI, "+819012345678"), null, null));
+            values.clear();
+        } finally {
+            // restore the original value of mUseStrictPhoneNumberComparison
+            // upon test completion or failure
+            dbHelper.setUseStrictPhoneNumberComparisonForTest(oldUseStrict);
+        }
+    }
+
     public void testPhoneUpdate() {
         ContentValues values = new ContentValues();
         Uri rawContactUri = mResolver.insert(RawContacts.CONTENT_URI, values);
         long rawContactId = ContentUris.parseId(rawContactUri);
 
-        insertStructuredName(rawContactId, "Hot", "Tamale");
+        DataUtil.insertStructuredName(mResolver, rawContactId, "Hot", "Tamale");
         Uri phoneUri = insertPhoneNumber(rawContactId, "18004664411");
 
         Uri lookupUri1 = Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI, "8004664411");
@@ -1409,11 +1581,11 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
 
     /** Tests if {@link Callable#CONTENT_URI} returns both phones and sip addresses. */
     public void testCallablesQuery() {
-        long rawContactId1 = createRawContactWithName("Meghan", "Knox");
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "Meghan", "Knox");
         long phoneId1 = ContentUris.parseId(insertPhoneNumber(rawContactId1, "18004664411"));
         long contactId1 = queryContactId(rawContactId1);
 
-        long rawContactId2 = createRawContactWithName("John", "Doe");
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe");
         long sipAddressId2 = ContentUris.parseId(
                 insertSipAddress(rawContactId2, "sip@example.com"));
         long contactId2 = queryContactId(rawContactId2);
@@ -1455,7 +1627,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         Uri rawContactUri = mResolver.insert(RawContacts.CONTENT_URI, values);
         final long rawContactId = ContentUris.parseId(rawContactUri);
 
-        insertStructuredName(rawContactId, "Meghan", "Knox");
+        DataUtil.insertStructuredName(mResolver, rawContactId, "Meghan", "Knox");
         final Uri emailUri = insertEmail(rawContactId, "meghan@acme.com");
         final long emailId = ContentUris.parseId(emailUri);
 
@@ -1504,7 +1676,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testEmailsLookupQuery() {
-        long rawContactId = createRawContactWithName("Hot", "Tamale");
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver, "Hot", "Tamale");
         insertEmail(rawContactId, "tamale@acme.com");
 
         Uri filterUri1 = Uri.withAppendedPath(Email.CONTENT_LOOKUP_URI, "tamale@acme.com");
@@ -1524,11 +1696,13 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testEmailsFilterQuery() {
-        long rawContactId1 = createRawContactWithName("Hot", "Tamale", ACCOUNT_1);
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "Hot", "Tamale",
+                TestUtil.ACCOUNT_1);
         insertEmail(rawContactId1, "tamale@acme.com");
         insertEmail(rawContactId1, "tamale@acme.com");
 
-        long rawContactId2 = createRawContactWithName("Hot", "Tamale", ACCOUNT_2);
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "Hot", "Tamale",
+                TestUtil.ACCOUNT_2);
         insertEmail(rawContactId2, "tamale@acme.com");
 
         Uri filterUri1 = Uri.withAppendedPath(Email.CONTENT_FILTER_URI, "tam");
@@ -1557,7 +1731,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
      * Tests if ContactsProvider2 returns addresses according to registration order.
      */
     public void testEmailFilterDefaultSortOrder() {
-        long rawContactId1 = createRawContact();
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver);
         insertEmail(rawContactId1, "address1@email.com");
         insertEmail(rawContactId1, "address2@email.com");
         insertEmail(rawContactId1, "address3@email.com");
@@ -1569,14 +1743,14 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         v3.put(Email.ADDRESS, "address3@email.com");
 
         Uri filterUri = Uri.withAppendedPath(Email.CONTENT_FILTER_URI, "address");
-        assertStoredValuesOrderly(filterUri, new ContentValues[] { v1, v2, v3 });
+        assertStoredValuesOrderly(filterUri, new ContentValues[]{v1, v2, v3});
     }
 
     /**
      * Tests if ContactsProvider2 returns primary addresses before the other addresses.
      */
     public void testEmailFilterPrimaryAddress() {
-        long rawContactId1 = createRawContact();
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver);
         insertEmail(rawContactId1, "address1@email.com");
         insertEmail(rawContactId1, "address2@email.com", true);
         ContentValues v1 = new ContentValues();
@@ -1593,9 +1767,9 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
      * other address.
      */
     public void testEmailFilterPrimaryAccount() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, TestUtil.ACCOUNT_1);
         insertEmail(rawContactId1, "account1@email.com");
-        long rawContactId2 = createRawContact(ACCOUNT_2);
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, TestUtil.ACCOUNT_2);
         insertEmail(rawContactId2, "account2@email.com");
         ContentValues v1 = new ContentValues();
         v1.put(Email.ADDRESS, "account1@email.com");
@@ -1603,36 +1777,104 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         v2.put(Email.ADDRESS, "account2@email.com");
 
         Uri filterUri1 = Email.CONTENT_FILTER_URI.buildUpon().appendPath("acc")
-                .appendQueryParameter(ContactsContract.PRIMARY_ACCOUNT_NAME, ACCOUNT_1.name)
-                .appendQueryParameter(ContactsContract.PRIMARY_ACCOUNT_TYPE, ACCOUNT_1.type)
+                .appendQueryParameter(ContactsContract.PRIMARY_ACCOUNT_NAME, TestUtil.ACCOUNT_1.name)
+                .appendQueryParameter(ContactsContract.PRIMARY_ACCOUNT_TYPE, TestUtil.ACCOUNT_1.type)
                 .build();
         assertStoredValuesOrderly(filterUri1, new ContentValues[] { v1, v2 });
 
         Uri filterUri2 = Email.CONTENT_FILTER_URI.buildUpon().appendPath("acc")
-                .appendQueryParameter(ContactsContract.PRIMARY_ACCOUNT_NAME, ACCOUNT_2.name)
-                .appendQueryParameter(ContactsContract.PRIMARY_ACCOUNT_TYPE, ACCOUNT_2.type)
+                .appendQueryParameter(ContactsContract.PRIMARY_ACCOUNT_NAME, TestUtil.ACCOUNT_2.name)
+                .appendQueryParameter(ContactsContract.PRIMARY_ACCOUNT_TYPE, TestUtil.ACCOUNT_2.type)
                 .build();
         assertStoredValuesOrderly(filterUri2, new ContentValues[] { v2, v1 });
 
         // Just with PRIMARY_ACCOUNT_NAME
         Uri filterUri3 = Email.CONTENT_FILTER_URI.buildUpon().appendPath("acc")
-                .appendQueryParameter(ContactsContract.PRIMARY_ACCOUNT_NAME, ACCOUNT_1.name)
+                .appendQueryParameter(ContactsContract.PRIMARY_ACCOUNT_NAME, TestUtil.ACCOUNT_1.name)
                 .build();
-        assertStoredValuesOrderly(filterUri3, new ContentValues[] { v1, v2 });
+        assertStoredValuesOrderly(filterUri3, new ContentValues[]{v1, v2});
 
         Uri filterUri4 = Email.CONTENT_FILTER_URI.buildUpon().appendPath("acc")
-                .appendQueryParameter(ContactsContract.PRIMARY_ACCOUNT_NAME, ACCOUNT_2.name)
+                .appendQueryParameter(ContactsContract.PRIMARY_ACCOUNT_NAME, TestUtil.ACCOUNT_2.name)
                 .build();
         assertStoredValuesOrderly(filterUri4, new ContentValues[] { v2, v1 });
     }
 
+    /**
+     * Test emails with the same domain as primary account are ordered first.
+     */
+    public void testEmailFilterSameDomainAccountOrder() {
+        final Account account = new Account("tester@email.com", "not_used");
+        final long rawContactId = RawContactUtil.createRawContact(mResolver, account);
+        insertEmail(rawContactId, "account1@testemail.com");
+        insertEmail(rawContactId, "account1@email.com");
+
+        final ContentValues v1 = cv(Email.ADDRESS, "account1@testemail.com");
+        final ContentValues v2 = cv(Email.ADDRESS, "account1@email.com");
+
+        Uri filterUri1 = Email.CONTENT_FILTER_URI.buildUpon().appendPath("acc")
+                .appendQueryParameter(ContactsContract.PRIMARY_ACCOUNT_NAME, account.name)
+                .appendQueryParameter(ContactsContract.PRIMARY_ACCOUNT_TYPE, account.type)
+                .build();
+        assertStoredValuesOrderly(filterUri1, v2, v1);
+    }
+
+    /**
+     * Test "default" emails are sorted above emails used last.
+     */
+    public void testEmailFilterSuperPrimaryOverUsageSort() {
+        final long rawContactId = RawContactUtil.createRawContact(mResolver, TestUtil.ACCOUNT_1);
+        final Uri emailUri1 = insertEmail(rawContactId, "account1@testemail.com");
+        final Uri emailUri2 = insertEmail(rawContactId, "account2@testemail.com");
+        insertEmail(rawContactId, "account3@testemail.com", true, true);
+
+        // Update account1 and account 2 to have higher usage.
+        updateDataUsageFeedback(DataUsageFeedback.USAGE_TYPE_LONG_TEXT, emailUri1);
+        updateDataUsageFeedback(DataUsageFeedback.USAGE_TYPE_LONG_TEXT, emailUri1);
+        updateDataUsageFeedback(DataUsageFeedback.USAGE_TYPE_LONG_TEXT, emailUri2);
+
+        final ContentValues v1 = cv(Email.ADDRESS, "account1@testemail.com");
+        final ContentValues v2 = cv(Email.ADDRESS, "account2@testemail.com");
+        final ContentValues v3 = cv(Email.ADDRESS, "account3@testemail.com");
+
+        // Test that account 3 is first even though account 1 and 2 have higher usage.
+        Uri filterUri = Uri.withAppendedPath(Email.CONTENT_FILTER_URI, "acc");
+        assertStoredValuesOrderly(filterUri, v3, v1, v2);
+    }
+
+    /**
+     * Test primary emails are sorted below emails used last.
+     *
+     * primary may be set without super primary.  Only super primary indicates "default" in the
+     * contact ui.
+     */
+    public void testEmailFilterUsageOverPrimarySort() {
+        final long rawContactId = RawContactUtil.createRawContact(mResolver, TestUtil.ACCOUNT_1);
+        final Uri emailUri1 = insertEmail(rawContactId, "account1@testemail.com");
+        final Uri emailUri2 = insertEmail(rawContactId, "account2@testemail.com");
+        insertEmail(rawContactId, "account3@testemail.com", true);
+
+        // Update account1 and account 2 to have higher usage.
+        updateDataUsageFeedback(DataUsageFeedback.USAGE_TYPE_LONG_TEXT, emailUri1);
+        updateDataUsageFeedback(DataUsageFeedback.USAGE_TYPE_LONG_TEXT, emailUri1);
+        updateDataUsageFeedback(DataUsageFeedback.USAGE_TYPE_LONG_TEXT, emailUri2);
+
+        final ContentValues v1 = cv(Email.ADDRESS, "account1@testemail.com");
+        final ContentValues v2 = cv(Email.ADDRESS, "account2@testemail.com");
+        final ContentValues v3 = cv(Email.ADDRESS, "account3@testemail.com");
+
+        // Test that account 3 is first even though account 1 and 2 have higher usage.
+        Uri filterUri = Uri.withAppendedPath(Email.CONTENT_FILTER_URI, "acc");
+        assertStoredValuesOrderly(filterUri, v1, v2, v3);
+    }
+
     /** Tests {@link DataUsageFeedback} correctly promotes a data row instead of a raw contact. */
     public void testEmailFilterSortOrderWithFeedback() {
-        long rawContactId1 = createRawContact();
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver);
         String address1 = "address1@email.com";
         insertEmail(rawContactId1, address1);
 
-        long rawContactId2 = createRawContact();
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver);
         String address2 = "address2@email.com";
         insertEmail(rawContactId2, address2);
         String address3 = "address3@email.com";
@@ -1684,7 +1926,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
      * {@link DataUsageStatColumns#LAST_TIME_USED}
      */
     public void testEmailFilterSortOrderWithOldHistory() {
-        long rawContactId1 = createRawContact();
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver);
         long dataId1 = ContentUris.parseId(insertEmail(rawContactId1, "address1@email.com"));
         long dataId2 = ContentUris.parseId(insertEmail(rawContactId1, "address2@email.com"));
         long dataId3 = ContentUris.parseId(insertEmail(rawContactId1, "address3@email.com"));
@@ -1745,7 +1987,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testPostalsQuery() {
-        long rawContactId = createRawContactWithName("Alice", "Nextore");
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver, "Alice", "Nextore");
         Uri dataUri = insertPostalAddress(rawContactId, "1600 Amphiteatre Ave, Mountain View");
         final long dataId = ContentUris.parseId(dataUri);
 
@@ -1789,6 +2031,162 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         assertStoredValues(dedupeUri, values);
     }
 
+    public void testDataContentUriInvisibleQuery() {
+        final ContentValues values = new ContentValues();
+        final long contactId = createContact(values, "John", "Doe",
+                "18004664411", "goog411@acme.com", StatusUpdates.INVISIBLE, 4, 1, 0,
+                        StatusUpdates.CAPABILITY_HAS_CAMERA | StatusUpdates.CAPABILITY_HAS_VIDEO);
+
+        final Uri uri = Data.CONTENT_URI.buildUpon().
+                appendQueryParameter(Data.VISIBLE_CONTACTS_ONLY, "true").build();
+        assertEquals(4, getCount(uri, null, null));
+
+        markInvisible(contactId);
+
+        assertEquals(0, getCount(uri, null, null));
+    }
+
+    public void testContactablesQuery() {
+        final long rawContactId = RawContactUtil.createRawContactWithName(mResolver, "Hot",
+                "Tamale");
+
+        insertPhoneNumber(rawContactId, "510-123-5769");
+        insertEmail(rawContactId, "tamale@acme.com");
+
+        final ContentValues cv1 = new ContentValues();
+        cv1.put(Contacts.DISPLAY_NAME, "Hot Tamale");
+        cv1.put(Data.MIMETYPE, Email.CONTENT_ITEM_TYPE);
+        cv1.put(Email.DATA, "tamale@acme.com");
+        cv1.put(Email.TYPE, Email.TYPE_HOME);
+        cv1.putNull(Email.LABEL);
+
+        final ContentValues cv2 = new ContentValues();
+        cv2.put(Contacts.DISPLAY_NAME, "Hot Tamale");
+        cv2.put(Data.MIMETYPE, Phone.CONTENT_ITEM_TYPE);
+        cv2.put(Phone.DATA, "510-123-5769");
+        cv2.put(Phone.TYPE, Phone.TYPE_HOME);
+        cv2.putNull(Phone.LABEL);
+
+        final Uri filterUri0 = Uri.withAppendedPath(Contactables.CONTENT_FILTER_URI, "");
+        assertEquals(0, getCount(filterUri0, null, null));
+
+        final Uri filterUri1 = Uri.withAppendedPath(Contactables.CONTENT_FILTER_URI, "tamale");
+        assertStoredValues(filterUri1, cv1, cv2);
+
+        final Uri filterUri2 = Uri.withAppendedPath(Contactables.CONTENT_FILTER_URI, "hot");
+        assertStoredValues(filterUri2, cv1, cv2);
+
+        final Uri filterUri3 = Uri.withAppendedPath(Contactables.CONTENT_FILTER_URI, "tamale@ac");
+        assertStoredValues(filterUri3, cv1, cv2);
+
+        final Uri filterUri4 = Uri.withAppendedPath(Contactables.CONTENT_FILTER_URI, "510");
+        assertStoredValues(filterUri4, cv1, cv2);
+
+        final Uri filterUri5 = Uri.withAppendedPath(Contactables.CONTENT_FILTER_URI, "cold");
+        assertEquals(0, getCount(filterUri5, null, null));
+
+        final Uri filterUri6 = Uri.withAppendedPath(Contactables.CONTENT_FILTER_URI,
+                "tamale@google");
+        assertEquals(0, getCount(filterUri6, null, null));
+
+        final Uri filterUri7 = Contactables.CONTENT_URI;
+        assertStoredValues(filterUri7, cv1, cv2);
+    }
+
+    public void testContactablesMultipleQuery() {
+
+        final long rawContactId = RawContactUtil.createRawContactWithName(mResolver, "Hot",
+                "Tamale");
+        insertPhoneNumber(rawContactId, "510-123-5769");
+        insertEmail(rawContactId, "tamale@acme.com");
+        insertEmail(rawContactId, "hot@google.com");
+
+        final long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "Cold",
+                "Tamago");
+        insertEmail(rawContactId2, "eggs@farmers.org");
+
+        final long rawContactId3 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe");
+        insertPhoneNumber(rawContactId3, "518-354-1111");
+        insertEmail(rawContactId3, "doeadeer@afemaledeer.com");
+
+        final ContentValues cv1 = new ContentValues();
+        cv1.put(Contacts.DISPLAY_NAME, "Hot Tamale");
+        cv1.put(Data.MIMETYPE, Email.CONTENT_ITEM_TYPE);
+        cv1.put(Email.DATA, "tamale@acme.com");
+        cv1.put(Email.TYPE, Email.TYPE_HOME);
+        cv1.putNull(Email.LABEL);
+
+        final ContentValues cv2 = new ContentValues();
+        cv2.put(Contacts.DISPLAY_NAME, "Hot Tamale");
+        cv2.put(Data.MIMETYPE, Phone.CONTENT_ITEM_TYPE);
+        cv2.put(Phone.DATA, "510-123-5769");
+        cv2.put(Phone.TYPE, Phone.TYPE_HOME);
+        cv2.putNull(Phone.LABEL);
+
+        final ContentValues cv3 = new ContentValues();
+        cv3.put(Contacts.DISPLAY_NAME, "Hot Tamale");
+        cv3.put(Data.MIMETYPE, Email.CONTENT_ITEM_TYPE);
+        cv3.put(Email.DATA, "hot@google.com");
+        cv3.put(Email.TYPE, Email.TYPE_HOME);
+        cv3.putNull(Email.LABEL);
+
+        final ContentValues cv4 = new ContentValues();
+        cv4.put(Contacts.DISPLAY_NAME, "Cold Tamago");
+        cv4.put(Data.MIMETYPE, Email.CONTENT_ITEM_TYPE);
+        cv4.put(Email.DATA, "eggs@farmers.org");
+        cv4.put(Email.TYPE, Email.TYPE_HOME);
+        cv4.putNull(Email.LABEL);
+
+        final ContentValues cv5 = new ContentValues();
+        cv5.put(Contacts.DISPLAY_NAME, "John Doe");
+        cv5.put(Data.MIMETYPE, Email.CONTENT_ITEM_TYPE);
+        cv5.put(Email.DATA, "doeadeer@afemaledeer.com");
+        cv5.put(Email.TYPE, Email.TYPE_HOME);
+        cv5.putNull(Email.LABEL);
+
+        final ContentValues cv6 = new ContentValues();
+        cv6.put(Contacts.DISPLAY_NAME, "John Doe");
+        cv6.put(Data.MIMETYPE, Phone.CONTENT_ITEM_TYPE);
+        cv6.put(Phone.DATA, "518-354-1111");
+        cv6.put(Phone.TYPE, Phone.TYPE_HOME);
+        cv6.putNull(Phone.LABEL);
+
+        final Uri filterUri1 = Uri.withAppendedPath(Contactables.CONTENT_FILTER_URI, "tamale");
+
+        assertStoredValues(filterUri1, cv1, cv2, cv3);
+
+        final Uri filterUri2 = Uri.withAppendedPath(Contactables.CONTENT_FILTER_URI, "hot");
+        assertStoredValues(filterUri2, cv1, cv2, cv3);
+
+        final Uri filterUri3 = Uri.withAppendedPath(Contactables.CONTENT_FILTER_URI, "tam");
+        assertStoredValues(filterUri3, cv1, cv2, cv3, cv4);
+
+        final Uri filterUri4 = Uri.withAppendedPath(Contactables.CONTENT_FILTER_URI, "518");
+        assertStoredValues(filterUri4, cv5, cv6);
+
+        final Uri filterUri5 = Uri.withAppendedPath(Contactables.CONTENT_FILTER_URI, "doe");
+        assertStoredValues(filterUri5, cv5, cv6);
+
+        final Uri filterUri6 = Uri.withAppendedPath(Contactables.CONTENT_FILTER_URI, "51");
+        assertStoredValues(filterUri6, cv1, cv2, cv3, cv5, cv6);
+
+        final Uri filterUri7 = Uri.withAppendedPath(Contactables.CONTENT_FILTER_URI,
+                "tamale@google");
+        assertEquals(0, getCount(filterUri7, null, null));
+
+        final Uri filterUri8 = Contactables.CONTENT_URI;
+        assertStoredValues(filterUri8, cv1, cv2, cv3, cv4, cv5, cv6);
+
+        // test VISIBLE_CONTACTS_ONLY boolean parameter
+        final Uri filterUri9 = filterUri6.buildUpon().appendQueryParameter(
+                Contactables.VISIBLE_CONTACTS_ONLY, "true").build();
+        assertStoredValues(filterUri9, cv1, cv2, cv3, cv5, cv6);
+        // mark Hot Tamale as invisible - cv1, cv2, and cv3 should no longer be in the cursor
+        markInvisible(queryContactId(rawContactId));
+        assertStoredValues(filterUri9, cv5, cv6);
+    }
+
+
     public void testQueryContactData() {
         ContentValues values = new ContentValues();
         long contactId = createContact(values, "John", "Doe",
@@ -1824,7 +2222,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         nameValues.put(StructuredName.FAMILY_NAME, "Goulash");
         nameValues.put(StructuredName.PHONETIC_FAMILY_NAME, "goo");
         nameValues.put(StructuredName.PHONETIC_GIVEN_NAME, "LASH");
-        Uri nameUri = insertStructuredName(rawContactId, nameValues);
+        Uri nameUri = DataUtil.insertStructuredName(mResolver, rawContactId, nameValues);
 
         long contactId = queryContactId(rawContactId);
         values.put(Contacts.CONTACT_PRESENCE, StatusUpdates.INVISIBLE);
@@ -1858,7 +2256,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
                 StatusUpdates.CAPABILITY_HAS_CAMERA | StatusUpdates.CAPABILITY_HAS_VIDEO |
                 StatusUpdates.CAPABILITY_HAS_VOICE);
 
-        insertStructuredName(rawContactId, "James", "Bond");
+        DataUtil.insertStructuredName(mResolver, rawContactId, "James", "Bond");
 
         long contactId = queryContactId(rawContactId);
         values.put(Contacts.CONTACT_PRESENCE, StatusUpdates.INVISIBLE);
@@ -1884,7 +2282,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
                 StatusUpdates.CAPABILITY_HAS_CAMERA | StatusUpdates.CAPABILITY_HAS_VIDEO |
                 StatusUpdates.CAPABILITY_HAS_VOICE);
 
-        insertStructuredName(rawContactId, "James", "Bond");
+        DataUtil.insertStructuredName(mResolver, rawContactId, "James", "Bond");
 
         long contactId = queryContactId(rawContactId);
         values.put(Contacts.CONTACT_PRESENCE, StatusUpdates.INVISIBLE);
@@ -1974,23 +2372,23 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
 
     public void testQueryContactStrequentFrequentOrder() {
         // Prepare test data
-        final long rid1 = createRawContact();
+        final long rid1 = RawContactUtil.createRawContact(mResolver);
         final long did1 = ContentUris.parseId(insertPhoneNumber(rid1, "1"));
         final long did1e = ContentUris.parseId(insertEmail(rid1, "1@email.com"));
 
-        final long rid2 = createRawContact();
+        final long rid2 = RawContactUtil.createRawContact(mResolver);
         final long did2 = ContentUris.parseId(insertPhoneNumber(rid2, "2"));
 
-        final long rid3 = createRawContact();
+        final long rid3 = RawContactUtil.createRawContact(mResolver);
         final long did3 = ContentUris.parseId(insertPhoneNumber(rid3, "3"));
 
-        final long rid4 = createRawContact();
+        final long rid4 = RawContactUtil.createRawContact(mResolver);
         final long did4 = ContentUris.parseId(insertPhoneNumber(rid4, "4"));
 
-        final long rid5 = createRawContact();
+        final long rid5 = RawContactUtil.createRawContact(mResolver);
         final long did5 = ContentUris.parseId(insertPhoneNumber(rid5, "5"));
 
-        final long rid6 = createRawContact();
+        final long rid6 = RawContactUtil.createRawContact(mResolver);
         final long did6 = ContentUris.parseId(insertPhoneNumber(rid6, "6"));
 
         final long cid1 = queryContactId(rid1);
@@ -2140,6 +2538,48 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
 
         // Now we have only 1 frequent.
         assertStoredValues(Contacts.CONTENT_FREQUENT_URI, new ContentValues[] {values1});
+
+    }
+
+    public void testQueryDataUsageStat() {
+        ContentValues values1 = new ContentValues();
+        final String email1 = "a@acme.com";
+        final long cid1 = createContact(values1, "Noah", "Tever", "18004664411",
+                email1, StatusUpdates.OFFLINE, 0, 0, 0, 0);
+
+        sMockClock.install();
+        sMockClock.setCurrentTimeMillis(100);
+
+        sendFeedback(email1, DataUsageFeedback.USAGE_TYPE_LONG_TEXT, values1);
+
+        assertDataUsageCursorContains(Data.CONTENT_URI, "a@acme.com", 1, 100);
+
+        sMockClock.setCurrentTimeMillis(111);
+        sendFeedback(email1, DataUsageFeedback.USAGE_TYPE_LONG_TEXT, values1);
+
+        assertDataUsageCursorContains(Data.CONTENT_URI, "a@acme.com", 2, 111);
+
+        sMockClock.setCurrentTimeMillis(123);
+        sendFeedback(email1, DataUsageFeedback.USAGE_TYPE_SHORT_TEXT, values1);
+
+        assertDataUsageCursorContains(Data.CONTENT_URI, "a@acme.com", 3, 123);
+
+        final Uri dataUriWithUsageTypeLongText = Data.CONTENT_URI.buildUpon().appendQueryParameter(
+                DataUsageFeedback.USAGE_TYPE, DataUsageFeedback.USAGE_TYPE_LONG_TEXT).build();
+
+        assertDataUsageCursorContains(dataUriWithUsageTypeLongText, "a@acme.com", 2, 111);
+
+        sMockClock.setCurrentTimeMillis(200);
+        sendFeedback(email1, DataUsageFeedback.USAGE_TYPE_CALL, values1);
+        sendFeedback(email1, DataUsageFeedback.USAGE_TYPE_CALL, values1);
+        sendFeedback(email1, DataUsageFeedback.USAGE_TYPE_CALL, values1);
+
+        assertDataUsageCursorContains(Data.CONTENT_URI, "a@acme.com", 6, 200);
+
+        final Uri dataUriWithUsageTypeCall = Data.CONTENT_URI.buildUpon().appendQueryParameter(
+                DataUsageFeedback.USAGE_TYPE, DataUsageFeedback.USAGE_TYPE_CALL).build();
+
+        assertDataUsageCursorContains(dataUriWithUsageTypeCall, "a@acme.com", 3, 200);
     }
 
     public void testQueryContactGroup() {
@@ -2320,7 +2760,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         mActor.removePermissions("android.permission.WRITE_PROFILE");
 
         // Create a non-profile contact.
-        long rawContactId = createRawContactWithName("Domo", "Arigato");
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver, "Domo", "Arigato");
         long dataId = getStoredLongValue(Data.CONTENT_URI,
                 Data.RAW_CONTACT_ID + "=? AND " + Data.MIMETYPE + "=?",
                 new String[]{String.valueOf(rawContactId), StructuredName.CONTENT_ITEM_TYPE},
@@ -2469,7 +2909,8 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         // Insert a profile record with a new data set.
         Account account = new Account("a", "b");
         String dataSet = "c";
-        Uri profileUri = maybeAddAccountQueryParameters(Profile.CONTENT_RAW_CONTACTS_URI, account)
+        Uri profileUri = TestUtil.maybeAddAccountQueryParameters(Profile.CONTENT_RAW_CONTACTS_URI,
+                account)
                 .buildUpon().appendQueryParameter(RawContacts.DATA_SET, dataSet).build();
         ContentValues values = new ContentValues();
         long rawContactId = ContentUris.parseId(mResolver.insert(profileUri, values));
@@ -2500,7 +2941,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         ContentValues values = new ContentValues();
         Uri rawContactUri = mResolver.insert(RawContacts.CONTENT_URI, values);
         long rawContactId = ContentUris.parseId(rawContactUri);
-        insertStructuredName(rawContactId, "John", "Doe");
+        DataUtil.insertStructuredName(mResolver, rawContactId, "John", "Doe");
         Uri photoUri = insertPhoto(rawContactId);
         long photoId = ContentUris.parseId(photoUri);
         insertPhoneNumber(rawContactId, "18004664411");
@@ -2552,8 +2993,8 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         Account account2 = new Account("c", "d");
         long groupId1 = createGroup(account1, "e", "f");
         long groupId2 = createGroup(account2, "g", "h");
-        Uri uri1 = maybeAddAccountQueryParameters(Groups.CONTENT_URI, account1);
-        Uri uri2 = maybeAddAccountQueryParameters(Groups.CONTENT_URI, account2);
+        Uri uri1 = TestUtil.maybeAddAccountQueryParameters(Groups.CONTENT_URI, account1);
+        Uri uri2 = TestUtil.maybeAddAccountQueryParameters(Groups.CONTENT_URI, account2);
         assertEquals(1, getCount(uri1, null, null));
         assertEquals(1, getCount(uri2, null, null));
         assertStoredValue(uri1, Groups._ID + "=" + groupId1, null, Groups._ID, groupId1) ;
@@ -2587,7 +3028,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testGroupCreationAfterMembershipInsert() {
-        long rawContactId1 = createRawContact(mAccount);
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, mAccount);
         Uri groupMembershipUri = insertGroupMembership(rawContactId1, "gsid1");
 
         long groupId = assertSingleGroup(NO_LONG, mAccount, "gsid1", null);
@@ -2596,7 +3037,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testGroupReuseAfterMembershipInsert() {
-        long rawContactId1 = createRawContact(mAccount);
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, mAccount);
         long groupId1 = createGroup(mAccount, "gsid1", "title1");
         Uri groupMembershipUri = insertGroupMembership(rawContactId1, "gsid1");
 
@@ -2606,7 +3047,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testGroupInsertFailureOnGroupIdConflict() {
-        long rawContactId1 = createRawContact(mAccount);
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, mAccount);
         long groupId1 = createGroup(mAccount, "gsid1", "title1");
 
         ContentValues values = new ContentValues();
@@ -2690,13 +3131,16 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
 
         // Prepare raw contact id not used at all, to test group summary uri won't be confused
         // with it.
-        final long rawContactId0 = createRawContactWithName("firstName0", "lastName0");
+        final long rawContactId0 = RawContactUtil.createRawContactWithName(mResolver, "firstName0",
+                "lastName0");
 
-        final long rawContactId1 = createRawContactWithName("firstName1", "lastName1");
+        final long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "firstName1",
+                "lastName1");
         insertEmail(rawContactId1, "address1@email.com");
         insertGroupMembership(rawContactId1, groupId1);
 
-        final long rawContactId2 = createRawContactWithName("firstName2", "lastName2");
+        final long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "firstName2",
+                "lastName2");
         insertEmail(rawContactId2, "address2@email.com");
         insertPhoneNumber(rawContactId2, "222-222-2222");
         insertGroupMembership(rawContactId2, groupId1);
@@ -2738,7 +3182,8 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         assertStoredValues(Groups.CONTENT_SUMMARY_URI, new ContentValues[] { v1, v2, v3 });
 
         // Introduce new raw contact, pretending the user added another info.
-        final long rawContactId3 = createRawContactWithName("firstName3", "lastName3");
+        final long rawContactId3 = RawContactUtil.createRawContactWithName(mResolver, "firstName3",
+                "lastName3");
         insertEmail(rawContactId3, "address3@email.com");
         insertPhoneNumber(rawContactId3, "333-333-3333");
         insertGroupMembership(rawContactId3, groupId2);
@@ -2806,8 +3251,8 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         createSettings(account1, "0", "0");
         createSettings(account2, "1", "1");
         createSettings(account3, "1", "0");
-        Uri uri1 = maybeAddAccountQueryParameters(Settings.CONTENT_URI, account1);
-        Uri uri2 = maybeAddAccountQueryParameters(Settings.CONTENT_URI, account2);
+        Uri uri1 = TestUtil.maybeAddAccountQueryParameters(Settings.CONTENT_URI, account1);
+        Uri uri2 = TestUtil.maybeAddAccountQueryParameters(Settings.CONTENT_URI, account2);
         Uri uri3 = Settings.CONTENT_URI.buildUpon()
                 .appendQueryParameter(RawContacts.ACCOUNT_NAME, account3.getAccountName())
                 .appendQueryParameter(RawContacts.ACCOUNT_TYPE, account3.getAccountType())
@@ -2844,36 +3289,37 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testDisplayNameParsingWhenPartsUnspecified() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         ContentValues values = new ContentValues();
         values.put(StructuredName.DISPLAY_NAME, "Mr.John Kevin von Smith, Jr.");
-        insertStructuredName(rawContactId, values);
+        DataUtil.insertStructuredName(mResolver, rawContactId, values);
 
         assertStructuredName(rawContactId, "Mr.", "John", "Kevin", "von Smith", "Jr.");
     }
 
     public void testDisplayNameParsingWhenPartsAreNull() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         ContentValues values = new ContentValues();
         values.put(StructuredName.DISPLAY_NAME, "Mr.John Kevin von Smith, Jr.");
         values.putNull(StructuredName.GIVEN_NAME);
         values.putNull(StructuredName.FAMILY_NAME);
-        insertStructuredName(rawContactId, values);
+        DataUtil.insertStructuredName(mResolver, rawContactId, values);
         assertStructuredName(rawContactId, "Mr.", "John", "Kevin", "von Smith", "Jr.");
     }
 
     public void testDisplayNameParsingWhenPartsSpecified() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         ContentValues values = new ContentValues();
         values.put(StructuredName.DISPLAY_NAME, "Mr.John Kevin von Smith, Jr.");
         values.put(StructuredName.FAMILY_NAME, "Johnson");
-        insertStructuredName(rawContactId, values);
+        DataUtil.insertStructuredName(mResolver, rawContactId, values);
 
         assertStructuredName(rawContactId, null, null, null, "Johnson", null);
     }
 
     public void testContactWithoutPhoneticName() {
-        final long rawContactId = createRawContact(null);
+        ContactLocaleUtils.setLocale(Locale.ENGLISH);
+        final long rawContactId = RawContactUtil.createRawContact(mResolver, null);
 
         ContentValues values = new ContentValues();
         values.put(StructuredName.PREFIX, "Mr");
@@ -2881,7 +3327,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         values.put(StructuredName.MIDDLE_NAME, "K.");
         values.put(StructuredName.FAMILY_NAME, "Doe");
         values.put(StructuredName.SUFFIX, "Jr.");
-        Uri dataUri = insertStructuredName(rawContactId, values);
+        Uri dataUri = DataUtil.insertStructuredName(mResolver, rawContactId, values);
 
         values.clear();
         values.put(RawContacts.DISPLAY_NAME_SOURCE, DisplayNameSources.STRUCTURED_NAME);
@@ -2890,7 +3336,9 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         values.putNull(RawContacts.PHONETIC_NAME);
         values.put(RawContacts.PHONETIC_NAME_STYLE, PhoneticNameStyle.UNDEFINED);
         values.put(RawContacts.SORT_KEY_PRIMARY, "John K. Doe, Jr.");
+        values.put(RawContactsColumns.PHONEBOOK_LABEL_PRIMARY, "J");
         values.put(RawContacts.SORT_KEY_ALTERNATIVE, "Doe, John K., Jr.");
+        values.put(RawContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE, "D");
 
         Uri rawContactUri = ContentUris.withAppendedId(RawContacts.CONTENT_URI, rawContactId);
         assertStoredValues(rawContactUri, values);
@@ -2902,7 +3350,9 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         values.putNull(Contacts.PHONETIC_NAME);
         values.put(Contacts.PHONETIC_NAME_STYLE, PhoneticNameStyle.UNDEFINED);
         values.put(Contacts.SORT_KEY_PRIMARY, "John K. Doe, Jr.");
+        values.put(ContactsColumns.PHONEBOOK_LABEL_PRIMARY, "J");
         values.put(Contacts.SORT_KEY_ALTERNATIVE, "Doe, John K., Jr.");
+        values.put(ContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE, "D");
 
         Uri contactUri = ContentUris.withAppendedId(Contacts.CONTENT_URI,
                 queryContactId(rawContactId));
@@ -2913,17 +3363,17 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testContactWithChineseName() {
-
-        // Only run this test when Chinese collation is supported
-        if (!Arrays.asList(Collator.getAvailableLocales()).contains(Locale.CHINA)) {
+        if (!hasChineseCollator()) {
             return;
         }
+        ContactLocaleUtils.setLocale(Locale.SIMPLIFIED_CHINESE);
 
-        long rawContactId = createRawContact(null);
+        long rawContactId = RawContactUtil.createRawContact(mResolver, null);
 
         ContentValues values = new ContentValues();
+        // "DUAN \u6BB5 XIAO \u5C0F TAO \u6D9B"
         values.put(StructuredName.DISPLAY_NAME, "\u6BB5\u5C0F\u6D9B");
-        Uri dataUri = insertStructuredName(rawContactId, values);
+        Uri dataUri = DataUtil.insertStructuredName(mResolver, rawContactId, values);
 
         values.clear();
         values.put(RawContacts.DISPLAY_NAME_SOURCE, DisplayNameSources.STRUCTURED_NAME);
@@ -2931,8 +3381,10 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         values.put(RawContacts.DISPLAY_NAME_ALTERNATIVE, "\u6BB5\u5C0F\u6D9B");
         values.putNull(RawContacts.PHONETIC_NAME);
         values.put(RawContacts.PHONETIC_NAME_STYLE, PhoneticNameStyle.UNDEFINED);
-        values.put(RawContacts.SORT_KEY_PRIMARY, "DUAN \u6BB5 XIAO \u5C0F TAO \u6D9B");
-        values.put(RawContacts.SORT_KEY_ALTERNATIVE, "DUAN \u6BB5 XIAO \u5C0F TAO \u6D9B");
+        values.put(RawContacts.SORT_KEY_PRIMARY, "\u6BB5\u5C0F\u6D9B");
+        values.put(RawContactsColumns.PHONEBOOK_LABEL_PRIMARY, "D");
+        values.put(RawContacts.SORT_KEY_ALTERNATIVE, "\u6BB5\u5C0F\u6D9B");
+        values.put(RawContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE, "D");
 
         Uri rawContactUri = ContentUris.withAppendedId(RawContacts.CONTENT_URI, rawContactId);
         assertStoredValues(rawContactUri, values);
@@ -2943,8 +3395,10 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         values.put(Contacts.DISPLAY_NAME_ALTERNATIVE, "\u6BB5\u5C0F\u6D9B");
         values.putNull(Contacts.PHONETIC_NAME);
         values.put(Contacts.PHONETIC_NAME_STYLE, PhoneticNameStyle.UNDEFINED);
-        values.put(Contacts.SORT_KEY_PRIMARY, "DUAN \u6BB5 XIAO \u5C0F TAO \u6D9B");
-        values.put(Contacts.SORT_KEY_ALTERNATIVE, "DUAN \u6BB5 XIAO \u5C0F TAO \u6D9B");
+        values.put(Contacts.SORT_KEY_PRIMARY, "\u6BB5\u5C0F\u6D9B");
+        values.put(ContactsColumns.PHONEBOOK_LABEL_PRIMARY, "D");
+        values.put(Contacts.SORT_KEY_ALTERNATIVE, "\u6BB5\u5C0F\u6D9B");
+        values.put(ContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE, "D");
 
         Uri contactUri = ContentUris.withAppendedId(Contacts.CONTENT_URI,
                 queryContactId(rawContactId));
@@ -2954,13 +3408,38 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         assertStoredValues(dataUri, values);
     }
 
+    public void testJapaneseNameContactInEnglishLocale() {
+        // Need Japanese locale data for transliteration
+        if (!hasJapaneseCollator()) {
+            return;
+        }
+        ContactLocaleUtils.setLocale(Locale.US);
+        long rawContactId = RawContactUtil.createRawContact(mResolver, null);
+
+        ContentValues values = new ContentValues();
+        values.put(StructuredName.GIVEN_NAME, "\u7A7A\u6D77");
+        values.put(StructuredName.PHONETIC_GIVEN_NAME, "\u304B\u3044\u304F\u3046");
+        DataUtil.insertStructuredName(mResolver, rawContactId, values);
+
+        long contactId = queryContactId(rawContactId);
+        // en_US should behave same as ja_JP (match on Hiragana and Romaji
+        // but not Pinyin)
+        assertContactFilter(contactId, "\u304B\u3044\u304F\u3046");
+        assertContactFilter(contactId, "kaiku");
+        assertContactFilterNoResult("kong");
+    }
+
     public void testContactWithJapaneseName() {
-        long rawContactId = createRawContact(null);
+        if (!hasJapaneseCollator()) {
+            return;
+        }
+        ContactLocaleUtils.setLocale(Locale.JAPAN);
+        long rawContactId = RawContactUtil.createRawContact(mResolver, null);
 
         ContentValues values = new ContentValues();
         values.put(StructuredName.GIVEN_NAME, "\u7A7A\u6D77");
         values.put(StructuredName.PHONETIC_GIVEN_NAME, "\u304B\u3044\u304F\u3046");
-        Uri dataUri = insertStructuredName(rawContactId, values);
+        Uri dataUri = DataUtil.insertStructuredName(mResolver, rawContactId, values);
 
         values.clear();
         values.put(RawContacts.DISPLAY_NAME_SOURCE, DisplayNameSources.STRUCTURED_NAME);
@@ -2970,6 +3449,8 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         values.put(RawContacts.PHONETIC_NAME_STYLE, PhoneticNameStyle.JAPANESE);
         values.put(RawContacts.SORT_KEY_PRIMARY, "\u304B\u3044\u304F\u3046");
         values.put(RawContacts.SORT_KEY_ALTERNATIVE, "\u304B\u3044\u304F\u3046");
+        values.put(RawContactsColumns.PHONEBOOK_LABEL_PRIMARY, "\u304B");
+        values.put(RawContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE, "\u304B");
 
         Uri rawContactUri = ContentUris.withAppendedId(RawContacts.CONTENT_URI, rawContactId);
         assertStoredValues(rawContactUri, values);
@@ -2982,6 +3463,8 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         values.put(Contacts.PHONETIC_NAME_STYLE, PhoneticNameStyle.JAPANESE);
         values.put(Contacts.SORT_KEY_PRIMARY, "\u304B\u3044\u304F\u3046");
         values.put(Contacts.SORT_KEY_ALTERNATIVE, "\u304B\u3044\u304F\u3046");
+        values.put(ContactsColumns.PHONEBOOK_LABEL_PRIMARY, "\u304B");
+        values.put(ContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE, "\u304B");
 
         Uri contactUri = ContentUris.withAppendedId(Contacts.CONTENT_URI,
                 queryContactId(rawContactId));
@@ -2989,13 +3472,19 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
 
         // The same values should be available through a join with Data
         assertStoredValues(dataUri, values);
+
+        long contactId = queryContactId(rawContactId);
+        // ja_JP should match on Hiragana and Romaji but not Pinyin
+        assertContactFilter(contactId, "\u304B\u3044\u304F\u3046");
+        assertContactFilter(contactId, "kaiku");
+        assertContactFilterNoResult("kong");
     }
 
     public void testDisplayNameUpdate() {
-        long rawContactId1 = createRawContact();
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver);
         insertEmail(rawContactId1, "potato@acme.com", true);
 
-        long rawContactId2 = createRawContact();
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver);
         insertPhoneNumber(rawContactId2, "123456789", true);
 
         setAggregationException(AggregationExceptions.TYPE_KEEP_TOGETHER,
@@ -3003,14 +3492,14 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
 
         assertAggregated(rawContactId1, rawContactId2, "123456789");
 
-        insertStructuredName(rawContactId2, "Potato", "Head");
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Potato", "Head");
 
         assertAggregated(rawContactId1, rawContactId2, "Potato Head");
         assertNetworkNotified(true);
     }
 
     public void testDisplayNameFromData() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         ContentValues values = new ContentValues();
 
@@ -3041,12 +3530,12 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         values.put(StructuredName.GIVEN_NAME, "James");
         values.put(StructuredName.MIDDLE_NAME, "P.");
         values.put(StructuredName.FAMILY_NAME, "Sullivan");
-        insertStructuredName(rawContactId, values);
+        DataUtil.insertStructuredName(mResolver, rawContactId, values);
         assertStoredValue(uri, Contacts.DISPLAY_NAME, "James P. Sullivan");
     }
 
     public void testDisplayNameFromOrganizationWithoutPhoneticName() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         ContentValues values = new ContentValues();
 
@@ -3069,11 +3558,17 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         values.put(Contacts.PHONETIC_NAME_STYLE, PhoneticNameStyle.UNDEFINED);
         values.put(Contacts.SORT_KEY_PRIMARY, "Monsters Inc");
         values.put(Contacts.SORT_KEY_ALTERNATIVE, "Monsters Inc");
+        values.put(ContactsColumns.PHONEBOOK_LABEL_PRIMARY, "M");
+        values.put(ContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE, "M");
         assertStoredValues(uri, values);
     }
 
     public void testDisplayNameFromOrganizationWithJapanesePhoneticName() {
-        long rawContactId = createRawContact();
+        if (!hasJapaneseCollator()) {
+            return;
+        }
+        ContactLocaleUtils.setLocale(Locale.JAPAN);
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         ContentValues values = new ContentValues();
 
@@ -3091,24 +3586,18 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         values.put(Contacts.PHONETIC_NAME_STYLE, PhoneticNameStyle.JAPANESE);
         values.put(Contacts.SORT_KEY_PRIMARY, "\u30C9\u30B3\u30E2");
         values.put(Contacts.SORT_KEY_ALTERNATIVE, "\u30C9\u30B3\u30E2");
+        values.put(ContactsColumns.PHONEBOOK_LABEL_PRIMARY, "\u305F");
+        values.put(ContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE, "\u305F");
         assertStoredValues(uri, values);
     }
 
     public void testDisplayNameFromOrganizationWithChineseName() {
-        boolean hasChineseCollator = false;
-        final Locale locale[] = Collator.getAvailableLocales();
-        for (int i = 0; i < locale.length; i++) {
-            if (locale[i].equals(Locale.CHINA)) {
-                hasChineseCollator = true;
-                break;
-            }
-        }
-
-        if (!hasChineseCollator) {
+        if (!hasChineseCollator()) {
             return;
         }
+        ContactLocaleUtils.setLocale(Locale.SIMPLIFIED_CHINESE);
 
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         ContentValues values = new ContentValues();
 
@@ -3123,13 +3612,15 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         values.put(Contacts.DISPLAY_NAME, "\u4E2D\u56FD\u7535\u4FE1");
         values.putNull(Contacts.PHONETIC_NAME);
         values.put(Contacts.PHONETIC_NAME_STYLE, PhoneticNameStyle.UNDEFINED);
-        values.put(Contacts.SORT_KEY_PRIMARY, "ZHONG \u4E2D GUO \u56FD DIAN \u7535 XIN \u4FE1");
-        values.put(Contacts.SORT_KEY_ALTERNATIVE, "ZHONG \u4E2D GUO \u56FD DIAN \u7535 XIN \u4FE1");
+        values.put(Contacts.SORT_KEY_PRIMARY, "\u4E2D\u56FD\u7535\u4FE1");
+        values.put(ContactsColumns.PHONEBOOK_LABEL_PRIMARY, "Z");
+        values.put(Contacts.SORT_KEY_ALTERNATIVE, "\u4E2D\u56FD\u7535\u4FE1");
+        values.put(ContactsColumns.PHONEBOOK_LABEL_ALTERNATIVE, "Z");
         assertStoredValues(uri, values);
     }
 
     public void testLookupByOrganization() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         ContentValues values = new ContentValues();
 
@@ -3177,12 +3668,12 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     private void assertContactFilterNoResult(String filter) {
-        Uri filterUri4 = Uri.withAppendedPath(Contacts.CONTENT_FILTER_URI, filter);
-        assertEquals(0, getCount(filterUri4, null, null));
+        Uri filterUri = Uri.withAppendedPath(Contacts.CONTENT_FILTER_URI, Uri.encode(filter));
+        assertEquals(0, getCount(filterUri, null, null));
     }
 
     public void testSearchSnippetOrganization() throws Exception {
-        long rawContactId = createRawContactWithName();
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver);
         long contactId = queryContactId(rawContactId);
 
         // Some random data element
@@ -3214,11 +3705,11 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testSearchSnippetEmail() throws Exception {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         ContentValues values = new ContentValues();
 
-        insertStructuredName(rawContactId, "John", "Doe");
+        DataUtil.insertStructuredName(mResolver, rawContactId, "John", "Doe");
         Uri dataUri = insertEmail(rawContactId, "acme@corp.com", true, Email.TYPE_CUSTOM, "Custom");
 
         Uri filterUri = buildFilterUri("acme", true);
@@ -3243,11 +3734,11 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testSearchSnippetPhone() throws Exception {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         ContentValues values = new ContentValues();
 
-        insertStructuredName(rawContactId, "Cave", "Johnson");
+        DataUtil.insertStructuredName(mResolver, rawContactId, "Cave", "Johnson");
         insertPhoneNumber(rawContactId, "(860) 555-1234");
 
         values.clear();
@@ -3280,7 +3771,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testSearchSnippetNickname() throws Exception {
-        long rawContactId = createRawContactWithName();
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver);
         long contactId = queryContactId(rawContactId);
         ContentValues values = new ContentValues();
 
@@ -3295,9 +3786,9 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testSearchSnippetEmptyForNameInDisplayName() throws Exception {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
-        insertStructuredName(rawContactId, "Cave", "Johnson");
+        DataUtil.insertStructuredName(mResolver, rawContactId, "Cave", "Johnson");
         insertEmail(rawContactId, "cave@aperturescience.com", true);
 
         ContentValues emptySnippet = new ContentValues();
@@ -3310,7 +3801,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testSearchSnippetEmptyForNicknameInDisplayName() throws Exception {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         insertNickname(rawContactId, "Caveman");
         insertEmail(rawContactId, "cave@aperturescience.com", true);
@@ -3324,7 +3815,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testSearchSnippetEmptyForCompanyInDisplayName() throws Exception {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         ContentValues company = new ContentValues();
         company.clear();
@@ -3342,7 +3833,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testSearchSnippetEmptyForPhoneInDisplayName() throws Exception {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         insertPhoneNumber(rawContactId, "860-555-1234");
         insertEmail(rawContactId, "860@aperturescience.com", true);
@@ -3356,7 +3847,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testSearchSnippetEmptyForEmailInDisplayName() throws Exception {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         insertEmail(rawContactId, "cave@aperturescience.com", true);
         insertNote(rawContactId, "Cave Johnson is president of Aperture Science");
@@ -3370,8 +3861,8 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testDisplayNameUpdateFromStructuredNameUpdate() {
-        long rawContactId = createRawContact();
-        Uri nameUri = insertStructuredName(rawContactId, "Slinky", "Dog");
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
+        Uri nameUri = DataUtil.insertStructuredName(mResolver, rawContactId, "Slinky", "Dog");
 
         long contactId = queryContactId(rawContactId);
 
@@ -3413,7 +3904,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testSendToVoicemailDefault() {
-        long rawContactId = createRawContactWithName();
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver);
         long contactId = queryContactId(rawContactId);
 
         Cursor c = queryContact(contactId);
@@ -3424,7 +3915,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testSetSendToVoicemailAndRingtone() {
-        long rawContactId = createRawContactWithName();
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver);
         long contactId = queryContactId(rawContactId);
 
         updateSendToVoicemailAndRingtone(contactId, true, "foo");
@@ -3437,11 +3928,11 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testSendToVoicemailAndRingtoneAfterAggregation() {
-        long rawContactId1 = createRawContactWithName("a", "b");
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "a", "b");
         long contactId1 = queryContactId(rawContactId1);
         updateSendToVoicemailAndRingtone(contactId1, true, "foo");
 
-        long rawContactId2 = createRawContactWithName("c", "d");
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "c", "d");
         long contactId2 = queryContactId(rawContactId2);
         updateSendToVoicemailAndRingtone(contactId2, true, "bar");
 
@@ -3454,11 +3945,11 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testDoNotSendToVoicemailAfterAggregation() {
-        long rawContactId1 = createRawContactWithName("e", "f");
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "e", "f");
         long contactId1 = queryContactId(rawContactId1);
         updateSendToVoicemailAndRingtone(contactId1, true, null);
 
-        long rawContactId2 = createRawContactWithName("g", "h");
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "g", "h");
         long contactId2 = queryContactId(rawContactId2);
         updateSendToVoicemailAndRingtone(contactId2, false, null);
 
@@ -3471,11 +3962,11 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testSetSendToVoicemailAndRingtonePreservedAfterJoinAndSplit() {
-        long rawContactId1 = createRawContactWithName("i", "j");
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "i", "j");
         long contactId1 = queryContactId(rawContactId1);
         updateSendToVoicemailAndRingtone(contactId1, true, "foo");
 
-        long rawContactId2 = createRawContactWithName("k", "l");
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "k", "l");
         long contactId2 = queryContactId(rawContactId2);
         updateSendToVoicemailAndRingtone(contactId2, false, "bar");
 
@@ -3492,7 +3983,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testStatusUpdateInsert() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         Uri imUri = insertImHandle(rawContactId, Im.PROTOCOL_AIM, null, "aim");
         long dataId = ContentUris.parseId(imUri);
 
@@ -3545,7 +4036,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testStatusUpdateInferAttribution() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         Uri imUri = insertImHandle(rawContactId, Im.PROTOCOL_AIM, null, "aim");
         long dataId = ContentUris.parseId(imUri);
 
@@ -3566,7 +4057,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testStatusUpdateMatchingImOrEmail() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         insertImHandle(rawContactId, Im.PROTOCOL_AIM, null, "aim");
         insertImHandle(rawContactId, Im.PROTOCOL_CUSTOM, "my_im_proto", "my_im");
         insertEmail(rawContactId, "m@acme.com");
@@ -3610,7 +4101,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testStatusUpdateUpdateAndDelete() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         insertImHandle(rawContactId, Im.PROTOCOL_AIM, null, "aim");
 
         long contactId = queryContactId(rawContactId);
@@ -3685,7 +4176,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testStatusUpdateUpdateToNull() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         insertImHandle(rawContactId, Im.PROTOCOL_AIM, null, "aim");
 
         long contactId = queryContactId(rawContactId);
@@ -3713,7 +4204,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testStatusUpdateWithTimestamp() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         insertImHandle(rawContactId, Im.PROTOCOL_AIM, null, "aim");
         insertImHandle(rawContactId, Im.PROTOCOL_GOOGLE_TALK, null, "gtalk");
 
@@ -3746,7 +4237,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     // Stream item query test cases.
 
     public void testQueryStreamItemsByRawContactId() {
-        long rawContactId = createRawContact(mAccount);
+        long rawContactId = RawContactUtil.createRawContact(mResolver, mAccount);
         ContentValues values = buildGenericStreamItemValues();
         insertStreamItem(rawContactId, values, mAccount);
         assertStoredValues(
@@ -3757,7 +4248,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testQueryStreamItemsByContactId() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         ContentValues values = buildGenericStreamItemValues();
         insertStreamItem(rawContactId, values, null);
@@ -3769,7 +4260,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testQueryStreamItemsByLookupKey() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         String lookupKey = queryLookupKey(contactId);
         ContentValues values = buildGenericStreamItemValues();
@@ -3782,7 +4273,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testQueryStreamItemsByLookupKeyAndContactId() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         String lookupKey = queryLookupKey(contactId);
         ContentValues values = buildGenericStreamItemValues();
@@ -3797,14 +4288,14 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testQueryStreamItems() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         ContentValues values = buildGenericStreamItemValues();
         insertStreamItem(rawContactId, values, null);
         assertStoredValues(StreamItems.CONTENT_URI, values);
     }
 
     public void testQueryStreamItemsWithSelection() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         ContentValues firstValues = buildGenericStreamItemValues();
         insertStreamItem(rawContactId, firstValues, null);
 
@@ -3822,7 +4313,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testQueryStreamItemById() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         ContentValues firstValues = buildGenericStreamItemValues();
         Uri resultUri = insertStreamItem(rawContactId, firstValues, null);
         long firstStreamItemId = ContentUris.parseId(resultUri);
@@ -3844,7 +4335,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     // Stream item photo insertion + query test cases.
 
     public void testQueryStreamItemPhotoWithSelection() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         ContentValues values = buildGenericStreamItemValues();
         Uri resultUri = insertStreamItem(rawContactId, values, null);
         long streamItemId = ContentUris.parseId(resultUri);
@@ -3861,7 +4352,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testQueryStreamItemPhotoByStreamItemId() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
 
         // Insert a first stream item.
         ContentValues firstValues = buildGenericStreamItemValues();
@@ -3892,7 +4383,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testQueryStreamItemPhotoByStreamItemPhotoId() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
 
         // Insert a first stream item.
         ContentValues firstValues = buildGenericStreamItemValues();
@@ -3958,7 +4449,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testInsertStreamItemWithContentValues() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         ContentValues values = buildGenericStreamItemValues();
         values.put(StreamItems.RAW_CONTACT_ID, rawContactId);
         mResolver.insert(StreamItems.CONTENT_URI, values);
@@ -3968,7 +4459,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testInsertStreamItemOverLimit() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         ContentValues values = buildGenericStreamItemValues();
         values.put(StreamItems.RAW_CONTACT_ID, rawContactId);
 
@@ -4003,7 +4494,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testInsertStreamItemOlderThanOldestInLimit() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         ContentValues values = buildGenericStreamItemValues();
         values.put(StreamItems.RAW_CONTACT_ID, rawContactId);
 
@@ -4026,7 +4517,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     // Stream item photo insertion test cases.
 
     public void testInsertStreamItemsAndPhotosInBatch() throws Exception {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         ContentValues streamItemValues = buildGenericStreamItemValues();
         ContentValues streamItemPhotoValues = buildGenericStreamItemPhotoValues(0);
 
@@ -4080,7 +4571,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     // Stream item update test cases.
 
     public void testUpdateStreamItemById() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         ContentValues values = buildGenericStreamItemValues();
         Uri resultUri = insertStreamItem(rawContactId, values, null);
         long streamItemId = ContentUris.parseId(resultUri);
@@ -4093,7 +4584,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testUpdateStreamItemWithContentValues() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         ContentValues values = buildGenericStreamItemValues();
         Uri resultUri = insertStreamItem(rawContactId, values, null);
         long streamItemId = ContentUris.parseId(resultUri);
@@ -4108,7 +4599,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     // Stream item photo update test cases.
 
     public void testUpdateStreamItemPhotoById() throws IOException {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         ContentValues values = buildGenericStreamItemValues();
         Uri resultUri = insertStreamItem(rawContactId, values, null);
         long streamItemId = ContentUris.parseId(resultUri);
@@ -4136,7 +4627,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testUpdateStreamItemPhotoWithContentValues() throws IOException {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         ContentValues values = buildGenericStreamItemValues();
         Uri resultUri = insertStreamItem(rawContactId, values, null);
         long streamItemId = ContentUris.parseId(resultUri);
@@ -4165,7 +4656,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     // Stream item deletion test cases.
 
     public void testDeleteStreamItemById() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         ContentValues firstValues = buildGenericStreamItemValues();
         Uri resultUri = insertStreamItem(rawContactId, firstValues, null);
         long firstStreamItemId = ContentUris.parseId(resultUri);
@@ -4185,7 +4676,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testDeleteStreamItemWithSelection() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         ContentValues firstValues = buildGenericStreamItemValues();
         insertStreamItem(rawContactId, firstValues, null);
 
@@ -4206,7 +4697,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     // Stream item photo deletion test cases.
 
     public void testDeleteStreamItemPhotoById() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long streamItemId = ContentUris.parseId(
                 insertStreamItem(rawContactId, buildGenericStreamItemValues(), null));
         long streamItemPhotoId = ContentUris.parseId(
@@ -4230,7 +4721,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testDeleteStreamItemPhotoWithSelection() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long streamItemId = ContentUris.parseId(
                 insertStreamItem(rawContactId, buildGenericStreamItemValues(), null));
         ContentValues firstPhotoValues = buildGenericStreamItemPhotoValues(0);
@@ -4247,7 +4738,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testDeleteStreamItemsWhenRawContactDeleted() {
-        long rawContactId = createRawContact(mAccount);
+        long rawContactId = RawContactUtil.createRawContact(mResolver, mAccount);
         Uri streamItemUri = insertStreamItem(rawContactId,
                 buildGenericStreamItemValues(), mAccount);
         Uri streamItemPhotoUri = insertStreamItemPhoto(ContentUris.parseId(streamItemUri),
@@ -4336,7 +4827,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testStreamItemReadRequiresReadSocialStreamPermission() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         String lookupKey = queryLookupKey(contactId);
         long streamItemId = ContentUris.parseId(
@@ -4388,7 +4879,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testStreamItemPhotoReadRequiresReadSocialStreamPermission() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long streamItemId = ContentUris.parseId(
                 insertStreamItem(rawContactId, buildGenericStreamItemValues(), null));
         long streamItemPhotoId = ContentUris.parseId(
@@ -4412,7 +4903,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testStreamItemModificationRequiresWriteSocialStreamPermission() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long streamItemId = ContentUris.parseId(
                 insertStreamItem(rawContactId, buildGenericStreamItemValues(), null));
         mActor.removePermissions("android.permission.WRITE_SOCIAL_STREAM");
@@ -4441,7 +4932,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testStreamItemPhotoModificationRequiresWriteSocialStreamPermission() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long streamItemId = ContentUris.parseId(
                 insertStreamItem(rawContactId, buildGenericStreamItemValues(), null));
         long streamItemPhotoId = ContentUris.parseId(
@@ -4478,7 +4969,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     public void testStatusUpdateDoesNotRequireReadOrWriteSocialStreamPermission() {
         int protocol1 = Im.PROTOCOL_GOOGLE_TALK;
         String handle1 = "test@gmail.com";
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         insertImHandle(rawContactId, protocol1, null, handle1);
         mActor.removePermissions("android.permission.READ_SOCIAL_STREAM");
         mActor.removePermissions("android.permission.WRITE_SOCIAL_STREAM");
@@ -4515,7 +5006,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         int protocol1 = Im.PROTOCOL_GOOGLE_TALK;
         String handle1 = "test@gmail.com";
 
-        long rawContactId1 = createRawContact();
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver);
         insertImHandle(rawContactId1, protocol1, null, handle1);
 
         insertStatusUpdate(protocol1, null, handle1, StatusUpdates.AVAILABLE, "Green",
@@ -4577,7 +5068,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testContactVisibilityUpdateOnMembershipChange() {
-        long rawContactId = createRawContact(mAccount);
+        long rawContactId = RawContactUtil.createRawContact(mResolver, mAccount);
         assertVisibility(rawContactId, "0");
 
         long visibleGroupId = createGroup(mAccount, "123", "Visible", 1);
@@ -4643,30 +5134,33 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         long groupId1 = createGroup(mAccount, "gsid1", "title1");
         long groupId2 = createGroup(mAccount, "gsid2", "title2");
 
-        id = createRawContact(mAccount, RawContacts.SOURCE_ID, "c0");
+        id = RawContactUtil.createRawContact(mResolver, mAccount, RawContacts.SOURCE_ID, "c0");
         insertGroupMembership(id, "gsid1");
         insertEmail(id, "c0@email.com");
         insertPhoneNumber(id, "5551212c0");
 
-        long c1 = id = createRawContact(mAccount, RawContacts.SOURCE_ID, "c1");
+        long c1 = id = RawContactUtil.createRawContact(mResolver, mAccount, RawContacts.SOURCE_ID,
+                "c1");
         Uri id_1_0 = insertGroupMembership(id, "gsid1");
         Uri id_1_1 = insertGroupMembership(id, "gsid2");
         Uri id_1_2 = insertEmail(id, "c1@email.com");
         Uri id_1_3 = insertPhoneNumber(id, "5551212c1");
 
-        long c2 = id = createRawContact(mAccount, RawContacts.SOURCE_ID, "c2");
+        long c2 = id = RawContactUtil.createRawContact(mResolver, mAccount, RawContacts.SOURCE_ID,
+                "c2");
         Uri id_2_0 = insertGroupMembership(id, "gsid1");
         Uri id_2_1 = insertEmail(id, "c2@email.com");
         Uri id_2_2 = insertPhoneNumber(id, "5551212c2");
 
-        long c3 = id = createRawContact(mAccount, RawContacts.SOURCE_ID, "c3");
+        long c3 = id = RawContactUtil.createRawContact(mResolver, mAccount, RawContacts.SOURCE_ID,
+                "c3");
         Uri id_3_0 = insertGroupMembership(id, groupId2);
         Uri id_3_1 = insertEmail(id, "c3@email.com");
         Uri id_3_2 = insertPhoneNumber(id, "5551212c3");
 
         EntityIterator iterator = RawContacts.newEntityIterator(mResolver.query(
-                maybeAddAccountQueryParameters(RawContactsEntity.CONTENT_URI, mAccount), null,
-                RawContacts.SOURCE_ID + " in ('c1', 'c2', 'c3')", null, null));
+                TestUtil.maybeAddAccountQueryParameters(RawContactsEntity.CONTENT_URI, mAccount),
+                null, RawContacts.SOURCE_ID + " in ('c1', 'c2', 'c3')", null, null));
         Entity entity;
         ContentValues[] subValues;
         entity = iterator.next();
@@ -4723,7 +5217,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testDataCreateUpdateDeleteByMimeType() throws Exception {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
 
         ContentValues values = new ContentValues();
         values.put(Data.RAW_CONTACT_ID, rawContactId);
@@ -4786,11 +5280,11 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     public void testRawContactQuery() {
         Account account1 = new Account("a", "b");
         Account account2 = new Account("c", "d");
-        long rawContactId1 = createRawContact(account1);
-        long rawContactId2 = createRawContact(account2);
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, account1);
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, account2);
 
-        Uri uri1 = maybeAddAccountQueryParameters(RawContacts.CONTENT_URI, account1);
-        Uri uri2 = maybeAddAccountQueryParameters(RawContacts.CONTENT_URI, account2);
+        Uri uri1 = TestUtil.maybeAddAccountQueryParameters(RawContacts.CONTENT_URI, account1);
+        Uri uri2 = TestUtil.maybeAddAccountQueryParameters(RawContacts.CONTENT_URI, account2);
         assertEquals(1, getCount(uri1, null, null));
         assertEquals(1, getCount(uri2, null, null));
         assertStoredValue(uri1, RawContacts._ID, rawContactId1) ;
@@ -4803,7 +5297,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testRawContactDeletion() {
-        long rawContactId = createRawContact(mAccount);
+        long rawContactId = RawContactUtil.createRawContact(mResolver, mAccount);
         Uri uri = ContentUris.withAppendedId(RawContacts.CONTENT_URI, rawContactId);
 
         insertImHandle(rawContactId, Im.PROTOCOL_GOOGLE_TALK, null, "deleteme@android.com");
@@ -4834,8 +5328,8 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testRawContactDeletionKeepingAggregateContact() {
-        long rawContactId1 = createRawContactWithName(mAccount);
-        long rawContactId2 = createRawContactWithName(mAccount);
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, mAccount);
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, mAccount);
         setAggregationException(
                 AggregationExceptions.TYPE_KEEP_TOGETHER, rawContactId1, rawContactId2);
 
@@ -4849,7 +5343,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testRawContactDeletion_byAccountParam() {
-        long rawContactId = createRawContact(mAccount);
+        long rawContactId = RawContactUtil.createRawContact(mResolver, mAccount);
         Uri uri = ContentUris.withAppendedId(RawContacts.CONTENT_URI, rawContactId);
 
         insertImHandle(rawContactId, Im.PROTOCOL_GOOGLE_TALK, null, "deleteme@android.com");
@@ -4885,7 +5379,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testRawContactDeletion_byAccountSelection() {
-        long rawContactId = createRawContact(mAccount);
+        long rawContactId = RawContactUtil.createRawContact(mResolver, mAccount);
         Uri uri = ContentUris.withAppendedId(RawContacts.CONTENT_URI, rawContactId);
 
         // Do not delete if we are deleting with wrong account.
@@ -4911,14 +5405,14 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
      */
     public void testAccountsToString() {
         final Set<Account> EXPECTED_0 = Sets.newHashSet();
-        final Set<Account> EXPECTED_1 = Sets.newHashSet(ACCOUNT_1);
-        final Set<Account> EXPECTED_2 = Sets.newHashSet(ACCOUNT_2);
-        final Set<Account> EXPECTED_1_2 = Sets.newHashSet(ACCOUNT_1, ACCOUNT_2);
+        final Set<Account> EXPECTED_1 = Sets.newHashSet(TestUtil.ACCOUNT_1);
+        final Set<Account> EXPECTED_2 = Sets.newHashSet(TestUtil.ACCOUNT_2);
+        final Set<Account> EXPECTED_1_2 = Sets.newHashSet(TestUtil.ACCOUNT_1, TestUtil.ACCOUNT_2);
 
         final Set<Account> ACTUAL_0 = Sets.newHashSet();
-        final Set<Account> ACTUAL_1 = Sets.newHashSet(ACCOUNT_1);
-        final Set<Account> ACTUAL_2 = Sets.newHashSet(ACCOUNT_2);
-        final Set<Account> ACTUAL_1_2 = Sets.newHashSet(ACCOUNT_2, ACCOUNT_1);
+        final Set<Account> ACTUAL_1 = Sets.newHashSet(TestUtil.ACCOUNT_1);
+        final Set<Account> ACTUAL_2 = Sets.newHashSet(TestUtil.ACCOUNT_2);
+        final Set<Account> ACTUAL_1_2 = Sets.newHashSet(TestUtil.ACCOUNT_2, TestUtil.ACCOUNT_1);
 
         assertTrue(EXPECTED_0.equals(accountsToStringToAccounts(ACTUAL_0)));
         assertFalse(EXPECTED_0.equals(accountsToStringToAccounts(ACTUAL_1)));
@@ -4959,10 +5453,10 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         final ContactsProvider2 cp = (ContactsProvider2) getProvider();
 
         final Account[] ACCOUNTS_0 = new Account[] {};
-        final Account[] ACCOUNTS_1 = new Account[] {ACCOUNT_1};
-        final Account[] ACCOUNTS_2 = new Account[] {ACCOUNT_2};
-        final Account[] ACCOUNTS_1_2 = new Account[] {ACCOUNT_1, ACCOUNT_2};
-        final Account[] ACCOUNTS_2_1 = new Account[] {ACCOUNT_2, ACCOUNT_1};
+        final Account[] ACCOUNTS_1 = new Account[] {TestUtil.ACCOUNT_1};
+        final Account[] ACCOUNTS_2 = new Account[] {TestUtil.ACCOUNT_2};
+        final Account[] ACCOUNTS_1_2 = new Account[] {TestUtil.ACCOUNT_1, TestUtil.ACCOUNT_2};
+        final Account[] ACCOUNTS_2_1 = new Account[] {TestUtil.ACCOUNT_2, TestUtil.ACCOUNT_1};
 
         // Add ACCOUNT_1
 
@@ -5005,7 +5499,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     public void testAccountsUpdated() {
         // This is to ensure we do not delete contacts with null, null (account name, type)
         // accidentally.
-        long rawContactId3 = createRawContactWithName("James", "Sullivan");
+        long rawContactId3 = RawContactUtil.createRawContactWithName(mResolver, "James", "Sullivan");
         insertPhoneNumber(rawContactId3, "5234567890");
         Uri rawContact3 = ContentUris.withAppendedId(RawContacts.CONTENT_URI, rawContactId3);
         assertEquals(1, getCount(RawContacts.CONTENT_URI, null, null));
@@ -5017,9 +5511,9 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         assertStoredValue(rawContact3, RawContacts.ACCOUNT_NAME, null);
         assertStoredValue(rawContact3, RawContacts.ACCOUNT_TYPE, null);
 
-        long rawContactId1 = createRawContact(mAccount);
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, mAccount);
         insertEmail(rawContactId1, "account1@email.com");
-        long rawContactId2 = createRawContact(mAccountTwo);
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, mAccountTwo);
         insertEmail(rawContactId2, "account2@email.com");
         insertImHandle(rawContactId2, Im.PROTOCOL_GOOGLE_TALK, null, "deleteme@android.com");
         insertStatusUpdate(Im.PROTOCOL_GOOGLE_TALK, null, "deleteme@android.com",
@@ -5039,9 +5533,11 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         mActor.setAccounts(new Account[]{readOnlyAccount, mAccount});
         cp.onAccountsUpdated(new Account[]{readOnlyAccount, mAccount});
 
-        long rawContactId1 = createRawContactWithName("John", "Doe", readOnlyAccount);
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                readOnlyAccount);
         Uri photoUri1 = insertPhoto(rawContactId1);
-        long rawContactId2 = createRawContactWithName("john", "doe", mAccount);
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "john", "doe",
+                mAccount);
         Uri photoUri2 = insertPhoto(rawContactId2);
         storeValue(photoUri2, Photo.IS_SUPER_PRIMARY, "1");
 
@@ -5082,7 +5578,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         cp.onAccountsUpdated(new Account[]{doomedAccount, safeAccount});
 
         // Create a doomed raw contact, stream item, and photo.
-        long doomedRawContactId = createRawContactWithName(doomedAccount);
+        long doomedRawContactId = RawContactUtil.createRawContactWithName(mResolver, doomedAccount);
         Uri doomedStreamItemUri =
                 insertStreamItem(doomedRawContactId, buildGenericStreamItemValues(), doomedAccount);
         long doomedStreamItemId = ContentUris.parseId(doomedStreamItemUri);
@@ -5090,7 +5586,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
                 doomedStreamItemId, buildGenericStreamItemPhotoValues(0), doomedAccount);
 
         // Create a safe raw contact, stream item, and photo.
-        long safeRawContactId = createRawContactWithName(safeAccount);
+        long safeRawContactId = RawContactUtil.createRawContactWithName(mResolver, safeAccount);
         Uri safeStreamItemUri =
                 insertStreamItem(safeRawContactId, buildGenericStreamItemValues(), safeAccount);
         long safeStreamItemId = ContentUris.parseId(safeStreamItemUri);
@@ -5117,8 +5613,10 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testContactDeletion() {
-        long rawContactId1 = createRawContactWithName("John", "Doe", ACCOUNT_1);
-        long rawContactId2 = createRawContactWithName("John", "Doe", ACCOUNT_2);
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                TestUtil.ACCOUNT_1);
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                TestUtil.ACCOUNT_2);
 
         long contactId = queryContactId(rawContactId1);
 
@@ -5131,10 +5629,10 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testMarkAsDirtyParameter() {
-        long rawContactId = createRawContact(mAccount);
+        long rawContactId = RawContactUtil.createRawContact(mResolver, mAccount);
         Uri rawContactUri = ContentUris.withAppendedId(RawContacts.CONTENT_URI, rawContactId);
 
-        Uri uri = insertStructuredName(rawContactId, "John", "Doe");
+        Uri uri = DataUtil.insertStructuredName(mResolver, rawContactId, "John", "Doe");
         clearDirty(rawContactUri);
         Uri updateUri = setCallerIsSyncAdapter(uri, mAccount);
 
@@ -5147,7 +5645,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testRawContactDirtyAndVersion() {
-        final long rawContactId = createRawContact(mAccount);
+        final long rawContactId = RawContactUtil.createRawContact(mResolver, mAccount);
         Uri uri = ContentUris.withAppendedId(ContactsContract.RawContacts.CONTENT_URI, rawContactId);
         assertDirty(uri, false);
         long version = getVersion(uri);
@@ -5188,7 +5686,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testRawContactClearDirty() {
-        final long rawContactId = createRawContact(mAccount);
+        final long rawContactId = RawContactUtil.createRawContact(mResolver, mAccount);
         Uri uri = ContentUris.withAppendedId(ContactsContract.RawContacts.CONTENT_URI,
                 rawContactId);
         long version = getVersion(uri);
@@ -5203,7 +5701,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testRawContactDeletionSetsDirty() {
-        final long rawContactId = createRawContact(mAccount);
+        final long rawContactId = RawContactUtil.createRawContact(mResolver, mAccount);
         Uri uri = ContentUris.withAppendedId(ContactsContract.RawContacts.CONTENT_URI,
                 rawContactId);
         long version = getVersion(uri);
@@ -5274,7 +5772,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         ContentValues values = new ContentValues();
         Uri rawContactUri = mResolver.insert(RawContacts.CONTENT_URI, values);
         long rawContactId = ContentUris.parseId(rawContactUri);
-        insertStructuredName(rawContactId, "John", "Doe");
+        DataUtil.insertStructuredName(mResolver, rawContactId, "John", "Doe");
         long dataId = ContentUris.parseId(insertPhoto(rawContactId, R.drawable.earth_normal));
         long photoFileId = getStoredLongValue(Data.CONTENT_URI, Data._ID + "=?",
                 new String[]{String.valueOf(dataId)}, Photo.PHOTO_FILE_ID);
@@ -5287,7 +5785,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testGetPhotoViaLookupUri() throws IOException {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         Uri contactUri = ContentUris.withAppendedId(Contacts.CONTENT_URI, contactId);
         Uri lookupUri = Contacts.getLookupUri(mResolver, contactUri);
@@ -5314,7 +5812,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testInputStreamForPhoto() throws Exception {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         Uri contactUri = ContentUris.withAppendedId(Contacts.CONTENT_URI, contactId);
         insertPhoto(rawContactId);
@@ -5337,11 +5835,11 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testSuperPrimaryPhoto() {
-        long rawContactId1 = createRawContact(new Account("a", "a"));
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, new Account("a", "a"));
         Uri photoUri1 = insertPhoto(rawContactId1, R.drawable.earth_normal);
         long photoId1 = ContentUris.parseId(photoUri1);
 
-        long rawContactId2 = createRawContact(new Account("b", "b"));
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, new Account("b", "b"));
         Uri photoUri2 = insertPhoto(rawContactId2, R.drawable.earth_normal);
         long photoId2 = ContentUris.parseId(photoUri2);
 
@@ -5379,7 +5877,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         ContentValues values = new ContentValues();
         Uri rawContactUri = mResolver.insert(RawContacts.CONTENT_URI, values);
         long rawContactId = ContentUris.parseId(rawContactUri);
-        insertStructuredName(rawContactId, "John", "Doe");
+        DataUtil.insertStructuredName(mResolver, rawContactId, "John", "Doe");
 
         Uri twigUri = Uri.withAppendedPath(ContentUris.withAppendedId(Contacts.CONTENT_URI,
                 queryContactId(rawContactId)), Contacts.Photo.CONTENT_DIRECTORY);
@@ -5438,7 +5936,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testOpenDisplayPhotoForContactId() throws IOException {
-        long rawContactId = createRawContactWithName();
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver);
         long contactId = queryContactId(rawContactId);
         insertPhoto(rawContactId, R.drawable.earth_normal);
         Uri photoUri = Contacts.CONTENT_URI.buildUpon()
@@ -5450,7 +5948,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testOpenDisplayPhotoForContactLookupKey() throws IOException {
-        long rawContactId = createRawContactWithName();
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver);
         long contactId = queryContactId(rawContactId);
         String lookupKey = queryLookupKey(contactId);
         insertPhoto(rawContactId, R.drawable.earth_normal);
@@ -5463,7 +5961,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testOpenDisplayPhotoForContactLookupKeyAndId() throws IOException {
-        long rawContactId = createRawContactWithName();
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver);
         long contactId = queryContactId(rawContactId);
         String lookupKey = queryLookupKey(contactId);
         insertPhoto(rawContactId, R.drawable.earth_normal);
@@ -5477,7 +5975,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testOpenDisplayPhotoForRawContactId() throws IOException {
-        long rawContactId = createRawContactWithName();
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver);
         insertPhoto(rawContactId, R.drawable.earth_normal);
         Uri photoUri = RawContacts.CONTENT_URI.buildUpon()
                 .appendPath(String.valueOf(rawContactId))
@@ -5488,7 +5986,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testOpenDisplayPhotoByPhotoUri() throws IOException {
-        long rawContactId = createRawContactWithName();
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver);
         long contactId = queryContactId(rawContactId);
         insertPhoto(rawContactId, R.drawable.earth_normal);
 
@@ -5502,7 +6000,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testPhotoUriForDisplayPhoto() {
-        long rawContactId = createRawContactWithName();
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver);
         long contactId = queryContactId(rawContactId);
 
         // Photo being inserted is larger than a thumbnail, so it will be stored as a file.
@@ -5525,7 +6023,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testPhotoUriForThumbnailPhoto() throws IOException {
-        long rawContactId = createRawContactWithName();
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver);
         long contactId = queryContactId(rawContactId);
 
         // Photo being inserted is a thumbnail, so it will only be stored in a BLOB.  The photo URI
@@ -5554,7 +6052,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testWriteNewPhotoToAssetFile() throws Exception {
-        long rawContactId = createRawContactWithName();
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver);
         long contactId = queryContactId(rawContactId);
 
         // Load in a huge photo.
@@ -5594,7 +6092,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testWriteUpdatedPhotoToAssetFile() throws Exception {
-        long rawContactId = createRawContactWithName();
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver);
         long contactId = queryContactId(rawContactId);
 
         // Insert a large photo first.
@@ -5665,14 +6163,14 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         provider.cleanupPhotoStore();
 
         // Insert a couple of contacts with photos.
-        long rawContactId1 = createRawContactWithName();
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver);
         long contactId1 = queryContactId(rawContactId1);
         long dataId1 = ContentUris.parseId(insertPhoto(rawContactId1, R.drawable.earth_normal));
         long photoFileId1 =
                 getStoredLongValue(ContentUris.withAppendedId(Data.CONTENT_URI, dataId1),
                         Photo.PHOTO_FILE_ID);
 
-        long rawContactId2 = createRawContactWithName();
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver);
         long contactId2 = queryContactId(rawContactId2);
         long dataId2 = ContentUris.parseId(insertPhoto(rawContactId2, R.drawable.earth_normal));
         long photoFileId2 =
@@ -5692,7 +6190,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
 
         // Insert a third raw contact that has a bogus photo file ID.
         long bogusFileId = 1234567;
-        long rawContactId3 = createRawContactWithName();
+        long rawContactId3 = RawContactUtil.createRawContactWithName(mResolver);
         long contactId3 = queryContactId(rawContactId3);
         values.clear();
         values.put(Data.RAW_CONTACT_ID, rawContactId3);
@@ -5706,7 +6204,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         // Insert a fourth raw contact with a stream item that has a photo, then remove that photo
         // from the photo store.
         Account socialAccount = new Account("social", "social");
-        long rawContactId4 = createRawContactWithName(socialAccount);
+        long rawContactId4 = RawContactUtil.createRawContactWithName(mResolver, socialAccount);
         Uri streamItemUri =
                 insertStreamItem(rawContactId4, buildGenericStreamItemValues(), socialAccount);
         long streamItemId = ContentUris.parseId(streamItemUri);
@@ -5756,7 +6254,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         PhotoStore profilePhotoStore = provider.getProfilePhotoStore();
 
         // Trigger an initial cleanup so another one won't happen while we're running this test.
-        provider.switchToProfileMode();
+        provider.switchToProfileModeForTest();
         provider.cleanupPhotoStore();
 
         // Create the profile contact and add a photo.
@@ -5787,7 +6285,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         profilePhotoStore.remove(streamItemPhotoFileId);
 
         // Manually trigger another cleanup in the provider.
-        provider.switchToProfileMode();
+        provider.switchToProfileModeForTest();
         provider.cleanupPhotoStore();
 
         // The following things should have happened.
@@ -5806,7 +6304,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testOverwritePhotoWithThumbnail() throws IOException {
-        long rawContactId = createRawContactWithName();
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver);
         long contactId = queryContactId(rawContactId);
         Uri contactUri = ContentUris.withAppendedId(Contacts.CONTENT_URI, contactId);
 
@@ -5834,9 +6332,9 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testUpdateRawContactSetStarred() {
-        long rawContactId1 = createRawContactWithName();
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver);
         Uri rawContactUri1 = ContentUris.withAppendedId(RawContacts.CONTENT_URI, rawContactId1);
-        long rawContactId2 = createRawContactWithName();
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver);
         Uri rawContactUri2 = ContentUris.withAppendedId(RawContacts.CONTENT_URI, rawContactId2);
         setAggregationException(
                 AggregationExceptions.TYPE_KEEP_TOGETHER, rawContactId1, rawContactId2);
@@ -5870,11 +6368,11 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testSetAndClearSuperPrimaryEmail() {
-        long rawContactId1 = createRawContact(new Account("a", "a"));
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, new Account("a", "a"));
         Uri mailUri11 = insertEmail(rawContactId1, "test1@domain1.com");
         Uri mailUri12 = insertEmail(rawContactId1, "test2@domain1.com");
 
-        long rawContactId2 = createRawContact(new Account("b", "b"));
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, new Account("b", "b"));
         Uri mailUri21 = insertEmail(rawContactId2, "test1@domain2.com");
         Uri mailUri22 = insertEmail(rawContactId2, "test2@domain2.com");
 
@@ -5971,7 +6469,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
      * are each called from its own test
      */
     public void testChangingPrimary(boolean inUpdate, boolean withSuperPrimary) {
-        long rawContactId = createRawContact(new Account("a", "a"));
+        long rawContactId = RawContactUtil.createRawContact(mResolver, new Account("a", "a"));
         Uri mailUri1 = insertEmail(rawContactId, "test1@domain1.com", true);
 
         if (withSuperPrimary) {
@@ -6025,22 +6523,39 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         testChangingPrimary(true, true);
     }
 
+    public void testContactSortOrder() {
+        assertEquals(ContactsColumns.PHONEBOOK_BUCKET_PRIMARY + ", "
+                     + Contacts.SORT_KEY_PRIMARY,
+                     ContactsProvider2.getLocalizedSortOrder(Contacts.SORT_KEY_PRIMARY));
+        assertEquals(ContactsColumns.PHONEBOOK_BUCKET_ALTERNATIVE + ", "
+                     + Contacts.SORT_KEY_ALTERNATIVE,
+                     ContactsProvider2.getLocalizedSortOrder(Contacts.SORT_KEY_ALTERNATIVE));
+        assertEquals(ContactsColumns.PHONEBOOK_BUCKET_PRIMARY + " DESC, "
+                     + Contacts.SORT_KEY_PRIMARY + " DESC",
+                     ContactsProvider2.getLocalizedSortOrder(Contacts.SORT_KEY_PRIMARY + " DESC"));
+        String suffix = " COLLATE LOCALIZED DESC";
+        assertEquals(ContactsColumns.PHONEBOOK_BUCKET_ALTERNATIVE + suffix
+                     + ", " + Contacts.SORT_KEY_ALTERNATIVE + suffix,
+                     ContactsProvider2.getLocalizedSortOrder(Contacts.SORT_KEY_ALTERNATIVE
+                                                             + suffix));
+    }
+
     public void testContactCounts() {
         Uri uri = Contacts.CONTENT_URI.buildUpon()
                 .appendQueryParameter(ContactCounts.ADDRESS_BOOK_INDEX_EXTRAS, "true").build();
 
-        createRawContact();
-        createRawContactWithName("James", "Sullivan");
-        createRawContactWithName("The Abominable", "Snowman");
-        createRawContactWithName("Mike", "Wazowski");
-        createRawContactWithName("randall", "boggs");
-        createRawContactWithName("Boo", null);
-        createRawContactWithName("Mary", null);
-        createRawContactWithName("Roz", null);
+        RawContactUtil.createRawContact(mResolver);
+        RawContactUtil.createRawContactWithName(mResolver, "James", "Sullivan");
+        RawContactUtil.createRawContactWithName(mResolver, "The Abominable", "Snowman");
+        RawContactUtil.createRawContactWithName(mResolver, "Mike", "Wazowski");
+        RawContactUtil.createRawContactWithName(mResolver, "randall", "boggs");
+        RawContactUtil.createRawContactWithName(mResolver, "Boo", null);
+        RawContactUtil.createRawContactWithName(mResolver, "Mary", null);
+        RawContactUtil.createRawContactWithName(mResolver, "Roz", null);
 
         Cursor cursor = mResolver.query(uri,
                 new String[]{Contacts.DISPLAY_NAME},
-                null, null, Contacts.SORT_KEY_PRIMARY + " COLLATE LOCALIZED");
+                null, null, Contacts.SORT_KEY_PRIMARY);
 
         assertFirstLetterValues(cursor, "", "B", "J", "M", "R", "T");
         assertFirstLetterCounts(cursor,    1,   1,   1,   2,   2,   1);
@@ -6055,6 +6570,32 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         cursor.close();
     }
 
+    public void testContactCountsWithGermanNames() {
+        if (!hasGermanCollator()) {
+            return;
+        }
+        ContactLocaleUtils.setLocale(Locale.GERMANY);
+
+        Uri uri = Contacts.CONTENT_URI.buildUpon()
+                .appendQueryParameter(ContactCounts.ADDRESS_BOOK_INDEX_EXTRAS, "true").build();
+
+        RawContactUtil.createRawContactWithName(mResolver, "Josef", "Sacher");
+        RawContactUtil.createRawContactWithName(mResolver, "Franz", "Schiller");
+        RawContactUtil.createRawContactWithName(mResolver, "Eckart", "Steiff");
+        RawContactUtil.createRawContactWithName(mResolver, "Klaus", "Seiler");
+        RawContactUtil.createRawContactWithName(mResolver, "Lars", "Sultan");
+        RawContactUtil.createRawContactWithName(mResolver, "Heidi", "Rilke");
+        RawContactUtil.createRawContactWithName(mResolver, "Suse", "Thomas");
+
+        Cursor cursor = mResolver.query(uri,
+                new String[]{Contacts.DISPLAY_NAME},
+                null, null, Contacts.SORT_KEY_ALTERNATIVE);
+
+        assertFirstLetterValues(cursor, "R", "S", "Sch", "St", "T");
+        assertFirstLetterCounts(cursor,   1,   3,     1,    1,   1);
+        cursor.close();
+    }
+
     private void assertFirstLetterValues(Cursor cursor, String... expected) {
         String[] actual = cursor.getExtras()
                 .getStringArray(ContactCounts.EXTRA_ADDRESS_BOOK_INDEX_TITLES);
@@ -6132,7 +6673,8 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         values.put(RawContacts.ACCOUNT_NAME, red.name);
         values.put(RawContacts.ACCOUNT_TYPE, red.type);
 
-        final Uri insertUri = maybeAddAccountQueryParameters(RawContacts.CONTENT_URI, blue);
+        final Uri insertUri = TestUtil.maybeAddAccountQueryParameters(RawContacts.CONTENT_URI,
+                blue);
         try {
             mResolver.insert(insertUri, values);
             fail("Able to insert RawContact with inconsistent account details");
@@ -6146,7 +6688,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testProviderStatusOnlyLocalContacts() throws Exception {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         assertProviderStatus(ProviderStatus.STATUS_NORMAL);
         mResolver.delete(
                 ContentUris.withAppendedId(RawContacts.CONTENT_URI, rawContactId), null, null);
@@ -6155,8 +6697,8 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
 
     public void testProviderStatusWithAccounts() throws Exception {
         assertProviderStatus(ProviderStatus.STATUS_NO_ACCOUNTS_NO_CONTACTS);
-        mActor.setAccounts(new Account[]{ACCOUNT_1});
-        ((ContactsProvider2)getProvider()).onAccountsUpdated(new Account[]{ACCOUNT_1});
+        mActor.setAccounts(new Account[]{TestUtil.ACCOUNT_1});
+        ((ContactsProvider2)getProvider()).onAccountsUpdated(new Account[]{TestUtil.ACCOUNT_1});
         assertProviderStatus(ProviderStatus.STATUS_NORMAL);
         mActor.setAccounts(new Account[0]);
         ((ContactsProvider2)getProvider()).onAccountsUpdated(new Account[0]);
@@ -6211,11 +6753,13 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     private VCardTestUriCreator createVCardTestContacts() {
-        final long rawContactId1 = createRawContact(mAccount, RawContacts.SOURCE_ID, "4:12");
-        insertStructuredName(rawContactId1, "John", "Doe");
+        final long rawContactId1 = RawContactUtil.createRawContact(mResolver, mAccount,
+                RawContacts.SOURCE_ID, "4:12");
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "John", "Doe");
 
-        final long rawContactId2 = createRawContact(mAccount, RawContacts.SOURCE_ID, "3:4%121");
-        insertStructuredName(rawContactId2, "Jane", "Doh");
+        final long rawContactId2 = RawContactUtil.createRawContact(mResolver, mAccount,
+                RawContacts.SOURCE_ID, "3:4%121");
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Jane", "Doh");
 
         final long contactId1 = queryContactId(rawContactId1);
         final long contactId2 = queryContactId(rawContactId2);
@@ -6328,9 +6872,9 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         long g2 = createGroup(mAccount, "g2", "t2", 0, false /* autoAdd */, false /* favorite */);
         long g3 = createGroup(mAccountTwo, "g3", "t3", 0, true /* autoAdd */, false /* favorite */);
         long g4 = createGroup(mAccountTwo, "g4", "t4", 0, false /* autoAdd */, false/* favorite */);
-        long r1 = createRawContact(mAccount);
-        long r2 = createRawContact(mAccountTwo);
-        long r3 = createRawContact(null);
+        long r1 = RawContactUtil.createRawContact(mResolver, mAccount);
+        long r2 = RawContactUtil.createRawContact(mResolver, mAccountTwo);
+        long r3 = RawContactUtil.createRawContact(mResolver, null);
 
         Cursor c = queryGroupMemberships(mAccount);
         try {
@@ -6354,12 +6898,12 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testNoAutoAddMembershipAfterGroupCreation() {
-        long r1 = createRawContact(mAccount);
-        long r2 = createRawContact(mAccount);
-        long r3 = createRawContact(mAccount);
-        long r4 = createRawContact(mAccountTwo);
-        long r5 = createRawContact(mAccountTwo);
-        long r6 = createRawContact(null);
+        long r1 = RawContactUtil.createRawContact(mResolver, mAccount);
+        long r2 = RawContactUtil.createRawContact(mResolver, mAccount);
+        long r3 = RawContactUtil.createRawContact(mResolver, mAccount);
+        long r4 = RawContactUtil.createRawContact(mResolver, mAccountTwo);
+        long r5 = RawContactUtil.createRawContact(mResolver, mAccountTwo);
+        long r6 = RawContactUtil.createRawContact(mResolver, null);
 
         assertNoRowsAndClose(queryGroupMemberships(mAccount));
         assertNoRowsAndClose(queryGroupMemberships(mAccountTwo));
@@ -6378,13 +6922,13 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     // favorites group removed
     // no change to starred status
     public void testFavoritesMembershipAfterGroupCreation() {
-        long r1 = createRawContact(mAccount, RawContacts.STARRED, "1");
-        long r2 = createRawContact(mAccount);
-        long r3 = createRawContact(mAccount, RawContacts.STARRED, "1");
-        long r4 = createRawContact(mAccountTwo, RawContacts.STARRED, "1");
-        long r5 = createRawContact(mAccountTwo);
-        long r6 = createRawContact(null, RawContacts.STARRED, "1");
-        long r7 = createRawContact(null);
+        long r1 = RawContactUtil.createRawContact(mResolver, mAccount, RawContacts.STARRED, "1");
+        long r2 = RawContactUtil.createRawContact(mResolver, mAccount);
+        long r3 = RawContactUtil.createRawContact(mResolver, mAccount, RawContacts.STARRED, "1");
+        long r4 = RawContactUtil.createRawContact(mResolver, mAccountTwo, RawContacts.STARRED, "1");
+        long r5 = RawContactUtil.createRawContact(mResolver, mAccountTwo);
+        long r6 = RawContactUtil.createRawContact(mResolver, null, RawContacts.STARRED, "1");
+        long r7 = RawContactUtil.createRawContact(mResolver, null);
 
         assertNoRowsAndClose(queryGroupMemberships(mAccount));
         assertNoRowsAndClose(queryGroupMemberships(mAccountTwo));
@@ -6454,9 +6998,9 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         long g2 = createGroup(mAccount, "g2", "t2", 0, false /* autoAdd */, false/* favorite */);
         long g4 = createGroup(mAccountTwo, "g4", "t4", 0, false /* autoAdd */, true /* favorite */);
         long g5 = createGroup(mAccountTwo, "g5", "t5", 0, false /* autoAdd */, false/* favorite */);
-        long r1 = createRawContact(mAccount, RawContacts.STARRED, "1");
-        long r2 = createRawContact(mAccount);
-        long r3 = createRawContact(mAccountTwo);
+        long r1 = RawContactUtil.createRawContact(mResolver, mAccount, RawContacts.STARRED, "1");
+        long r2 = RawContactUtil.createRawContact(mResolver, mAccount);
+        long r3 = RawContactUtil.createRawContact(mResolver, mAccountTwo);
 
         assertNoRowsAndClose(queryGroupMemberships(mAccountTwo));
         Cursor c = queryGroupMemberships(mAccount);
@@ -6529,9 +7073,9 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         long g2 = createGroup(mAccount, "g2", "t2", 0, false /* autoAdd */, false/* favorite */);
         long g4 = createGroup(mAccountTwo, "g4", "t4", 0, false /* autoAdd */, true /* favorite */);
         long g5 = createGroup(mAccountTwo, "g5", "t5", 0, false /* autoAdd */, false/* favorite */);
-        long r1 = createRawContact(mAccount);
-        long r2 = createRawContact(mAccount);
-        long r3 = createRawContact(mAccountTwo);
+        long r1 = RawContactUtil.createRawContact(mResolver, mAccount);
+        long r2 = RawContactUtil.createRawContact(mResolver, mAccount);
+        long r3 = RawContactUtil.createRawContact(mResolver, mAccountTwo);
 
         assertFalse(queryRawContactIsStarred(r1));
         assertFalse(queryRawContactIsStarred(r2));
@@ -6595,7 +7139,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testReadOnlyRawContact() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         Uri rawContactUri = ContentUris.withAppendedId(RawContacts.CONTENT_URI, rawContactId);
         storeValue(rawContactUri, RawContacts.CUSTOM_RINGTONE, "first");
         storeValue(rawContactUri, RawContacts.RAW_CONTACT_IS_READ_ONLY, 1);
@@ -6611,7 +7155,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testReadOnlyDataRow() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         Uri emailUri = insertEmail(rawContactId, "email");
         Uri phoneUri = insertPhoneNumber(rawContactId, "555-1111");
 
@@ -6629,11 +7173,11 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
     }
 
     public void testContactWithReadOnlyRawContact() {
-        long rawContactId1 = createRawContact();
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver);
         Uri rawContactUri1 = ContentUris.withAppendedId(RawContacts.CONTENT_URI, rawContactId1);
         storeValue(rawContactUri1, RawContacts.CUSTOM_RINGTONE, "first");
 
-        long rawContactId2 = createRawContact();
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver);
         Uri rawContactUri2 = ContentUris.withAppendedId(RawContacts.CONTENT_URI, rawContactId2);
         storeValue(rawContactUri2, RawContacts.CUSTOM_RINGTONE, "second");
         storeValue(rawContactUri2, RawContacts.RAW_CONTACT_IS_READ_ONLY, 1);
@@ -6742,23 +7286,23 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
 
         final long startTime = sMockClock.currentTimeMillis();
 
-        final long rid1 = createRawContactWithName("contact", "a");
+        final long rid1 = RawContactUtil.createRawContactWithName(mResolver, "contact", "a");
         final long did1a = ContentUris.parseId(insertEmail(rid1, "email_1_a@email.com"));
         final long did1b = ContentUris.parseId(insertEmail(rid1, "email_1_b@email.com"));
         final long did1p = ContentUris.parseId(insertPhoneNumber(rid1, "555-555-5555"));
 
-        final long rid2 = createRawContactWithName("contact", "b");
+        final long rid2 = RawContactUtil.createRawContactWithName(mResolver, "contact", "b");
         final long did2a = ContentUris.parseId(insertEmail(rid2, "email_2_a@email.com"));
         final long did2p = ContentUris.parseId(insertPhoneNumber(rid2, "555-555-5556"));
 
         // Aggregate 1 and 2
         setAggregationException(AggregationExceptions.TYPE_KEEP_TOGETHER, rid1, rid2);
 
-        final long rid3 = createRawContactWithName("contact", "c");
+        final long rid3 = RawContactUtil.createRawContactWithName(mResolver, "contact", "c");
         final long did3a = ContentUris.parseId(insertEmail(rid3, "email_3@email.com"));
         final long did3p = ContentUris.parseId(insertPhoneNumber(rid3, "555-3333"));
 
-        final long rid4 = createRawContactWithName("contact", "d");
+        final long rid4 = RawContactUtil.createRawContactWithName(mResolver, "contact", "d");
         final long did4p = ContentUris.parseId(insertPhoneNumber(rid4, "555-4444"));
 
         final long cid1 = queryContactId(rid1);
@@ -6913,8 +7457,271 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         assertTrue(mResolver.delete(DataUsageFeedback.DELETE_USAGE_URI, null, null) > 0);
     }
 
+    /*******************************************************
+     * Delta api tests.
+     */
+    public void testContactDelete_hasDeleteLog() {
+        sMockClock.install();
+        long start = sMockClock.currentTimeMillis();
+        DatabaseAsserts.ContactIdPair ids = assertContactCreateDelete();
+        DatabaseAsserts.assertHasDeleteLogGreaterThan(mResolver, ids.mContactId, start);
+
+        // Clean up. Must also remove raw contact.
+        RawContactUtil.delete(mResolver, ids.mRawContactId, true);
+    }
+
+    public void testContactDelete_marksRawContactsForDeletion() {
+        DatabaseAsserts.ContactIdPair ids = assertContactCreateDelete();
+
+        String[] projection = new String[]{ContactsContract.RawContacts.DIRTY,
+                ContactsContract.RawContacts.DELETED};
+        List<String[]> records = RawContactUtil.queryByContactId(mResolver, ids.mContactId,
+                projection);
+        for (String[] arr : records) {
+            assertEquals("1", arr[0]);
+            assertEquals("1", arr[1]);
+        }
+
+        // Clean up
+        RawContactUtil.delete(mResolver, ids.mRawContactId, true);
+    }
+
+    public void testContactUpdate_updatesContactUpdatedTimestamp() {
+        sMockClock.install();
+        DatabaseAsserts.ContactIdPair ids = DatabaseAsserts.assertAndCreateContact(mResolver);
+
+        long baseTime = ContactUtil.queryContactLastUpdatedTimestamp(mResolver, ids.mContactId);
+
+        ContentValues values = new ContentValues();
+        values.put(ContactsContract.Contacts.STARRED, 1);
+
+        sMockClock.advance();
+        ContactUtil.update(mResolver, ids.mContactId, values);
+
+        long newTime = ContactUtil.queryContactLastUpdatedTimestamp(mResolver, ids.mContactId);
+        assertTrue(newTime > baseTime);
+
+        // Clean up
+        RawContactUtil.delete(mResolver, ids.mRawContactId, true);
+    }
+
+    // This implicitly tests the Contact create case.
+    public void testRawContactCreate_updatesContactUpdatedTimestamp() {
+        long startTime = System.currentTimeMillis();
+
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver);
+        long lastUpdated = getContactLastUpdatedTimestampByRawContactId(mResolver, rawContactId);
+
+        assertTrue(lastUpdated > startTime);
+
+        // Clean up
+        RawContactUtil.delete(mResolver, rawContactId, true);
+    }
+
+    public void testRawContactUpdate_updatesContactUpdatedTimestamp() {
+        DatabaseAsserts.ContactIdPair ids = DatabaseAsserts.assertAndCreateContact(mResolver);
+
+        long baseTime = ContactUtil.queryContactLastUpdatedTimestamp(mResolver, ids.mContactId);
+
+        ContentValues values = new ContentValues();
+        values.put(ContactsContract.RawContacts.STARRED, 1);
+        RawContactUtil.update(mResolver, ids.mRawContactId, values);
+
+        long newTime = ContactUtil.queryContactLastUpdatedTimestamp(mResolver, ids.mContactId);
+        assertTrue(newTime > baseTime);
+
+        // Clean up
+        RawContactUtil.delete(mResolver, ids.mRawContactId, true);
+    }
+
+    public void testRawContactPsuedoDelete_hasDeleteLogForContact() {
+        DatabaseAsserts.ContactIdPair ids = DatabaseAsserts.assertAndCreateContact(mResolver);
+
+        long baseTime = ContactUtil.queryContactLastUpdatedTimestamp(mResolver, ids.mContactId);
+
+        RawContactUtil.delete(mResolver, ids.mRawContactId, false);
+
+        DatabaseAsserts.assertHasDeleteLogGreaterThan(mResolver, ids.mContactId, baseTime);
+
+        // clean up
+        RawContactUtil.delete(mResolver, ids.mRawContactId, true);
+    }
+
+    public void testRawContactDelete_hasDeleteLogForContact() {
+        DatabaseAsserts.ContactIdPair ids = DatabaseAsserts.assertAndCreateContact(mResolver);
+
+        long baseTime = ContactUtil.queryContactLastUpdatedTimestamp(mResolver, ids.mContactId);
+
+        RawContactUtil.delete(mResolver, ids.mRawContactId, true);
+
+        DatabaseAsserts.assertHasDeleteLogGreaterThan(mResolver, ids.mContactId, baseTime);
+
+        // already clean
+    }
+
+    private long getContactLastUpdatedTimestampByRawContactId(ContentResolver resolver,
+            long rawContactId) {
+        long contactId = RawContactUtil.queryContactIdByRawContactId(mResolver, rawContactId);
+        MoreAsserts.assertNotEqual(CommonDatabaseUtils.NOT_FOUND, contactId);
+
+        return ContactUtil.queryContactLastUpdatedTimestamp(mResolver, contactId);
+    }
+
+    public void testDataInsert_updatesContactLastUpdatedTimestamp() {
+        sMockClock.install();
+        DatabaseAsserts.ContactIdPair ids = DatabaseAsserts.assertAndCreateContact(mResolver);
+        long baseTime = ContactUtil.queryContactLastUpdatedTimestamp(mResolver, ids.mContactId);
+
+        sMockClock.advance();
+        insertPhoneNumberAndReturnDataId(ids.mRawContactId);
+
+        long newTime = ContactUtil.queryContactLastUpdatedTimestamp(mResolver, ids.mContactId);
+        assertTrue(newTime > baseTime);
+
+        // Clean up
+        RawContactUtil.delete(mResolver, ids.mRawContactId, true);
+    }
+
+    public void testDataDelete_updatesContactLastUpdatedTimestamp() {
+        sMockClock.install();
+        DatabaseAsserts.ContactIdPair ids = DatabaseAsserts.assertAndCreateContact(mResolver);
+
+        long dataId = insertPhoneNumberAndReturnDataId(ids.mRawContactId);
+
+        long baseTime = ContactUtil.queryContactLastUpdatedTimestamp(mResolver, ids.mContactId);
+
+        sMockClock.advance();
+        DataUtil.delete(mResolver, dataId);
+
+        long newTime = ContactUtil.queryContactLastUpdatedTimestamp(mResolver, ids.mContactId);
+        assertTrue(newTime > baseTime);
+
+        // Clean up
+        RawContactUtil.delete(mResolver, ids.mRawContactId, true);
+    }
+
+    public void testDataUpdate_updatesContactLastUpdatedTimestamp() {
+        sMockClock.install();
+        DatabaseAsserts.ContactIdPair ids = DatabaseAsserts.assertAndCreateContact(mResolver);
+
+        long dataId = insertPhoneNumberAndReturnDataId(ids.mRawContactId);
+
+        long baseTime = ContactUtil.queryContactLastUpdatedTimestamp(mResolver, ids.mContactId);
+
+        sMockClock.advance();
+        ContentValues values = new ContentValues();
+        values.put(ContactsContract.CommonDataKinds.Phone.NUMBER, "555-5555");
+        DataUtil.update(mResolver, dataId, values);
+
+        long newTime = ContactUtil.queryContactLastUpdatedTimestamp(mResolver, ids.mContactId);
+        assertTrue(newTime > baseTime);
+
+        // Clean up
+        RawContactUtil.delete(mResolver, ids.mRawContactId, true);
+    }
+
+    private long insertPhoneNumberAndReturnDataId(long rawContactId) {
+        Uri uri = insertPhoneNumber(rawContactId, "1-800-GOOG-411");
+        return ContentUris.parseId(uri);
+    }
+
+    public void testDeletedContactsDelete_isUnsupported() {
+        final Uri URI = ContactsContract.DeletedContacts.CONTENT_URI;
+        DatabaseAsserts.assertDeleteIsUnsupported(mResolver, URI);
+
+        Uri uri = ContentUris.withAppendedId(URI, 1L);
+        DatabaseAsserts.assertDeleteIsUnsupported(mResolver, uri);
+    }
+
+    public void testDeletedContactsInsert_isUnsupported() {
+        final Uri URI = ContactsContract.DeletedContacts.CONTENT_URI;
+        DatabaseAsserts.assertInsertIsUnsupported(mResolver, URI);
+    }
+
+
+    public void testQueryDeletedContactsByContactId() {
+        DatabaseAsserts.ContactIdPair ids = assertContactCreateDelete();
+
+        MoreAsserts.assertNotEqual(CommonDatabaseUtils.NOT_FOUND,
+                DeletedContactUtil.queryDeletedTimestampForContactId(mResolver, ids.mContactId));
+    }
+
+    public void testQueryDeletedContactsAll() {
+        final int numDeletes = 10;
+
+        // Since we cannot clean out delete log from previous tests, we need to account for that
+        // by querying for the count first.
+        final long startCount = DeletedContactUtil.getCount(mResolver);
+
+        for (int i = 0; i < numDeletes; i++) {
+            assertContactCreateDelete();
+        }
+
+        final long endCount = DeletedContactUtil.getCount(mResolver);
+
+        assertEquals(numDeletes, endCount - startCount);
+    }
+
+    public void testQueryDeletedContactsSinceTimestamp() {
+        sMockClock.install();
+
+        // Before
+        final HashSet<Long> beforeIds = new HashSet<Long>();
+        beforeIds.add(assertContactCreateDelete().mContactId);
+        beforeIds.add(assertContactCreateDelete().mContactId);
+
+        final long start = sMockClock.currentTimeMillis();
+
+        // After
+        final HashSet<Long> afterIds = new HashSet<Long>();
+        afterIds.add(assertContactCreateDelete().mContactId);
+        afterIds.add(assertContactCreateDelete().mContactId);
+        afterIds.add(assertContactCreateDelete().mContactId);
+
+        final String[] projection = new String[]{
+                ContactsContract.DeletedContacts.CONTACT_ID,
+                ContactsContract.DeletedContacts.CONTACT_DELETED_TIMESTAMP
+        };
+        final List<String[]> records = DeletedContactUtil.querySinceTimestamp(mResolver, projection,
+                start);
+        for (String[] record : records) {
+            // Check ids to make sure we only have the ones that came after the time.
+            final long contactId = Long.parseLong(record[0]);
+            assertFalse(beforeIds.contains(contactId));
+            assertTrue(afterIds.contains(contactId));
+
+            // Check times to make sure they came after
+            assertTrue(Long.parseLong(record[1]) > start);
+        }
+    }
+
+    /**
+     * Create a contact. Assert it's not present in the delete log. Delete it.
+     * And assert that the contact record is no longer present.
+     *
+     * @return The contact id and raw contact id that was created.
+     */
+    private DatabaseAsserts.ContactIdPair assertContactCreateDelete() {
+        DatabaseAsserts.ContactIdPair ids = DatabaseAsserts.assertAndCreateContact(mResolver);
+
+        assertEquals(CommonDatabaseUtils.NOT_FOUND,
+                DeletedContactUtil.queryDeletedTimestampForContactId(mResolver, ids.mContactId));
+
+        sMockClock.advance();
+        ContactUtil.delete(mResolver, ids.mContactId);
+
+        assertFalse(ContactUtil.recordExistsForContactId(mResolver, ids.mContactId));
+
+        return ids;
+    }
+    /**
+     * End delta api tests.
+     ******************************************************/
+
+
     private Cursor queryGroupMemberships(Account account) {
-        Cursor c = mResolver.query(maybeAddAccountQueryParameters(Data.CONTENT_URI, account),
+        Cursor c = mResolver.query(TestUtil.maybeAddAccountQueryParameters(Data.CONTENT_URI,
+                account),
                 new String[]{GroupMembership.GROUP_ROW_ID, GroupMembership.RAW_CONTACT_ID},
                 Data.MIMETYPE + "=?", new String[]{GroupMembership.CONTENT_ITEM_TYPE},
                 GroupMembership.GROUP_SOURCE_ID);
@@ -6966,7 +7773,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
             long groupId, int chatMode) {
         long rawContactId = createRawContact(values, phoneNumber, email, presenceStatus,
                 timesContacted, starred, groupId, chatMode);
-        insertStructuredName(rawContactId, firstName, givenName);
+        DataUtil.insertStructuredName(mResolver, rawContactId, firstName, givenName);
         return rawContactId;
     }
 
@@ -6975,7 +7782,7 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
             long groupId, int chatMode, boolean isUserProfile) {
         long rawContactId = createRawContact(values, phoneNumber, email, presenceStatus,
                 timesContacted, starred, groupId, chatMode, isUserProfile);
-        insertStructuredName(rawContactId, firstName, givenName);
+        DataUtil.insertStructuredName(mResolver, rawContactId, firstName, givenName);
         return rawContactId;
     }
 
@@ -7088,6 +7895,12 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
         }
     }
 
+    private void updateDataUsageFeedback(String usageType, Uri resultUri) {
+        final long id = ContentUris.parseId(resultUri);
+        final boolean successful = updateDataUsageFeedback(usageType, id) > 0;
+        assertTrue(successful);
+    }
+
     private int updateDataUsageFeedback(String usageType, long... ids) {
         final StringBuilder idList = new StringBuilder();
         for (long id : ids) {
@@ -7099,4 +7912,34 @@ public class ContactsProvider2Test extends BaseContactsProvider2Test {
                 .appendQueryParameter(DataUsageFeedback.USAGE_TYPE, usageType)
                 .build(), new ContentValues(), null, null);
     }
+
+    private boolean hasChineseCollator() {
+        final Locale locale[] = Collator.getAvailableLocales();
+        for (int i = 0; i < locale.length; i++) {
+            if (locale[i].equals(Locale.CHINA)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private boolean hasJapaneseCollator() {
+        final Locale locale[] = Collator.getAvailableLocales();
+        for (int i = 0; i < locale.length; i++) {
+            if (locale[i].equals(Locale.JAPAN)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private boolean hasGermanCollator() {
+        final Locale locale[] = Collator.getAvailableLocales();
+        for (int i = 0; i < locale.length; i++) {
+            if (locale[i].equals(Locale.GERMANY)) {
+                return true;
+            }
+        }
+        return false;
+    }
 }
diff --git a/tests/src/com/android/providers/contacts/ContactsProvider2TransactionTest.java b/tests/src/com/android/providers/contacts/ContactsProvider2TransactionTest.java
new file mode 100644
index 0000000..6a82bf9
--- /dev/null
+++ b/tests/src/com/android/providers/contacts/ContactsProvider2TransactionTest.java
@@ -0,0 +1,309 @@
+/*
+ * Copyright (C) 2012 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.providers.contacts;
+
+import static com.android.providers.contacts.TestUtils.cv;
+
+import com.google.android.collect.Lists;
+
+import android.content.ContentProviderOperation;
+import android.content.ContentValues;
+import android.provider.ContactsContract;
+import android.provider.ContactsContract.CommonDataKinds.StructuredName;
+import android.provider.ContactsContract.Contacts;
+import android.provider.ContactsContract.Data;
+import android.provider.ContactsContract.Profile;
+import android.provider.ContactsContract.RawContacts;
+import android.test.suitebuilder.annotation.LargeTest;
+import android.util.Log;
+
+import java.util.ArrayList;
+
+/**
+ * Tests to make sure we're handling DB transactions properly in regard to two databases,
+ * the profile db and the contacts db.
+ */
+@LargeTest
+public class ContactsProvider2TransactionTest extends BaseContactsProvider2Test {
+    private SynchronousContactsProvider2 mProvider;
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+
+        mProvider = (SynchronousContactsProvider2) getProvider();
+    }
+
+    @Override
+    protected void tearDown() throws Exception {
+        super.tearDown();
+
+        mProvider = null;
+    }
+
+    /**
+     * Make sure we start/finish transactions on the right databases for insert.
+     */
+    public void testTransactionCallback_insert() {
+
+        final ContentValues values = cv(RawContacts.LAST_TIME_CONTACTED, 12345);
+
+        // Insert a raw contact.
+        mProvider.resetTrasactionCallbackCalledFlags();
+        mResolver.insert(RawContacts.CONTENT_URI, values);
+
+        // Make sure we only COMMIT on the contacts DB, but there was no transaction on the
+        // profile db.
+        mProvider.assertCommitTransactionCalledForContactMode();
+        mProvider.assertNoTransactionsForProfileMode();
+
+
+        // Insert a profile raw contact.
+        mProvider.resetTrasactionCallbackCalledFlags();
+        mResolver.insert(Profile.CONTENT_RAW_CONTACTS_URI, values);
+
+        // Even though we only touched the profile DB, we also start and finish a transaction
+        // on the contacts db.  AbstractContactsProvider does that to avoid deadlocks.
+        mProvider.assertCommitTransactionCalledForContactMode();
+        mProvider.assertCommitTransactionCalledForProfileMode();
+    }
+
+    /**
+     * Make sure we start/finish transactions on the right databases for update.
+     */
+    public void testTransactionCallback_update() {
+
+        final ContentValues values = cv(RawContacts.LAST_TIME_CONTACTED, 12345);
+
+        // Make sure to create a raw contact and a profile raw contact.
+        mResolver.insert(RawContacts.CONTENT_URI, values);
+        mResolver.insert(Profile.CONTENT_RAW_CONTACTS_URI, values);
+
+        values.clear();
+        values.put(RawContacts.LAST_TIME_CONTACTED, 99999);
+
+        // Update all raw contacts.
+        mProvider.resetTrasactionCallbackCalledFlags();
+        assertTrue(mResolver.update(RawContacts.CONTENT_URI, values, null, null) > 0);
+
+        // Make sure we only COMMIT on the contacts DB, but there was no transaction on the
+        // profile db.
+        mProvider.assertCommitTransactionCalledForContactMode();
+        mProvider.assertNoTransactionsForProfileMode();
+
+
+        // Update all profile raw contacts.
+        mProvider.resetTrasactionCallbackCalledFlags();
+        assertTrue(mResolver.update(Profile.CONTENT_RAW_CONTACTS_URI, values, null, null) > 0);
+
+        // Even though we only touched the profile DB, we also start and finish a transaction
+        // on the contacts db.  AbstractContactsProvider does that to avoid deadlocks.
+        mProvider.assertCommitTransactionCalledForContactMode();
+        mProvider.assertCommitTransactionCalledForProfileMode();
+    }
+
+    /**
+     * Make sure we start/finish transactions on the right databases for delete.
+     */
+    public void testTransactionCallback_delete() {
+
+        final ContentValues values = cv(RawContacts.LAST_TIME_CONTACTED, 12345);
+
+        // Make sure to create a raw contact and a profile raw contact.
+        mResolver.insert(RawContacts.CONTENT_URI, values);
+        mResolver.insert(Profile.CONTENT_RAW_CONTACTS_URI, values);
+
+        // Delete all raw contacts.
+        mProvider.resetTrasactionCallbackCalledFlags();
+        assertTrue(mResolver.delete(RawContacts.CONTENT_URI, null, null) > 0);
+
+        // Make sure we only COMMIT on the contacts DB, but there was no transaction on the
+        // profile db.
+        mProvider.assertCommitTransactionCalledForContactMode();
+        mProvider.assertNoTransactionsForProfileMode();
+
+        // Delete all profile raw contact.
+        mProvider.resetTrasactionCallbackCalledFlags();
+        assertTrue(mResolver.delete(Profile.CONTENT_RAW_CONTACTS_URI, null, null) > 0);
+
+        // Even though we only touched the profile DB, we also start and finish a transaction
+        // on the contacts db.  AbstractContactsProvider does that to avoid deadlocks.
+        mProvider.assertCommitTransactionCalledForContactMode();
+        mProvider.assertCommitTransactionCalledForProfileMode();
+    }
+    /**
+     * Make sure we start/finish transactions on the right databases for bulk insert.
+     */
+    public void testTransactionCallback_bulkInsert() {
+
+        final ContentValues values = cv(RawContacts.LAST_TIME_CONTACTED, 12345);
+
+        // Insert a raw contact.
+        mProvider.resetTrasactionCallbackCalledFlags();
+        mResolver.bulkInsert(RawContacts.CONTENT_URI, new ContentValues[] {values});
+
+        // Make sure we only COMMIT on the contacts DB, but there was no transaction on the
+        // profile db.
+        mProvider.assertCommitTransactionCalledForContactMode();
+        mProvider.assertNoTransactionsForProfileMode();
+
+
+        // Insert a profile raw contact.
+        mProvider.resetTrasactionCallbackCalledFlags();
+        mResolver.bulkInsert(Profile.CONTENT_RAW_CONTACTS_URI, new ContentValues[] {values});
+
+        // Even though we only touched the profile DB, we also start and finish a transaction
+        // on the contacts db.  AbstractContactsProvider does that to avoid deadlocks.
+        mProvider.assertCommitTransactionCalledForContactMode();
+        mProvider.assertCommitTransactionCalledForProfileMode();
+    }
+
+    /**
+     * Add an operation to create a raw contact.
+     */
+    private static void addInsertContactOperations(ArrayList<ContentProviderOperation> ops) {
+        ContentProviderOperation.Builder b;
+        b = ContentProviderOperation.newInsert(RawContacts.CONTENT_URI);
+        b.withValue(RawContacts.STARRED, 1);
+        b.withValue(RawContacts.TIMES_CONTACTED, 200001);
+        ops.add(b.build());
+
+        b = ContentProviderOperation.newInsert(Data.CONTENT_URI);
+        b.withValueBackReference(Data.RAW_CONTACT_ID, ops.size() - 1);
+        b.withValue(StructuredName.DISPLAY_NAME, "Regular Contact");
+        b.withValue(StructuredName.GIVEN_NAME, "Regular");
+        b.withValue(StructuredName.FAMILY_NAME, "Contact");
+        b.withValue(Data.MIMETYPE, StructuredName.CONTENT_ITEM_TYPE);
+        ops.add(b.build());
+    }
+
+    /**
+     * Check for a contact created that'll be created for {@link #addInsertContactOperations}.
+     */
+    private void checkStoredContact() {
+        assertStoredValues(Contacts.CONTENT_URI, cv(
+                Contacts.DISPLAY_NAME, "Regular Contact",
+                RawContacts.TIMES_CONTACTED, 200001
+                ));
+    }
+
+    /**
+     * Add an operation to create a profile raw contact.
+     */
+    private static void addInsertProfileOperations(ArrayList<ContentProviderOperation> ops) {
+        ContentProviderOperation.Builder b;
+        b = ContentProviderOperation.newInsert(Profile.CONTENT_RAW_CONTACTS_URI);
+        b.withValue(RawContacts.STARRED, 1);
+        b.withValue(RawContacts.TIMES_CONTACTED, 100001);
+        ops.add(b.build());
+
+        b = ContentProviderOperation.newInsert(Data.CONTENT_URI);
+        b.withValueBackReference(Data.RAW_CONTACT_ID, ops.size() - 1);
+        b.withValue(StructuredName.DISPLAY_NAME, "Profile Contact");
+        b.withValue(StructuredName.GIVEN_NAME, "Profile");
+        b.withValue(StructuredName.FAMILY_NAME, "Contact");
+        b.withValue(Data.MIMETYPE, StructuredName.CONTENT_ITEM_TYPE);
+        ops.add(b.build());
+    }
+
+    /**
+     * Check for a profile contact created that'll be created for
+     * {@link #addInsertProfileOperations}.
+     */
+    private void checkStoredProfile() {
+        assertStoredValues(Profile.CONTENT_URI, cv(
+                Contacts.DISPLAY_NAME, "Profile Contact",
+                RawContacts.TIMES_CONTACTED, 100001
+                ));
+    }
+
+    public void testTransactionCallback_contactBatch() throws Exception {
+        final ArrayList<ContentProviderOperation> ops = Lists.newArrayList();
+
+        addInsertContactOperations(ops);
+
+        mProvider.resetTrasactionCallbackCalledFlags();
+
+        // Execute the operations.
+        mResolver.applyBatch(ContactsContract.AUTHORITY, ops);
+
+        // Check the result
+        mProvider.assertCommitTransactionCalledForContactMode();
+        mProvider.assertNoTransactionsForProfileMode();
+
+        checkStoredContact();
+    }
+
+    public void testTransactionCallback_profileBatch() throws Exception {
+        final ArrayList<ContentProviderOperation> ops = Lists.newArrayList();
+
+        addInsertProfileOperations(ops);
+
+        mProvider.resetTrasactionCallbackCalledFlags();
+
+        // Execute the operations.
+        mResolver.applyBatch(ContactsContract.AUTHORITY, ops);
+
+        // Check the result
+        mProvider.assertCommitTransactionCalledForContactMode();
+        mProvider.assertCommitTransactionCalledForProfileMode();
+
+        checkStoredProfile();
+    }
+
+    public void testTransactionCallback_mixedBatch() throws Exception {
+        final ArrayList<ContentProviderOperation> ops = Lists.newArrayList();
+
+        // Create a raw contact and a profile raw contact in a single batch.
+
+        addInsertContactOperations(ops);
+        addInsertProfileOperations(ops);
+
+        mProvider.resetTrasactionCallbackCalledFlags();
+
+        // Execute the operations.
+        mResolver.applyBatch(ContactsContract.AUTHORITY, ops);
+
+        // Check the result
+        mProvider.assertCommitTransactionCalledForContactMode();
+        mProvider.assertCommitTransactionCalledForProfileMode();
+
+        checkStoredProfile();
+        checkStoredContact();
+    }
+
+    public void testTransactionCallback_mixedBatchReversed() throws Exception {
+        final ArrayList<ContentProviderOperation> ops = Lists.newArrayList();
+
+        // Create a profile raw contact and a raw contact in a single batch.
+
+        addInsertProfileOperations(ops);
+        addInsertContactOperations(ops);
+
+        mProvider.resetTrasactionCallbackCalledFlags();
+
+        // Execute the operations.
+        mResolver.applyBatch(ContactsContract.AUTHORITY, ops);
+
+        // Check the result
+        mProvider.assertCommitTransactionCalledForContactMode();
+        mProvider.assertCommitTransactionCalledForProfileMode();
+
+        checkStoredProfile();
+        checkStoredContact();
+    }
+}
diff --git a/tests/src/com/android/providers/contacts/DirectoryTest.java b/tests/src/com/android/providers/contacts/DirectoryTest.java
index e9592c1..99f05ce 100644
--- a/tests/src/com/android/providers/contacts/DirectoryTest.java
+++ b/tests/src/com/android/providers/contacts/DirectoryTest.java
@@ -26,7 +26,9 @@ import android.provider.ContactsContract.CommonDataKinds.GroupMembership;
 import android.provider.ContactsContract.Contacts;
 import android.provider.ContactsContract.Data;
 import android.provider.ContactsContract.Directory;
-import android.test.suitebuilder.annotation.MediumTest;;
+import android.test.suitebuilder.annotation.MediumTest;
+
+import com.android.providers.contacts.testutil.RawContactUtil;
 
 
 /**
@@ -74,7 +76,8 @@ public class DirectoryTest extends BaseContactsProvider2Test {
     }
 
     public void testForwardingToLocalContacts() {
-        long contactId = queryContactId(createRawContactWithName("John", "Doe"));
+        long contactId = queryContactId(RawContactUtil.createRawContactWithName(mResolver, "John",
+                "Doe"));
 
         Uri contentUri = Contacts.CONTENT_URI.buildUpon().appendQueryParameter(
                 ContactsContract.DIRECTORY_PARAM_KEY, String.valueOf(Directory.DEFAULT)).build();
@@ -92,13 +95,14 @@ public class DirectoryTest extends BaseContactsProvider2Test {
     public void testForwardingToLocalInvisibleContacts() {
 
         // Visible because there is no account
-        long contactId1 = queryContactId(createRawContactWithName("Bob", "Parr"));
+        long contactId1 = queryContactId(RawContactUtil.createRawContactWithName(mResolver, "Bob",
+                "Parr"));
 
         Account account = new Account("accountName", "accountType");
         long groupId = createGroup(account, "sid", "def",
                 0 /* visible */,  true /* auto-add */, false /* fav */);
-        long contactId2 = queryContactId(createRawContactWithName("Helen", "Parr",
-                account));
+        long contactId2 = queryContactId(RawContactUtil.createRawContactWithName(mResolver, "Helen",
+                "Parr", account));
 
         Uri contentUri = Contacts.CONTENT_URI.buildUpon().appendQueryParameter(
                 ContactsContract.DIRECTORY_PARAM_KEY, String.valueOf(Directory.LOCAL_INVISIBLE))
diff --git a/tests/src/com/android/providers/contacts/EvenMoreAsserts.java b/tests/src/com/android/providers/contacts/EvenMoreAsserts.java
index c73128a..1fc15f2 100644
--- a/tests/src/com/android/providers/contacts/EvenMoreAsserts.java
+++ b/tests/src/com/android/providers/contacts/EvenMoreAsserts.java
@@ -16,19 +16,19 @@
 
 package com.android.providers.contacts;
 
-import com.google.android.collect.Sets;
-
 import android.content.Context;
 import android.graphics.BitmapFactory;
 
+import com.google.android.collect.Sets;
+
+import junit.framework.Assert;
+
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Arrays;
 import java.util.Set;
 
-import junit.framework.Assert;
-
 /**
  * Contains additional assertion methods not found in Junit or MoreAsserts.
  */
diff --git a/tests/src/com/android/providers/contacts/FastScrollingIndexCacheTest.java b/tests/src/com/android/providers/contacts/FastScrollingIndexCacheTest.java
index 7ca2a87..bda7cc9 100644
--- a/tests/src/com/android/providers/contacts/FastScrollingIndexCacheTest.java
+++ b/tests/src/com/android/providers/contacts/FastScrollingIndexCacheTest.java
@@ -16,8 +16,6 @@
 
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.util.MockSharedPreferences;
-
 import android.net.Uri;
 import android.os.Bundle;
 import android.provider.ContactsContract.ContactCounts;
@@ -27,6 +25,8 @@ import android.test.AndroidTestCase;
 import android.test.MoreAsserts;
 import android.test.suitebuilder.annotation.SmallTest;
 
+import com.android.providers.contacts.util.MockSharedPreferences;
+
 @SmallTest
 public class FastScrollingIndexCacheTest extends AndroidTestCase {
     private MockSharedPreferences mPrefs;
@@ -54,7 +54,7 @@ public class FastScrollingIndexCacheTest extends AndroidTestCase {
         super.setUp();
 
         mPrefs = new MockSharedPreferences();
-        mCache = new FastScrollingIndexCache(mPrefs);
+        mCache = FastScrollingIndexCache.getInstanceForTest(mPrefs);
     }
 
     private void assertBundle(String[] expectedTitles, int[] expectedCounts, Bundle actual) {
@@ -141,7 +141,7 @@ public class FastScrollingIndexCacheTest extends AndroidTestCase {
         // Now, create a new cache instance (with the same shared preferences)
         // It should restore the cache content from the preferences...
 
-        FastScrollingIndexCache cache2 = new FastScrollingIndexCache(mPrefs);
+        FastScrollingIndexCache cache2 = FastScrollingIndexCache.getInstanceForTest(mPrefs);
         assertBundle(TITLES_0, COUNTS_0, cache2.get(null, null, null, null, null));
         assertBundle(TITLES_1, COUNTS_1, cache2.get(URI_A, "*s*", PROJECTION_0, "*so*", "*ce*"));
         assertBundle(TITLES_2, COUNTS_2, cache2.get(URI_A, "*s*", PROJECTION_1, "*so*", "*ce*"));
diff --git a/tests/src/com/android/providers/contacts/GlobalSearchSupportTest.java b/tests/src/com/android/providers/contacts/GlobalSearchSupportTest.java
index c776109..8036289 100644
--- a/tests/src/com/android/providers/contacts/GlobalSearchSupportTest.java
+++ b/tests/src/com/android/providers/contacts/GlobalSearchSupportTest.java
@@ -25,10 +25,12 @@ import android.provider.ContactsContract;
 import android.provider.ContactsContract.CommonDataKinds.GroupMembership;
 import android.provider.ContactsContract.Contacts;
 import android.provider.ContactsContract.Data;
-import android.provider.ContactsContract.Intents;
 import android.provider.ContactsContract.StatusUpdates;
 import android.test.suitebuilder.annotation.MediumTest;
 
+import com.android.providers.contacts.testutil.DataUtil;
+import com.android.providers.contacts.testutil.RawContactUtil;
+
 /**
  * Unit tests for {@link GlobalSearchSupport}.
  * <p>
@@ -48,8 +50,8 @@ public class GlobalSearchSupportTest extends BaseContactsProvider2Test {
         // Creating an AUTO_ADD group will exclude all ungrouped contacts from global search
         createGroup(account, "any", "any", 0 /* visible */, true /* auto-add */, false /* fav */);
 
-        long rawContactId = createRawContact(account);
-        insertStructuredName(rawContactId, "Deer", "Dough");
+        long rawContactId = RawContactUtil.createRawContact(mResolver, account);
+        DataUtil.insertStructuredName(mResolver, rawContactId, "Deer", "Dough");
 
         // Remove the new contact from all groups
         mResolver.delete(Data.CONTENT_URI, Data.RAW_CONTACT_ID + "=" + rawContactId
@@ -116,20 +118,6 @@ public class GlobalSearchSupportTest extends BaseContactsProvider2Test {
                 "Deer Dough").expectedText2("1-800-4664-411").build().test();
     }
 
-    public void assertCreateContactSuggestion(Cursor c, String number) {
-        ContentValues values = new ContentValues();
-        values.put(SearchManager.SUGGEST_COLUMN_TEXT_1, "Create contact");
-        values.put(SearchManager.SUGGEST_COLUMN_TEXT_2, "using "+ number);
-        values.put(SearchManager.SUGGEST_COLUMN_ICON_1,
-                String.valueOf(com.android.internal.R.drawable.create_contact));
-        values.put(SearchManager.SUGGEST_COLUMN_INTENT_ACTION,
-                Intents.SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED);
-        values.put(SearchManager.SUGGEST_COLUMN_INTENT_DATA, "tel:" + number);
-        values.put(SearchManager.SUGGEST_COLUMN_SHORTCUT_ID,
-                SearchManager.SUGGEST_NEVER_MAKE_SHORTCUT);
-        assertCursorValues(c, values);
-    }
-
     /**
      * Tests that the quick search suggestion returns the expected contact
      * information.
diff --git a/tests/src/com/android/providers/contacts/GroupsTest.java b/tests/src/com/android/providers/contacts/GroupsTest.java
index 3d85064..fa4e3ff 100644
--- a/tests/src/com/android/providers/contacts/GroupsTest.java
+++ b/tests/src/com/android/providers/contacts/GroupsTest.java
@@ -16,8 +16,6 @@
 
 package com.android.providers.contacts;
 
-import com.google.android.collect.Lists;
-
 import android.accounts.Account;
 import android.content.ContentProviderOperation;
 import android.content.ContentUris;
@@ -32,9 +30,12 @@ import android.provider.ContactsContract.CommonDataKinds.GroupMembership;
 import android.provider.ContactsContract.Contacts;
 import android.provider.ContactsContract.Groups;
 import android.provider.ContactsContract.Settings;
-import android.test.suitebuilder.annotation.LargeTest;
 import android.test.suitebuilder.annotation.MediumTest;
 
+import com.google.android.collect.Lists;
+
+import com.android.providers.contacts.testutil.RawContactUtil;
+
 import java.util.ArrayList;
 
 /**
@@ -255,7 +256,7 @@ public class GroupsTest extends BaseContactsProvider2Test {
         final Uri groupUri = ContentUris.withAppendedId(Groups.CONTENT_URI, groupId);
 
         // Create contact with specific membership
-        final long rawContactId = this.createRawContact(sTestAccount);
+        final long rawContactId = RawContactUtil.createRawContact(this.mResolver, sTestAccount);
         final long contactId = this.queryContactId(rawContactId);
         final Uri contactUri = ContentUris.withAppendedId(Contacts.CONTENT_URI, contactId);
 
@@ -278,7 +279,7 @@ public class GroupsTest extends BaseContactsProvider2Test {
     }
 
     public void testLocalSingleVisible() {
-        final long rawContactId = this.createRawContact();
+        final long rawContactId = RawContactUtil.createRawContact(this.mResolver);
 
         // Single, local contacts should always be visible
         assertRawContactVisible(rawContactId, true);
@@ -286,8 +287,8 @@ public class GroupsTest extends BaseContactsProvider2Test {
 
     public void testLocalMixedVisible() {
         // Aggregate, when mixed with local, should become visible
-        final long rawContactId1 = this.createRawContact();
-        final long rawContactId2 = this.createRawContact(sTestAccount);
+        final long rawContactId1 = RawContactUtil.createRawContact(this.mResolver);
+        final long rawContactId2 = RawContactUtil.createRawContact(this.mResolver, sTestAccount);
 
         final long groupId = this.createGroup(sTestAccount, GROUP_ID, GROUP_ID, 0);
         this.insertGroupMembership(rawContactId2, groupId);
@@ -309,7 +310,7 @@ public class GroupsTest extends BaseContactsProvider2Test {
     }
 
     public void testUngroupedVisible() {
-        final long rawContactId = this.createRawContact(sTestAccount);
+        final long rawContactId = RawContactUtil.createRawContact(this.mResolver, sTestAccount);
 
         final ContentValues values = new ContentValues();
         values.put(Settings.ACCOUNT_NAME, sTestAccount.name);
@@ -330,8 +331,8 @@ public class GroupsTest extends BaseContactsProvider2Test {
     }
 
     public void testMultipleSourcesVisible() {
-        final long rawContactId1 = this.createRawContact(sTestAccount);
-        final long rawContactId2 = this.createRawContact(sSecondAccount);
+        final long rawContactId1 = RawContactUtil.createRawContact(this.mResolver, sTestAccount);
+        final long rawContactId2 = RawContactUtil.createRawContact(this.mResolver, sSecondAccount);
 
         final long groupId = this.createGroup(sTestAccount, GROUP_ID, GROUP_ID, 0);
         this.insertGroupMembership(rawContactId1, groupId);
diff --git a/tests/src/com/android/providers/contacts/HanziToPinyinTest.java b/tests/src/com/android/providers/contacts/HanziToPinyinTest.java
index 7ffb855..4db1d34 100644
--- a/tests/src/com/android/providers/contacts/HanziToPinyinTest.java
+++ b/tests/src/com/android/providers/contacts/HanziToPinyinTest.java
@@ -16,17 +16,17 @@
 
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.HanziToPinyin.Token;
-
+import android.os.SystemClock;
 import android.test.suitebuilder.annotation.SmallTest;
+import android.text.TextUtils;
+import android.util.Log;
 
-import java.text.Collator;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Locale;
+import com.android.providers.contacts.HanziToPinyin.Token;
 
 import junit.framework.TestCase;
 
+import java.util.ArrayList;
+
 @SmallTest
 public class HanziToPinyinTest extends TestCase {
     private final static String ONE_HANZI = "\u675C";
@@ -35,9 +35,48 @@ public class HanziToPinyinTest extends TestCase {
     private final static String ONE_UNKNOWN = "\uFF71";
     private final static String MISC = "test\u675C   Test with space\uFF71\uFF71\u675C";
 
+    private static int testCount = 0;
+    private static long startTime = 0;
+
+    private boolean hasChineseTransliterator() {
+        return HanziToPinyin.getInstance().hasChineseTransliterator();
+    }
+
+    private void test(final char hanzi, final String expectedPinyin) throws Exception {
+        if (startTime == 0) {
+            startTime = SystemClock.elapsedRealtime();
+        }
+        final String hanziString = Character.toString(hanzi);
+        ArrayList<Token> tokens = HanziToPinyin.getInstance().get(hanziString);
+        assertEquals(tokens.size(), 1);
+        final String newString = tokens.get(0).target;
+        if (TextUtils.isEmpty(expectedPinyin)) {
+            assertEquals("Expected no transliteration for '" + hanziString
+                         + "' but got '" + newString + "'",
+                         tokens.get(0).type, Token.UNKNOWN);
+            assertTrue("Expected to get back original string for '"
+                       + hanziString  + "' but got '" + newString + "'",
+                       newString.equals(hanziString));
+        } else {
+            assertEquals("Expected transliteration for '" + hanziString
+                         + "' of '" + expectedPinyin + "' but got none",
+                         tokens.get(0).type, Token.PINYIN);
+            assertTrue("Expected transliteration for '" + hanziString + "' of '"
+                       + expectedPinyin + "' but got '" + newString + "'",
+                       newString.equalsIgnoreCase(expectedPinyin));
+        }
+        ++testCount;
+        if ((testCount%1000) == 0) {
+            long elapsedTimeMS = SystemClock.elapsedRealtime() - startTime;
+            Log.i("HanziToPinyinTest", "Transliteration calls: " + testCount
+                  + " [" + elapsedTimeMS + "ms total/"
+                  + (float) elapsedTimeMS/testCount + "ms avg]");
+        }
+    }
+
     @SmallTest
     public void testGetToken() throws Exception {
-        if (!Arrays.asList(Collator.getAvailableLocales()).contains(Locale.CHINA)) {
+        if (!hasChineseTransliterator()) {
             return;
         }
         ArrayList<Token> tokens = HanziToPinyin.getInstance().get(ONE_HANZI);
@@ -70,4 +109,21146 @@ public class HanziToPinyinTest extends TestCase {
         assertEquals(tokens.get(5).type, Token.UNKNOWN);
         assertEquals(tokens.get(6).type, Token.PINYIN);
     }
+
+    /**
+     * Test each supported han against expected pinyin from transliterator.
+     */
+    @SmallTest
+    public void test_0() throws Exception {
+        if (!hasChineseTransliterator()) {
+            return;
+        }
+        test('\u4e00', "YI");
+        test('\u4e01', "DING");
+        test('\u4e02', "KAO");
+        test('\u4e03', "QI");
+        test('\u4e04', "SHANG");
+        test('\u4e05', "XIA");
+        test('\u4e06', "HAN");
+        test('\u4e07', "WAN");
+        test('\u4e08', "ZHANG");
+        test('\u4e09', "SAN");
+        test('\u4e0a', "SHANG");
+        test('\u4e0b', "XIA");
+        test('\u4e0c', "JI");
+        test('\u4e0d', "BU");
+        test('\u4e0e', "YU");
+        test('\u4e0f', "MIAN");
+        test('\u4e10', "GAI");
+        test('\u4e11', "CHOU");
+        test('\u4e12', "CHOU");
+        test('\u4e13', "ZHUAN");
+        test('\u4e14', "QIE");
+        test('\u4e15', "PI");
+        test('\u4e16', "SHI");
+        test('\u4e17', "SHI");
+        test('\u4e18', "QIU");
+        test('\u4e19', "BING");
+        test('\u4e1a', "YE");
+        test('\u4e1b', "CONG");
+        test('\u4e1c', "DONG");
+        test('\u4e1d', "SI");
+        test('\u4e1e', "CHENG");
+        test('\u4e1f', "DIU");
+        test('\u4e20', "QIU");
+        test('\u4e21', "LIANG");
+        test('\u4e22', "DIU");
+        test('\u4e23', "YOU");
+        test('\u4e24', "LIANG");
+        test('\u4e25', "YAN");
+        test('\u4e26', "BING");
+        test('\u4e27', "SANG");
+        test('\u4e28', "GUN");
+        test('\u4e29', "JIU");
+        test('\u4e2a', "GE");
+        test('\u4e2b', "YA");
+        test('\u4e2c', "QIANG");
+        test('\u4e2d', "ZHONG");
+        test('\u4e2e', "JI");
+        test('\u4e2f', "JIE");
+        test('\u4e30', "FENG");
+        test('\u4e31', "GUAN");
+        test('\u4e32', "CHUAN");
+        test('\u4e33', "CHAN");
+        test('\u4e34', "LIN");
+        test('\u4e35', "ZHUO");
+        test('\u4e36', "ZHU");
+        test('\u4e37', "HA");
+        test('\u4e38', "WAN");
+        test('\u4e39', "DAN");
+        test('\u4e3a', "WEI");
+        test('\u4e3b', "ZHU");
+        test('\u4e3c', "JING");
+        test('\u4e3d', "LI");
+        test('\u4e3e', "JU");
+        test('\u4e3f', "PIE");
+        test('\u4e40', "FU");
+        test('\u4e41', "YI");
+        test('\u4e42', "YI");
+        test('\u4e43', "NAI");
+        test('\u4e44', "WU");
+        test('\u4e45', "JIU");
+        test('\u4e46', "JIU");
+        test('\u4e47', "TUO");
+        test('\u4e48', "ME");
+        test('\u4e49', "YI");
+        test('\u4e4a', "YI");
+        test('\u4e4b', "ZHI");
+        test('\u4e4c', "WU");
+        test('\u4e4d', "ZHA");
+        test('\u4e4e', "HU");
+        test('\u4e4f', "FA");
+        test('\u4e50', "LE");
+        test('\u4e51', "YIN");
+        test('\u4e52', "PING");
+        test('\u4e53', "PANG");
+        test('\u4e54', "QIAO");
+        test('\u4e55', "HU");
+        test('\u4e56', "GUAI");
+        test('\u4e57', "CHENG");
+        test('\u4e58', "CHENG");
+        test('\u4e59', "YI");
+        test('\u4e5a', "YIN");
+        test('\u4e5b', "YA");
+        test('\u4e5c', "MIE");
+        test('\u4e5d', "JIU");
+        test('\u4e5e', "QI");
+        test('\u4e5f', "YE");
+        test('\u4e60', "XI");
+        test('\u4e61', "XIANG");
+        test('\u4e62', "GAI");
+        test('\u4e63', "JIU");
+        test('\u4e64', "XIA");
+        test('\u4e65', "HU");
+        test('\u4e66', "SHU");
+        test('\u4e67', "DOU");
+        test('\u4e68', "SHI");
+        test('\u4e69', "JI");
+        test('\u4e6a', "NANG");
+        test('\u4e6b', "JIA");
+        test('\u4e6c', "JU");
+        test('\u4e6d', "SHI");
+        test('\u4e6e', "MAO");
+        test('\u4e6f', "HU");
+        test('\u4e70', "MAI");
+        test('\u4e71', "LUAN");
+        test('\u4e72', "ZI");
+        test('\u4e73', "RU");
+        test('\u4e74', "XUE");
+        test('\u4e75', "YAN");
+        test('\u4e76', "FU");
+        test('\u4e77', "SHA");
+        test('\u4e78', "NA");
+        test('\u4e79', "GAN");
+        test('\u4e7a', "SUO");
+        test('\u4e7b', "YU");
+        test('\u4e7c', "CUI");
+        test('\u4e7d', "ZHE");
+        test('\u4e7e', "GAN");
+        test('\u4e7f', "ZHI");
+        test('\u4e80', "GUI");
+        test('\u4e81', "GAN");
+        test('\u4e82', "LUAN");
+        test('\u4e83', "LIN");
+        test('\u4e84', "YI");
+        test('\u4e85', "JUE");
+        test('\u4e86', "LE");
+        test('\u4e87', "MA");
+        test('\u4e88', "YU");
+        test('\u4e89', "ZHENG");
+        test('\u4e8a', "SHI");
+        test('\u4e8b', "SHI");
+        test('\u4e8c', "ER");
+        test('\u4e8d', "CHU");
+        test('\u4e8e', "YU");
+        test('\u4e8f', "KUI");
+        test('\u4e90', "YU");
+        test('\u4e91', "YUN");
+        test('\u4e92', "HU");
+        test('\u4e93', "QI");
+        test('\u4e94', "WU");
+        test('\u4e95', "JING");
+        test('\u4e96', "SI");
+        test('\u4e97', "SUI");
+        test('\u4e98', "GEN");
+        test('\u4e99', "GEN");
+        test('\u4e9a', "YA");
+        test('\u4e9b', "XIE");
+        test('\u4e9c', "YA");
+        test('\u4e9d', "QI");
+        test('\u4e9e', "YA");
+        test('\u4e9f', "JI");
+        test('\u4ea0', "TOU");
+        test('\u4ea1', "WANG");
+        test('\u4ea2', "KANG");
+        test('\u4ea3', "TA");
+        test('\u4ea4', "JIAO");
+        test('\u4ea5', "HAI");
+        test('\u4ea6', "YI");
+        test('\u4ea7', "CHAN");
+        test('\u4ea8', "HENG");
+        test('\u4ea9', "MU");
+        test('\u4eaa', "YE");
+        test('\u4eab', "XIANG");
+        test('\u4eac', "JING");
+        test('\u4ead', "TING");
+        test('\u4eae', "LIANG");
+        test('\u4eaf', "XIANG");
+        test('\u4eb0', "JING");
+        test('\u4eb1', "YE");
+        test('\u4eb2', "QIN");
+        test('\u4eb3', "BO");
+        test('\u4eb4', "YOU");
+        test('\u4eb5', "XIE");
+        test('\u4eb6', "DAN");
+        test('\u4eb7', "LIAN");
+        test('\u4eb8', "DUO");
+        test('\u4eb9', "MEN");
+        test('\u4eba', "REN");
+        test('\u4ebb', "REN");
+        test('\u4ebc', "JI");
+        test('\u4ebd', "JI");
+        test('\u4ebe', "WANG");
+        test('\u4ebf', "YI");
+        test('\u4ec0', "SHEN");
+        test('\u4ec1', "REN");
+        test('\u4ec2', "LE");
+        test('\u4ec3', "DING");
+        test('\u4ec4', "ZE");
+        test('\u4ec5', "JIN");
+        test('\u4ec6', "PU");
+        test('\u4ec7', "CHOU");
+        test('\u4ec8', "BA");
+        test('\u4ec9', "ZHANG");
+        test('\u4eca', "JIN");
+        test('\u4ecb', "JIE");
+        test('\u4ecc', "BING");
+        test('\u4ecd', "RENG");
+        test('\u4ece', "CONG");
+        test('\u4ecf', "FO");
+        test('\u4ed0', "SAN");
+        test('\u4ed1', "LUN");
+        test('\u4ed2', "BING");
+        test('\u4ed3', "CANG");
+        test('\u4ed4', "ZI");
+        test('\u4ed5', "SHI");
+        test('\u4ed6', "TA");
+        test('\u4ed7', "ZHANG");
+        test('\u4ed8', "FU");
+        test('\u4ed9', "XIAN");
+        test('\u4eda', "XIAN");
+        test('\u4edb', "TUO");
+        test('\u4edc', "HONG");
+        test('\u4edd', "TONG");
+        test('\u4ede', "REN");
+        test('\u4edf', "QIAN");
+        test('\u4ee0', "GAN");
+        test('\u4ee1', "GE");
+        test('\u4ee2', "BO");
+        test('\u4ee3', "DAI");
+        test('\u4ee4', "LING");
+        test('\u4ee5', "YI");
+        test('\u4ee6', "CHAO");
+        test('\u4ee7', "CHANG");
+        test('\u4ee8', "SA");
+        test('\u4ee9', "SHANG");
+        test('\u4eea', "YI");
+        test('\u4eeb', "MU");
+        test('\u4eec', "MEN");
+        test('\u4eed', "REN");
+        test('\u4eee', "JIA");
+        test('\u4eef', "CHAO");
+        test('\u4ef0', "YANG");
+        test('\u4ef1', "QIAN");
+        test('\u4ef2', "ZHONG");
+        test('\u4ef3', "PI");
+        test('\u4ef4', "WO");
+        test('\u4ef5', "WU");
+        test('\u4ef6', "JIAN");
+        test('\u4ef7', "JIA");
+        test('\u4ef8', "YAO");
+        test('\u4ef9', "FENG");
+        test('\u4efa', "CANG");
+        test('\u4efb', "REN");
+        test('\u4efc', "WANG");
+        test('\u4efd', "FEN");
+        test('\u4efe', "DI");
+        test('\u4eff', "FANG");
+        test('\u4f00', "ZHONG");
+        test('\u4f01', "QI");
+        test('\u4f02', "PEI");
+        test('\u4f03', "YU");
+        test('\u4f04', "DIAO");
+        test('\u4f05', "DUN");
+        test('\u4f06', "WU");
+        test('\u4f07', "YI");
+        test('\u4f08', "XIN");
+        test('\u4f09', "KANG");
+        test('\u4f0a', "YI");
+        test('\u4f0b', "JI");
+        test('\u4f0c', "AI");
+        test('\u4f0d', "WU");
+        test('\u4f0e', "JI");
+        test('\u4f0f', "FU");
+        test('\u4f10', "FA");
+        test('\u4f11', "XIU");
+        test('\u4f12', "JIN");
+        test('\u4f13', "PI");
+        test('\u4f14', "DAN");
+        test('\u4f15', "FU");
+        test('\u4f16', "TANG");
+        test('\u4f17', "ZHONG");
+        test('\u4f18', "YOU");
+        test('\u4f19', "HUO");
+        test('\u4f1a', "HUI");
+        test('\u4f1b', "YU");
+        test('\u4f1c', "CUI");
+        test('\u4f1d', "CHUAN");
+        test('\u4f1e', "SAN");
+        test('\u4f1f', "WEI");
+        test('\u4f20', "CHUAN");
+        test('\u4f21', "CHE");
+        test('\u4f22', "YA");
+        test('\u4f23', "XIAN");
+        test('\u4f24', "SHANG");
+        test('\u4f25', "CHANG");
+        test('\u4f26', "LUN");
+        test('\u4f27', "CANG");
+        test('\u4f28', "XUN");
+        test('\u4f29', "XIN");
+        test('\u4f2a', "WEI");
+        test('\u4f2b', "ZHU");
+        test('\u4f2c', "ZE");
+        test('\u4f2d', "XIAN");
+        test('\u4f2e', "NU");
+        test('\u4f2f', "BO");
+        test('\u4f30', "GU");
+        test('\u4f31', "NI");
+        test('\u4f32', "NI");
+        test('\u4f33', "XIE");
+        test('\u4f34', "BAN");
+        test('\u4f35', "XU");
+        test('\u4f36', "LING");
+        test('\u4f37', "ZHOU");
+        test('\u4f38', "SHEN");
+        test('\u4f39', "QU");
+        test('\u4f3a', "CI");
+        test('\u4f3b', "BENG");
+        test('\u4f3c', "SHI");
+        test('\u4f3d', "JIA");
+        test('\u4f3e', "PI");
+        test('\u4f3f', "YI");
+        test('\u4f40', "SI");
+        test('\u4f41', "YI");
+        test('\u4f42', "ZHENG");
+        test('\u4f43', "DIAN");
+        test('\u4f44', "HAN");
+        test('\u4f45', "MAI");
+        test('\u4f46', "DAN");
+        test('\u4f47', "ZHU");
+        test('\u4f48', "BU");
+        test('\u4f49', "QU");
+        test('\u4f4a', "BI");
+        test('\u4f4b', "ZHAO");
+        test('\u4f4c', "CI");
+        test('\u4f4d', "WEI");
+        test('\u4f4e', "DI");
+        test('\u4f4f', "ZHU");
+        test('\u4f50', "ZUO");
+        test('\u4f51', "YOU");
+        test('\u4f52', "YANG");
+        test('\u4f53', "TI");
+        test('\u4f54', "ZHAN");
+        test('\u4f55', "HE");
+        test('\u4f56', "BI");
+        test('\u4f57', "TUO");
+        test('\u4f58', "SHE");
+        test('\u4f59', "YU");
+        test('\u4f5a', "YI");
+        test('\u4f5b', "FU");
+        test('\u4f5c', "ZUO");
+        test('\u4f5d', "GOU");
+        test('\u4f5e', "NING");
+        test('\u4f5f', "TONG");
+        test('\u4f60', "NI");
+        test('\u4f61', "XIAN");
+        test('\u4f62', "QU");
+        test('\u4f63', "YONG");
+        test('\u4f64', "WA");
+        test('\u4f65', "QIAN");
+        test('\u4f66', "SHI");
+        test('\u4f67', "KA");
+        test('\u4f68', "BAO");
+        test('\u4f69', "PEI");
+        test('\u4f6a', "HUI");
+        test('\u4f6b', "HE");
+        test('\u4f6c', "LAO");
+        test('\u4f6d', "XIANG");
+        test('\u4f6e', "GE");
+        test('\u4f6f', "YANG");
+        test('\u4f70', "BAI");
+        test('\u4f71', "FA");
+        test('\u4f72', "MING");
+        test('\u4f73', "JIA");
+        test('\u4f74', "ER");
+        test('\u4f75', "BING");
+        test('\u4f76', "JI");
+        test('\u4f77', "HEN");
+        test('\u4f78', "HUO");
+        test('\u4f79', "GUI");
+        test('\u4f7a', "QUAN");
+        test('\u4f7b', "TIAO");
+        test('\u4f7c', "JIAO");
+        test('\u4f7d', "CI");
+        test('\u4f7e', "YI");
+        test('\u4f7f', "SHI");
+        test('\u4f80', "XING");
+        test('\u4f81', "SHEN");
+        test('\u4f82', "TUO");
+        test('\u4f83', "KAN");
+        test('\u4f84', "ZHI");
+        test('\u4f85', "GAI");
+        test('\u4f86', "LAI");
+        test('\u4f87', "YI");
+        test('\u4f88', "CHI");
+        test('\u4f89', "KUA");
+        test('\u4f8a', "GUANG");
+        test('\u4f8b', "LI");
+        test('\u4f8c', "YIN");
+        test('\u4f8d', "SHI");
+        test('\u4f8e', "MI");
+        test('\u4f8f', "ZHU");
+        test('\u4f90', "XU");
+        test('\u4f91', "YOU");
+        test('\u4f92', "AN");
+        test('\u4f93', "LU");
+        test('\u4f94', "MOU");
+        test('\u4f95', "ER");
+        test('\u4f96', "LUN");
+        test('\u4f97', "DONG");
+        test('\u4f98', "CHA");
+        test('\u4f99', "CHI");
+        test('\u4f9a', "XUN");
+        test('\u4f9b', "GONG");
+        test('\u4f9c', "ZHOU");
+        test('\u4f9d', "YI");
+        test('\u4f9e', "RU");
+        test('\u4f9f', "CUN");
+        test('\u4fa0', "XIA");
+        test('\u4fa1', "SI");
+        test('\u4fa2', "ZAI");
+        test('\u4fa3', "LU");
+        test('\u4fa4', "TA");
+        test('\u4fa5', "JIAO");
+        test('\u4fa6', "ZHEN");
+        test('\u4fa7', "CE");
+        test('\u4fa8', "QIAO");
+        test('\u4fa9', "KUAI");
+        test('\u4faa', "CHAI");
+        test('\u4fab', "NING");
+        test('\u4fac', "NONG");
+        test('\u4fad', "JIN");
+        test('\u4fae', "WU");
+        test('\u4faf', "HOU");
+        test('\u4fb0', "JIONG");
+        test('\u4fb1', "CHENG");
+        test('\u4fb2', "ZHEN");
+        test('\u4fb3', "ZUO");
+        test('\u4fb4', "CHOU");
+        test('\u4fb5', "QIN");
+        test('\u4fb6', "LU");
+        test('\u4fb7', "JU");
+        test('\u4fb8', "SHU");
+        test('\u4fb9', "TING");
+        test('\u4fba', "SHEN");
+        test('\u4fbb', "TUI");
+        test('\u4fbc', "BO");
+        test('\u4fbd', "NAN");
+        test('\u4fbe', "XIAO");
+        test('\u4fbf', "BIAN");
+        test('\u4fc0', "TUI");
+        test('\u4fc1', "YU");
+        test('\u4fc2', "XI");
+        test('\u4fc3', "CU");
+        test('\u4fc4', "E");
+        test('\u4fc5', "QIU");
+        test('\u4fc6', "XU");
+        test('\u4fc7', "GUANG");
+        test('\u4fc8', "KU");
+        test('\u4fc9', "WU");
+        test('\u4fca', "JUN");
+        test('\u4fcb', "YI");
+        test('\u4fcc', "FU");
+        test('\u4fcd', "LIANG");
+        test('\u4fce', "ZU");
+        test('\u4fcf', "QIAO");
+        test('\u4fd0', "LI");
+        test('\u4fd1', "YONG");
+        test('\u4fd2', "HUN");
+        test('\u4fd3', "JING");
+        test('\u4fd4', "QIAN");
+        test('\u4fd5', "SAN");
+        test('\u4fd6', "PEI");
+        test('\u4fd7', "SU");
+        test('\u4fd8', "FU");
+        test('\u4fd9', "XI");
+        test('\u4fda', "LI");
+        test('\u4fdb', "FU");
+        test('\u4fdc', "PING");
+        test('\u4fdd', "BAO");
+        test('\u4fde', "YU");
+        test('\u4fdf', "QI");
+        test('\u4fe0', "XIA");
+        test('\u4fe1', "XIN");
+        test('\u4fe2', "XIU");
+        test('\u4fe3', "YU");
+        test('\u4fe4', "DI");
+        test('\u4fe5', "CHE");
+        test('\u4fe6', "CHOU");
+        test('\u4fe7', "ZHI");
+        test('\u4fe8', "YAN");
+        test('\u4fe9', "LIA");
+        test('\u4fea', "LI");
+        test('\u4feb', "LAI");
+        test('\u4fec', "SI");
+        test('\u4fed', "JIAN");
+        test('\u4fee', "XIU");
+        test('\u4fef', "FU");
+        test('\u4ff0', "HUO");
+        test('\u4ff1', "JU");
+        test('\u4ff2', "XIAO");
+        test('\u4ff3', "PAI");
+        test('\u4ff4', "JIAN");
+        test('\u4ff5', "BIAO");
+        test('\u4ff6', "CHU");
+        test('\u4ff7', "FEI");
+        test('\u4ff8', "FENG");
+        test('\u4ff9', "YA");
+        test('\u4ffa', "AN");
+        test('\u4ffb', "BEI");
+        test('\u4ffc', "YU");
+        test('\u4ffd', "XIN");
+        test('\u4ffe', "BI");
+        test('\u4fff', "HU");
+        test('\u5000', "CHANG");
+        test('\u5001', "ZHI");
+        test('\u5002', "BING");
+        test('\u5003', "JIU");
+        test('\u5004', "YAO");
+        test('\u5005', "CUI");
+        test('\u5006', "LIA");
+        test('\u5007', "WAN");
+        test('\u5008', "LAI");
+        test('\u5009', "CANG");
+        test('\u500a', "ZONG");
+        test('\u500b', "GE");
+        test('\u500c', "GUAN");
+        test('\u500d', "BEI");
+        test('\u500e', "TIAN");
+        test('\u500f', "SHU");
+        test('\u5010', "SHU");
+        test('\u5011', "MEN");
+        test('\u5012', "DAO");
+        test('\u5013', "TAN");
+        test('\u5014', "JUE");
+        test('\u5015', "CHUI");
+        test('\u5016', "XING");
+        test('\u5017', "PENG");
+        test('\u5018', "TANG");
+        test('\u5019', "HOU");
+        test('\u501a', "YI");
+        test('\u501b', "QI");
+        test('\u501c', "TI");
+        test('\u501d', "GAN");
+        test('\u501e', "JING");
+        test('\u501f', "JIE");
+        test('\u5020', "SUI");
+        test('\u5021', "CHANG");
+        test('\u5022', "JIE");
+        test('\u5023', "FANG");
+        test('\u5024', "ZHI");
+        test('\u5025', "KONG");
+        test('\u5026', "JUAN");
+        test('\u5027', "ZONG");
+        test('\u5028', "JU");
+        test('\u5029', "QIAN");
+        test('\u502a', "NI");
+        test('\u502b', "LUN");
+        test('\u502c', "ZHUO");
+        test('\u502d', "WO");
+        test('\u502e', "LUO");
+        test('\u502f', "SONG");
+        test('\u5030', "LENG");
+        test('\u5031', "HUN");
+        test('\u5032', "DONG");
+        test('\u5033', "ZI");
+        test('\u5034', "BEN");
+        test('\u5035', "WU");
+        test('\u5036', "JU");
+        test('\u5037', "NAI");
+        test('\u5038', "CAI");
+        test('\u5039', "JIAN");
+        test('\u503a', "ZHAI");
+        test('\u503b', "YE");
+        test('\u503c', "ZHI");
+        test('\u503d', "SHA");
+        test('\u503e', "QING");
+        test('\u503f', "QIE");
+        test('\u5040', "YING");
+        test('\u5041', "CHENG");
+        test('\u5042', "JIAN");
+        test('\u5043', "YAN");
+        test('\u5044', "RUAN");
+        test('\u5045', "ZHONG");
+        test('\u5046', "CHUN");
+        test('\u5047', "JIA");
+        test('\u5048', "JI");
+        test('\u5049', "WEI");
+        test('\u504a', "YU");
+        test('\u504b', "BING");
+        test('\u504c', "RUO");
+        test('\u504d', "TI");
+        test('\u504e', "WEI");
+        test('\u504f', "PIAN");
+        test('\u5050', "YAN");
+        test('\u5051', "FENG");
+        test('\u5052', "TANG");
+        test('\u5053', "WO");
+        test('\u5054', "E");
+        test('\u5055', "XIE");
+        test('\u5056', "CHE");
+        test('\u5057', "SHENG");
+        test('\u5058', "KAN");
+        test('\u5059', "DI");
+        test('\u505a', "ZUO");
+        test('\u505b', "CHA");
+        test('\u505c', "TING");
+        test('\u505d', "BEI");
+        test('\u505e', "XIE");
+        test('\u505f', "HUANG");
+        test('\u5060', "YAO");
+        test('\u5061', "ZHAN");
+        test('\u5062', "CHOU");
+        test('\u5063', "YAN");
+        test('\u5064', "YOU");
+        test('\u5065', "JIAN");
+        test('\u5066', "XU");
+        test('\u5067', "ZHA");
+        test('\u5068', "CI");
+        test('\u5069', "FU");
+        test('\u506a', "BI");
+        test('\u506b', "ZHI");
+        test('\u506c', "ZONG");
+        test('\u506d', "MIAN");
+        test('\u506e', "JI");
+        test('\u506f', "YI");
+        test('\u5070', "XIE");
+        test('\u5071', "XUN");
+        test('\u5072', "CAI");
+        test('\u5073', "DUAN");
+        test('\u5074', "CE");
+        test('\u5075', "ZHEN");
+        test('\u5076', "OU");
+        test('\u5077', "TOU");
+        test('\u5078', "TOU");
+        test('\u5079', "BEI");
+        test('\u507a', "ZA");
+        test('\u507b', "LOU");
+        test('\u507c', "JIE");
+        test('\u507d', "WEI");
+        test('\u507e', "FEN");
+        test('\u507f', "CHANG");
+        test('\u5080', "GUI");
+        test('\u5081', "SOU");
+        test('\u5082', "ZHI");
+        test('\u5083', "SU");
+        test('\u5084', "XIA");
+        test('\u5085', "FU");
+        test('\u5086', "YUAN");
+        test('\u5087', "RONG");
+        test('\u5088', "LI");
+        test('\u5089', "NU");
+        test('\u508a', "YUN");
+        test('\u508b', "JIANG");
+        test('\u508c', "MA");
+        test('\u508d', "BANG");
+        test('\u508e', "DIAN");
+        test('\u508f', "TANG");
+        test('\u5090', "HAO");
+        test('\u5091', "JIE");
+        test('\u5092', "XI");
+        test('\u5093', "SHAN");
+        test('\u5094', "QIAN");
+        test('\u5095', "JUE");
+        test('\u5096', "CANG");
+        test('\u5097', "CHU");
+        test('\u5098', "SAN");
+        test('\u5099', "BEI");
+        test('\u509a', "XIAO");
+        test('\u509b', "YONG");
+        test('\u509c', "YAO");
+        test('\u509d', "TAN");
+        test('\u509e', "SUO");
+        test('\u509f', "YANG");
+        test('\u50a0', "FA");
+        test('\u50a1', "BING");
+        test('\u50a2', "JIA");
+        test('\u50a3', "DAI");
+        test('\u50a4', "ZAI");
+        test('\u50a5', "TANG");
+        test('\u50a6', "GU");
+        test('\u50a7', "BIN");
+        test('\u50a8', "CHU");
+        test('\u50a9', "NUO");
+        test('\u50aa', "CAN");
+        test('\u50ab', "LEI");
+        test('\u50ac', "CUI");
+        test('\u50ad', "YONG");
+        test('\u50ae', "ZAO");
+        test('\u50af', "ZONG");
+        test('\u50b0', "BENG");
+        test('\u50b1', "SONG");
+        test('\u50b2', "AO");
+        test('\u50b3', "CHUAN");
+        test('\u50b4', "YU");
+        test('\u50b5', "ZHAI");
+        test('\u50b6', "ZU");
+        test('\u50b7', "SHANG");
+        test('\u50b8', "CHUANG");
+        test('\u50b9', "JING");
+        test('\u50ba', "CHI");
+        test('\u50bb', "SHA");
+        test('\u50bc', "HAN");
+        test('\u50bd', "ZHANG");
+        test('\u50be', "QING");
+        test('\u50bf', "YAN");
+        test('\u50c0', "DI");
+        test('\u50c1', "XIE");
+        test('\u50c2', "LOU");
+        test('\u50c3', "BEI");
+        test('\u50c4', "PIAO");
+        test('\u50c5', "JIN");
+        test('\u50c6', "LIAN");
+        test('\u50c7', "LU");
+        test('\u50c8', "MAN");
+        test('\u50c9', "QIAN");
+        test('\u50ca', "XIAN");
+        test('\u50cb', "TAN");
+        test('\u50cc', "YING");
+        test('\u50cd', "DONG");
+        test('\u50ce', "ZHUAN");
+        test('\u50cf', "XIANG");
+        test('\u50d0', "SHAN");
+        test('\u50d1', "QIAO");
+        test('\u50d2', "JIONG");
+        test('\u50d3', "TUI");
+        test('\u50d4', "ZUN");
+        test('\u50d5', "PU");
+        test('\u50d6', "XI");
+        test('\u50d7', "LAO");
+        test('\u50d8', "CHANG");
+        test('\u50d9', "GUANG");
+        test('\u50da', "LIAO");
+        test('\u50db', "QI");
+        test('\u50dc', "CHENG");
+        test('\u50dd', "CHAN");
+        test('\u50de', "WEI");
+        test('\u50df', "JI");
+        test('\u50e0', "BO");
+        test('\u50e1', "HUI");
+        test('\u50e2', "CHUAN");
+        test('\u50e3', "TIE");
+        test('\u50e4', "DAN");
+        test('\u50e5', "JIAO");
+        test('\u50e6', "JIU");
+        test('\u50e7', "SENG");
+        test('\u50e8', "FEN");
+        test('\u50e9', "XIAN");
+        test('\u50ea', "JU");
+        test('\u50eb', "E");
+        test('\u50ec', "JIAO");
+        test('\u50ed', "JIAN");
+        test('\u50ee', "TONG");
+        test('\u50ef', "LIN");
+        test('\u50f0', "BO");
+        test('\u50f1', "GU");
+        test('\u50f2', "XIAN");
+        test('\u50f3', "SU");
+        test('\u50f4', "XIAN");
+        test('\u50f5', "JIANG");
+        test('\u50f6', "MIN");
+        test('\u50f7', "YE");
+        test('\u50f8', "JIN");
+        test('\u50f9', "JIA");
+        test('\u50fa', "QIAO");
+        test('\u50fb', "PI");
+        test('\u50fc', "FENG");
+        test('\u50fd', "ZHOU");
+        test('\u50fe', "AI");
+        test('\u50ff', "SAI");
+        test('\u5100', "YI");
+        test('\u5101', "JUN");
+        test('\u5102', "NONG");
+        test('\u5103', "CHAN");
+        test('\u5104', "YI");
+        test('\u5105', "DANG");
+        test('\u5106', "JING");
+        test('\u5107', "XUAN");
+        test('\u5108', "KUAI");
+        test('\u5109', "JIAN");
+        test('\u510a', "CHU");
+        test('\u510b', "DAN");
+        test('\u510c', "JIAO");
+        test('\u510d', "SHA");
+        test('\u510e', "ZAI");
+        test('\u510f', "CAN");
+        test('\u5110', "BIN");
+        test('\u5111', "AN");
+        test('\u5112', "RU");
+        test('\u5113', "TAI");
+        test('\u5114', "CHOU");
+        test('\u5115', "CHAI");
+        test('\u5116', "LAN");
+        test('\u5117', "NI");
+        test('\u5118', "JIN");
+        test('\u5119', "QIAN");
+        test('\u511a', "MENG");
+        test('\u511b', "WU");
+        test('\u511c', "NING");
+        test('\u511d', "QIONG");
+        test('\u511e', "NI");
+        test('\u511f', "CHANG");
+        test('\u5120', "LIE");
+        test('\u5121', "LEI");
+        test('\u5122', "LU");
+        test('\u5123', "KUANG");
+        test('\u5124', "BAO");
+        test('\u5125', "YU");
+        test('\u5126', "BIAO");
+        test('\u5127', "ZAN");
+        test('\u5128', "ZHI");
+        test('\u5129', "SI");
+        test('\u512a', "YOU");
+        test('\u512b', "HAO");
+        test('\u512c', "CHEN");
+        test('\u512d', "CHEN");
+        test('\u512e', "LI");
+        test('\u512f', "TENG");
+        test('\u5130', "WEI");
+        test('\u5131', "LONG");
+        test('\u5132', "CHU");
+        test('\u5133', "CHAN");
+        test('\u5134', "RANG");
+        test('\u5135', "SHU");
+        test('\u5136', "HUI");
+        test('\u5137', "LI");
+        test('\u5138', "LUO");
+        test('\u5139', "ZAN");
+        test('\u513a', "NUO");
+        test('\u513b', "TANG");
+        test('\u513c', "YAN");
+        test('\u513d', "LEI");
+        test('\u513e', "NANG");
+        test('\u513f', "ER");
+        test('\u5140', "WU");
+        test('\u5141', "YUN");
+        test('\u5142', "ZAN");
+        test('\u5143', "YUAN");
+        test('\u5144', "XIONG");
+        test('\u5145', "CHONG");
+        test('\u5146', "ZHAO");
+        test('\u5147', "XIONG");
+        test('\u5148', "XIAN");
+        test('\u5149', "GUANG");
+        test('\u514a', "DUI");
+        test('\u514b', "KE");
+        test('\u514c', "DUI");
+        test('\u514d', "MIAN");
+        test('\u514e', "TU");
+        test('\u514f', "CHANG");
+        test('\u5150', "ER");
+        test('\u5151', "DUI");
+        test('\u5152', "ER");
+        test('\u5153', "JIN");
+        test('\u5154', "TU");
+        test('\u5155', "SI");
+        test('\u5156', "YAN");
+        test('\u5157', "YAN");
+        test('\u5158', "SHI");
+        test('\u5159', "");
+        test('\u515a', "DANG");
+        test('\u515b', "QIAN");
+        test('\u515c', "DOU");
+        test('\u515d', "FEN");
+        test('\u515e', "MAO");
+        test('\u515f', "SHEN");
+        test('\u5160', "DOU");
+        test('\u5161', "");
+        test('\u5162', "JING");
+        test('\u5163', "LI");
+        test('\u5164', "HUANG");
+        test('\u5165', "RU");
+        test('\u5166', "WANG");
+        test('\u5167', "NEI");
+        test('\u5168', "QUAN");
+        test('\u5169', "LIANG");
+        test('\u516a', "YU");
+        test('\u516b', "BA");
+        test('\u516c', "GONG");
+        test('\u516d', "LIU");
+        test('\u516e', "XI");
+        test('\u516f', "HAN");
+        test('\u5170', "LAN");
+        test('\u5171', "GONG");
+        test('\u5172', "TIAN");
+        test('\u5173', "GUAN");
+        test('\u5174', "XING");
+        test('\u5175', "BING");
+        test('\u5176', "QI");
+        test('\u5177', "JU");
+        test('\u5178', "DIAN");
+        test('\u5179', "ZI");
+        test('\u517a', "FEN");
+        test('\u517b', "YANG");
+        test('\u517c', "JIAN");
+        test('\u517d', "SHOU");
+        test('\u517e', "JI");
+        test('\u517f', "YI");
+        test('\u5180', "JI");
+        test('\u5181', "CHAN");
+        test('\u5182', "JIONG");
+        test('\u5183', "MAO");
+        test('\u5184', "RAN");
+        test('\u5185', "NEI");
+        test('\u5186', "YUAN");
+        test('\u5187', "MAO");
+        test('\u5188', "GANG");
+        test('\u5189', "RAN");
+        test('\u518a', "CE");
+        test('\u518b', "JIONG");
+        test('\u518c', "CE");
+        test('\u518d', "ZAI");
+        test('\u518e', "GUA");
+        test('\u518f', "JIONG");
+        test('\u5190', "MAO");
+        test('\u5191', "ZHOU");
+        test('\u5192', "MAO");
+        test('\u5193', "GOU");
+        test('\u5194', "XU");
+        test('\u5195', "MIAN");
+        test('\u5196', "MI");
+        test('\u5197', "RONG");
+        test('\u5198', "YIN");
+        test('\u5199', "XIE");
+        test('\u519a', "KAN");
+        test('\u519b', "JUN");
+        test('\u519c', "NONG");
+        test('\u519d', "YI");
+        test('\u519e', "MI");
+        test('\u519f', "SHI");
+        test('\u51a0', "GUAN");
+        test('\u51a1', "MENG");
+        test('\u51a2', "ZHONG");
+        test('\u51a3', "JU");
+        test('\u51a4', "YUAN");
+        test('\u51a5', "MING");
+        test('\u51a6', "KOU");
+        test('\u51a7', "LIN");
+        test('\u51a8', "FU");
+        test('\u51a9', "XIE");
+        test('\u51aa', "MI");
+        test('\u51ab', "BING");
+        test('\u51ac', "DONG");
+        test('\u51ad', "TAI");
+        test('\u51ae', "GANG");
+        test('\u51af', "FENG");
+        test('\u51b0', "BING");
+        test('\u51b1', "HU");
+        test('\u51b2', "CHONG");
+        test('\u51b3', "JUE");
+        test('\u51b4', "HU");
+        test('\u51b5', "KUANG");
+        test('\u51b6', "YE");
+        test('\u51b7', "LENG");
+        test('\u51b8', "PAN");
+        test('\u51b9', "FU");
+        test('\u51ba', "MIN");
+        test('\u51bb', "DONG");
+        test('\u51bc', "XIAN");
+        test('\u51bd', "LIE");
+        test('\u51be', "QIA");
+        test('\u51bf', "JIAN");
+        test('\u51c0', "JING");
+        test('\u51c1', "SHU");
+        test('\u51c2', "MEI");
+        test('\u51c3', "TU");
+        test('\u51c4', "QI");
+        test('\u51c5', "GU");
+        test('\u51c6', "ZHUN");
+        test('\u51c7', "SONG");
+        test('\u51c8', "JING");
+        test('\u51c9', "LIANG");
+        test('\u51ca', "QING");
+        test('\u51cb', "DIAO");
+        test('\u51cc', "LING");
+        test('\u51cd', "DONG");
+        test('\u51ce', "GAN");
+        test('\u51cf', "JIAN");
+        test('\u51d0', "YIN");
+        test('\u51d1', "COU");
+        test('\u51d2', "YI");
+        test('\u51d3', "LI");
+        test('\u51d4', "CHUANG");
+        test('\u51d5', "MING");
+        test('\u51d6', "ZHUN");
+        test('\u51d7', "CUI");
+        test('\u51d8', "SI");
+        test('\u51d9', "DUO");
+        test('\u51da', "JIN");
+        test('\u51db', "LIN");
+        test('\u51dc', "LIN");
+        test('\u51dd', "NING");
+        test('\u51de', "XI");
+        test('\u51df', "DU");
+        test('\u51e0', "JI");
+        test('\u51e1', "FAN");
+        test('\u51e2', "FAN");
+        test('\u51e3', "FAN");
+        test('\u51e4', "FENG");
+        test('\u51e5', "JU");
+        test('\u51e6', "CHU");
+        test('\u51e7', "ZHENG");
+        test('\u51e8', "FENG");
+        test('\u51e9', "MU");
+        test('\u51ea', "ZHI");
+        test('\u51eb', "FU");
+        test('\u51ec', "FENG");
+        test('\u51ed', "PING");
+        test('\u51ee', "FENG");
+        test('\u51ef', "KAI");
+        test('\u51f0', "HUANG");
+        test('\u51f1', "KAI");
+        test('\u51f2', "GAN");
+        test('\u51f3', "DENG");
+        test('\u51f4', "PING");
+        test('\u51f5', "QIAN");
+        test('\u51f6', "XIONG");
+        test('\u51f7', "KUAI");
+        test('\u51f8', "TU");
+        test('\u51f9', "AO");
+        test('\u51fa', "CHU");
+        test('\u51fb', "JI");
+        test('\u51fc', "DANG");
+        test('\u51fd', "HAN");
+        test('\u51fe', "HAN");
+        test('\u51ff', "ZAO");
+    }
+
+    @SmallTest
+    public void test_1() throws Exception {
+        if (!hasChineseTransliterator()) {
+            return;
+        }
+        test('\u5200', "DAO");
+        test('\u5201', "DIAO");
+        test('\u5202', "DAO");
+        test('\u5203', "REN");
+        test('\u5204', "REN");
+        test('\u5205', "CHUANG");
+        test('\u5206', "FEN");
+        test('\u5207', "QIE");
+        test('\u5208', "YI");
+        test('\u5209', "JI");
+        test('\u520a', "KAN");
+        test('\u520b', "QIAN");
+        test('\u520c', "CUN");
+        test('\u520d', "CHU");
+        test('\u520e', "WEN");
+        test('\u520f', "JI");
+        test('\u5210', "DAN");
+        test('\u5211', "XING");
+        test('\u5212', "HUA");
+        test('\u5213', "WAN");
+        test('\u5214', "JUE");
+        test('\u5215', "LI");
+        test('\u5216', "YUE");
+        test('\u5217', "LIE");
+        test('\u5218', "LIU");
+        test('\u5219', "ZE");
+        test('\u521a', "GANG");
+        test('\u521b', "CHUANG");
+        test('\u521c', "FU");
+        test('\u521d', "CHU");
+        test('\u521e', "QU");
+        test('\u521f', "JU");
+        test('\u5220', "SHAN");
+        test('\u5221', "MIN");
+        test('\u5222', "LING");
+        test('\u5223', "ZHONG");
+        test('\u5224', "PAN");
+        test('\u5225', "BIE");
+        test('\u5226', "JIE");
+        test('\u5227', "JIE");
+        test('\u5228', "PAO");
+        test('\u5229', "LI");
+        test('\u522a', "SHAN");
+        test('\u522b', "BIE");
+        test('\u522c', "CHAN");
+        test('\u522d', "JING");
+        test('\u522e', "GUA");
+        test('\u522f', "GENG");
+        test('\u5230', "DAO");
+        test('\u5231', "CHUANG");
+        test('\u5232', "KUI");
+        test('\u5233', "KU");
+        test('\u5234', "DUO");
+        test('\u5235', "ER");
+        test('\u5236', "ZHI");
+        test('\u5237', "SHUA");
+        test('\u5238', "QUAN");
+        test('\u5239', "SHA");
+        test('\u523a', "CI");
+        test('\u523b', "KE");
+        test('\u523c', "JIE");
+        test('\u523d', "GUI");
+        test('\u523e', "CI");
+        test('\u523f', "GUI");
+        test('\u5240', "KAI");
+        test('\u5241', "DUO");
+        test('\u5242', "JI");
+        test('\u5243', "TI");
+        test('\u5244', "JING");
+        test('\u5245', "LOU");
+        test('\u5246', "LUO");
+        test('\u5247', "ZE");
+        test('\u5248', "YUAN");
+        test('\u5249', "CUO");
+        test('\u524a', "XUE");
+        test('\u524b', "KE");
+        test('\u524c', "LA");
+        test('\u524d', "QIAN");
+        test('\u524e', "SHA");
+        test('\u524f', "CHUANG");
+        test('\u5250', "GUA");
+        test('\u5251', "JIAN");
+        test('\u5252', "CUO");
+        test('\u5253', "LI");
+        test('\u5254', "TI");
+        test('\u5255', "FEI");
+        test('\u5256', "POU");
+        test('\u5257', "CHAN");
+        test('\u5258', "QI");
+        test('\u5259', "CHUANG");
+        test('\u525a', "ZI");
+        test('\u525b', "GANG");
+        test('\u525c', "WAN");
+        test('\u525d', "BO");
+        test('\u525e', "JI");
+        test('\u525f', "DUO");
+        test('\u5260', "QING");
+        test('\u5261', "SHAN");
+        test('\u5262', "DU");
+        test('\u5263', "JIAN");
+        test('\u5264', "JI");
+        test('\u5265', "BO");
+        test('\u5266', "YAN");
+        test('\u5267', "JU");
+        test('\u5268', "HUO");
+        test('\u5269', "SHENG");
+        test('\u526a', "JIAN");
+        test('\u526b', "DUO");
+        test('\u526c', "DUAN");
+        test('\u526d', "WU");
+        test('\u526e', "GUA");
+        test('\u526f', "FU");
+        test('\u5270', "SHENG");
+        test('\u5271', "JIAN");
+        test('\u5272', "GE");
+        test('\u5273', "DA");
+        test('\u5274', "KAI");
+        test('\u5275', "CHUANG");
+        test('\u5276', "CHUAN");
+        test('\u5277', "CHAN");
+        test('\u5278', "TUAN");
+        test('\u5279', "LU");
+        test('\u527a', "LI");
+        test('\u527b', "PENG");
+        test('\u527c', "SHAN");
+        test('\u527d', "PIAO");
+        test('\u527e', "KOU");
+        test('\u527f', "JIAO");
+        test('\u5280', "GUA");
+        test('\u5281', "QIAO");
+        test('\u5282', "JUE");
+        test('\u5283', "HUA");
+        test('\u5284', "ZHA");
+        test('\u5285', "ZHUO");
+        test('\u5286', "LIAN");
+        test('\u5287', "JU");
+        test('\u5288', "PI");
+        test('\u5289', "LIU");
+        test('\u528a', "GUI");
+        test('\u528b', "JIAO");
+        test('\u528c', "GUI");
+        test('\u528d', "JIAN");
+        test('\u528e', "JIAN");
+        test('\u528f', "TANG");
+        test('\u5290', "HUO");
+        test('\u5291', "JI");
+        test('\u5292', "JIAN");
+        test('\u5293', "YI");
+        test('\u5294', "JIAN");
+        test('\u5295', "ZHI");
+        test('\u5296', "CHAN");
+        test('\u5297', "JIAN");
+        test('\u5298', "MO");
+        test('\u5299', "LI");
+        test('\u529a', "ZHU");
+        test('\u529b', "LI");
+        test('\u529c', "YA");
+        test('\u529d', "QUAN");
+        test('\u529e', "BAN");
+        test('\u529f', "GONG");
+        test('\u52a0', "JIA");
+        test('\u52a1', "WU");
+        test('\u52a2', "MAI");
+        test('\u52a3', "LIE");
+        test('\u52a4', "JIN");
+        test('\u52a5', "KENG");
+        test('\u52a6', "XIE");
+        test('\u52a7', "ZHI");
+        test('\u52a8', "DONG");
+        test('\u52a9', "ZHU");
+        test('\u52aa', "NU");
+        test('\u52ab', "JIE");
+        test('\u52ac', "QU");
+        test('\u52ad', "SHAO");
+        test('\u52ae', "YI");
+        test('\u52af', "ZHU");
+        test('\u52b0', "MO");
+        test('\u52b1', "LI");
+        test('\u52b2', "JIN");
+        test('\u52b3', "LAO");
+        test('\u52b4', "LAO");
+        test('\u52b5', "JUAN");
+        test('\u52b6', "KOU");
+        test('\u52b7', "YANG");
+        test('\u52b8', "WA");
+        test('\u52b9', "XIAO");
+        test('\u52ba', "MOU");
+        test('\u52bb', "KUANG");
+        test('\u52bc', "JIE");
+        test('\u52bd', "LIE");
+        test('\u52be', "HE");
+        test('\u52bf', "SHI");
+        test('\u52c0', "KE");
+        test('\u52c1', "JIN");
+        test('\u52c2', "GAO");
+        test('\u52c3', "BO");
+        test('\u52c4', "MIN");
+        test('\u52c5', "CHI");
+        test('\u52c6', "LANG");
+        test('\u52c7', "YONG");
+        test('\u52c8', "YONG");
+        test('\u52c9', "MIAN");
+        test('\u52ca', "KE");
+        test('\u52cb', "XUN");
+        test('\u52cc', "JUAN");
+        test('\u52cd', "QING");
+        test('\u52ce', "LU");
+        test('\u52cf', "BU");
+        test('\u52d0', "MENG");
+        test('\u52d1', "CHI");
+        test('\u52d2', "LEI");
+        test('\u52d3', "KAI");
+        test('\u52d4', "MIAN");
+        test('\u52d5', "DONG");
+        test('\u52d6', "XU");
+        test('\u52d7', "XU");
+        test('\u52d8', "KAN");
+        test('\u52d9', "WU");
+        test('\u52da', "YI");
+        test('\u52db', "XUN");
+        test('\u52dc', "WENG");
+        test('\u52dd', "SHENG");
+        test('\u52de', "LAO");
+        test('\u52df', "MU");
+        test('\u52e0', "LU");
+        test('\u52e1', "PIAO");
+        test('\u52e2', "SHI");
+        test('\u52e3', "JI");
+        test('\u52e4', "QIN");
+        test('\u52e5', "JIANG");
+        test('\u52e6', "CHAO");
+        test('\u52e7', "QUAN");
+        test('\u52e8', "XIANG");
+        test('\u52e9', "YI");
+        test('\u52ea', "JUE");
+        test('\u52eb', "FAN");
+        test('\u52ec', "JUAN");
+        test('\u52ed', "TONG");
+        test('\u52ee', "JU");
+        test('\u52ef', "DAN");
+        test('\u52f0', "XIE");
+        test('\u52f1', "MAI");
+        test('\u52f2', "XUN");
+        test('\u52f3', "XUN");
+        test('\u52f4', "LU");
+        test('\u52f5', "LI");
+        test('\u52f6', "CHE");
+        test('\u52f7', "RANG");
+        test('\u52f8', "QUAN");
+        test('\u52f9', "BAO");
+        test('\u52fa', "SHAO");
+        test('\u52fb', "YUN");
+        test('\u52fc', "JIU");
+        test('\u52fd', "BAO");
+        test('\u52fe', "GOU");
+        test('\u52ff', "WU");
+        test('\u5300', "YUN");
+        test('\u5301', "WEN");
+        test('\u5302', "BI");
+        test('\u5303', "GAI");
+        test('\u5304', "GAI");
+        test('\u5305', "BAO");
+        test('\u5306', "CONG");
+        test('\u5307', "YI");
+        test('\u5308', "XIONG");
+        test('\u5309', "PENG");
+        test('\u530a', "JU");
+        test('\u530b', "TAO");
+        test('\u530c', "GE");
+        test('\u530d', "PU");
+        test('\u530e', "E");
+        test('\u530f', "PAO");
+        test('\u5310', "FU");
+        test('\u5311', "GONG");
+        test('\u5312', "DA");
+        test('\u5313', "JIU");
+        test('\u5314', "QIONG");
+        test('\u5315', "BI");
+        test('\u5316', "HUA");
+        test('\u5317', "BEI");
+        test('\u5318', "NAO");
+        test('\u5319', "SHI");
+        test('\u531a', "FANG");
+        test('\u531b', "JIU");
+        test('\u531c', "YI");
+        test('\u531d', "ZA");
+        test('\u531e', "JIANG");
+        test('\u531f', "KANG");
+        test('\u5320', "JIANG");
+        test('\u5321', "KUANG");
+        test('\u5322', "HU");
+        test('\u5323', "XIA");
+        test('\u5324', "QU");
+        test('\u5325', "BIAN");
+        test('\u5326', "GUI");
+        test('\u5327', "QIE");
+        test('\u5328', "ZANG");
+        test('\u5329', "KUANG");
+        test('\u532a', "FEI");
+        test('\u532b', "HU");
+        test('\u532c', "YU");
+        test('\u532d', "GUI");
+        test('\u532e', "KUI");
+        test('\u532f', "HUI");
+        test('\u5330', "DAN");
+        test('\u5331', "GUI");
+        test('\u5332', "LIAN");
+        test('\u5333', "LIAN");
+        test('\u5334', "SUAN");
+        test('\u5335', "DU");
+        test('\u5336', "JIU");
+        test('\u5337', "JUE");
+        test('\u5338', "XI");
+        test('\u5339', "PI");
+        test('\u533a', "QU");
+        test('\u533b', "YI");
+        test('\u533c', "KE");
+        test('\u533d', "YAN");
+        test('\u533e', "BIAN");
+        test('\u533f', "NI");
+        test('\u5340', "QU");
+        test('\u5341', "SHI");
+        test('\u5342', "XUN");
+        test('\u5343', "QIAN");
+        test('\u5344', "NIAN");
+        test('\u5345', "SA");
+        test('\u5346', "ZU");
+        test('\u5347', "SHENG");
+        test('\u5348', "WU");
+        test('\u5349', "HUI");
+        test('\u534a', "BAN");
+        test('\u534b', "SHI");
+        test('\u534c', "XI");
+        test('\u534d', "WAN");
+        test('\u534e', "HUA");
+        test('\u534f', "XIE");
+        test('\u5350', "WAN");
+        test('\u5351', "BEI");
+        test('\u5352', "ZU");
+        test('\u5353', "ZHUO");
+        test('\u5354', "XIE");
+        test('\u5355', "DAN");
+        test('\u5356', "MAI");
+        test('\u5357', "NAN");
+        test('\u5358', "DAN");
+        test('\u5359', "JI");
+        test('\u535a', "BO");
+        test('\u535b', "SHUAI");
+        test('\u535c', "BO");
+        test('\u535d', "KUANG");
+        test('\u535e', "BIAN");
+        test('\u535f', "BU");
+        test('\u5360', "ZHAN");
+        test('\u5361', "KA");
+        test('\u5362', "LU");
+        test('\u5363', "YOU");
+        test('\u5364', "LU");
+        test('\u5365', "XI");
+        test('\u5366', "GUA");
+        test('\u5367', "WO");
+        test('\u5368', "XIE");
+        test('\u5369', "JIE");
+        test('\u536a', "JIE");
+        test('\u536b', "WEI");
+        test('\u536c', "ANG");
+        test('\u536d', "QIONG");
+        test('\u536e', "ZHI");
+        test('\u536f', "MAO");
+        test('\u5370', "YIN");
+        test('\u5371', "WEI");
+        test('\u5372', "SHAO");
+        test('\u5373', "JI");
+        test('\u5374', "QUE");
+        test('\u5375', "LUAN");
+        test('\u5376', "CHI");
+        test('\u5377', "JUAN");
+        test('\u5378', "XIE");
+        test('\u5379', "XU");
+        test('\u537a', "JIN");
+        test('\u537b', "QUE");
+        test('\u537c', "WU");
+        test('\u537d', "JI");
+        test('\u537e', "E");
+        test('\u537f', "QING");
+        test('\u5380', "XI");
+        test('\u5381', "SAN");
+        test('\u5382', "CHANG");
+        test('\u5383', "WEI");
+        test('\u5384', "E");
+        test('\u5385', "TING");
+        test('\u5386', "LI");
+        test('\u5387', "ZHE");
+        test('\u5388', "HAN");
+        test('\u5389', "LI");
+        test('\u538a', "YA");
+        test('\u538b', "YA");
+        test('\u538c', "YAN");
+        test('\u538d', "SHE");
+        test('\u538e', "DI");
+        test('\u538f', "ZHA");
+        test('\u5390', "PANG");
+        test('\u5391', "YA");
+        test('\u5392', "HE");
+        test('\u5393', "YA");
+        test('\u5394', "ZHI");
+        test('\u5395', "CE");
+        test('\u5396', "PANG");
+        test('\u5397', "TI");
+        test('\u5398', "LI");
+        test('\u5399', "SHE");
+        test('\u539a', "HOU");
+        test('\u539b', "TING");
+        test('\u539c', "ZUI");
+        test('\u539d', "CUO");
+        test('\u539e', "FEI");
+        test('\u539f', "YUAN");
+        test('\u53a0', "CE");
+        test('\u53a1', "YUAN");
+        test('\u53a2', "XIANG");
+        test('\u53a3', "YAN");
+        test('\u53a4', "LI");
+        test('\u53a5', "JUE");
+        test('\u53a6', "SHA");
+        test('\u53a7', "DIAN");
+        test('\u53a8', "CHU");
+        test('\u53a9', "JIU");
+        test('\u53aa', "JIN");
+        test('\u53ab', "AO");
+        test('\u53ac', "GUI");
+        test('\u53ad', "YAN");
+        test('\u53ae', "SI");
+        test('\u53af', "LI");
+        test('\u53b0', "CHANG");
+        test('\u53b1', "LAN");
+        test('\u53b2', "LI");
+        test('\u53b3', "YAN");
+        test('\u53b4', "YAN");
+        test('\u53b5', "YUAN");
+        test('\u53b6', "SI");
+        test('\u53b7', "GONG");
+        test('\u53b8', "LIN");
+        test('\u53b9', "ROU");
+        test('\u53ba', "QU");
+        test('\u53bb', "QU");
+        test('\u53bc', "ER");
+        test('\u53bd', "LEI");
+        test('\u53be', "DU");
+        test('\u53bf', "XIAN");
+        test('\u53c0', "ZHUAN");
+        test('\u53c1', "SAN");
+        test('\u53c2', "CAN");
+        test('\u53c3', "CAN");
+        test('\u53c4', "CAN");
+        test('\u53c5', "CAN");
+        test('\u53c6', "AI");
+        test('\u53c7', "DAI");
+        test('\u53c8', "YOU");
+        test('\u53c9', "CHA");
+        test('\u53ca', "JI");
+        test('\u53cb', "YOU");
+        test('\u53cc', "SHUANG");
+        test('\u53cd', "FAN");
+        test('\u53ce', "SHOU");
+        test('\u53cf', "GUAI");
+        test('\u53d0', "BA");
+        test('\u53d1', "FA");
+        test('\u53d2', "RUO");
+        test('\u53d3', "SHI");
+        test('\u53d4', "SHU");
+        test('\u53d5', "ZHUO");
+        test('\u53d6', "QU");
+        test('\u53d7', "SHOU");
+        test('\u53d8', "BIAN");
+        test('\u53d9', "XU");
+        test('\u53da', "JIA");
+        test('\u53db', "PAN");
+        test('\u53dc', "SOU");
+        test('\u53dd', "GAO");
+        test('\u53de', "WEI");
+        test('\u53df', "SOU");
+        test('\u53e0', "DIE");
+        test('\u53e1', "RUI");
+        test('\u53e2', "CONG");
+        test('\u53e3', "KOU");
+        test('\u53e4', "GU");
+        test('\u53e5', "JU");
+        test('\u53e6', "LING");
+        test('\u53e7', "GUA");
+        test('\u53e8', "DAO");
+        test('\u53e9', "KOU");
+        test('\u53ea', "ZHI");
+        test('\u53eb', "JIAO");
+        test('\u53ec', "ZHAO");
+        test('\u53ed', "BA");
+        test('\u53ee', "DING");
+        test('\u53ef', "KE");
+        test('\u53f0', "TAI");
+        test('\u53f1', "CHI");
+        test('\u53f2', "SHI");
+        test('\u53f3', "YOU");
+        test('\u53f4', "QIU");
+        test('\u53f5', "PO");
+        test('\u53f6', "YE");
+        test('\u53f7', "HAO");
+        test('\u53f8', "SI");
+        test('\u53f9', "TAN");
+        test('\u53fa', "CHI");
+        test('\u53fb', "LE");
+        test('\u53fc', "DIAO");
+        test('\u53fd', "JI");
+        test('\u53fe', "LIAO");
+        test('\u53ff', "HONG");
+        test('\u5400', "MIE");
+        test('\u5401', "XU");
+        test('\u5402', "MANG");
+        test('\u5403', "CHI");
+        test('\u5404', "GE");
+        test('\u5405', "XUAN");
+        test('\u5406', "YAO");
+        test('\u5407', "ZI");
+        test('\u5408', "HE");
+        test('\u5409', "JI");
+        test('\u540a', "DIAO");
+        test('\u540b', "CUN");
+        test('\u540c', "TONG");
+        test('\u540d', "MING");
+        test('\u540e', "HOU");
+        test('\u540f', "LI");
+        test('\u5410', "TU");
+        test('\u5411', "XIANG");
+        test('\u5412', "ZHA");
+        test('\u5413', "XIA");
+        test('\u5414', "YE");
+        test('\u5415', "LU");
+        test('\u5416', "YA");
+        test('\u5417', "MA");
+        test('\u5418', "OU");
+        test('\u5419', "HUO");
+        test('\u541a', "YI");
+        test('\u541b', "JUN");
+        test('\u541c', "CHOU");
+        test('\u541d', "LIN");
+        test('\u541e', "TUN");
+        test('\u541f', "YIN");
+        test('\u5420', "FEI");
+        test('\u5421', "BI");
+        test('\u5422', "QIN");
+        test('\u5423', "QIN");
+        test('\u5424', "JIE");
+        test('\u5425', "BU");
+        test('\u5426', "FOU");
+        test('\u5427', "BA");
+        test('\u5428', "DUN");
+        test('\u5429', "FEN");
+        test('\u542a', "E");
+        test('\u542b', "HAN");
+        test('\u542c', "TING");
+        test('\u542d', "KENG");
+        test('\u542e', "SHUN");
+        test('\u542f', "QI");
+        test('\u5430', "HONG");
+        test('\u5431', "ZHI");
+        test('\u5432', "YIN");
+        test('\u5433', "WU");
+        test('\u5434', "WU");
+        test('\u5435', "CHAO");
+        test('\u5436', "NE");
+        test('\u5437', "XUE");
+        test('\u5438', "XI");
+        test('\u5439', "CHUI");
+        test('\u543a', "DOU");
+        test('\u543b', "WEN");
+        test('\u543c', "HOU");
+        test('\u543d', "HONG");
+        test('\u543e', "WU");
+        test('\u543f', "GAO");
+        test('\u5440', "YA");
+        test('\u5441', "JUN");
+        test('\u5442', "LU");
+        test('\u5443', "E");
+        test('\u5444', "GE");
+        test('\u5445', "MEI");
+        test('\u5446', "DAI");
+        test('\u5447', "QI");
+        test('\u5448', "CHENG");
+        test('\u5449', "WU");
+        test('\u544a', "GAO");
+        test('\u544b', "FU");
+        test('\u544c', "JIAO");
+        test('\u544d', "HONG");
+        test('\u544e', "CHI");
+        test('\u544f', "SHENG");
+        test('\u5450', "NE");
+        test('\u5451', "TUN");
+        test('\u5452', "FU");
+        test('\u5453', "YI");
+        test('\u5454', "DAI");
+        test('\u5455', "OU");
+        test('\u5456', "LI");
+        test('\u5457', "BEI");
+        test('\u5458', "YUAN");
+        test('\u5459', "GUO");
+        test('\u545a', "WEN");
+        test('\u545b', "QIANG");
+        test('\u545c', "WU");
+        test('\u545d', "E");
+        test('\u545e', "SHI");
+        test('\u545f', "JUAN");
+        test('\u5460', "PEN");
+        test('\u5461', "WEN");
+        test('\u5462', "NE");
+        test('\u5463', "M");
+        test('\u5464', "LING");
+        test('\u5465', "RAN");
+        test('\u5466', "YOU");
+        test('\u5467', "DI");
+        test('\u5468', "ZHOU");
+        test('\u5469', "SHI");
+        test('\u546a', "ZHOU");
+        test('\u546b', "TIE");
+        test('\u546c', "XI");
+        test('\u546d', "YI");
+        test('\u546e', "QI");
+        test('\u546f', "PING");
+        test('\u5470', "ZI");
+        test('\u5471', "GU");
+        test('\u5472', "CI");
+        test('\u5473', "WEI");
+        test('\u5474', "XU");
+        test('\u5475', "A");
+        test('\u5476', "NAO");
+        test('\u5477', "GA");
+        test('\u5478', "PEI");
+        test('\u5479', "YI");
+        test('\u547a', "XIAO");
+        test('\u547b', "SHEN");
+        test('\u547c', "HU");
+        test('\u547d', "MING");
+        test('\u547e', "DA");
+        test('\u547f', "QU");
+        test('\u5480', "JU");
+        test('\u5481', "HAN");
+        test('\u5482', "ZA");
+        test('\u5483', "TUO");
+        test('\u5484', "DUO");
+        test('\u5485', "POU");
+        test('\u5486', "PAO");
+        test('\u5487', "BIE");
+        test('\u5488', "FU");
+        test('\u5489', "YANG");
+        test('\u548a', "HE");
+        test('\u548b', "ZA");
+        test('\u548c', "HE");
+        test('\u548d', "HAI");
+        test('\u548e', "JIU");
+        test('\u548f', "YONG");
+        test('\u5490', "FU");
+        test('\u5491', "DA");
+        test('\u5492', "ZHOU");
+        test('\u5493', "WA");
+        test('\u5494', "KA");
+        test('\u5495', "GU");
+        test('\u5496', "KA");
+        test('\u5497', "ZUO");
+        test('\u5498', "BU");
+        test('\u5499', "LONG");
+        test('\u549a', "DONG");
+        test('\u549b', "NING");
+        test('\u549c', "TA");
+        test('\u549d', "SI");
+        test('\u549e', "XIAN");
+        test('\u549f', "HUO");
+        test('\u54a0', "QI");
+        test('\u54a1', "ER");
+        test('\u54a2', "E");
+        test('\u54a3', "GUANG");
+        test('\u54a4', "ZHA");
+        test('\u54a5', "XI");
+        test('\u54a6', "YI");
+        test('\u54a7', "LIE");
+        test('\u54a8', "ZI");
+        test('\u54a9', "MIE");
+        test('\u54aa', "MI");
+        test('\u54ab', "ZHI");
+        test('\u54ac', "YAO");
+        test('\u54ad', "JI");
+        test('\u54ae', "ZHOU");
+        test('\u54af', "GE");
+        test('\u54b0', "SHU");
+        test('\u54b1', "ZAN");
+        test('\u54b2', "XIAO");
+        test('\u54b3', "HAI");
+        test('\u54b4', "HUI");
+        test('\u54b5', "KUA");
+        test('\u54b6', "HUAI");
+        test('\u54b7', "TAO");
+        test('\u54b8', "XIAN");
+        test('\u54b9', "E");
+        test('\u54ba', "XUAN");
+        test('\u54bb', "XIU");
+        test('\u54bc', "GUO");
+        test('\u54bd', "YAN");
+        test('\u54be', "LAO");
+        test('\u54bf', "YI");
+        test('\u54c0', "AI");
+        test('\u54c1', "PIN");
+        test('\u54c2', "SHEN");
+        test('\u54c3', "TONG");
+        test('\u54c4', "HONG");
+        test('\u54c5', "XIONG");
+        test('\u54c6', "DUO");
+        test('\u54c7', "WA");
+        test('\u54c8', "HA");
+        test('\u54c9', "ZAI");
+        test('\u54ca', "YOU");
+        test('\u54cb', "DIE");
+        test('\u54cc', "PAI");
+        test('\u54cd', "XIANG");
+        test('\u54ce', "AI");
+        test('\u54cf', "GEN");
+        test('\u54d0', "KUANG");
+        test('\u54d1', "YA");
+        test('\u54d2', "DA");
+        test('\u54d3', "XIAO");
+        test('\u54d4', "BI");
+        test('\u54d5', "HUI");
+        test('\u54d6', "NIAN");
+        test('\u54d7', "HUA");
+        test('\u54d8', "XING");
+        test('\u54d9', "KUAI");
+        test('\u54da', "DUO");
+        test('\u54db', "FEN");
+        test('\u54dc', "JI");
+        test('\u54dd', "NONG");
+        test('\u54de', "MOU");
+        test('\u54df', "YO");
+        test('\u54e0', "HAO");
+        test('\u54e1', "YUAN");
+        test('\u54e2', "LONG");
+        test('\u54e3', "POU");
+        test('\u54e4', "MANG");
+        test('\u54e5', "GE");
+        test('\u54e6', "O");
+        test('\u54e7', "CHI");
+        test('\u54e8', "SHAO");
+        test('\u54e9', "LI");
+        test('\u54ea', "NA");
+        test('\u54eb', "ZU");
+        test('\u54ec', "HE");
+        test('\u54ed', "KU");
+        test('\u54ee', "XIAO");
+        test('\u54ef', "XIAN");
+        test('\u54f0', "LAO");
+        test('\u54f1', "BO");
+        test('\u54f2', "ZHE");
+        test('\u54f3', "ZHA");
+        test('\u54f4', "LIANG");
+        test('\u54f5', "BA");
+        test('\u54f6', "MIE");
+        test('\u54f7', "LIE");
+        test('\u54f8', "SUI");
+        test('\u54f9', "FU");
+        test('\u54fa', "BU");
+        test('\u54fb', "HAN");
+        test('\u54fc', "HENG");
+        test('\u54fd', "GENG");
+        test('\u54fe', "SHUO");
+        test('\u54ff', "GE");
+        test('\u5500', "YOU");
+        test('\u5501', "YAN");
+        test('\u5502', "GU");
+        test('\u5503', "GU");
+        test('\u5504', "BEI");
+        test('\u5505', "HAN");
+        test('\u5506', "SUO");
+        test('\u5507', "CHUN");
+        test('\u5508', "YI");
+        test('\u5509', "AI");
+        test('\u550a', "JIA");
+        test('\u550b', "TU");
+        test('\u550c', "XIAN");
+        test('\u550d', "WAN");
+        test('\u550e', "LI");
+        test('\u550f', "XI");
+        test('\u5510', "TANG");
+        test('\u5511', "ZUO");
+        test('\u5512', "QIU");
+        test('\u5513', "CHE");
+        test('\u5514', "WU");
+        test('\u5515', "ZAO");
+        test('\u5516', "YA");
+        test('\u5517', "DOU");
+        test('\u5518', "QI");
+        test('\u5519', "DI");
+        test('\u551a', "QIN");
+        test('\u551b', "MA");
+        test('\u551c', "MO");
+        test('\u551d', "GONG");
+        test('\u551e', "DOU");
+        test('\u551f', "QU");
+        test('\u5520', "LAO");
+        test('\u5521', "LIANG");
+        test('\u5522', "SUO");
+        test('\u5523', "ZAO");
+        test('\u5524', "HUAN");
+        test('\u5525', "LANG");
+        test('\u5526', "SHA");
+        test('\u5527', "JI");
+        test('\u5528', "ZUO");
+        test('\u5529', "WO");
+        test('\u552a', "FENG");
+        test('\u552b', "JIN");
+        test('\u552c', "HU");
+        test('\u552d', "QI");
+        test('\u552e', "SHOU");
+        test('\u552f', "WEI");
+        test('\u5530', "SHUA");
+        test('\u5531', "CHANG");
+        test('\u5532', "ER");
+        test('\u5533', "LI");
+        test('\u5534', "QIANG");
+        test('\u5535', "AN");
+        test('\u5536', "ZE");
+        test('\u5537', "YO");
+        test('\u5538', "NIAN");
+        test('\u5539', "YU");
+        test('\u553a', "TIAN");
+        test('\u553b', "LAI");
+        test('\u553c', "SHA");
+        test('\u553d', "XI");
+        test('\u553e', "TUO");
+        test('\u553f', "HU");
+        test('\u5540', "AI");
+        test('\u5541', "ZHAO");
+        test('\u5542', "NOU");
+        test('\u5543', "KEN");
+        test('\u5544', "ZHUO");
+        test('\u5545', "ZHUO");
+        test('\u5546', "SHANG");
+        test('\u5547', "DI");
+        test('\u5548', "HENG");
+        test('\u5549', "LIN");
+        test('\u554a', "A");
+        test('\u554b', "CAI");
+        test('\u554c', "XIANG");
+        test('\u554d', "TUN");
+        test('\u554e', "WU");
+        test('\u554f', "WEN");
+        test('\u5550', "CUI");
+        test('\u5551', "SHA");
+        test('\u5552', "GU");
+        test('\u5553', "QI");
+        test('\u5554', "QI");
+        test('\u5555', "TAO");
+        test('\u5556', "DAN");
+        test('\u5557', "DAN");
+        test('\u5558', "YE");
+        test('\u5559', "ZI");
+        test('\u555a', "BI");
+        test('\u555b', "CUI");
+        test('\u555c', "CHUAI");
+        test('\u555d', "HE");
+        test('\u555e', "YA");
+        test('\u555f', "QI");
+        test('\u5560', "ZHE");
+        test('\u5561', "FEI");
+        test('\u5562', "LIANG");
+        test('\u5563', "XIAN");
+        test('\u5564', "PI");
+        test('\u5565', "SHA");
+        test('\u5566', "LA");
+        test('\u5567', "ZE");
+        test('\u5568', "YING");
+        test('\u5569', "GUA");
+        test('\u556a', "PA");
+        test('\u556b', "ZHE");
+        test('\u556c', "SE");
+        test('\u556d', "ZHUAN");
+        test('\u556e', "NIE");
+        test('\u556f', "GUO");
+        test('\u5570', "LUO");
+        test('\u5571', "YAN");
+        test('\u5572', "DI");
+        test('\u5573', "QUAN");
+        test('\u5574', "CHAN");
+        test('\u5575', "BO");
+        test('\u5576', "DING");
+        test('\u5577', "LANG");
+        test('\u5578', "XIAO");
+        test('\u5579', "JU");
+        test('\u557a', "TANG");
+        test('\u557b', "CHI");
+        test('\u557c', "TI");
+        test('\u557d', "AN");
+        test('\u557e', "JIU");
+        test('\u557f', "DAN");
+        test('\u5580', "KA");
+        test('\u5581', "YONG");
+        test('\u5582', "WEI");
+        test('\u5583', "NAN");
+        test('\u5584', "SHAN");
+        test('\u5585', "YU");
+        test('\u5586', "ZHE");
+        test('\u5587', "LA");
+        test('\u5588', "JIE");
+        test('\u5589', "HOU");
+        test('\u558a', "HAN");
+        test('\u558b', "DIE");
+        test('\u558c', "ZHOU");
+        test('\u558d', "CHAI");
+        test('\u558e', "WAI");
+        test('\u558f', "NUO");
+        test('\u5590', "YU");
+        test('\u5591', "YIN");
+        test('\u5592', "ZA");
+        test('\u5593', "YAO");
+        test('\u5594', "O");
+        test('\u5595', "MIAN");
+        test('\u5596', "HU");
+        test('\u5597', "YUN");
+        test('\u5598', "CHUAN");
+        test('\u5599', "HUI");
+        test('\u559a', "HUAN");
+        test('\u559b', "HUAN");
+        test('\u559c', "XI");
+        test('\u559d', "HE");
+        test('\u559e', "JI");
+        test('\u559f', "KUI");
+        test('\u55a0', "ZHONG");
+        test('\u55a1', "WEI");
+        test('\u55a2', "SHA");
+        test('\u55a3', "XU");
+        test('\u55a4', "HUANG");
+        test('\u55a5', "DUO");
+        test('\u55a6', "NIE");
+        test('\u55a7', "XUAN");
+        test('\u55a8', "LIANG");
+        test('\u55a9', "YU");
+        test('\u55aa', "SANG");
+        test('\u55ab', "CHI");
+        test('\u55ac', "QIAO");
+        test('\u55ad', "YAN");
+        test('\u55ae', "DAN");
+        test('\u55af', "PEN");
+        test('\u55b0', "CAN");
+        test('\u55b1', "LI");
+        test('\u55b2', "YO");
+        test('\u55b3', "ZHA");
+        test('\u55b4', "WEI");
+        test('\u55b5', "MIAO");
+        test('\u55b6', "YING");
+        test('\u55b7', "PEN");
+        test('\u55b8', "BU");
+        test('\u55b9', "KUI");
+        test('\u55ba', "XI");
+        test('\u55bb', "YU");
+        test('\u55bc', "JIE");
+        test('\u55bd', "LOU");
+        test('\u55be', "KU");
+        test('\u55bf', "ZAO");
+        test('\u55c0', "HU");
+        test('\u55c1', "TI");
+        test('\u55c2', "YAO");
+        test('\u55c3', "HE");
+        test('\u55c4', "A");
+        test('\u55c5', "XIU");
+        test('\u55c6', "QIANG");
+        test('\u55c7', "SE");
+        test('\u55c8', "YONG");
+        test('\u55c9', "SU");
+        test('\u55ca', "HONG");
+        test('\u55cb', "XIE");
+        test('\u55cc', "AI");
+        test('\u55cd', "SUO");
+        test('\u55ce', "MA");
+        test('\u55cf', "CHA");
+        test('\u55d0', "HAI");
+        test('\u55d1', "KE");
+        test('\u55d2', "DA");
+        test('\u55d3', "SANG");
+        test('\u55d4', "CHEN");
+        test('\u55d5', "RU");
+        test('\u55d6', "SOU");
+        test('\u55d7', "WA");
+        test('\u55d8', "JI");
+        test('\u55d9', "PANG");
+        test('\u55da', "WU");
+        test('\u55db', "QIAN");
+        test('\u55dc', "SHI");
+        test('\u55dd', "GE");
+        test('\u55de', "ZI");
+        test('\u55df', "JIE");
+        test('\u55e0', "LUO");
+        test('\u55e1', "WENG");
+        test('\u55e2', "WA");
+        test('\u55e3', "SI");
+        test('\u55e4', "CHI");
+        test('\u55e5', "HAO");
+        test('\u55e6', "SUO");
+        test('\u55e7', "");
+        test('\u55e8', "HAI");
+        test('\u55e9', "SUO");
+        test('\u55ea', "QIN");
+        test('\u55eb', "NIE");
+        test('\u55ec', "HE");
+        test('\u55ed', "ZHI");
+        test('\u55ee', "SAI");
+        test('\u55ef', "N");
+        test('\u55f0', "GE");
+        test('\u55f1', "NA");
+        test('\u55f2', "DIA");
+        test('\u55f3', "AI");
+        test('\u55f4', "QIANG");
+        test('\u55f5', "TONG");
+        test('\u55f6', "BI");
+        test('\u55f7', "AO");
+        test('\u55f8', "AO");
+        test('\u55f9', "LIAN");
+        test('\u55fa', "ZUI");
+        test('\u55fb', "ZHE");
+        test('\u55fc', "MO");
+        test('\u55fd', "SOU");
+        test('\u55fe', "SOU");
+        test('\u55ff', "TAN");
+    }
+
+    @SmallTest
+    public void test_2() throws Exception {
+        if (!hasChineseTransliterator()) {
+            return;
+        }
+        test('\u5600', "DI");
+        test('\u5601', "QI");
+        test('\u5602', "JIAO");
+        test('\u5603', "CHONG");
+        test('\u5604', "JIAO");
+        test('\u5605', "KAI");
+        test('\u5606', "TAN");
+        test('\u5607', "SHAN");
+        test('\u5608', "CAO");
+        test('\u5609', "JIA");
+        test('\u560a', "AI");
+        test('\u560b', "XIAO");
+        test('\u560c', "PIAO");
+        test('\u560d', "LOU");
+        test('\u560e', "GA");
+        test('\u560f', "GU");
+        test('\u5610', "XIAO");
+        test('\u5611', "HU");
+        test('\u5612', "HUI");
+        test('\u5613', "GUO");
+        test('\u5614', "OU");
+        test('\u5615', "XIAN");
+        test('\u5616', "ZE");
+        test('\u5617', "CHANG");
+        test('\u5618', "XU");
+        test('\u5619', "PO");
+        test('\u561a', "DE");
+        test('\u561b', "MA");
+        test('\u561c', "MA");
+        test('\u561d', "HU");
+        test('\u561e', "LEI");
+        test('\u561f', "DU");
+        test('\u5620', "GA");
+        test('\u5621', "TANG");
+        test('\u5622', "YE");
+        test('\u5623', "BENG");
+        test('\u5624', "YING");
+        test('\u5625', "SAI");
+        test('\u5626', "JIAO");
+        test('\u5627', "MI");
+        test('\u5628', "XIAO");
+        test('\u5629', "HUA");
+        test('\u562a', "MAI");
+        test('\u562b', "RAN");
+        test('\u562c', "CHUAI");
+        test('\u562d', "PENG");
+        test('\u562e', "LAO");
+        test('\u562f', "XIAO");
+        test('\u5630', "JI");
+        test('\u5631', "ZHU");
+        test('\u5632', "CHAO");
+        test('\u5633', "KUI");
+        test('\u5634', "ZUI");
+        test('\u5635', "XIAO");
+        test('\u5636', "SI");
+        test('\u5637', "HAO");
+        test('\u5638', "FU");
+        test('\u5639', "LIAO");
+        test('\u563a', "QIAO");
+        test('\u563b', "XI");
+        test('\u563c', "CHU");
+        test('\u563d', "CHAN");
+        test('\u563e', "DAN");
+        test('\u563f', "HEI");
+        test('\u5640', "XUN");
+        test('\u5641', "E");
+        test('\u5642', "ZUN");
+        test('\u5643', "FAN");
+        test('\u5644', "CHI");
+        test('\u5645', "HUI");
+        test('\u5646', "ZAN");
+        test('\u5647', "CHUANG");
+        test('\u5648', "CU");
+        test('\u5649', "DAN");
+        test('\u564a', "YU");
+        test('\u564b', "TUN");
+        test('\u564c', "CENG");
+        test('\u564d', "JIAO");
+        test('\u564e', "YE");
+        test('\u564f', "XI");
+        test('\u5650', "QI");
+        test('\u5651', "HAO");
+        test('\u5652', "LIAN");
+        test('\u5653', "XU");
+        test('\u5654', "DENG");
+        test('\u5655', "HUI");
+        test('\u5656', "YIN");
+        test('\u5657', "PU");
+        test('\u5658', "JUE");
+        test('\u5659', "QIN");
+        test('\u565a', "XUN");
+        test('\u565b', "NIE");
+        test('\u565c', "LU");
+        test('\u565d', "SI");
+        test('\u565e', "YAN");
+        test('\u565f', "YING");
+        test('\u5660', "DA");
+        test('\u5661', "ZHAN");
+        test('\u5662', "O");
+        test('\u5663', "ZHOU");
+        test('\u5664', "JIN");
+        test('\u5665', "NONG");
+        test('\u5666', "HUI");
+        test('\u5667', "XIE");
+        test('\u5668', "QI");
+        test('\u5669', "E");
+        test('\u566a', "ZAO");
+        test('\u566b', "YI");
+        test('\u566c', "SHI");
+        test('\u566d', "JIAO");
+        test('\u566e', "YUAN");
+        test('\u566f', "AI");
+        test('\u5670', "YONG");
+        test('\u5671', "JUE");
+        test('\u5672', "KUAI");
+        test('\u5673', "YU");
+        test('\u5674', "PEN");
+        test('\u5675', "DAO");
+        test('\u5676', "GA");
+        test('\u5677', "HM");
+        test('\u5678', "DUN");
+        test('\u5679', "DANG");
+        test('\u567a', "XIN");
+        test('\u567b', "SAI");
+        test('\u567c', "PI");
+        test('\u567d', "PI");
+        test('\u567e', "YIN");
+        test('\u567f', "ZUI");
+        test('\u5680', "NING");
+        test('\u5681', "DI");
+        test('\u5682', "LAN");
+        test('\u5683', "TA");
+        test('\u5684', "HUO");
+        test('\u5685', "RU");
+        test('\u5686', "HAO");
+        test('\u5687', "XIA");
+        test('\u5688', "YE");
+        test('\u5689', "DUO");
+        test('\u568a', "PI");
+        test('\u568b', "CHOU");
+        test('\u568c', "JI");
+        test('\u568d', "JIN");
+        test('\u568e', "HAO");
+        test('\u568f', "TI");
+        test('\u5690', "CHANG");
+        test('\u5691', "XUN");
+        test('\u5692', "ME");
+        test('\u5693', "CA");
+        test('\u5694', "TI");
+        test('\u5695', "LU");
+        test('\u5696', "HUI");
+        test('\u5697', "BO");
+        test('\u5698', "YOU");
+        test('\u5699', "NIE");
+        test('\u569a', "YIN");
+        test('\u569b', "HU");
+        test('\u569c', "ME");
+        test('\u569d', "HONG");
+        test('\u569e', "ZHE");
+        test('\u569f', "LI");
+        test('\u56a0', "LIU");
+        test('\u56a1', "HAI");
+        test('\u56a2', "NANG");
+        test('\u56a3', "XIAO");
+        test('\u56a4', "MO");
+        test('\u56a5', "YAN");
+        test('\u56a6', "LI");
+        test('\u56a7', "LU");
+        test('\u56a8', "LONG");
+        test('\u56a9', "MO");
+        test('\u56aa', "DAN");
+        test('\u56ab', "CHEN");
+        test('\u56ac', "PIN");
+        test('\u56ad', "PI");
+        test('\u56ae', "XIANG");
+        test('\u56af', "HUO");
+        test('\u56b0', "MO");
+        test('\u56b1', "XI");
+        test('\u56b2', "DUO");
+        test('\u56b3', "KU");
+        test('\u56b4', "YAN");
+        test('\u56b5', "CHAN");
+        test('\u56b6', "YING");
+        test('\u56b7', "RANG");
+        test('\u56b8', "DIAN");
+        test('\u56b9', "LA");
+        test('\u56ba', "TA");
+        test('\u56bb', "XIAO");
+        test('\u56bc', "JUE");
+        test('\u56bd', "CHUO");
+        test('\u56be', "HUAN");
+        test('\u56bf', "HUO");
+        test('\u56c0', "ZHUAN");
+        test('\u56c1', "NIE");
+        test('\u56c2', "XIAO");
+        test('\u56c3', "CA");
+        test('\u56c4', "LI");
+        test('\u56c5', "CHAN");
+        test('\u56c6', "CHAI");
+        test('\u56c7', "LI");
+        test('\u56c8', "YI");
+        test('\u56c9', "LUO");
+        test('\u56ca', "NANG");
+        test('\u56cb', "ZA");
+        test('\u56cc', "SU");
+        test('\u56cd', "XI");
+        test('\u56ce', "ZEN");
+        test('\u56cf', "JIAN");
+        test('\u56d0', "ZA");
+        test('\u56d1', "ZHU");
+        test('\u56d2', "LAN");
+        test('\u56d3', "NIE");
+        test('\u56d4', "NANG");
+        test('\u56d5', "LAN");
+        test('\u56d6', "LO");
+        test('\u56d7', "WEI");
+        test('\u56d8', "HUI");
+        test('\u56d9', "YIN");
+        test('\u56da', "QIU");
+        test('\u56db', "SI");
+        test('\u56dc', "NIN");
+        test('\u56dd', "JIAN");
+        test('\u56de', "HUI");
+        test('\u56df', "XIN");
+        test('\u56e0', "YIN");
+        test('\u56e1', "NAN");
+        test('\u56e2', "TUAN");
+        test('\u56e3', "TUAN");
+        test('\u56e4', "DUN");
+        test('\u56e5', "KANG");
+        test('\u56e6', "YUAN");
+        test('\u56e7', "JIONG");
+        test('\u56e8', "PIAN");
+        test('\u56e9', "YUN");
+        test('\u56ea', "CONG");
+        test('\u56eb', "HU");
+        test('\u56ec', "HUI");
+        test('\u56ed', "YUAN");
+        test('\u56ee', "E");
+        test('\u56ef', "GUO");
+        test('\u56f0', "KUN");
+        test('\u56f1', "CONG");
+        test('\u56f2', "TONG");
+        test('\u56f3', "TU");
+        test('\u56f4', "WEI");
+        test('\u56f5', "LUN");
+        test('\u56f6', "GUO");
+        test('\u56f7', "QUN");
+        test('\u56f8', "RI");
+        test('\u56f9', "LING");
+        test('\u56fa', "GU");
+        test('\u56fb', "GUO");
+        test('\u56fc', "TAI");
+        test('\u56fd', "GUO");
+        test('\u56fe', "TU");
+        test('\u56ff', "YOU");
+        test('\u5700', "GUO");
+        test('\u5701', "YIN");
+        test('\u5702', "HUN");
+        test('\u5703', "PU");
+        test('\u5704', "YU");
+        test('\u5705', "HAN");
+        test('\u5706', "YUAN");
+        test('\u5707', "LUN");
+        test('\u5708', "QUAN");
+        test('\u5709', "YU");
+        test('\u570a', "QING");
+        test('\u570b', "GUO");
+        test('\u570c', "CHUAN");
+        test('\u570d', "WEI");
+        test('\u570e', "YUAN");
+        test('\u570f', "QUAN");
+        test('\u5710', "KU");
+        test('\u5711', "FU");
+        test('\u5712', "YUAN");
+        test('\u5713', "YUAN");
+        test('\u5714', "YA");
+        test('\u5715', "TU");
+        test('\u5716', "TU");
+        test('\u5717', "TU");
+        test('\u5718', "TUAN");
+        test('\u5719', "LUE");
+        test('\u571a', "HUI");
+        test('\u571b', "YI");
+        test('\u571c', "HUAN");
+        test('\u571d', "LUAN");
+        test('\u571e', "LUAN");
+        test('\u571f', "TU");
+        test('\u5720', "YA");
+        test('\u5721', "TU");
+        test('\u5722', "TING");
+        test('\u5723', "SHENG");
+        test('\u5724', "PU");
+        test('\u5725', "LU");
+        test('\u5726', "KUAI");
+        test('\u5727', "YA");
+        test('\u5728', "ZAI");
+        test('\u5729', "WEI");
+        test('\u572a', "GE");
+        test('\u572b', "YU");
+        test('\u572c', "WU");
+        test('\u572d', "GUI");
+        test('\u572e', "PI");
+        test('\u572f', "YI");
+        test('\u5730', "DE");
+        test('\u5731', "QIAN");
+        test('\u5732', "QIAN");
+        test('\u5733', "ZHEN");
+        test('\u5734', "ZHUO");
+        test('\u5735', "DANG");
+        test('\u5736', "QIA");
+        test('\u5737', "XIA");
+        test('\u5738', "SHAN");
+        test('\u5739', "KUANG");
+        test('\u573a', "CHANG");
+        test('\u573b', "QI");
+        test('\u573c', "NIE");
+        test('\u573d', "MO");
+        test('\u573e', "JI");
+        test('\u573f', "JIA");
+        test('\u5740', "ZHI");
+        test('\u5741', "ZHI");
+        test('\u5742', "BAN");
+        test('\u5743', "XUN");
+        test('\u5744', "YI");
+        test('\u5745', "QIN");
+        test('\u5746', "MEI");
+        test('\u5747', "JUN");
+        test('\u5748', "RONG");
+        test('\u5749', "TUN");
+        test('\u574a', "FANG");
+        test('\u574b', "BEN");
+        test('\u574c', "BEN");
+        test('\u574d', "TAN");
+        test('\u574e', "KAN");
+        test('\u574f', "HUAI");
+        test('\u5750', "ZUO");
+        test('\u5751', "KENG");
+        test('\u5752', "BI");
+        test('\u5753', "JING");
+        test('\u5754', "DI");
+        test('\u5755', "JING");
+        test('\u5756', "JI");
+        test('\u5757', "KUAI");
+        test('\u5758', "DI");
+        test('\u5759', "JING");
+        test('\u575a', "JIAN");
+        test('\u575b', "TAN");
+        test('\u575c', "LI");
+        test('\u575d', "BA");
+        test('\u575e', "WU");
+        test('\u575f', "FEN");
+        test('\u5760', "ZHUI");
+        test('\u5761', "PO");
+        test('\u5762', "BAN");
+        test('\u5763', "TANG");
+        test('\u5764', "KUN");
+        test('\u5765', "QU");
+        test('\u5766', "TAN");
+        test('\u5767', "ZHI");
+        test('\u5768', "TUO");
+        test('\u5769', "GAN");
+        test('\u576a', "PING");
+        test('\u576b', "DIAN");
+        test('\u576c', "GUA");
+        test('\u576d', "NI");
+        test('\u576e', "TAI");
+        test('\u576f', "PI");
+        test('\u5770', "JIONG");
+        test('\u5771', "YANG");
+        test('\u5772', "FO");
+        test('\u5773', "AO");
+        test('\u5774', "LU");
+        test('\u5775', "QIU");
+        test('\u5776', "MU");
+        test('\u5777', "KE");
+        test('\u5778', "GOU");
+        test('\u5779', "XUE");
+        test('\u577a', "BA");
+        test('\u577b', "CHI");
+        test('\u577c', "CHE");
+        test('\u577d', "LING");
+        test('\u577e', "ZHU");
+        test('\u577f', "FU");
+        test('\u5780', "HU");
+        test('\u5781', "ZHI");
+        test('\u5782', "CHUI");
+        test('\u5783', "LA");
+        test('\u5784', "LONG");
+        test('\u5785', "LONG");
+        test('\u5786', "LU");
+        test('\u5787', "AO");
+        test('\u5788', "DAI");
+        test('\u5789', "PAO");
+        test('\u578a', "MIN");
+        test('\u578b', "XING");
+        test('\u578c', "DONG");
+        test('\u578d', "JI");
+        test('\u578e', "HE");
+        test('\u578f', "LU");
+        test('\u5790', "CI");
+        test('\u5791', "CHI");
+        test('\u5792', "LEI");
+        test('\u5793', "GAI");
+        test('\u5794', "YIN");
+        test('\u5795', "HOU");
+        test('\u5796', "DUI");
+        test('\u5797', "ZHAO");
+        test('\u5798', "FU");
+        test('\u5799', "GUANG");
+        test('\u579a', "YAO");
+        test('\u579b', "DUO");
+        test('\u579c', "DUO");
+        test('\u579d', "GUI");
+        test('\u579e', "CHA");
+        test('\u579f', "YANG");
+        test('\u57a0', "YIN");
+        test('\u57a1', "FA");
+        test('\u57a2', "GOU");
+        test('\u57a3', "YUAN");
+        test('\u57a4', "DIE");
+        test('\u57a5', "XIE");
+        test('\u57a6', "KEN");
+        test('\u57a7', "SHANG");
+        test('\u57a8', "SHOU");
+        test('\u57a9', "E");
+        test('\u57aa', "BING");
+        test('\u57ab', "DIAN");
+        test('\u57ac', "HONG");
+        test('\u57ad', "YA");
+        test('\u57ae', "KUA");
+        test('\u57af', "DA");
+        test('\u57b0', "KA");
+        test('\u57b1', "DANG");
+        test('\u57b2', "KAI");
+        test('\u57b3', "HANG");
+        test('\u57b4', "NAO");
+        test('\u57b5', "AN");
+        test('\u57b6', "XING");
+        test('\u57b7', "XIAN");
+        test('\u57b8', "YUAN");
+        test('\u57b9', "BANG");
+        test('\u57ba', "FU");
+        test('\u57bb', "BA");
+        test('\u57bc', "YI");
+        test('\u57bd', "YIN");
+        test('\u57be', "HAN");
+        test('\u57bf', "XU");
+        test('\u57c0', "CHUI");
+        test('\u57c1', "QIN");
+        test('\u57c2', "GENG");
+        test('\u57c3', "AI");
+        test('\u57c4', "BENG");
+        test('\u57c5', "FANG");
+        test('\u57c6', "QUE");
+        test('\u57c7', "YONG");
+        test('\u57c8', "JUN");
+        test('\u57c9', "JIA");
+        test('\u57ca', "DI");
+        test('\u57cb', "MAI");
+        test('\u57cc', "LANG");
+        test('\u57cd', "JUAN");
+        test('\u57ce', "CHENG");
+        test('\u57cf', "SHAN");
+        test('\u57d0', "JIN");
+        test('\u57d1', "ZHE");
+        test('\u57d2', "LIE");
+        test('\u57d3', "LIE");
+        test('\u57d4', "BU");
+        test('\u57d5', "CHENG");
+        test('\u57d6', "HUA");
+        test('\u57d7', "BU");
+        test('\u57d8', "SHI");
+        test('\u57d9', "XUN");
+        test('\u57da', "GUO");
+        test('\u57db', "JIONG");
+        test('\u57dc', "YE");
+        test('\u57dd', "NIAN");
+        test('\u57de', "DI");
+        test('\u57df', "YU");
+        test('\u57e0', "BU");
+        test('\u57e1', "YA");
+        test('\u57e2', "QUAN");
+        test('\u57e3', "SUI");
+        test('\u57e4', "PI");
+        test('\u57e5', "QING");
+        test('\u57e6', "WAN");
+        test('\u57e7', "JU");
+        test('\u57e8', "LUN");
+        test('\u57e9', "ZHENG");
+        test('\u57ea', "KONG");
+        test('\u57eb', "CHONG");
+        test('\u57ec', "DONG");
+        test('\u57ed', "DAI");
+        test('\u57ee', "TAN");
+        test('\u57ef', "AN");
+        test('\u57f0', "CAI");
+        test('\u57f1', "CHU");
+        test('\u57f2', "BENG");
+        test('\u57f3', "KAN");
+        test('\u57f4', "ZHI");
+        test('\u57f5', "DUO");
+        test('\u57f6', "YI");
+        test('\u57f7', "ZHI");
+        test('\u57f8', "YI");
+        test('\u57f9', "PEI");
+        test('\u57fa', "JI");
+        test('\u57fb', "ZHUN");
+        test('\u57fc', "QI");
+        test('\u57fd', "SAO");
+        test('\u57fe', "JU");
+        test('\u57ff', "NI");
+        test('\u5800', "KU");
+        test('\u5801', "KE");
+        test('\u5802', "TANG");
+        test('\u5803', "KUN");
+        test('\u5804', "NI");
+        test('\u5805', "JIAN");
+        test('\u5806', "DUI");
+        test('\u5807', "JIN");
+        test('\u5808', "GANG");
+        test('\u5809', "YU");
+        test('\u580a', "E");
+        test('\u580b', "PENG");
+        test('\u580c', "GU");
+        test('\u580d', "TU");
+        test('\u580e', "LENG");
+        test('\u580f', "FANG");
+        test('\u5810', "YA");
+        test('\u5811', "QIAN");
+        test('\u5812', "KUN");
+        test('\u5813', "AN");
+        test('\u5814', "SHEN");
+        test('\u5815', "DUO");
+        test('\u5816', "NAO");
+        test('\u5817', "TU");
+        test('\u5818', "CHENG");
+        test('\u5819', "YIN");
+        test('\u581a', "HUN");
+        test('\u581b', "BI");
+        test('\u581c', "LIAN");
+        test('\u581d', "GUO");
+        test('\u581e', "DIE");
+        test('\u581f', "ZHUAN");
+        test('\u5820', "HOU");
+        test('\u5821', "BAO");
+        test('\u5822', "BAO");
+        test('\u5823', "YU");
+        test('\u5824', "DI");
+        test('\u5825', "MAO");
+        test('\u5826', "JIE");
+        test('\u5827', "RUAN");
+        test('\u5828', "YE");
+        test('\u5829', "GENG");
+        test('\u582a', "KAN");
+        test('\u582b', "ZONG");
+        test('\u582c', "YU");
+        test('\u582d', "HUANG");
+        test('\u582e', "E");
+        test('\u582f', "YAO");
+        test('\u5830', "YAN");
+        test('\u5831', "BAO");
+        test('\u5832', "CI");
+        test('\u5833', "MEI");
+        test('\u5834', "CHANG");
+        test('\u5835', "DU");
+        test('\u5836', "TUO");
+        test('\u5837', "YIN");
+        test('\u5838', "FENG");
+        test('\u5839', "ZHONG");
+        test('\u583a', "JIE");
+        test('\u583b', "JIN");
+        test('\u583c', "HENG");
+        test('\u583d', "GANG");
+        test('\u583e', "CHUN");
+        test('\u583f', "JIAN");
+        test('\u5840', "PING");
+        test('\u5841', "LEI");
+        test('\u5842', "XIANG");
+        test('\u5843', "HUANG");
+        test('\u5844', "LENG");
+        test('\u5845', "DUAN");
+        test('\u5846', "WAN");
+        test('\u5847', "XUAN");
+        test('\u5848', "JI");
+        test('\u5849', "JI");
+        test('\u584a', "KUAI");
+        test('\u584b', "YING");
+        test('\u584c', "TA");
+        test('\u584d', "CHENG");
+        test('\u584e', "YONG");
+        test('\u584f', "KAI");
+        test('\u5850', "SU");
+        test('\u5851', "SU");
+        test('\u5852', "SHI");
+        test('\u5853', "MI");
+        test('\u5854', "TA");
+        test('\u5855', "WENG");
+        test('\u5856', "CHENG");
+        test('\u5857', "TU");
+        test('\u5858', "TANG");
+        test('\u5859', "QUE");
+        test('\u585a', "ZHONG");
+        test('\u585b', "LI");
+        test('\u585c', "ZHONG");
+        test('\u585d', "BANG");
+        test('\u585e', "SAI");
+        test('\u585f', "ZANG");
+        test('\u5860', "DUI");
+        test('\u5861', "TIAN");
+        test('\u5862', "WU");
+        test('\u5863', "ZHENG");
+        test('\u5864', "XUN");
+        test('\u5865', "GE");
+        test('\u5866', "ZHEN");
+        test('\u5867', "AI");
+        test('\u5868', "GONG");
+        test('\u5869', "YAN");
+        test('\u586a', "KAN");
+        test('\u586b', "TIAN");
+        test('\u586c', "YUAN");
+        test('\u586d', "WEN");
+        test('\u586e', "XIE");
+        test('\u586f', "LIU");
+        test('\u5870', "HAI");
+        test('\u5871', "LANG");
+        test('\u5872', "CHANG");
+        test('\u5873', "PENG");
+        test('\u5874', "BENG");
+        test('\u5875', "CHEN");
+        test('\u5876', "LU");
+        test('\u5877', "LU");
+        test('\u5878', "OU");
+        test('\u5879', "QIAN");
+        test('\u587a', "MEI");
+        test('\u587b', "MO");
+        test('\u587c', "ZHUAN");
+        test('\u587d', "SHUANG");
+        test('\u587e', "SHU");
+        test('\u587f', "LOU");
+        test('\u5880', "CHI");
+        test('\u5881', "MAN");
+        test('\u5882', "BIAO");
+        test('\u5883', "JING");
+        test('\u5884', "CE");
+        test('\u5885', "SHU");
+        test('\u5886', "ZHI");
+        test('\u5887', "ZHANG");
+        test('\u5888', "KAN");
+        test('\u5889', "YONG");
+        test('\u588a', "DIAN");
+        test('\u588b', "CHEN");
+        test('\u588c', "ZHI");
+        test('\u588d', "XI");
+        test('\u588e', "GUO");
+        test('\u588f', "QIANG");
+        test('\u5890', "JIN");
+        test('\u5891', "DI");
+        test('\u5892', "SHANG");
+        test('\u5893', "MU");
+        test('\u5894', "CUI");
+        test('\u5895', "YAN");
+        test('\u5896', "TA");
+        test('\u5897', "ZENG");
+        test('\u5898', "QIAN");
+        test('\u5899', "QIANG");
+        test('\u589a', "LIANG");
+        test('\u589b', "WEI");
+        test('\u589c', "ZHUI");
+        test('\u589d', "QIAO");
+        test('\u589e', "ZENG");
+        test('\u589f', "XU");
+        test('\u58a0', "SHAN");
+        test('\u58a1', "SHAN");
+        test('\u58a2', "BA");
+        test('\u58a3', "PU");
+        test('\u58a4', "KUAI");
+        test('\u58a5', "DONG");
+        test('\u58a6', "FAN");
+        test('\u58a7', "QUE");
+        test('\u58a8', "MO");
+        test('\u58a9', "DUN");
+        test('\u58aa', "DUN");
+        test('\u58ab', "ZUN");
+        test('\u58ac', "DI");
+        test('\u58ad', "SHENG");
+        test('\u58ae', "DUO");
+        test('\u58af', "DUO");
+        test('\u58b0', "TAN");
+        test('\u58b1', "DENG");
+        test('\u58b2', "MU");
+        test('\u58b3', "FEN");
+        test('\u58b4', "HUANG");
+        test('\u58b5', "TAN");
+        test('\u58b6', "DA");
+        test('\u58b7', "YE");
+        test('\u58b8', "ZHU");
+        test('\u58b9', "JIAN");
+        test('\u58ba', "AO");
+        test('\u58bb', "QIANG");
+        test('\u58bc', "JI");
+        test('\u58bd', "QIAO");
+        test('\u58be', "KEN");
+        test('\u58bf', "YI");
+        test('\u58c0', "PI");
+        test('\u58c1', "BI");
+        test('\u58c2', "DIAN");
+        test('\u58c3', "JIANG");
+        test('\u58c4', "YE");
+        test('\u58c5', "YONG");
+        test('\u58c6', "XUE");
+        test('\u58c7', "TAN");
+        test('\u58c8', "LAN");
+        test('\u58c9', "JU");
+        test('\u58ca', "HUAI");
+        test('\u58cb', "DANG");
+        test('\u58cc', "RANG");
+        test('\u58cd', "QIAN");
+        test('\u58ce', "XUN");
+        test('\u58cf', "XIAN");
+        test('\u58d0', "XI");
+        test('\u58d1', "HE");
+        test('\u58d2', "AI");
+        test('\u58d3', "YA");
+        test('\u58d4', "DAO");
+        test('\u58d5', "HAO");
+        test('\u58d6', "RUAN");
+        test('\u58d7', "JIN");
+        test('\u58d8', "LEI");
+        test('\u58d9', "KUANG");
+        test('\u58da', "LU");
+        test('\u58db', "YAN");
+        test('\u58dc', "TAN");
+        test('\u58dd', "WEI");
+        test('\u58de', "HUAI");
+        test('\u58df', "LONG");
+        test('\u58e0', "LONG");
+        test('\u58e1', "RUI");
+        test('\u58e2', "LI");
+        test('\u58e3', "LIN");
+        test('\u58e4', "RANG");
+        test('\u58e5', "CHAN");
+        test('\u58e6', "XUN");
+        test('\u58e7', "YAN");
+        test('\u58e8', "LEI");
+        test('\u58e9', "BA");
+        test('\u58ea', "WAN");
+        test('\u58eb', "SHI");
+        test('\u58ec', "REN");
+        test('\u58ed', "SAN");
+        test('\u58ee', "ZHUANG");
+        test('\u58ef', "ZHUANG");
+        test('\u58f0', "SHENG");
+        test('\u58f1', "YI");
+        test('\u58f2', "MAI");
+        test('\u58f3', "KE");
+        test('\u58f4', "ZHU");
+        test('\u58f5', "ZHUANG");
+        test('\u58f6', "HU");
+        test('\u58f7', "HU");
+        test('\u58f8', "KUN");
+        test('\u58f9', "YI");
+        test('\u58fa', "HU");
+        test('\u58fb', "XU");
+        test('\u58fc', "KUN");
+        test('\u58fd', "SHOU");
+        test('\u58fe', "MANG");
+        test('\u58ff', "ZUN");
+        test('\u5900', "SHOU");
+        test('\u5901', "YI");
+        test('\u5902', "ZHI");
+        test('\u5903', "GU");
+        test('\u5904', "CHU");
+        test('\u5905', "JIANG");
+        test('\u5906', "FENG");
+        test('\u5907', "BEI");
+        test('\u5908', "ZHAI");
+        test('\u5909', "BIAN");
+        test('\u590a', "SUI");
+        test('\u590b', "QUN");
+        test('\u590c', "LING");
+        test('\u590d', "FU");
+        test('\u590e', "CUO");
+        test('\u590f', "XIA");
+        test('\u5910', "XIONG");
+        test('\u5911', "XIE");
+        test('\u5912', "NAO");
+        test('\u5913', "XIA");
+        test('\u5914', "KUI");
+        test('\u5915', "XI");
+        test('\u5916', "WAI");
+        test('\u5917', "YUAN");
+        test('\u5918', "MAO");
+        test('\u5919', "SU");
+        test('\u591a', "DUO");
+        test('\u591b', "DUO");
+        test('\u591c', "YE");
+        test('\u591d', "QING");
+        test('\u591e', "WAI");
+        test('\u591f', "GOU");
+        test('\u5920', "GOU");
+        test('\u5921', "QI");
+        test('\u5922', "MENG");
+        test('\u5923', "MENG");
+        test('\u5924', "YIN");
+        test('\u5925', "HUO");
+        test('\u5926', "CHEN");
+        test('\u5927', "DA");
+        test('\u5928', "ZE");
+        test('\u5929', "TIAN");
+        test('\u592a', "TAI");
+        test('\u592b', "FU");
+        test('\u592c', "GUAI");
+        test('\u592d', "YAO");
+        test('\u592e', "YANG");
+        test('\u592f', "HANG");
+        test('\u5930', "GAO");
+        test('\u5931', "SHI");
+        test('\u5932', "TAO");
+        test('\u5933', "TAI");
+        test('\u5934', "TOU");
+        test('\u5935', "YAN");
+        test('\u5936', "BI");
+        test('\u5937', "YI");
+        test('\u5938', "KUA");
+        test('\u5939', "JIA");
+        test('\u593a', "DUO");
+        test('\u593b', "HUA");
+        test('\u593c', "KUANG");
+        test('\u593d', "YUN");
+        test('\u593e', "JIA");
+        test('\u593f', "BA");
+        test('\u5940', "EN");
+        test('\u5941', "LIAN");
+        test('\u5942', "HUAN");
+        test('\u5943', "DI");
+        test('\u5944', "YAN");
+        test('\u5945', "PAO");
+        test('\u5946', "JUAN");
+        test('\u5947', "QI");
+        test('\u5948', "NAI");
+        test('\u5949', "FENG");
+        test('\u594a', "XIE");
+        test('\u594b', "FEN");
+        test('\u594c', "DIAN");
+        test('\u594d', "YANG");
+        test('\u594e', "KUI");
+        test('\u594f', "ZOU");
+        test('\u5950', "HUAN");
+        test('\u5951', "QI");
+        test('\u5952', "KAI");
+        test('\u5953', "ZHA");
+        test('\u5954', "BEN");
+        test('\u5955', "YI");
+        test('\u5956', "JIANG");
+        test('\u5957', "TAO");
+        test('\u5958', "ZANG");
+        test('\u5959', "BEN");
+        test('\u595a', "XI");
+        test('\u595b', "HUANG");
+        test('\u595c', "FEI");
+        test('\u595d', "DIAO");
+        test('\u595e', "XUN");
+        test('\u595f', "BENG");
+        test('\u5960', "DIAN");
+        test('\u5961', "AO");
+        test('\u5962', "SHE");
+        test('\u5963', "WENG");
+        test('\u5964', "HA");
+        test('\u5965', "AO");
+        test('\u5966', "WU");
+        test('\u5967', "AO");
+        test('\u5968', "JIANG");
+        test('\u5969', "LIAN");
+        test('\u596a', "DUO");
+        test('\u596b', "YUN");
+        test('\u596c', "JIANG");
+        test('\u596d', "SHI");
+        test('\u596e', "FEN");
+        test('\u596f', "HUO");
+        test('\u5970', "BI");
+        test('\u5971', "LUAN");
+        test('\u5972', "DUO");
+        test('\u5973', "NU");
+        test('\u5974', "NU");
+        test('\u5975', "DING");
+        test('\u5976', "NAI");
+        test('\u5977', "QIAN");
+        test('\u5978', "JIAN");
+        test('\u5979', "TA");
+        test('\u597a', "JIU");
+        test('\u597b', "NUAN");
+        test('\u597c', "CHA");
+        test('\u597d', "HAO");
+        test('\u597e', "XIAN");
+        test('\u597f', "FAN");
+        test('\u5980', "JI");
+        test('\u5981', "SHUO");
+        test('\u5982', "RU");
+        test('\u5983', "FEI");
+        test('\u5984', "WANG");
+        test('\u5985', "HONG");
+        test('\u5986', "ZHUANG");
+        test('\u5987', "FU");
+        test('\u5988', "MA");
+        test('\u5989', "DAN");
+        test('\u598a', "REN");
+        test('\u598b', "FU");
+        test('\u598c', "JING");
+        test('\u598d', "YAN");
+        test('\u598e', "HAI");
+        test('\u598f', "WEN");
+        test('\u5990', "ZHONG");
+        test('\u5991', "PA");
+        test('\u5992', "DU");
+        test('\u5993', "JI");
+        test('\u5994', "KENG");
+        test('\u5995', "ZHONG");
+        test('\u5996', "YAO");
+        test('\u5997', "JIN");
+        test('\u5998', "YUN");
+        test('\u5999', "MIAO");
+        test('\u599a', "FOU");
+        test('\u599b', "CHI");
+        test('\u599c', "YUE");
+        test('\u599d', "ZHUANG");
+        test('\u599e', "NIU");
+        test('\u599f', "YAN");
+        test('\u59a0', "NA");
+        test('\u59a1', "XIN");
+        test('\u59a2', "FEN");
+        test('\u59a3', "BI");
+        test('\u59a4', "YU");
+        test('\u59a5', "TUO");
+        test('\u59a6', "FENG");
+        test('\u59a7', "WAN");
+        test('\u59a8', "FANG");
+        test('\u59a9', "WU");
+        test('\u59aa', "YU");
+        test('\u59ab', "GUI");
+        test('\u59ac', "DU");
+        test('\u59ad', "BA");
+        test('\u59ae', "NI");
+        test('\u59af', "ZHOU");
+        test('\u59b0', "ZHUO");
+        test('\u59b1', "ZHAO");
+        test('\u59b2', "DA");
+        test('\u59b3', "NAI");
+        test('\u59b4', "YUAN");
+        test('\u59b5', "TOU");
+        test('\u59b6', "XIAN");
+        test('\u59b7', "ZHI");
+        test('\u59b8', "E");
+        test('\u59b9', "MEI");
+        test('\u59ba', "MO");
+        test('\u59bb', "QI");
+        test('\u59bc', "BI");
+        test('\u59bd', "SHEN");
+        test('\u59be', "QIE");
+        test('\u59bf', "E");
+        test('\u59c0', "HE");
+        test('\u59c1', "XU");
+        test('\u59c2', "FA");
+        test('\u59c3', "ZHENG");
+        test('\u59c4', "MIN");
+        test('\u59c5', "BAN");
+        test('\u59c6', "MU");
+        test('\u59c7', "FU");
+        test('\u59c8', "LING");
+        test('\u59c9', "ZI");
+        test('\u59ca', "ZI");
+        test('\u59cb', "SHI");
+        test('\u59cc', "RAN");
+        test('\u59cd', "SHAN");
+        test('\u59ce', "YANG");
+        test('\u59cf', "MAN");
+        test('\u59d0', "JIE");
+        test('\u59d1', "GU");
+        test('\u59d2', "SI");
+        test('\u59d3', "XING");
+        test('\u59d4', "WEI");
+        test('\u59d5', "ZI");
+        test('\u59d6', "JU");
+        test('\u59d7', "SHAN");
+        test('\u59d8', "PIN");
+        test('\u59d9', "REN");
+        test('\u59da', "YAO");
+        test('\u59db', "DONG");
+        test('\u59dc', "JIANG");
+        test('\u59dd', "SHU");
+        test('\u59de', "JI");
+        test('\u59df', "GAI");
+        test('\u59e0', "XIANG");
+        test('\u59e1', "HUA");
+        test('\u59e2', "JUAN");
+        test('\u59e3', "JIAO");
+        test('\u59e4', "GOU");
+        test('\u59e5', "LAO");
+        test('\u59e6', "JIAN");
+        test('\u59e7', "JIAN");
+        test('\u59e8', "YI");
+        test('\u59e9', "NIAN");
+        test('\u59ea', "ZHI");
+        test('\u59eb', "JI");
+        test('\u59ec', "JI");
+        test('\u59ed', "XIAN");
+        test('\u59ee', "HENG");
+        test('\u59ef', "GUANG");
+        test('\u59f0', "JUN");
+        test('\u59f1', "KUA");
+        test('\u59f2', "YAN");
+        test('\u59f3', "MING");
+        test('\u59f4', "LIE");
+        test('\u59f5', "PEI");
+        test('\u59f6', "E");
+        test('\u59f7', "YOU");
+        test('\u59f8', "YAN");
+        test('\u59f9', "CHA");
+        test('\u59fa', "SHEN");
+        test('\u59fb', "YIN");
+        test('\u59fc', "SHI");
+        test('\u59fd', "GUI");
+        test('\u59fe', "QUAN");
+        test('\u59ff', "ZI");
+    }
+
+    @SmallTest
+    public void test_3() throws Exception {
+        if (!hasChineseTransliterator()) {
+            return;
+        }
+        test('\u5a00', "SONG");
+        test('\u5a01', "WEI");
+        test('\u5a02', "HONG");
+        test('\u5a03', "WA");
+        test('\u5a04', "LOU");
+        test('\u5a05', "YA");
+        test('\u5a06', "RAO");
+        test('\u5a07', "JIAO");
+        test('\u5a08', "LUAN");
+        test('\u5a09', "PING");
+        test('\u5a0a', "XIAN");
+        test('\u5a0b', "SHAO");
+        test('\u5a0c', "LI");
+        test('\u5a0d', "CHENG");
+        test('\u5a0e', "XIE");
+        test('\u5a0f', "MANG");
+        test('\u5a10', "FU");
+        test('\u5a11', "SUO");
+        test('\u5a12', "MEI");
+        test('\u5a13', "WEI");
+        test('\u5a14', "KE");
+        test('\u5a15', "CHUO");
+        test('\u5a16', "CHUO");
+        test('\u5a17', "TING");
+        test('\u5a18', "NIANG");
+        test('\u5a19', "XING");
+        test('\u5a1a', "NAN");
+        test('\u5a1b', "YU");
+        test('\u5a1c', "NA");
+        test('\u5a1d', "POU");
+        test('\u5a1e', "NEI");
+        test('\u5a1f', "JUAN");
+        test('\u5a20', "SHEN");
+        test('\u5a21', "ZHI");
+        test('\u5a22', "HAN");
+        test('\u5a23', "DI");
+        test('\u5a24', "ZHUANG");
+        test('\u5a25', "E");
+        test('\u5a26', "PIN");
+        test('\u5a27', "TUI");
+        test('\u5a28', "XIAN");
+        test('\u5a29', "MIAN");
+        test('\u5a2a', "WU");
+        test('\u5a2b', "YAN");
+        test('\u5a2c', "WU");
+        test('\u5a2d', "AI");
+        test('\u5a2e', "YAN");
+        test('\u5a2f', "YU");
+        test('\u5a30', "SI");
+        test('\u5a31', "YU");
+        test('\u5a32', "WA");
+        test('\u5a33', "LI");
+        test('\u5a34', "XIAN");
+        test('\u5a35', "JU");
+        test('\u5a36', "QU");
+        test('\u5a37', "ZHUI");
+        test('\u5a38', "QI");
+        test('\u5a39', "XIAN");
+        test('\u5a3a', "ZHUO");
+        test('\u5a3b', "DONG");
+        test('\u5a3c', "CHANG");
+        test('\u5a3d', "LU");
+        test('\u5a3e', "AI");
+        test('\u5a3f', "E");
+        test('\u5a40', "E");
+        test('\u5a41', "LOU");
+        test('\u5a42', "MIAN");
+        test('\u5a43', "CONG");
+        test('\u5a44', "POU");
+        test('\u5a45', "JU");
+        test('\u5a46', "PO");
+        test('\u5a47', "CAI");
+        test('\u5a48', "LING");
+        test('\u5a49', "WAN");
+        test('\u5a4a', "BIAO");
+        test('\u5a4b', "XIAO");
+        test('\u5a4c', "SHU");
+        test('\u5a4d', "QI");
+        test('\u5a4e', "HUI");
+        test('\u5a4f', "FAN");
+        test('\u5a50', "WO");
+        test('\u5a51', "RUI");
+        test('\u5a52', "TAN");
+        test('\u5a53', "FEI");
+        test('\u5a54', "FEI");
+        test('\u5a55', "JIE");
+        test('\u5a56', "TIAN");
+        test('\u5a57', "NI");
+        test('\u5a58', "QUAN");
+        test('\u5a59', "JING");
+        test('\u5a5a', "HUN");
+        test('\u5a5b', "JING");
+        test('\u5a5c', "QIAN");
+        test('\u5a5d', "DIAN");
+        test('\u5a5e', "XING");
+        test('\u5a5f', "HU");
+        test('\u5a60', "WAN");
+        test('\u5a61', "LAI");
+        test('\u5a62', "BI");
+        test('\u5a63', "YIN");
+        test('\u5a64', "CHOU");
+        test('\u5a65', "NAO");
+        test('\u5a66', "FU");
+        test('\u5a67', "JING");
+        test('\u5a68', "LUN");
+        test('\u5a69', "AN");
+        test('\u5a6a', "LAN");
+        test('\u5a6b', "KUN");
+        test('\u5a6c', "YIN");
+        test('\u5a6d', "YA");
+        test('\u5a6e', "JU");
+        test('\u5a6f', "LI");
+        test('\u5a70', "DIAN");
+        test('\u5a71', "XIAN");
+        test('\u5a72', "HUA");
+        test('\u5a73', "HUA");
+        test('\u5a74', "YING");
+        test('\u5a75', "CHAN");
+        test('\u5a76', "SHEN");
+        test('\u5a77', "TING");
+        test('\u5a78', "DANG");
+        test('\u5a79', "YAO");
+        test('\u5a7a', "WU");
+        test('\u5a7b', "NAN");
+        test('\u5a7c', "CHUO");
+        test('\u5a7d', "JIA");
+        test('\u5a7e', "TOU");
+        test('\u5a7f', "XU");
+        test('\u5a80', "YU");
+        test('\u5a81', "WEI");
+        test('\u5a82', "DI");
+        test('\u5a83', "ROU");
+        test('\u5a84', "MEI");
+        test('\u5a85', "DAN");
+        test('\u5a86', "RUAN");
+        test('\u5a87', "QIN");
+        test('\u5a88', "HUI");
+        test('\u5a89', "WO");
+        test('\u5a8a', "QIAN");
+        test('\u5a8b', "CHUN");
+        test('\u5a8c', "MIAO");
+        test('\u5a8d', "FU");
+        test('\u5a8e', "JIE");
+        test('\u5a8f', "DUAN");
+        test('\u5a90', "YI");
+        test('\u5a91', "ZHONG");
+        test('\u5a92', "MEI");
+        test('\u5a93', "HUANG");
+        test('\u5a94', "MIAN");
+        test('\u5a95', "AN");
+        test('\u5a96', "YING");
+        test('\u5a97', "XUAN");
+        test('\u5a98', "JIE");
+        test('\u5a99', "WEI");
+        test('\u5a9a', "MEI");
+        test('\u5a9b', "YUAN");
+        test('\u5a9c', "ZHENG");
+        test('\u5a9d', "QIU");
+        test('\u5a9e', "SHI");
+        test('\u5a9f', "XIE");
+        test('\u5aa0', "TUO");
+        test('\u5aa1', "LIAN");
+        test('\u5aa2', "MAO");
+        test('\u5aa3', "RAN");
+        test('\u5aa4', "SI");
+        test('\u5aa5', "PIAN");
+        test('\u5aa6', "WEI");
+        test('\u5aa7', "WA");
+        test('\u5aa8', "JIU");
+        test('\u5aa9', "HU");
+        test('\u5aaa', "AO");
+        test('\u5aab', "QIE");
+        test('\u5aac', "BAO");
+        test('\u5aad', "XU");
+        test('\u5aae', "TOU");
+        test('\u5aaf', "GUI");
+        test('\u5ab0', "CHU");
+        test('\u5ab1', "YAO");
+        test('\u5ab2', "PI");
+        test('\u5ab3', "XI");
+        test('\u5ab4', "YUAN");
+        test('\u5ab5', "YING");
+        test('\u5ab6', "RONG");
+        test('\u5ab7', "RU");
+        test('\u5ab8', "CHI");
+        test('\u5ab9', "LIU");
+        test('\u5aba', "MEI");
+        test('\u5abb', "PAN");
+        test('\u5abc', "AO");
+        test('\u5abd', "MA");
+        test('\u5abe', "GOU");
+        test('\u5abf', "KUI");
+        test('\u5ac0', "QIN");
+        test('\u5ac1', "JIA");
+        test('\u5ac2', "SAO");
+        test('\u5ac3', "ZHEN");
+        test('\u5ac4', "YUAN");
+        test('\u5ac5', "JIE");
+        test('\u5ac6', "RONG");
+        test('\u5ac7', "MING");
+        test('\u5ac8', "YING");
+        test('\u5ac9', "JI");
+        test('\u5aca', "SU");
+        test('\u5acb', "NIAO");
+        test('\u5acc', "XIAN");
+        test('\u5acd', "TAO");
+        test('\u5ace', "PANG");
+        test('\u5acf', "LANG");
+        test('\u5ad0', "NAO");
+        test('\u5ad1', "BAO");
+        test('\u5ad2', "AI");
+        test('\u5ad3', "PI");
+        test('\u5ad4', "PIN");
+        test('\u5ad5', "YI");
+        test('\u5ad6', "PIAO");
+        test('\u5ad7', "YU");
+        test('\u5ad8', "LEI");
+        test('\u5ad9', "XUAN");
+        test('\u5ada', "MAN");
+        test('\u5adb', "YI");
+        test('\u5adc', "ZHANG");
+        test('\u5add', "KANG");
+        test('\u5ade', "YONG");
+        test('\u5adf', "NI");
+        test('\u5ae0', "LI");
+        test('\u5ae1', "DI");
+        test('\u5ae2', "GUI");
+        test('\u5ae3', "YAN");
+        test('\u5ae4', "JIN");
+        test('\u5ae5', "ZHUAN");
+        test('\u5ae6', "CHANG");
+        test('\u5ae7', "ZE");
+        test('\u5ae8', "HAN");
+        test('\u5ae9', "NEN");
+        test('\u5aea', "LAO");
+        test('\u5aeb', "MO");
+        test('\u5aec', "ZHE");
+        test('\u5aed', "HU");
+        test('\u5aee', "HU");
+        test('\u5aef', "AO");
+        test('\u5af0', "NEN");
+        test('\u5af1', "QIANG");
+        test('\u5af2', "MA");
+        test('\u5af3', "PIE");
+        test('\u5af4', "GU");
+        test('\u5af5', "WU");
+        test('\u5af6', "QIAO");
+        test('\u5af7', "TUO");
+        test('\u5af8', "ZHAN");
+        test('\u5af9', "MAO");
+        test('\u5afa', "XIAN");
+        test('\u5afb', "XIAN");
+        test('\u5afc', "MO");
+        test('\u5afd', "LIAO");
+        test('\u5afe', "LIAN");
+        test('\u5aff', "HUA");
+        test('\u5b00', "GUI");
+        test('\u5b01', "DENG");
+        test('\u5b02', "ZHI");
+        test('\u5b03', "XU");
+        test('\u5b04', "YI");
+        test('\u5b05', "HUA");
+        test('\u5b06', "XI");
+        test('\u5b07', "KUI");
+        test('\u5b08', "RAO");
+        test('\u5b09', "XI");
+        test('\u5b0a', "YAN");
+        test('\u5b0b', "CHAN");
+        test('\u5b0c', "JIAO");
+        test('\u5b0d', "MEI");
+        test('\u5b0e', "FAN");
+        test('\u5b0f', "FAN");
+        test('\u5b10', "XIAN");
+        test('\u5b11', "YI");
+        test('\u5b12', "HUI");
+        test('\u5b13', "JIAO");
+        test('\u5b14', "FU");
+        test('\u5b15', "SHI");
+        test('\u5b16', "BI");
+        test('\u5b17', "SHAN");
+        test('\u5b18', "SUI");
+        test('\u5b19', "QIANG");
+        test('\u5b1a', "LIAN");
+        test('\u5b1b', "HUAN");
+        test('\u5b1c', "XIN");
+        test('\u5b1d', "NIAO");
+        test('\u5b1e', "DONG");
+        test('\u5b1f', "YI");
+        test('\u5b20', "CAN");
+        test('\u5b21', "AI");
+        test('\u5b22', "NIANG");
+        test('\u5b23', "NING");
+        test('\u5b24', "MA");
+        test('\u5b25', "TIAO");
+        test('\u5b26', "CHOU");
+        test('\u5b27', "JIN");
+        test('\u5b28', "CI");
+        test('\u5b29', "YU");
+        test('\u5b2a', "PIN");
+        test('\u5b2b', "RONG");
+        test('\u5b2c', "RU");
+        test('\u5b2d', "NAI");
+        test('\u5b2e', "YAN");
+        test('\u5b2f', "TAI");
+        test('\u5b30', "YING");
+        test('\u5b31', "CAN");
+        test('\u5b32', "NIAO");
+        test('\u5b33', "YUE");
+        test('\u5b34', "YING");
+        test('\u5b35', "MIAN");
+        test('\u5b36', "BI");
+        test('\u5b37', "MA");
+        test('\u5b38', "SHEN");
+        test('\u5b39', "XING");
+        test('\u5b3a', "NI");
+        test('\u5b3b', "DU");
+        test('\u5b3c', "LIU");
+        test('\u5b3d', "YUAN");
+        test('\u5b3e', "LAN");
+        test('\u5b3f', "YAN");
+        test('\u5b40', "SHUANG");
+        test('\u5b41', "LING");
+        test('\u5b42', "JIAO");
+        test('\u5b43', "NIANG");
+        test('\u5b44', "LAN");
+        test('\u5b45', "QIAN");
+        test('\u5b46', "YING");
+        test('\u5b47', "SHUANG");
+        test('\u5b48', "HUI");
+        test('\u5b49', "QUAN");
+        test('\u5b4a', "MI");
+        test('\u5b4b', "LI");
+        test('\u5b4c', "LUAN");
+        test('\u5b4d', "YAN");
+        test('\u5b4e', "ZHU");
+        test('\u5b4f', "LAN");
+        test('\u5b50', "ZI");
+        test('\u5b51', "JIE");
+        test('\u5b52', "JUE");
+        test('\u5b53', "JUE");
+        test('\u5b54', "KONG");
+        test('\u5b55', "YUN");
+        test('\u5b56', "MA");
+        test('\u5b57', "ZI");
+        test('\u5b58', "CUN");
+        test('\u5b59', "SUN");
+        test('\u5b5a', "FU");
+        test('\u5b5b', "BEI");
+        test('\u5b5c', "ZI");
+        test('\u5b5d', "XIAO");
+        test('\u5b5e', "XIN");
+        test('\u5b5f', "MENG");
+        test('\u5b60', "SI");
+        test('\u5b61', "TAI");
+        test('\u5b62', "BAO");
+        test('\u5b63', "JI");
+        test('\u5b64', "GU");
+        test('\u5b65', "NU");
+        test('\u5b66', "XUE");
+        test('\u5b67', "YOU");
+        test('\u5b68', "ZHUAN");
+        test('\u5b69', "HAI");
+        test('\u5b6a', "LUAN");
+        test('\u5b6b', "SUN");
+        test('\u5b6c', "NAO");
+        test('\u5b6d', "MIE");
+        test('\u5b6e', "CONG");
+        test('\u5b6f', "QIAN");
+        test('\u5b70', "SHU");
+        test('\u5b71', "CAN");
+        test('\u5b72', "YA");
+        test('\u5b73', "ZI");
+        test('\u5b74', "NI");
+        test('\u5b75', "FU");
+        test('\u5b76', "ZI");
+        test('\u5b77', "LI");
+        test('\u5b78', "XUE");
+        test('\u5b79', "BO");
+        test('\u5b7a', "RU");
+        test('\u5b7b', "NAI");
+        test('\u5b7c', "NIE");
+        test('\u5b7d', "NIE");
+        test('\u5b7e', "YING");
+        test('\u5b7f', "LUAN");
+        test('\u5b80', "MIAN");
+        test('\u5b81', "NING");
+        test('\u5b82', "RONG");
+        test('\u5b83', "TA");
+        test('\u5b84', "GUI");
+        test('\u5b85', "ZHAI");
+        test('\u5b86', "QIONG");
+        test('\u5b87', "YU");
+        test('\u5b88', "SHOU");
+        test('\u5b89', "AN");
+        test('\u5b8a', "TU");
+        test('\u5b8b', "SONG");
+        test('\u5b8c', "WAN");
+        test('\u5b8d', "ROU");
+        test('\u5b8e', "YAO");
+        test('\u5b8f', "HONG");
+        test('\u5b90', "YI");
+        test('\u5b91', "JING");
+        test('\u5b92', "ZHUN");
+        test('\u5b93', "MI");
+        test('\u5b94', "ZHU");
+        test('\u5b95', "DANG");
+        test('\u5b96', "HONG");
+        test('\u5b97', "ZONG");
+        test('\u5b98', "GUAN");
+        test('\u5b99', "ZHOU");
+        test('\u5b9a', "DING");
+        test('\u5b9b', "WAN");
+        test('\u5b9c', "YI");
+        test('\u5b9d', "BAO");
+        test('\u5b9e', "SHI");
+        test('\u5b9f', "SHI");
+        test('\u5ba0', "CHONG");
+        test('\u5ba1', "SHEN");
+        test('\u5ba2', "KE");
+        test('\u5ba3', "XUAN");
+        test('\u5ba4', "SHI");
+        test('\u5ba5', "YOU");
+        test('\u5ba6', "HUAN");
+        test('\u5ba7', "YI");
+        test('\u5ba8', "TIAO");
+        test('\u5ba9', "SHI");
+        test('\u5baa', "XIAN");
+        test('\u5bab', "GONG");
+        test('\u5bac', "CHENG");
+        test('\u5bad', "QUN");
+        test('\u5bae', "GONG");
+        test('\u5baf', "XIAO");
+        test('\u5bb0', "ZAI");
+        test('\u5bb1', "ZHA");
+        test('\u5bb2', "BAO");
+        test('\u5bb3', "HAI");
+        test('\u5bb4', "YAN");
+        test('\u5bb5', "XIAO");
+        test('\u5bb6', "JIA");
+        test('\u5bb7', "SHEN");
+        test('\u5bb8', "CHEN");
+        test('\u5bb9', "RONG");
+        test('\u5bba', "HUANG");
+        test('\u5bbb', "MI");
+        test('\u5bbc', "KOU");
+        test('\u5bbd', "KUAN");
+        test('\u5bbe', "BIN");
+        test('\u5bbf', "SU");
+        test('\u5bc0', "CAI");
+        test('\u5bc1', "ZAN");
+        test('\u5bc2', "JI");
+        test('\u5bc3', "YUAN");
+        test('\u5bc4', "JI");
+        test('\u5bc5', "YIN");
+        test('\u5bc6', "MI");
+        test('\u5bc7', "KOU");
+        test('\u5bc8', "QING");
+        test('\u5bc9', "QUE");
+        test('\u5bca', "ZHEN");
+        test('\u5bcb', "JIAN");
+        test('\u5bcc', "FU");
+        test('\u5bcd', "NING");
+        test('\u5bce', "BING");
+        test('\u5bcf', "HUAN");
+        test('\u5bd0', "MEI");
+        test('\u5bd1', "QIN");
+        test('\u5bd2', "HAN");
+        test('\u5bd3', "YU");
+        test('\u5bd4', "SHI");
+        test('\u5bd5', "NING");
+        test('\u5bd6', "JIN");
+        test('\u5bd7', "NING");
+        test('\u5bd8', "ZHI");
+        test('\u5bd9', "YU");
+        test('\u5bda', "BAO");
+        test('\u5bdb', "KUAN");
+        test('\u5bdc', "NING");
+        test('\u5bdd', "QIN");
+        test('\u5bde', "MO");
+        test('\u5bdf', "CHA");
+        test('\u5be0', "JU");
+        test('\u5be1', "GUA");
+        test('\u5be2', "QIN");
+        test('\u5be3', "HU");
+        test('\u5be4', "WU");
+        test('\u5be5', "LIAO");
+        test('\u5be6', "SHI");
+        test('\u5be7', "NING");
+        test('\u5be8', "ZHAI");
+        test('\u5be9', "SHEN");
+        test('\u5bea', "WEI");
+        test('\u5beb', "XIE");
+        test('\u5bec', "KUAN");
+        test('\u5bed', "HUI");
+        test('\u5bee', "LIAO");
+        test('\u5bef', "JUN");
+        test('\u5bf0', "HUAN");
+        test('\u5bf1', "YI");
+        test('\u5bf2', "YI");
+        test('\u5bf3', "BAO");
+        test('\u5bf4', "QIN");
+        test('\u5bf5', "CHONG");
+        test('\u5bf6', "BAO");
+        test('\u5bf7', "FENG");
+        test('\u5bf8', "CUN");
+        test('\u5bf9', "DUI");
+        test('\u5bfa', "SI");
+        test('\u5bfb', "XUN");
+        test('\u5bfc', "DAO");
+        test('\u5bfd', "LU");
+        test('\u5bfe', "DUI");
+        test('\u5bff', "SHOU");
+        test('\u5c00', "PO");
+        test('\u5c01', "FENG");
+        test('\u5c02', "ZHUAN");
+        test('\u5c03', "FU");
+        test('\u5c04', "SHE");
+        test('\u5c05', "KE");
+        test('\u5c06', "JIANG");
+        test('\u5c07', "JIANG");
+        test('\u5c08', "ZHUAN");
+        test('\u5c09', "WEI");
+        test('\u5c0a', "ZUN");
+        test('\u5c0b', "XUN");
+        test('\u5c0c', "SHU");
+        test('\u5c0d', "DUI");
+        test('\u5c0e', "DAO");
+        test('\u5c0f', "XIAO");
+        test('\u5c10', "JIE");
+        test('\u5c11', "SHAO");
+        test('\u5c12', "ER");
+        test('\u5c13', "ER");
+        test('\u5c14', "ER");
+        test('\u5c15', "GA");
+        test('\u5c16', "JIAN");
+        test('\u5c17', "SHU");
+        test('\u5c18', "CHEN");
+        test('\u5c19', "SHANG");
+        test('\u5c1a', "SHANG");
+        test('\u5c1b', "MO");
+        test('\u5c1c', "GA");
+        test('\u5c1d', "CHANG");
+        test('\u5c1e', "LIAO");
+        test('\u5c1f', "XIAN");
+        test('\u5c20', "XIAN");
+        test('\u5c21', "KUN");
+        test('\u5c22', "YOU");
+        test('\u5c23', "WANG");
+        test('\u5c24', "YOU");
+        test('\u5c25', "LIAO");
+        test('\u5c26', "LIAO");
+        test('\u5c27', "YAO");
+        test('\u5c28', "MANG");
+        test('\u5c29', "WANG");
+        test('\u5c2a', "WANG");
+        test('\u5c2b', "WANG");
+        test('\u5c2c', "GA");
+        test('\u5c2d', "YAO");
+        test('\u5c2e', "DUO");
+        test('\u5c2f', "KUI");
+        test('\u5c30', "ZHONG");
+        test('\u5c31', "JIU");
+        test('\u5c32', "GAN");
+        test('\u5c33', "GU");
+        test('\u5c34', "GAN");
+        test('\u5c35', "TUI");
+        test('\u5c36', "GAN");
+        test('\u5c37', "GAN");
+        test('\u5c38', "SHI");
+        test('\u5c39', "YIN");
+        test('\u5c3a', "CHI");
+        test('\u5c3b', "KAO");
+        test('\u5c3c', "NI");
+        test('\u5c3d', "JIN");
+        test('\u5c3e', "WEI");
+        test('\u5c3f', "NIAO");
+        test('\u5c40', "JU");
+        test('\u5c41', "PI");
+        test('\u5c42', "CENG");
+        test('\u5c43', "XI");
+        test('\u5c44', "BI");
+        test('\u5c45', "JU");
+        test('\u5c46', "JIE");
+        test('\u5c47', "TIAN");
+        test('\u5c48', "QU");
+        test('\u5c49', "TI");
+        test('\u5c4a', "JIE");
+        test('\u5c4b', "WU");
+        test('\u5c4c', "DIAO");
+        test('\u5c4d', "SHI");
+        test('\u5c4e', "SHI");
+        test('\u5c4f', "PING");
+        test('\u5c50', "JI");
+        test('\u5c51', "XIE");
+        test('\u5c52', "ZHEN");
+        test('\u5c53', "XIE");
+        test('\u5c54', "NI");
+        test('\u5c55', "ZHAN");
+        test('\u5c56', "XI");
+        test('\u5c57', "WEI");
+        test('\u5c58', "MAN");
+        test('\u5c59', "E");
+        test('\u5c5a', "LOU");
+        test('\u5c5b', "PING");
+        test('\u5c5c', "TI");
+        test('\u5c5d', "FEI");
+        test('\u5c5e', "SHU");
+        test('\u5c5f', "XIE");
+        test('\u5c60', "TU");
+        test('\u5c61', "LU");
+        test('\u5c62', "LU");
+        test('\u5c63', "XI");
+        test('\u5c64', "CENG");
+        test('\u5c65', "LU");
+        test('\u5c66', "JU");
+        test('\u5c67', "XIE");
+        test('\u5c68', "JU");
+        test('\u5c69', "JUE");
+        test('\u5c6a', "LIAO");
+        test('\u5c6b', "JUE");
+        test('\u5c6c', "SHU");
+        test('\u5c6d', "XI");
+        test('\u5c6e', "CHE");
+        test('\u5c6f', "TUN");
+        test('\u5c70', "NI");
+        test('\u5c71', "SHAN");
+        test('\u5c72', "WA");
+        test('\u5c73', "XIAN");
+        test('\u5c74', "LI");
+        test('\u5c75', "E");
+        test('\u5c76', "DAO");
+        test('\u5c77', "HUI");
+        test('\u5c78', "LONG");
+        test('\u5c79', "YI");
+        test('\u5c7a', "QI");
+        test('\u5c7b', "REN");
+        test('\u5c7c', "WU");
+        test('\u5c7d', "HAN");
+        test('\u5c7e', "SHEN");
+        test('\u5c7f', "YU");
+        test('\u5c80', "CHU");
+        test('\u5c81', "SUI");
+        test('\u5c82', "QI");
+        test('\u5c83', "REN");
+        test('\u5c84', "YUE");
+        test('\u5c85', "BAN");
+        test('\u5c86', "YAO");
+        test('\u5c87', "ANG");
+        test('\u5c88', "YA");
+        test('\u5c89', "WU");
+        test('\u5c8a', "JIE");
+        test('\u5c8b', "E");
+        test('\u5c8c', "JI");
+        test('\u5c8d', "QIAN");
+        test('\u5c8e', "FEN");
+        test('\u5c8f', "WAN");
+        test('\u5c90', "QI");
+        test('\u5c91', "CEN");
+        test('\u5c92', "QIAN");
+        test('\u5c93', "QI");
+        test('\u5c94', "CHA");
+        test('\u5c95', "JIE");
+        test('\u5c96', "QU");
+        test('\u5c97', "GANG");
+        test('\u5c98', "XIAN");
+        test('\u5c99', "AO");
+        test('\u5c9a', "LAN");
+        test('\u5c9b', "DAO");
+        test('\u5c9c', "BA");
+        test('\u5c9d', "ZUO");
+        test('\u5c9e', "ZUO");
+        test('\u5c9f', "YANG");
+        test('\u5ca0', "JU");
+        test('\u5ca1', "GANG");
+        test('\u5ca2', "KE");
+        test('\u5ca3', "GOU");
+        test('\u5ca4', "XUE");
+        test('\u5ca5', "PO");
+        test('\u5ca6', "LI");
+        test('\u5ca7', "TIAO");
+        test('\u5ca8', "QU");
+        test('\u5ca9', "YAN");
+        test('\u5caa', "FU");
+        test('\u5cab', "XIU");
+        test('\u5cac', "JIA");
+        test('\u5cad', "LING");
+        test('\u5cae', "TUO");
+        test('\u5caf', "PI");
+        test('\u5cb0', "AO");
+        test('\u5cb1', "DAI");
+        test('\u5cb2', "KUANG");
+        test('\u5cb3', "YUE");
+        test('\u5cb4', "QU");
+        test('\u5cb5', "HU");
+        test('\u5cb6', "PO");
+        test('\u5cb7', "MIN");
+        test('\u5cb8', "AN");
+        test('\u5cb9', "TIAO");
+        test('\u5cba', "LING");
+        test('\u5cbb', "CHI");
+        test('\u5cbc', "PING");
+        test('\u5cbd', "DONG");
+        test('\u5cbe', "HAN");
+        test('\u5cbf', "KUI");
+        test('\u5cc0', "XIU");
+        test('\u5cc1', "MAO");
+        test('\u5cc2', "TONG");
+        test('\u5cc3', "XUE");
+        test('\u5cc4', "YI");
+        test('\u5cc5', "BIAN");
+        test('\u5cc6', "HE");
+        test('\u5cc7', "BA");
+        test('\u5cc8', "LUO");
+        test('\u5cc9', "E");
+        test('\u5cca', "FU");
+        test('\u5ccb', "XUN");
+        test('\u5ccc', "DIE");
+        test('\u5ccd', "LU");
+        test('\u5cce', "EN");
+        test('\u5ccf', "ER");
+        test('\u5cd0', "GAI");
+        test('\u5cd1', "QUAN");
+        test('\u5cd2', "DONG");
+        test('\u5cd3', "YI");
+        test('\u5cd4', "MU");
+        test('\u5cd5', "SHI");
+        test('\u5cd6', "AN");
+        test('\u5cd7', "WEI");
+        test('\u5cd8', "HUAN");
+        test('\u5cd9', "SHI");
+        test('\u5cda', "MI");
+        test('\u5cdb', "LI");
+        test('\u5cdc', "JI");
+        test('\u5cdd', "TONG");
+        test('\u5cde', "WEI");
+        test('\u5cdf', "YOU");
+        test('\u5ce0', "GU");
+        test('\u5ce1', "XIA");
+        test('\u5ce2', "LI");
+        test('\u5ce3', "YAO");
+        test('\u5ce4', "JIAO");
+        test('\u5ce5', "ZHENG");
+        test('\u5ce6', "LUAN");
+        test('\u5ce7', "JIAO");
+        test('\u5ce8', "E");
+        test('\u5ce9', "E");
+        test('\u5cea', "YU");
+        test('\u5ceb', "XIE");
+        test('\u5cec', "BU");
+        test('\u5ced', "QIAO");
+        test('\u5cee', "QUN");
+        test('\u5cef', "FENG");
+        test('\u5cf0', "FENG");
+        test('\u5cf1', "NAO");
+        test('\u5cf2', "LI");
+        test('\u5cf3', "YOU");
+        test('\u5cf4', "XIAN");
+        test('\u5cf5', "HONG");
+        test('\u5cf6', "DAO");
+        test('\u5cf7', "SHEN");
+        test('\u5cf8', "CHENG");
+        test('\u5cf9', "TU");
+        test('\u5cfa', "GENG");
+        test('\u5cfb', "JUN");
+        test('\u5cfc', "HAO");
+        test('\u5cfd', "XIA");
+        test('\u5cfe', "YIN");
+        test('\u5cff', "YU");
+        test('\u5d00', "LANG");
+        test('\u5d01', "KAN");
+        test('\u5d02', "LAO");
+        test('\u5d03', "LAI");
+        test('\u5d04', "XIAN");
+        test('\u5d05', "QUE");
+        test('\u5d06', "KONG");
+        test('\u5d07', "CHONG");
+        test('\u5d08', "CHONG");
+        test('\u5d09', "TA");
+        test('\u5d0a', "LIN");
+        test('\u5d0b', "HUA");
+        test('\u5d0c', "JU");
+        test('\u5d0d', "LAI");
+        test('\u5d0e', "QI");
+        test('\u5d0f', "MIN");
+        test('\u5d10', "KUN");
+        test('\u5d11', "KUN");
+        test('\u5d12', "ZU");
+        test('\u5d13', "GU");
+        test('\u5d14', "CUI");
+        test('\u5d15', "YA");
+        test('\u5d16', "YA");
+        test('\u5d17', "GANG");
+        test('\u5d18', "LUN");
+        test('\u5d19', "LUN");
+        test('\u5d1a', "LENG");
+        test('\u5d1b', "JUE");
+        test('\u5d1c', "DUO");
+        test('\u5d1d', "ZHENG");
+        test('\u5d1e', "GUO");
+        test('\u5d1f', "YIN");
+        test('\u5d20', "DONG");
+        test('\u5d21', "HAN");
+        test('\u5d22', "ZHENG");
+        test('\u5d23', "WEI");
+        test('\u5d24', "XIAO");
+        test('\u5d25', "PI");
+        test('\u5d26', "YAN");
+        test('\u5d27', "SONG");
+        test('\u5d28', "JIE");
+        test('\u5d29', "BENG");
+        test('\u5d2a', "ZU");
+        test('\u5d2b', "KU");
+        test('\u5d2c', "DONG");
+        test('\u5d2d', "ZHAN");
+        test('\u5d2e', "GU");
+        test('\u5d2f', "YIN");
+        test('\u5d30', "ZI");
+        test('\u5d31', "ZE");
+        test('\u5d32', "HUANG");
+        test('\u5d33', "YU");
+        test('\u5d34', "WAI");
+        test('\u5d35', "YANG");
+        test('\u5d36', "FENG");
+        test('\u5d37', "QIU");
+        test('\u5d38', "YANG");
+        test('\u5d39', "TI");
+        test('\u5d3a', "YI");
+        test('\u5d3b', "ZHI");
+        test('\u5d3c', "SHI");
+        test('\u5d3d', "ZAI");
+        test('\u5d3e', "YAO");
+        test('\u5d3f', "E");
+        test('\u5d40', "ZHU");
+        test('\u5d41', "KAN");
+        test('\u5d42', "LU");
+        test('\u5d43', "YAN");
+        test('\u5d44', "MEI");
+        test('\u5d45', "HAN");
+        test('\u5d46', "JI");
+        test('\u5d47', "JI");
+        test('\u5d48', "HUAN");
+        test('\u5d49', "TING");
+        test('\u5d4a', "SHENG");
+        test('\u5d4b', "MEI");
+        test('\u5d4c', "QIAN");
+        test('\u5d4d', "WU");
+        test('\u5d4e', "YU");
+        test('\u5d4f', "ZONG");
+        test('\u5d50', "LAN");
+        test('\u5d51', "KE");
+        test('\u5d52', "YAN");
+        test('\u5d53', "YAN");
+        test('\u5d54', "WEI");
+        test('\u5d55', "ZONG");
+        test('\u5d56', "CHA");
+        test('\u5d57', "SUI");
+        test('\u5d58', "RONG");
+        test('\u5d59', "KE");
+        test('\u5d5a', "QIN");
+        test('\u5d5b', "YU");
+        test('\u5d5c', "TI");
+        test('\u5d5d', "LOU");
+        test('\u5d5e', "TU");
+        test('\u5d5f', "DUI");
+        test('\u5d60', "XI");
+        test('\u5d61', "WENG");
+        test('\u5d62', "CANG");
+        test('\u5d63', "DANG");
+        test('\u5d64', "RONG");
+        test('\u5d65', "JIE");
+        test('\u5d66', "KAI");
+        test('\u5d67', "LIU");
+        test('\u5d68', "WU");
+        test('\u5d69', "SONG");
+        test('\u5d6a', "QIAO");
+        test('\u5d6b', "ZI");
+        test('\u5d6c', "WEI");
+        test('\u5d6d', "BENG");
+        test('\u5d6e', "DIAN");
+        test('\u5d6f', "CUO");
+        test('\u5d70', "QIAN");
+        test('\u5d71', "YONG");
+        test('\u5d72', "NIE");
+        test('\u5d73', "CUO");
+        test('\u5d74', "JI");
+        test('\u5d75', "SHI");
+        test('\u5d76', "RUO");
+        test('\u5d77', "SONG");
+        test('\u5d78', "ZONG");
+        test('\u5d79', "JIANG");
+        test('\u5d7a', "LIAO");
+        test('\u5d7b', "KANG");
+        test('\u5d7c', "CHAN");
+        test('\u5d7d', "DIE");
+        test('\u5d7e', "CEN");
+        test('\u5d7f', "DING");
+        test('\u5d80', "TU");
+        test('\u5d81', "LOU");
+        test('\u5d82', "ZHANG");
+        test('\u5d83', "ZHAN");
+        test('\u5d84', "ZHAN");
+        test('\u5d85', "AO");
+        test('\u5d86', "CAO");
+        test('\u5d87', "QU");
+        test('\u5d88', "QIANG");
+        test('\u5d89', "CUI");
+        test('\u5d8a', "ZUI");
+        test('\u5d8b', "DAO");
+        test('\u5d8c', "DAO");
+        test('\u5d8d', "XI");
+        test('\u5d8e', "YU");
+        test('\u5d8f', "PEI");
+        test('\u5d90', "LONG");
+        test('\u5d91', "XIANG");
+        test('\u5d92', "CENG");
+        test('\u5d93', "BO");
+        test('\u5d94', "QIN");
+        test('\u5d95', "JIAO");
+        test('\u5d96', "YAN");
+        test('\u5d97', "LAO");
+        test('\u5d98', "ZHAN");
+        test('\u5d99', "LIN");
+        test('\u5d9a', "LIAO");
+        test('\u5d9b', "LIAO");
+        test('\u5d9c', "JIN");
+        test('\u5d9d', "DENG");
+        test('\u5d9e', "DUO");
+        test('\u5d9f', "ZUN");
+        test('\u5da0', "JIAO");
+        test('\u5da1', "GUI");
+        test('\u5da2', "YAO");
+        test('\u5da3', "JIAO");
+        test('\u5da4', "YAO");
+        test('\u5da5', "JUE");
+        test('\u5da6', "ZHAN");
+        test('\u5da7', "YI");
+        test('\u5da8', "XUE");
+        test('\u5da9', "NAO");
+        test('\u5daa', "YE");
+        test('\u5dab', "YE");
+        test('\u5dac', "YI");
+        test('\u5dad', "NIE");
+        test('\u5dae', "XIAN");
+        test('\u5daf', "JI");
+        test('\u5db0', "XIE");
+        test('\u5db1', "KE");
+        test('\u5db2', "XI");
+        test('\u5db3', "DI");
+        test('\u5db4', "AO");
+        test('\u5db5', "ZUI");
+        test('\u5db6', "WEI");
+        test('\u5db7', "YI");
+        test('\u5db8', "RONG");
+        test('\u5db9', "DAO");
+        test('\u5dba', "LING");
+        test('\u5dbb', "ZA");
+        test('\u5dbc', "YU");
+        test('\u5dbd', "YUE");
+        test('\u5dbe', "YIN");
+        test('\u5dbf', "RU");
+        test('\u5dc0', "JIE");
+        test('\u5dc1', "LI");
+        test('\u5dc2', "GUI");
+        test('\u5dc3', "LONG");
+        test('\u5dc4', "LONG");
+        test('\u5dc5', "DIAN");
+        test('\u5dc6', "RONG");
+        test('\u5dc7', "XI");
+        test('\u5dc8', "JU");
+        test('\u5dc9', "CHAN");
+        test('\u5dca', "YING");
+        test('\u5dcb', "KUI");
+        test('\u5dcc', "YAN");
+        test('\u5dcd', "WEI");
+        test('\u5dce', "NAO");
+        test('\u5dcf', "QUAN");
+        test('\u5dd0', "CHAO");
+        test('\u5dd1', "CUAN");
+        test('\u5dd2', "LUAN");
+        test('\u5dd3', "DIAN");
+        test('\u5dd4', "DIAN");
+        test('\u5dd5', "NIE");
+        test('\u5dd6', "YAN");
+        test('\u5dd7', "YAN");
+        test('\u5dd8', "YAN");
+        test('\u5dd9', "KUI");
+        test('\u5dda', "YAN");
+        test('\u5ddb', "CHUAN");
+        test('\u5ddc', "KUAI");
+        test('\u5ddd', "CHUAN");
+        test('\u5dde', "ZHOU");
+        test('\u5ddf', "HUANG");
+        test('\u5de0', "JING");
+        test('\u5de1', "XUN");
+        test('\u5de2', "CHAO");
+        test('\u5de3', "CHAO");
+        test('\u5de4', "LIE");
+        test('\u5de5', "GONG");
+        test('\u5de6', "ZUO");
+        test('\u5de7', "QIAO");
+        test('\u5de8', "JU");
+        test('\u5de9', "GONG");
+        test('\u5dea', "JU");
+        test('\u5deb', "WU");
+        test('\u5dec', "PU");
+        test('\u5ded', "PU");
+        test('\u5dee', "CHA");
+        test('\u5def', "QIU");
+        test('\u5df0', "QIU");
+        test('\u5df1', "JI");
+        test('\u5df2', "YI");
+        test('\u5df3', "SI");
+        test('\u5df4', "BA");
+        test('\u5df5', "ZHI");
+        test('\u5df6', "ZHAO");
+        test('\u5df7', "XIANG");
+        test('\u5df8', "YI");
+        test('\u5df9', "JIN");
+        test('\u5dfa', "XUN");
+        test('\u5dfb', "JUAN");
+        test('\u5dfc', "BA");
+        test('\u5dfd', "XUN");
+        test('\u5dfe', "JIN");
+        test('\u5dff', "FU");
+    }
+
+    @SmallTest
+    public void test_4() throws Exception {
+        if (!hasChineseTransliterator()) {
+            return;
+        }
+        test('\u5e00', "ZA");
+        test('\u5e01', "BI");
+        test('\u5e02', "SHI");
+        test('\u5e03', "BU");
+        test('\u5e04', "DING");
+        test('\u5e05', "SHUAI");
+        test('\u5e06', "FAN");
+        test('\u5e07', "NIE");
+        test('\u5e08', "SHI");
+        test('\u5e09', "FEN");
+        test('\u5e0a', "PA");
+        test('\u5e0b', "ZHI");
+        test('\u5e0c', "XI");
+        test('\u5e0d', "HU");
+        test('\u5e0e', "DAN");
+        test('\u5e0f', "WEI");
+        test('\u5e10', "ZHANG");
+        test('\u5e11', "TANG");
+        test('\u5e12', "DAI");
+        test('\u5e13', "MO");
+        test('\u5e14', "PEI");
+        test('\u5e15', "PA");
+        test('\u5e16', "TIE");
+        test('\u5e17', "BO");
+        test('\u5e18', "LIAN");
+        test('\u5e19', "ZHI");
+        test('\u5e1a', "ZHOU");
+        test('\u5e1b', "BO");
+        test('\u5e1c', "ZHI");
+        test('\u5e1d', "DI");
+        test('\u5e1e', "MO");
+        test('\u5e1f', "YI");
+        test('\u5e20', "YI");
+        test('\u5e21', "PING");
+        test('\u5e22', "QIA");
+        test('\u5e23', "JUAN");
+        test('\u5e24', "RU");
+        test('\u5e25', "SHUAI");
+        test('\u5e26', "DAI");
+        test('\u5e27', "ZHENG");
+        test('\u5e28', "SHUI");
+        test('\u5e29', "QIAO");
+        test('\u5e2a', "ZHEN");
+        test('\u5e2b', "SHI");
+        test('\u5e2c', "QUN");
+        test('\u5e2d', "XI");
+        test('\u5e2e', "BANG");
+        test('\u5e2f', "DAI");
+        test('\u5e30', "GUI");
+        test('\u5e31', "CHOU");
+        test('\u5e32', "PING");
+        test('\u5e33', "ZHANG");
+        test('\u5e34', "SAN");
+        test('\u5e35', "WAN");
+        test('\u5e36', "DAI");
+        test('\u5e37', "WEI");
+        test('\u5e38', "CHANG");
+        test('\u5e39', "SHA");
+        test('\u5e3a', "QI");
+        test('\u5e3b', "ZE");
+        test('\u5e3c', "GUO");
+        test('\u5e3d', "MAO");
+        test('\u5e3e', "DU");
+        test('\u5e3f', "HOU");
+        test('\u5e40', "ZHENG");
+        test('\u5e41', "XU");
+        test('\u5e42', "MI");
+        test('\u5e43', "WEI");
+        test('\u5e44', "WO");
+        test('\u5e45', "FU");
+        test('\u5e46', "YI");
+        test('\u5e47', "BANG");
+        test('\u5e48', "PING");
+        test('\u5e49', "DIE");
+        test('\u5e4a', "GONG");
+        test('\u5e4b', "PAN");
+        test('\u5e4c', "HUANG");
+        test('\u5e4d', "TAO");
+        test('\u5e4e', "MI");
+        test('\u5e4f', "JIA");
+        test('\u5e50', "TENG");
+        test('\u5e51', "HUI");
+        test('\u5e52', "ZHONG");
+        test('\u5e53', "SHAN");
+        test('\u5e54', "MAN");
+        test('\u5e55', "MU");
+        test('\u5e56', "BIAO");
+        test('\u5e57', "GUO");
+        test('\u5e58', "ZE");
+        test('\u5e59', "MU");
+        test('\u5e5a', "BANG");
+        test('\u5e5b', "ZHANG");
+        test('\u5e5c', "JING");
+        test('\u5e5d', "CHAN");
+        test('\u5e5e', "FU");
+        test('\u5e5f', "ZHI");
+        test('\u5e60', "HU");
+        test('\u5e61', "FAN");
+        test('\u5e62', "CHUANG");
+        test('\u5e63', "BI");
+        test('\u5e64', "BI");
+        test('\u5e65', "ZHANG");
+        test('\u5e66', "MI");
+        test('\u5e67', "QIAO");
+        test('\u5e68', "CHAN");
+        test('\u5e69', "FEN");
+        test('\u5e6a', "MENG");
+        test('\u5e6b', "BANG");
+        test('\u5e6c', "CHOU");
+        test('\u5e6d', "MIE");
+        test('\u5e6e', "CHU");
+        test('\u5e6f', "JIE");
+        test('\u5e70', "XIAN");
+        test('\u5e71', "LAN");
+        test('\u5e72', "GAN");
+        test('\u5e73', "PING");
+        test('\u5e74', "NIAN");
+        test('\u5e75', "JIAN");
+        test('\u5e76', "BING");
+        test('\u5e77', "BING");
+        test('\u5e78', "XING");
+        test('\u5e79', "GAN");
+        test('\u5e7a', "YAO");
+        test('\u5e7b', "HUAN");
+        test('\u5e7c', "YOU");
+        test('\u5e7d', "YOU");
+        test('\u5e7e', "JI");
+        test('\u5e7f', "GUANG");
+        test('\u5e80', "PI");
+        test('\u5e81', "TING");
+        test('\u5e82', "ZE");
+        test('\u5e83', "GUANG");
+        test('\u5e84', "ZHUANG");
+        test('\u5e85', "MO");
+        test('\u5e86', "QING");
+        test('\u5e87', "BI");
+        test('\u5e88', "QIN");
+        test('\u5e89', "DUN");
+        test('\u5e8a', "CHUANG");
+        test('\u5e8b', "GUI");
+        test('\u5e8c', "YA");
+        test('\u5e8d', "BAI");
+        test('\u5e8e', "JIE");
+        test('\u5e8f', "XU");
+        test('\u5e90', "LU");
+        test('\u5e91', "WU");
+        test('\u5e92', "ZHUANG");
+        test('\u5e93', "KU");
+        test('\u5e94', "YING");
+        test('\u5e95', "DI");
+        test('\u5e96', "PAO");
+        test('\u5e97', "DIAN");
+        test('\u5e98', "YA");
+        test('\u5e99', "MIAO");
+        test('\u5e9a', "GENG");
+        test('\u5e9b', "CI");
+        test('\u5e9c', "FU");
+        test('\u5e9d', "TONG");
+        test('\u5e9e', "PANG");
+        test('\u5e9f', "FEI");
+        test('\u5ea0', "XIANG");
+        test('\u5ea1', "YI");
+        test('\u5ea2', "ZHI");
+        test('\u5ea3', "TIAO");
+        test('\u5ea4', "ZHI");
+        test('\u5ea5', "XIU");
+        test('\u5ea6', "DU");
+        test('\u5ea7', "ZUO");
+        test('\u5ea8', "XIAO");
+        test('\u5ea9', "TU");
+        test('\u5eaa', "GUI");
+        test('\u5eab', "KU");
+        test('\u5eac', "MANG");
+        test('\u5ead', "TING");
+        test('\u5eae', "YOU");
+        test('\u5eaf', "BU");
+        test('\u5eb0', "BING");
+        test('\u5eb1', "CHENG");
+        test('\u5eb2', "LAI");
+        test('\u5eb3', "BI");
+        test('\u5eb4', "JI");
+        test('\u5eb5', "AN");
+        test('\u5eb6', "SHU");
+        test('\u5eb7', "KANG");
+        test('\u5eb8', "YONG");
+        test('\u5eb9', "TUO");
+        test('\u5eba', "SONG");
+        test('\u5ebb', "SHU");
+        test('\u5ebc', "QING");
+        test('\u5ebd', "YU");
+        test('\u5ebe', "YU");
+        test('\u5ebf', "MIAO");
+        test('\u5ec0', "SOU");
+        test('\u5ec1', "CE");
+        test('\u5ec2', "XIANG");
+        test('\u5ec3', "FEI");
+        test('\u5ec4', "JIU");
+        test('\u5ec5', "E");
+        test('\u5ec6', "GUI");
+        test('\u5ec7', "LIU");
+        test('\u5ec8', "SHA");
+        test('\u5ec9', "LIAN");
+        test('\u5eca', "LANG");
+        test('\u5ecb', "SOU");
+        test('\u5ecc', "ZHI");
+        test('\u5ecd', "POU");
+        test('\u5ece', "QING");
+        test('\u5ecf', "JIU");
+        test('\u5ed0', "JIU");
+        test('\u5ed1', "JIN");
+        test('\u5ed2', "AO");
+        test('\u5ed3', "KUO");
+        test('\u5ed4', "LOU");
+        test('\u5ed5', "YIN");
+        test('\u5ed6', "LIAO");
+        test('\u5ed7', "DAI");
+        test('\u5ed8', "LU");
+        test('\u5ed9', "YI");
+        test('\u5eda', "CHU");
+        test('\u5edb', "CHAN");
+        test('\u5edc', "TU");
+        test('\u5edd', "SI");
+        test('\u5ede', "XIN");
+        test('\u5edf', "MIAO");
+        test('\u5ee0', "CHANG");
+        test('\u5ee1', "WU");
+        test('\u5ee2', "FEI");
+        test('\u5ee3', "GUANG");
+        test('\u5ee4', "KU");
+        test('\u5ee5', "KUAI");
+        test('\u5ee6', "BI");
+        test('\u5ee7', "QIANG");
+        test('\u5ee8', "XIE");
+        test('\u5ee9', "LIN");
+        test('\u5eea', "LIN");
+        test('\u5eeb', "LIAO");
+        test('\u5eec', "LU");
+        test('\u5eed', "JI");
+        test('\u5eee', "YING");
+        test('\u5eef', "XIAN");
+        test('\u5ef0', "TING");
+        test('\u5ef1', "YONG");
+        test('\u5ef2', "LI");
+        test('\u5ef3', "TING");
+        test('\u5ef4', "YIN");
+        test('\u5ef5', "XUN");
+        test('\u5ef6', "YAN");
+        test('\u5ef7', "TING");
+        test('\u5ef8', "DI");
+        test('\u5ef9', "PAI");
+        test('\u5efa', "JIAN");
+        test('\u5efb', "HUI");
+        test('\u5efc', "NAI");
+        test('\u5efd', "HUI");
+        test('\u5efe', "GONG");
+        test('\u5eff', "NIAN");
+        test('\u5f00', "KAI");
+        test('\u5f01', "BIAN");
+        test('\u5f02', "YI");
+        test('\u5f03', "QI");
+        test('\u5f04', "NONG");
+        test('\u5f05', "FEN");
+        test('\u5f06', "JU");
+        test('\u5f07', "YAN");
+        test('\u5f08', "YI");
+        test('\u5f09', "ZANG");
+        test('\u5f0a', "BI");
+        test('\u5f0b', "YI");
+        test('\u5f0c', "YI");
+        test('\u5f0d', "ER");
+        test('\u5f0e', "SAN");
+        test('\u5f0f', "SHI");
+        test('\u5f10', "ER");
+        test('\u5f11', "SHI");
+        test('\u5f12', "SHI");
+        test('\u5f13', "GONG");
+        test('\u5f14', "DIAO");
+        test('\u5f15', "YIN");
+        test('\u5f16', "HU");
+        test('\u5f17', "FU");
+        test('\u5f18', "HONG");
+        test('\u5f19', "WU");
+        test('\u5f1a', "TUI");
+        test('\u5f1b', "CHI");
+        test('\u5f1c', "JIANG");
+        test('\u5f1d', "BA");
+        test('\u5f1e', "SHEN");
+        test('\u5f1f', "DI");
+        test('\u5f20', "ZHANG");
+        test('\u5f21', "JUE");
+        test('\u5f22', "TAO");
+        test('\u5f23', "FU");
+        test('\u5f24', "DI");
+        test('\u5f25', "MI");
+        test('\u5f26', "XIAN");
+        test('\u5f27', "HU");
+        test('\u5f28', "CHAO");
+        test('\u5f29', "NU");
+        test('\u5f2a', "JING");
+        test('\u5f2b', "ZHEN");
+        test('\u5f2c', "YI");
+        test('\u5f2d', "MI");
+        test('\u5f2e', "QUAN");
+        test('\u5f2f', "WAN");
+        test('\u5f30', "SHAO");
+        test('\u5f31', "RUO");
+        test('\u5f32', "XUAN");
+        test('\u5f33', "JING");
+        test('\u5f34', "DIAO");
+        test('\u5f35', "ZHANG");
+        test('\u5f36', "JIANG");
+        test('\u5f37', "QIANG");
+        test('\u5f38', "PENG");
+        test('\u5f39', "DAN");
+        test('\u5f3a', "QIANG");
+        test('\u5f3b', "BI");
+        test('\u5f3c', "BI");
+        test('\u5f3d', "SHE");
+        test('\u5f3e', "DAN");
+        test('\u5f3f', "JIAN");
+        test('\u5f40', "GOU");
+        test('\u5f41', "GE");
+        test('\u5f42', "FA");
+        test('\u5f43', "BI");
+        test('\u5f44', "KOU");
+        test('\u5f45', "JIAN");
+        test('\u5f46', "BIE");
+        test('\u5f47', "XIAO");
+        test('\u5f48', "DAN");
+        test('\u5f49', "GUO");
+        test('\u5f4a', "JIANG");
+        test('\u5f4b', "HONG");
+        test('\u5f4c', "MI");
+        test('\u5f4d', "GUO");
+        test('\u5f4e', "WAN");
+        test('\u5f4f', "JUE");
+        test('\u5f50', "JI");
+        test('\u5f51', "JI");
+        test('\u5f52', "GUI");
+        test('\u5f53', "DANG");
+        test('\u5f54', "LU");
+        test('\u5f55', "LU");
+        test('\u5f56', "TUAN");
+        test('\u5f57', "HUI");
+        test('\u5f58', "ZHI");
+        test('\u5f59', "HUI");
+        test('\u5f5a', "HUI");
+        test('\u5f5b', "YI");
+        test('\u5f5c', "YI");
+        test('\u5f5d', "YI");
+        test('\u5f5e', "YI");
+        test('\u5f5f', "YUE");
+        test('\u5f60', "YUE");
+        test('\u5f61', "SHAN");
+        test('\u5f62', "XING");
+        test('\u5f63', "WEN");
+        test('\u5f64', "TONG");
+        test('\u5f65', "YAN");
+        test('\u5f66', "YAN");
+        test('\u5f67', "YU");
+        test('\u5f68', "CHI");
+        test('\u5f69', "CAI");
+        test('\u5f6a', "BIAO");
+        test('\u5f6b', "DIAO");
+        test('\u5f6c', "BIN");
+        test('\u5f6d', "PENG");
+        test('\u5f6e', "YONG");
+        test('\u5f6f', "PIAO");
+        test('\u5f70', "ZHANG");
+        test('\u5f71', "YING");
+        test('\u5f72', "CHI");
+        test('\u5f73', "CHI");
+        test('\u5f74', "ZHUO");
+        test('\u5f75', "TUO");
+        test('\u5f76', "JI");
+        test('\u5f77', "FANG");
+        test('\u5f78', "ZHONG");
+        test('\u5f79', "YI");
+        test('\u5f7a', "WANG");
+        test('\u5f7b', "CHE");
+        test('\u5f7c', "BI");
+        test('\u5f7d', "DI");
+        test('\u5f7e', "LING");
+        test('\u5f7f', "FU");
+        test('\u5f80', "WANG");
+        test('\u5f81', "ZHENG");
+        test('\u5f82', "CU");
+        test('\u5f83', "WANG");
+        test('\u5f84', "JING");
+        test('\u5f85', "DAI");
+        test('\u5f86', "XI");
+        test('\u5f87', "XUN");
+        test('\u5f88', "HEN");
+        test('\u5f89', "YANG");
+        test('\u5f8a', "HUAI");
+        test('\u5f8b', "LU");
+        test('\u5f8c', "HOU");
+        test('\u5f8d', "WANG");
+        test('\u5f8e', "CHENG");
+        test('\u5f8f', "ZHI");
+        test('\u5f90', "XU");
+        test('\u5f91', "JING");
+        test('\u5f92', "TU");
+        test('\u5f93', "CONG");
+        test('\u5f94', "ZHI");
+        test('\u5f95', "LAI");
+        test('\u5f96', "CONG");
+        test('\u5f97', "DE");
+        test('\u5f98', "PAI");
+        test('\u5f99', "XI");
+        test('\u5f9a', "DONG");
+        test('\u5f9b', "JI");
+        test('\u5f9c', "CHANG");
+        test('\u5f9d', "ZHI");
+        test('\u5f9e', "CONG");
+        test('\u5f9f', "ZHOU");
+        test('\u5fa0', "LAI");
+        test('\u5fa1', "YU");
+        test('\u5fa2', "XIE");
+        test('\u5fa3', "JIE");
+        test('\u5fa4', "JIAN");
+        test('\u5fa5', "SHI");
+        test('\u5fa6', "JIA");
+        test('\u5fa7', "BIAN");
+        test('\u5fa8', "HUANG");
+        test('\u5fa9', "FU");
+        test('\u5faa', "XUN");
+        test('\u5fab', "WEI");
+        test('\u5fac', "PANG");
+        test('\u5fad', "YAO");
+        test('\u5fae', "WEI");
+        test('\u5faf', "XI");
+        test('\u5fb0', "ZHENG");
+        test('\u5fb1', "PIAO");
+        test('\u5fb2', "TI");
+        test('\u5fb3', "DE");
+        test('\u5fb4', "ZHENG");
+        test('\u5fb5', "ZHENG");
+        test('\u5fb6', "BIE");
+        test('\u5fb7', "DE");
+        test('\u5fb8', "CHONG");
+        test('\u5fb9', "CHE");
+        test('\u5fba', "JIAO");
+        test('\u5fbb', "HUI");
+        test('\u5fbc', "JIAO");
+        test('\u5fbd', "HUI");
+        test('\u5fbe', "MEI");
+        test('\u5fbf', "LONG");
+        test('\u5fc0', "XIANG");
+        test('\u5fc1', "BAO");
+        test('\u5fc2', "QU");
+        test('\u5fc3', "XIN");
+        test('\u5fc4', "XIN");
+        test('\u5fc5', "BI");
+        test('\u5fc6', "YI");
+        test('\u5fc7', "LE");
+        test('\u5fc8', "REN");
+        test('\u5fc9', "DAO");
+        test('\u5fca', "DING");
+        test('\u5fcb', "GAI");
+        test('\u5fcc', "JI");
+        test('\u5fcd', "REN");
+        test('\u5fce', "REN");
+        test('\u5fcf', "CHAN");
+        test('\u5fd0', "TAN");
+        test('\u5fd1', "TE");
+        test('\u5fd2', "TE");
+        test('\u5fd3', "GAN");
+        test('\u5fd4', "QI");
+        test('\u5fd5', "SHI");
+        test('\u5fd6', "CUN");
+        test('\u5fd7', "ZHI");
+        test('\u5fd8', "WANG");
+        test('\u5fd9', "MANG");
+        test('\u5fda', "XI");
+        test('\u5fdb', "FAN");
+        test('\u5fdc', "YING");
+        test('\u5fdd', "TIAN");
+        test('\u5fde', "MIN");
+        test('\u5fdf', "WEN");
+        test('\u5fe0', "ZHONG");
+        test('\u5fe1', "CHONG");
+        test('\u5fe2', "WU");
+        test('\u5fe3', "JI");
+        test('\u5fe4', "WU");
+        test('\u5fe5', "XI");
+        test('\u5fe6', "JIA");
+        test('\u5fe7', "YOU");
+        test('\u5fe8', "WAN");
+        test('\u5fe9', "CONG");
+        test('\u5fea', "SONG");
+        test('\u5feb', "KUAI");
+        test('\u5fec', "YU");
+        test('\u5fed', "BIAN");
+        test('\u5fee', "ZHI");
+        test('\u5fef', "QI");
+        test('\u5ff0', "CUI");
+        test('\u5ff1', "CHEN");
+        test('\u5ff2', "TAI");
+        test('\u5ff3', "TUN");
+        test('\u5ff4', "QIAN");
+        test('\u5ff5', "NIAN");
+        test('\u5ff6', "HUN");
+        test('\u5ff7', "XIONG");
+        test('\u5ff8', "NIU");
+        test('\u5ff9', "KUANG");
+        test('\u5ffa', "XIAN");
+        test('\u5ffb', "XIN");
+        test('\u5ffc', "KANG");
+        test('\u5ffd', "HU");
+        test('\u5ffe', "KAI");
+        test('\u5fff', "FEN");
+        test('\u6000', "HUAI");
+        test('\u6001', "TAI");
+        test('\u6002', "SONG");
+        test('\u6003', "WU");
+        test('\u6004', "OU");
+        test('\u6005', "CHANG");
+        test('\u6006', "CHUANG");
+        test('\u6007', "JU");
+        test('\u6008', "YI");
+        test('\u6009', "BAO");
+        test('\u600a', "CHAO");
+        test('\u600b', "MIN");
+        test('\u600c', "PEI");
+        test('\u600d', "ZUO");
+        test('\u600e', "ZEN");
+        test('\u600f', "YANG");
+        test('\u6010', "JU");
+        test('\u6011', "BAN");
+        test('\u6012', "NU");
+        test('\u6013', "NAO");
+        test('\u6014', "ZHENG");
+        test('\u6015', "PA");
+        test('\u6016', "BU");
+        test('\u6017', "TIE");
+        test('\u6018', "HU");
+        test('\u6019', "HU");
+        test('\u601a', "JU");
+        test('\u601b', "DA");
+        test('\u601c', "LIAN");
+        test('\u601d', "SI");
+        test('\u601e', "CHOU");
+        test('\u601f', "DI");
+        test('\u6020', "DAI");
+        test('\u6021', "YI");
+        test('\u6022', "TU");
+        test('\u6023', "YOU");
+        test('\u6024', "FU");
+        test('\u6025', "JI");
+        test('\u6026', "PENG");
+        test('\u6027', "XING");
+        test('\u6028', "YUAN");
+        test('\u6029', "NI");
+        test('\u602a', "GUAI");
+        test('\u602b', "FU");
+        test('\u602c', "XI");
+        test('\u602d', "BI");
+        test('\u602e', "YOU");
+        test('\u602f', "QIE");
+        test('\u6030', "XUAN");
+        test('\u6031', "CONG");
+        test('\u6032', "BING");
+        test('\u6033', "HUANG");
+        test('\u6034', "XU");
+        test('\u6035', "CHU");
+        test('\u6036', "BI");
+        test('\u6037', "SHU");
+        test('\u6038', "XI");
+        test('\u6039', "TAN");
+        test('\u603a', "YONG");
+        test('\u603b', "ZONG");
+        test('\u603c', "DUI");
+        test('\u603d', "MO");
+        test('\u603e', "ZHI");
+        test('\u603f', "YI");
+        test('\u6040', "SHI");
+        test('\u6041', "NEN");
+        test('\u6042', "XUN");
+        test('\u6043', "SHI");
+        test('\u6044', "XI");
+        test('\u6045', "LAO");
+        test('\u6046', "HENG");
+        test('\u6047', "KUANG");
+        test('\u6048', "MOU");
+        test('\u6049', "ZHI");
+        test('\u604a', "XIE");
+        test('\u604b', "LIAN");
+        test('\u604c', "TIAO");
+        test('\u604d', "HUANG");
+        test('\u604e', "DIE");
+        test('\u604f', "HAO");
+        test('\u6050', "KONG");
+        test('\u6051', "GUI");
+        test('\u6052', "HENG");
+        test('\u6053', "XI");
+        test('\u6054', "JIAO");
+        test('\u6055', "SHU");
+        test('\u6056', "SI");
+        test('\u6057', "HU");
+        test('\u6058', "QIU");
+        test('\u6059', "YANG");
+        test('\u605a', "HUI");
+        test('\u605b', "HUI");
+        test('\u605c', "CHI");
+        test('\u605d', "JIA");
+        test('\u605e', "YI");
+        test('\u605f', "XIONG");
+        test('\u6060', "GUAI");
+        test('\u6061', "LIN");
+        test('\u6062', "HUI");
+        test('\u6063', "ZI");
+        test('\u6064', "XU");
+        test('\u6065', "CHI");
+        test('\u6066', "SHANG");
+        test('\u6067', "NU");
+        test('\u6068', "HEN");
+        test('\u6069', "EN");
+        test('\u606a', "KE");
+        test('\u606b', "DONG");
+        test('\u606c', "TIAN");
+        test('\u606d', "GONG");
+        test('\u606e', "QUAN");
+        test('\u606f', "XI");
+        test('\u6070', "QIA");
+        test('\u6071', "YUE");
+        test('\u6072', "PENG");
+        test('\u6073', "KEN");
+        test('\u6074', "DE");
+        test('\u6075', "HUI");
+        test('\u6076', "E");
+        test('\u6077', "XIAO");
+        test('\u6078', "TONG");
+        test('\u6079', "YAN");
+        test('\u607a', "KAI");
+        test('\u607b', "CE");
+        test('\u607c', "NAO");
+        test('\u607d', "YUN");
+        test('\u607e', "MANG");
+        test('\u607f', "YONG");
+        test('\u6080', "YONG");
+        test('\u6081', "YUAN");
+        test('\u6082', "PI");
+        test('\u6083', "KUN");
+        test('\u6084', "QIAO");
+        test('\u6085', "YUE");
+        test('\u6086', "YU");
+        test('\u6087', "TU");
+        test('\u6088', "JIE");
+        test('\u6089', "XI");
+        test('\u608a', "ZHE");
+        test('\u608b', "LIN");
+        test('\u608c', "TI");
+        test('\u608d', "HAN");
+        test('\u608e', "HAO");
+        test('\u608f', "QIE");
+        test('\u6090', "TI");
+        test('\u6091', "BU");
+        test('\u6092', "YI");
+        test('\u6093', "QIAN");
+        test('\u6094', "HUI");
+        test('\u6095', "XI");
+        test('\u6096', "BEI");
+        test('\u6097', "MAN");
+        test('\u6098', "YI");
+        test('\u6099', "HENG");
+        test('\u609a', "SONG");
+        test('\u609b', "QUAN");
+        test('\u609c', "CHENG");
+        test('\u609d', "KUI");
+        test('\u609e', "WU");
+        test('\u609f', "WU");
+        test('\u60a0', "YOU");
+        test('\u60a1', "LI");
+        test('\u60a2', "LIANG");
+        test('\u60a3', "HUAN");
+        test('\u60a4', "CONG");
+        test('\u60a5', "YI");
+        test('\u60a6', "YUE");
+        test('\u60a7', "LI");
+        test('\u60a8', "NIN");
+        test('\u60a9', "NAO");
+        test('\u60aa', "E");
+        test('\u60ab', "QUE");
+        test('\u60ac', "XUAN");
+        test('\u60ad', "QIAN");
+        test('\u60ae', "WU");
+        test('\u60af', "MIN");
+        test('\u60b0', "CONG");
+        test('\u60b1', "FEI");
+        test('\u60b2', "BEI");
+        test('\u60b3', "DUO");
+        test('\u60b4', "CUI");
+        test('\u60b5', "CHANG");
+        test('\u60b6', "MEN");
+        test('\u60b7', "SAN");
+        test('\u60b8', "JI");
+        test('\u60b9', "GUAN");
+        test('\u60ba', "GUAN");
+        test('\u60bb', "XING");
+        test('\u60bc', "DAO");
+        test('\u60bd', "QI");
+        test('\u60be', "KONG");
+        test('\u60bf', "TIAN");
+        test('\u60c0', "LUN");
+        test('\u60c1', "XI");
+        test('\u60c2', "KAN");
+        test('\u60c3', "GUN");
+        test('\u60c4', "NI");
+        test('\u60c5', "QING");
+        test('\u60c6', "CHOU");
+        test('\u60c7', "DUN");
+        test('\u60c8', "GUO");
+        test('\u60c9', "ZHAN");
+        test('\u60ca', "JING");
+        test('\u60cb', "WAN");
+        test('\u60cc', "YUAN");
+        test('\u60cd', "JIN");
+        test('\u60ce', "JI");
+        test('\u60cf', "LAN");
+        test('\u60d0', "YU");
+        test('\u60d1', "HUO");
+        test('\u60d2', "HE");
+        test('\u60d3', "QUAN");
+        test('\u60d4', "TAN");
+        test('\u60d5', "TI");
+        test('\u60d6', "TI");
+        test('\u60d7', "NIE");
+        test('\u60d8', "WANG");
+        test('\u60d9', "CHUO");
+        test('\u60da', "HU");
+        test('\u60db', "HUN");
+        test('\u60dc', "XI");
+        test('\u60dd', "CHANG");
+        test('\u60de', "XIN");
+        test('\u60df', "WEI");
+        test('\u60e0', "HUI");
+        test('\u60e1', "E");
+        test('\u60e2', "SUO");
+        test('\u60e3', "ZONG");
+        test('\u60e4', "JIAN");
+        test('\u60e5', "YONG");
+        test('\u60e6', "DIAN");
+        test('\u60e7', "JU");
+        test('\u60e8', "CAN");
+        test('\u60e9', "CHENG");
+        test('\u60ea', "DE");
+        test('\u60eb', "BEI");
+        test('\u60ec', "QIE");
+        test('\u60ed', "CAN");
+        test('\u60ee', "DAN");
+        test('\u60ef', "GUAN");
+        test('\u60f0', "DUO");
+        test('\u60f1', "NAO");
+        test('\u60f2', "YUN");
+        test('\u60f3', "XIANG");
+        test('\u60f4', "ZHUI");
+        test('\u60f5', "DIE");
+        test('\u60f6', "HUANG");
+        test('\u60f7', "CHUN");
+        test('\u60f8', "QIONG");
+        test('\u60f9', "RE");
+        test('\u60fa', "XING");
+        test('\u60fb', "CE");
+        test('\u60fc', "BIAN");
+        test('\u60fd', "MIN");
+        test('\u60fe', "ZONG");
+        test('\u60ff', "TI");
+        test('\u6100', "QIAO");
+        test('\u6101', "CHOU");
+        test('\u6102', "BEI");
+        test('\u6103', "XUAN");
+        test('\u6104', "WEI");
+        test('\u6105', "GE");
+        test('\u6106', "QIAN");
+        test('\u6107', "WEI");
+        test('\u6108', "YU");
+        test('\u6109', "YU");
+        test('\u610a', "BI");
+        test('\u610b', "XUAN");
+        test('\u610c', "HUAN");
+        test('\u610d', "MIN");
+        test('\u610e', "BI");
+        test('\u610f', "YI");
+        test('\u6110', "MIAN");
+        test('\u6111', "YONG");
+        test('\u6112', "KAI");
+        test('\u6113', "DANG");
+        test('\u6114', "YIN");
+        test('\u6115', "E");
+        test('\u6116', "CHEN");
+        test('\u6117', "MAO");
+        test('\u6118', "QIA");
+        test('\u6119', "KE");
+        test('\u611a', "YU");
+        test('\u611b', "AI");
+        test('\u611c', "QIE");
+        test('\u611d', "YAN");
+        test('\u611e', "NUO");
+        test('\u611f', "GAN");
+        test('\u6120', "YUN");
+        test('\u6121', "ZONG");
+        test('\u6122', "SAI");
+        test('\u6123', "LENG");
+        test('\u6124', "FEN");
+        test('\u6125', "YING");
+        test('\u6126', "KUI");
+        test('\u6127', "KUI");
+        test('\u6128', "QUE");
+        test('\u6129', "GONG");
+        test('\u612a', "YUN");
+        test('\u612b', "SU");
+        test('\u612c', "SU");
+        test('\u612d', "QI");
+        test('\u612e', "YAO");
+        test('\u612f', "SONG");
+        test('\u6130', "HUANG");
+        test('\u6131', "JI");
+        test('\u6132', "GU");
+        test('\u6133', "JU");
+        test('\u6134', "CHUANG");
+        test('\u6135', "NI");
+        test('\u6136', "XIE");
+        test('\u6137', "KAI");
+        test('\u6138', "ZHENG");
+        test('\u6139', "YONG");
+        test('\u613a', "CAO");
+        test('\u613b', "XUN");
+        test('\u613c', "SHEN");
+        test('\u613d', "BO");
+        test('\u613e', "KAI");
+        test('\u613f', "YUAN");
+        test('\u6140', "XI");
+        test('\u6141', "HUN");
+        test('\u6142', "YONG");
+        test('\u6143', "YANG");
+        test('\u6144', "LI");
+        test('\u6145', "SAO");
+        test('\u6146', "TAO");
+        test('\u6147', "YIN");
+        test('\u6148', "CI");
+        test('\u6149', "XU");
+        test('\u614a', "QIAN");
+        test('\u614b', "TAI");
+        test('\u614c', "HUANG");
+        test('\u614d', "YUN");
+        test('\u614e', "SHEN");
+        test('\u614f', "MING");
+        test('\u6150', "GONG");
+        test('\u6151', "SHE");
+        test('\u6152', "CONG");
+        test('\u6153', "PIAO");
+        test('\u6154', "MU");
+        test('\u6155', "MU");
+        test('\u6156', "GUO");
+        test('\u6157', "CHI");
+        test('\u6158', "CAN");
+        test('\u6159', "CAN");
+        test('\u615a', "CAN");
+        test('\u615b', "CUI");
+        test('\u615c', "MIN");
+        test('\u615d', "TE");
+        test('\u615e', "ZHANG");
+        test('\u615f', "TONG");
+        test('\u6160', "AO");
+        test('\u6161', "SHUANG");
+        test('\u6162', "MAN");
+        test('\u6163', "GUAN");
+        test('\u6164', "QUE");
+        test('\u6165', "ZAO");
+        test('\u6166', "JIU");
+        test('\u6167', "HUI");
+        test('\u6168', "KAI");
+        test('\u6169', "LIAN");
+        test('\u616a', "OU");
+        test('\u616b', "SONG");
+        test('\u616c', "QIN");
+        test('\u616d', "YIN");
+        test('\u616e', "LU");
+        test('\u616f', "SHANG");
+        test('\u6170', "WEI");
+        test('\u6171', "TUAN");
+        test('\u6172', "MAN");
+        test('\u6173', "QIAN");
+        test('\u6174', "SHE");
+        test('\u6175', "YONG");
+        test('\u6176', "QING");
+        test('\u6177', "KANG");
+        test('\u6178', "DI");
+        test('\u6179', "ZHI");
+        test('\u617a', "LOU");
+        test('\u617b', "JUAN");
+        test('\u617c', "QI");
+        test('\u617d', "QI");
+        test('\u617e', "YU");
+        test('\u617f', "PING");
+        test('\u6180', "LIAO");
+        test('\u6181', "CONG");
+        test('\u6182', "YOU");
+        test('\u6183', "CHONG");
+        test('\u6184', "ZHI");
+        test('\u6185', "TONG");
+        test('\u6186', "CHENG");
+        test('\u6187', "QI");
+        test('\u6188', "QU");
+        test('\u6189', "PENG");
+        test('\u618a', "BEI");
+        test('\u618b', "BIE");
+        test('\u618c', "QIONG");
+        test('\u618d', "JIAO");
+        test('\u618e', "ZENG");
+        test('\u618f', "CHI");
+        test('\u6190', "LIAN");
+        test('\u6191', "PING");
+        test('\u6192', "KUI");
+        test('\u6193', "HUI");
+        test('\u6194', "QIAO");
+        test('\u6195', "CHENG");
+        test('\u6196', "YIN");
+        test('\u6197', "YIN");
+        test('\u6198', "XI");
+        test('\u6199', "XI");
+        test('\u619a', "DAN");
+        test('\u619b', "TAN");
+        test('\u619c', "DUO");
+        test('\u619d', "DUI");
+        test('\u619e', "DUI");
+        test('\u619f', "SU");
+        test('\u61a0', "JUE");
+        test('\u61a1', "CE");
+        test('\u61a2', "XIAO");
+        test('\u61a3', "FAN");
+        test('\u61a4', "FEN");
+        test('\u61a5', "LAO");
+        test('\u61a6', "LAO");
+        test('\u61a7', "CHONG");
+        test('\u61a8', "HAN");
+        test('\u61a9', "QI");
+        test('\u61aa', "XIAN");
+        test('\u61ab', "MIN");
+        test('\u61ac', "JING");
+        test('\u61ad', "LIAO");
+        test('\u61ae', "WU");
+        test('\u61af', "CAN");
+        test('\u61b0', "JUE");
+        test('\u61b1', "CU");
+        test('\u61b2', "XIAN");
+        test('\u61b3', "TAN");
+        test('\u61b4', "SHENG");
+        test('\u61b5', "PI");
+        test('\u61b6', "YI");
+        test('\u61b7', "CHU");
+        test('\u61b8', "XIAN");
+        test('\u61b9', "NAO");
+        test('\u61ba', "DAN");
+        test('\u61bb', "TAN");
+        test('\u61bc', "JING");
+        test('\u61bd', "SONG");
+        test('\u61be', "HAN");
+        test('\u61bf', "JIAO");
+        test('\u61c0', "WEI");
+        test('\u61c1', "XUAN");
+        test('\u61c2', "DONG");
+        test('\u61c3', "QIN");
+        test('\u61c4', "QIN");
+        test('\u61c5', "JU");
+        test('\u61c6', "CAO");
+        test('\u61c7', "KEN");
+        test('\u61c8', "XIE");
+        test('\u61c9', "YING");
+        test('\u61ca', "AO");
+        test('\u61cb', "MAO");
+        test('\u61cc', "YI");
+        test('\u61cd', "LIN");
+        test('\u61ce', "SE");
+        test('\u61cf', "JUN");
+        test('\u61d0', "HUAI");
+        test('\u61d1', "MEN");
+        test('\u61d2', "LAN");
+        test('\u61d3', "AI");
+        test('\u61d4', "LIN");
+        test('\u61d5', "YAN");
+        test('\u61d6', "KUO");
+        test('\u61d7', "XIA");
+        test('\u61d8', "CHI");
+        test('\u61d9', "YU");
+        test('\u61da', "YIN");
+        test('\u61db', "DAI");
+        test('\u61dc', "MENG");
+        test('\u61dd', "AI");
+        test('\u61de', "MENG");
+        test('\u61df', "DUI");
+        test('\u61e0', "QI");
+        test('\u61e1', "MO");
+        test('\u61e2', "LAN");
+        test('\u61e3', "MEN");
+        test('\u61e4', "CHOU");
+        test('\u61e5', "ZHI");
+        test('\u61e6', "NUO");
+        test('\u61e7', "NUO");
+        test('\u61e8', "YAN");
+        test('\u61e9', "YANG");
+        test('\u61ea', "BO");
+        test('\u61eb', "ZHI");
+        test('\u61ec', "KUANG");
+        test('\u61ed', "KUANG");
+        test('\u61ee', "YOU");
+        test('\u61ef', "FU");
+        test('\u61f0', "LIU");
+        test('\u61f1', "MIE");
+        test('\u61f2', "CHENG");
+        test('\u61f3', "HUI");
+        test('\u61f4', "CHAN");
+        test('\u61f5', "MENG");
+        test('\u61f6', "LAN");
+        test('\u61f7', "HUAI");
+        test('\u61f8', "XUAN");
+        test('\u61f9', "RANG");
+        test('\u61fa', "CHAN");
+        test('\u61fb', "JI");
+        test('\u61fc', "JU");
+        test('\u61fd', "HUAN");
+        test('\u61fe', "SHE");
+        test('\u61ff', "YI");
+    }
+
+    @SmallTest
+    public void test_5() throws Exception {
+        if (!hasChineseTransliterator()) {
+            return;
+        }
+        test('\u6200', "LIAN");
+        test('\u6201', "NAN");
+        test('\u6202', "MI");
+        test('\u6203', "TANG");
+        test('\u6204', "JUE");
+        test('\u6205', "GANG");
+        test('\u6206', "GANG");
+        test('\u6207', "ZHUANG");
+        test('\u6208', "GE");
+        test('\u6209', "YUE");
+        test('\u620a', "WU");
+        test('\u620b', "JIAN");
+        test('\u620c', "XU");
+        test('\u620d', "SHU");
+        test('\u620e', "RONG");
+        test('\u620f', "XI");
+        test('\u6210', "CHENG");
+        test('\u6211', "WO");
+        test('\u6212', "JIE");
+        test('\u6213', "GE");
+        test('\u6214', "JIAN");
+        test('\u6215', "QIANG");
+        test('\u6216', "HUO");
+        test('\u6217', "QIANG");
+        test('\u6218', "ZHAN");
+        test('\u6219', "DONG");
+        test('\u621a', "QI");
+        test('\u621b', "JIA");
+        test('\u621c', "DIE");
+        test('\u621d', "ZEI");
+        test('\u621e', "JIA");
+        test('\u621f', "JI");
+        test('\u6220', "ZHI");
+        test('\u6221', "KAN");
+        test('\u6222', "JI");
+        test('\u6223', "KUI");
+        test('\u6224', "GAI");
+        test('\u6225', "DENG");
+        test('\u6226', "ZHAN");
+        test('\u6227', "QIANG");
+        test('\u6228', "GE");
+        test('\u6229', "JIAN");
+        test('\u622a', "JIE");
+        test('\u622b', "YU");
+        test('\u622c', "JIAN");
+        test('\u622d', "YAN");
+        test('\u622e', "LU");
+        test('\u622f', "HU");
+        test('\u6230', "ZHAN");
+        test('\u6231', "XI");
+        test('\u6232', "XI");
+        test('\u6233', "CHUO");
+        test('\u6234', "DAI");
+        test('\u6235', "QU");
+        test('\u6236', "HU");
+        test('\u6237', "HU");
+        test('\u6238', "HU");
+        test('\u6239', "E");
+        test('\u623a', "SHI");
+        test('\u623b', "TI");
+        test('\u623c', "MAO");
+        test('\u623d', "HU");
+        test('\u623e', "LI");
+        test('\u623f', "FANG");
+        test('\u6240', "SUO");
+        test('\u6241', "BIAN");
+        test('\u6242', "DIAN");
+        test('\u6243', "JIONG");
+        test('\u6244', "SHANG");
+        test('\u6245', "YI");
+        test('\u6246', "YI");
+        test('\u6247', "SHAN");
+        test('\u6248', "HU");
+        test('\u6249', "FEI");
+        test('\u624a', "YAN");
+        test('\u624b', "SHOU");
+        test('\u624c', "SHOU");
+        test('\u624d', "CAI");
+        test('\u624e', "ZHA");
+        test('\u624f', "QIU");
+        test('\u6250', "LE");
+        test('\u6251', "PU");
+        test('\u6252', "BA");
+        test('\u6253', "DA");
+        test('\u6254', "RENG");
+        test('\u6255', "FAN");
+        test('\u6256', "RU");
+        test('\u6257', "ZAI");
+        test('\u6258', "TUO");
+        test('\u6259', "ZHANG");
+        test('\u625a', "DIAO");
+        test('\u625b', "KANG");
+        test('\u625c', "YU");
+        test('\u625d', "KU");
+        test('\u625e', "GAN");
+        test('\u625f', "SHEN");
+        test('\u6260', "CHA");
+        test('\u6261', "TUO");
+        test('\u6262', "GU");
+        test('\u6263', "KOU");
+        test('\u6264', "WU");
+        test('\u6265', "DEN");
+        test('\u6266', "QIAN");
+        test('\u6267', "ZHI");
+        test('\u6268', "REN");
+        test('\u6269', "KUO");
+        test('\u626a', "MEN");
+        test('\u626b', "SAO");
+        test('\u626c', "YANG");
+        test('\u626d', "NIU");
+        test('\u626e', "BAN");
+        test('\u626f', "CHE");
+        test('\u6270', "RAO");
+        test('\u6271', "XI");
+        test('\u6272', "QIAN");
+        test('\u6273', "BAN");
+        test('\u6274', "JIA");
+        test('\u6275', "YU");
+        test('\u6276', "FU");
+        test('\u6277', "AO");
+        test('\u6278', "XI");
+        test('\u6279', "PI");
+        test('\u627a', "ZHI");
+        test('\u627b', "ZHI");
+        test('\u627c', "E");
+        test('\u627d', "DEN");
+        test('\u627e', "ZHAO");
+        test('\u627f', "CHENG");
+        test('\u6280', "JI");
+        test('\u6281', "YAN");
+        test('\u6282', "KUANG");
+        test('\u6283', "BIAN");
+        test('\u6284', "CHAO");
+        test('\u6285', "JU");
+        test('\u6286', "WEN");
+        test('\u6287', "HU");
+        test('\u6288', "YUE");
+        test('\u6289', "JUE");
+        test('\u628a', "BA");
+        test('\u628b', "QIN");
+        test('\u628c', "DAN");
+        test('\u628d', "ZHENG");
+        test('\u628e', "YUN");
+        test('\u628f', "WAN");
+        test('\u6290', "NE");
+        test('\u6291', "YI");
+        test('\u6292', "SHU");
+        test('\u6293', "ZHUA");
+        test('\u6294', "POU");
+        test('\u6295', "TOU");
+        test('\u6296', "DOU");
+        test('\u6297', "KANG");
+        test('\u6298', "ZHE");
+        test('\u6299', "POU");
+        test('\u629a', "FU");
+        test('\u629b', "PAO");
+        test('\u629c', "BA");
+        test('\u629d', "AO");
+        test('\u629e', "ZE");
+        test('\u629f', "TUAN");
+        test('\u62a0', "KOU");
+        test('\u62a1', "LUN");
+        test('\u62a2', "QIANG");
+        test('\u62a3', "YUN");
+        test('\u62a4', "HU");
+        test('\u62a5', "BAO");
+        test('\u62a6', "BING");
+        test('\u62a7', "ZHI");
+        test('\u62a8', "PENG");
+        test('\u62a9', "TAN");
+        test('\u62aa', "BU");
+        test('\u62ab', "PI");
+        test('\u62ac', "TAI");
+        test('\u62ad', "YAO");
+        test('\u62ae', "ZHEN");
+        test('\u62af', "ZHA");
+        test('\u62b0', "YANG");
+        test('\u62b1', "BAO");
+        test('\u62b2', "HE");
+        test('\u62b3', "NI");
+        test('\u62b4', "YE");
+        test('\u62b5', "DI");
+        test('\u62b6', "CHI");
+        test('\u62b7', "PI");
+        test('\u62b8', "JIA");
+        test('\u62b9', "MO");
+        test('\u62ba', "MEI");
+        test('\u62bb', "CHEN");
+        test('\u62bc', "YA");
+        test('\u62bd', "CHOU");
+        test('\u62be', "QU");
+        test('\u62bf', "MIN");
+        test('\u62c0', "CHU");
+        test('\u62c1', "JIA");
+        test('\u62c2', "FU");
+        test('\u62c3', "ZHA");
+        test('\u62c4', "ZHU");
+        test('\u62c5', "DAN");
+        test('\u62c6', "CHAI");
+        test('\u62c7', "MU");
+        test('\u62c8', "NIAN");
+        test('\u62c9', "LA");
+        test('\u62ca', "FU");
+        test('\u62cb', "PAO");
+        test('\u62cc', "BAN");
+        test('\u62cd', "PAI");
+        test('\u62ce', "LIN");
+        test('\u62cf', "NA");
+        test('\u62d0', "GUAI");
+        test('\u62d1', "QIAN");
+        test('\u62d2', "JU");
+        test('\u62d3', "TA");
+        test('\u62d4', "BA");
+        test('\u62d5', "TUO");
+        test('\u62d6', "TUO");
+        test('\u62d7', "AO");
+        test('\u62d8', "JU");
+        test('\u62d9', "ZHUO");
+        test('\u62da', "PAN");
+        test('\u62db', "ZHAO");
+        test('\u62dc', "BAI");
+        test('\u62dd', "BAI");
+        test('\u62de', "DI");
+        test('\u62df', "NI");
+        test('\u62e0', "JU");
+        test('\u62e1', "KUO");
+        test('\u62e2', "LONG");
+        test('\u62e3', "JIAN");
+        test('\u62e4', "QIA");
+        test('\u62e5', "YONG");
+        test('\u62e6', "LAN");
+        test('\u62e7', "NING");
+        test('\u62e8', "BO");
+        test('\u62e9', "ZE");
+        test('\u62ea', "QIAN");
+        test('\u62eb', "HEN");
+        test('\u62ec', "KUO");
+        test('\u62ed', "SHI");
+        test('\u62ee', "JIE");
+        test('\u62ef', "ZHENG");
+        test('\u62f0', "NIN");
+        test('\u62f1', "GONG");
+        test('\u62f2', "GONG");
+        test('\u62f3', "QUAN");
+        test('\u62f4', "SHUAN");
+        test('\u62f5', "CUN");
+        test('\u62f6', "ZA");
+        test('\u62f7', "KAO");
+        test('\u62f8', "YI");
+        test('\u62f9', "XIE");
+        test('\u62fa', "CE");
+        test('\u62fb', "HUI");
+        test('\u62fc', "PIN");
+        test('\u62fd', "ZHUAI");
+        test('\u62fe', "SHI");
+        test('\u62ff', "NA");
+        test('\u6300', "BAI");
+        test('\u6301', "CHI");
+        test('\u6302', "GUA");
+        test('\u6303', "ZHI");
+        test('\u6304', "KUO");
+        test('\u6305', "DUO");
+        test('\u6306', "DUO");
+        test('\u6307', "ZHI");
+        test('\u6308', "QIE");
+        test('\u6309', "AN");
+        test('\u630a', "NONG");
+        test('\u630b', "ZHEN");
+        test('\u630c', "GE");
+        test('\u630d', "JIAO");
+        test('\u630e', "KUA");
+        test('\u630f', "DONG");
+        test('\u6310', "NA");
+        test('\u6311', "TIAO");
+        test('\u6312', "LIE");
+        test('\u6313', "ZHA");
+        test('\u6314', "LU");
+        test('\u6315', "DIE");
+        test('\u6316', "WA");
+        test('\u6317', "JUE");
+        test('\u6318', "LIE");
+        test('\u6319', "JU");
+        test('\u631a', "ZHI");
+        test('\u631b', "LUAN");
+        test('\u631c', "YA");
+        test('\u631d', "WO");
+        test('\u631e', "TA");
+        test('\u631f', "XIE");
+        test('\u6320', "NAO");
+        test('\u6321', "DANG");
+        test('\u6322', "JIAO");
+        test('\u6323', "ZHENG");
+        test('\u6324', "JI");
+        test('\u6325', "HUI");
+        test('\u6326', "XIAN");
+        test('\u6327', "YU");
+        test('\u6328', "AI");
+        test('\u6329', "TUO");
+        test('\u632a', "NUO");
+        test('\u632b', "CUO");
+        test('\u632c', "BO");
+        test('\u632d', "GENG");
+        test('\u632e', "TI");
+        test('\u632f', "ZHEN");
+        test('\u6330', "CHENG");
+        test('\u6331', "SA");
+        test('\u6332', "SA");
+        test('\u6333', "KENG");
+        test('\u6334', "MEI");
+        test('\u6335', "LONG");
+        test('\u6336', "JU");
+        test('\u6337', "PENG");
+        test('\u6338', "JIAN");
+        test('\u6339', "YI");
+        test('\u633a', "TING");
+        test('\u633b', "SHAN");
+        test('\u633c', "RUA");
+        test('\u633d', "WAN");
+        test('\u633e', "XIE");
+        test('\u633f', "CHA");
+        test('\u6340', "FENG");
+        test('\u6341', "JIAO");
+        test('\u6342', "WU");
+        test('\u6343', "JUN");
+        test('\u6344', "JIU");
+        test('\u6345', "TONG");
+        test('\u6346', "KUN");
+        test('\u6347', "HUO");
+        test('\u6348', "TU");
+        test('\u6349', "ZHUO");
+        test('\u634a', "POU");
+        test('\u634b', "LU");
+        test('\u634c', "BA");
+        test('\u634d', "HAN");
+        test('\u634e', "SHAO");
+        test('\u634f', "NIE");
+        test('\u6350', "JUAN");
+        test('\u6351', "ZE");
+        test('\u6352', "SHU");
+        test('\u6353', "YE");
+        test('\u6354', "JUE");
+        test('\u6355', "BU");
+        test('\u6356', "WAN");
+        test('\u6357', "BU");
+        test('\u6358', "ZUN");
+        test('\u6359', "YI");
+        test('\u635a', "ZHAI");
+        test('\u635b', "LU");
+        test('\u635c', "SOU");
+        test('\u635d', "TUO");
+        test('\u635e', "LAO");
+        test('\u635f', "SUN");
+        test('\u6360', "BANG");
+        test('\u6361', "JIAN");
+        test('\u6362', "HUAN");
+        test('\u6363', "DAO");
+        test('\u6364', "WEI");
+        test('\u6365', "WAN");
+        test('\u6366', "QIN");
+        test('\u6367', "PENG");
+        test('\u6368', "SHE");
+        test('\u6369', "LIE");
+        test('\u636a', "MIN");
+        test('\u636b', "MEN");
+        test('\u636c', "FU");
+        test('\u636d', "BAI");
+        test('\u636e', "JU");
+        test('\u636f', "DAO");
+        test('\u6370', "WO");
+        test('\u6371', "AI");
+        test('\u6372', "JUAN");
+        test('\u6373', "YUE");
+        test('\u6374', "ZONG");
+        test('\u6375', "CHEN");
+        test('\u6376', "CHUI");
+        test('\u6377', "JIE");
+        test('\u6378', "TU");
+        test('\u6379', "BEN");
+        test('\u637a', "NA");
+        test('\u637b', "NIAN");
+        test('\u637c', "RUO");
+        test('\u637d', "ZUO");
+        test('\u637e', "WO");
+        test('\u637f', "XI");
+        test('\u6380', "XIAN");
+        test('\u6381', "CHENG");
+        test('\u6382', "DIAN");
+        test('\u6383', "SAO");
+        test('\u6384', "LUN");
+        test('\u6385', "QING");
+        test('\u6386', "GANG");
+        test('\u6387', "DUO");
+        test('\u6388', "SHOU");
+        test('\u6389', "DIAO");
+        test('\u638a', "POU");
+        test('\u638b', "DI");
+        test('\u638c', "ZHANG");
+        test('\u638d', "HUN");
+        test('\u638e', "JI");
+        test('\u638f', "TAO");
+        test('\u6390', "QIA");
+        test('\u6391', "QI");
+        test('\u6392', "PAI");
+        test('\u6393', "SHU");
+        test('\u6394', "QIAN");
+        test('\u6395', "LING");
+        test('\u6396', "YE");
+        test('\u6397', "YA");
+        test('\u6398', "JUE");
+        test('\u6399', "ZHENG");
+        test('\u639a', "LIANG");
+        test('\u639b', "GUA");
+        test('\u639c', "YI");
+        test('\u639d', "HUO");
+        test('\u639e', "SHAN");
+        test('\u639f', "ZHENG");
+        test('\u63a0', "E");
+        test('\u63a1', "CAI");
+        test('\u63a2', "TAN");
+        test('\u63a3', "CHE");
+        test('\u63a4', "BING");
+        test('\u63a5', "JIE");
+        test('\u63a6', "TI");
+        test('\u63a7', "KONG");
+        test('\u63a8', "TUI");
+        test('\u63a9', "YAN");
+        test('\u63aa', "CUO");
+        test('\u63ab', "ZHOU");
+        test('\u63ac', "JU");
+        test('\u63ad', "TIAN");
+        test('\u63ae', "QIAN");
+        test('\u63af', "KEN");
+        test('\u63b0', "BAI");
+        test('\u63b1', "PA");
+        test('\u63b2', "JIE");
+        test('\u63b3', "LU");
+        test('\u63b4', "GUAI");
+        test('\u63b5', "MING");
+        test('\u63b6', "GENG");
+        test('\u63b7', "ZHI");
+        test('\u63b8', "DAN");
+        test('\u63b9', "MENG");
+        test('\u63ba', "CAN");
+        test('\u63bb', "SAO");
+        test('\u63bc', "GUAN");
+        test('\u63bd', "PENG");
+        test('\u63be', "YUAN");
+        test('\u63bf', "NUO");
+        test('\u63c0', "JIAN");
+        test('\u63c1', "ZHENG");
+        test('\u63c2', "JIU");
+        test('\u63c3', "JIAN");
+        test('\u63c4', "YU");
+        test('\u63c5', "YAN");
+        test('\u63c6', "KUI");
+        test('\u63c7', "NAN");
+        test('\u63c8', "HONG");
+        test('\u63c9', "ROU");
+        test('\u63ca', "PI");
+        test('\u63cb', "WEI");
+        test('\u63cc', "SAI");
+        test('\u63cd', "ZOU");
+        test('\u63ce', "XUAN");
+        test('\u63cf', "MIAO");
+        test('\u63d0', "TI");
+        test('\u63d1', "NIE");
+        test('\u63d2', "CHA");
+        test('\u63d3', "SHI");
+        test('\u63d4', "ZONG");
+        test('\u63d5', "ZHEN");
+        test('\u63d6', "YI");
+        test('\u63d7', "XUN");
+        test('\u63d8', "YONG");
+        test('\u63d9', "BIAN");
+        test('\u63da', "YANG");
+        test('\u63db', "HUAN");
+        test('\u63dc', "YAN");
+        test('\u63dd', "ZAN");
+        test('\u63de', "AN");
+        test('\u63df', "XU");
+        test('\u63e0', "YA");
+        test('\u63e1', "WO");
+        test('\u63e2', "KE");
+        test('\u63e3', "CHUAI");
+        test('\u63e4', "JI");
+        test('\u63e5', "TI");
+        test('\u63e6', "LA");
+        test('\u63e7', "LA");
+        test('\u63e8', "CHEN");
+        test('\u63e9', "KAI");
+        test('\u63ea', "JIU");
+        test('\u63eb', "JIU");
+        test('\u63ec', "TU");
+        test('\u63ed', "JIE");
+        test('\u63ee', "HUI");
+        test('\u63ef', "GEN");
+        test('\u63f0', "CHONG");
+        test('\u63f1', "XIAO");
+        test('\u63f2', "DIE");
+        test('\u63f3', "XIE");
+        test('\u63f4', "YUAN");
+        test('\u63f5', "QIAN");
+        test('\u63f6', "YE");
+        test('\u63f7', "CHA");
+        test('\u63f8', "ZHA");
+        test('\u63f9', "BEI");
+        test('\u63fa', "YAO");
+        test('\u63fb', "WEI");
+        test('\u63fc', "BENG");
+        test('\u63fd', "LAN");
+        test('\u63fe', "WEN");
+        test('\u63ff', "QIN");
+        test('\u6400', "CHAN");
+        test('\u6401', "GE");
+        test('\u6402', "LOU");
+        test('\u6403', "ZONG");
+        test('\u6404', "GENG");
+        test('\u6405', "JIAO");
+        test('\u6406', "GOU");
+        test('\u6407', "QIN");
+        test('\u6408', "RONG");
+        test('\u6409', "QUE");
+        test('\u640a', "CHOU");
+        test('\u640b', "CHUAI");
+        test('\u640c', "ZHAN");
+        test('\u640d', "SUN");
+        test('\u640e', "SUN");
+        test('\u640f', "BO");
+        test('\u6410', "CHU");
+        test('\u6411', "RONG");
+        test('\u6412', "BANG");
+        test('\u6413', "CUO");
+        test('\u6414', "SAO");
+        test('\u6415', "KE");
+        test('\u6416', "YAO");
+        test('\u6417', "DAO");
+        test('\u6418', "ZHI");
+        test('\u6419', "NU");
+        test('\u641a', "LA");
+        test('\u641b', "JIAN");
+        test('\u641c', "SOU");
+        test('\u641d', "QIU");
+        test('\u641e', "GAO");
+        test('\u641f', "XIAN");
+        test('\u6420', "SHUO");
+        test('\u6421', "SANG");
+        test('\u6422', "JIN");
+        test('\u6423', "MIE");
+        test('\u6424', "E");
+        test('\u6425', "CHUI");
+        test('\u6426', "NUO");
+        test('\u6427', "SHAN");
+        test('\u6428', "TA");
+        test('\u6429', "ZHA");
+        test('\u642a', "TANG");
+        test('\u642b', "PAN");
+        test('\u642c', "BAN");
+        test('\u642d', "DA");
+        test('\u642e', "LI");
+        test('\u642f', "TAO");
+        test('\u6430', "HU");
+        test('\u6431', "ZHI");
+        test('\u6432', "WA");
+        test('\u6433', "HUA");
+        test('\u6434', "QIAN");
+        test('\u6435', "WEN");
+        test('\u6436', "QIANG");
+        test('\u6437', "TIAN");
+        test('\u6438', "ZHEN");
+        test('\u6439', "E");
+        test('\u643a', "XIE");
+        test('\u643b', "NUO");
+        test('\u643c', "QUAN");
+        test('\u643d', "CHA");
+        test('\u643e', "ZHA");
+        test('\u643f', "GE");
+        test('\u6440', "WU");
+        test('\u6441', "EN");
+        test('\u6442', "SHE");
+        test('\u6443', "KANG");
+        test('\u6444', "SHE");
+        test('\u6445', "SHU");
+        test('\u6446', "BAI");
+        test('\u6447', "YAO");
+        test('\u6448', "BIN");
+        test('\u6449', "SOU");
+        test('\u644a', "TAN");
+        test('\u644b', "SA");
+        test('\u644c', "CHAN");
+        test('\u644d', "SUO");
+        test('\u644e', "JIU");
+        test('\u644f', "CHONG");
+        test('\u6450', "CHUANG");
+        test('\u6451', "GUAI");
+        test('\u6452', "BING");
+        test('\u6453', "FENG");
+        test('\u6454', "SHUAI");
+        test('\u6455', "DI");
+        test('\u6456', "QI");
+        test('\u6457', "SOU");
+        test('\u6458', "ZHAI");
+        test('\u6459', "LIAN");
+        test('\u645a', "CHENG");
+        test('\u645b', "CHI");
+        test('\u645c', "GUAN");
+        test('\u645d', "LU");
+        test('\u645e', "LUO");
+        test('\u645f', "LOU");
+        test('\u6460', "ZONG");
+        test('\u6461', "GAI");
+        test('\u6462', "HU");
+        test('\u6463', "ZHA");
+        test('\u6464', "CHUANG");
+        test('\u6465', "TANG");
+        test('\u6466', "HUA");
+        test('\u6467', "CUI");
+        test('\u6468', "NAI");
+        test('\u6469', "MO");
+        test('\u646a', "JIANG");
+        test('\u646b', "GUI");
+        test('\u646c', "YING");
+        test('\u646d', "ZHI");
+        test('\u646e', "AO");
+        test('\u646f', "ZHI");
+        test('\u6470', "NIE");
+        test('\u6471', "MAN");
+        test('\u6472', "CHAN");
+        test('\u6473', "KOU");
+        test('\u6474', "CHU");
+        test('\u6475', "SHE");
+        test('\u6476', "TUAN");
+        test('\u6477', "JIAO");
+        test('\u6478', "MO");
+        test('\u6479', "MO");
+        test('\u647a', "ZHE");
+        test('\u647b', "CAN");
+        test('\u647c', "KENG");
+        test('\u647d', "BIAO");
+        test('\u647e', "JIANG");
+        test('\u647f', "YIN");
+        test('\u6480', "GOU");
+        test('\u6481', "QIAN");
+        test('\u6482', "LIAO");
+        test('\u6483', "JI");
+        test('\u6484', "YING");
+        test('\u6485', "JUE");
+        test('\u6486', "PIE");
+        test('\u6487', "PIE");
+        test('\u6488', "LAO");
+        test('\u6489', "DUN");
+        test('\u648a', "XIAN");
+        test('\u648b', "RUAN");
+        test('\u648c', "GUI");
+        test('\u648d', "ZAN");
+        test('\u648e', "YI");
+        test('\u648f', "XIAN");
+        test('\u6490', "CHENG");
+        test('\u6491', "CHENG");
+        test('\u6492', "SA");
+        test('\u6493', "NAO");
+        test('\u6494', "HONG");
+        test('\u6495', "SI");
+        test('\u6496', "HAN");
+        test('\u6497', "GUANG");
+        test('\u6498', "DA");
+        test('\u6499', "ZUN");
+        test('\u649a', "NIAN");
+        test('\u649b', "LIN");
+        test('\u649c', "ZHENG");
+        test('\u649d', "HUI");
+        test('\u649e', "ZHUANG");
+        test('\u649f', "JIAO");
+        test('\u64a0', "JI");
+        test('\u64a1', "CAO");
+        test('\u64a2', "DAN");
+        test('\u64a3', "DAN");
+        test('\u64a4', "CHE");
+        test('\u64a5', "BO");
+        test('\u64a6', "CHE");
+        test('\u64a7', "JUE");
+        test('\u64a8', "FU");
+        test('\u64a9', "LIAO");
+        test('\u64aa', "BEN");
+        test('\u64ab', "FU");
+        test('\u64ac', "QIAO");
+        test('\u64ad', "BO");
+        test('\u64ae', "CUO");
+        test('\u64af', "ZHUO");
+        test('\u64b0', "ZHUAN");
+        test('\u64b1', "WEI");
+        test('\u64b2', "PU");
+        test('\u64b3', "QIN");
+        test('\u64b4', "DUN");
+        test('\u64b5', "NIAN");
+        test('\u64b6', "HUA");
+        test('\u64b7', "XIE");
+        test('\u64b8', "LU");
+        test('\u64b9', "JIAO");
+        test('\u64ba', "CUAN");
+        test('\u64bb', "TA");
+        test('\u64bc', "HAN");
+        test('\u64bd', "QIAO");
+        test('\u64be', "WO");
+        test('\u64bf', "JIAN");
+        test('\u64c0', "GAN");
+        test('\u64c1', "YONG");
+        test('\u64c2', "LEI");
+        test('\u64c3', "NANG");
+        test('\u64c4', "LU");
+        test('\u64c5', "SHAN");
+        test('\u64c6', "ZHUO");
+        test('\u64c7', "ZE");
+        test('\u64c8', "PU");
+        test('\u64c9', "CHUO");
+        test('\u64ca', "JI");
+        test('\u64cb', "DANG");
+        test('\u64cc', "SE");
+        test('\u64cd', "CAO");
+        test('\u64ce', "QING");
+        test('\u64cf', "QING");
+        test('\u64d0', "HUAN");
+        test('\u64d1', "JIE");
+        test('\u64d2', "QIN");
+        test('\u64d3', "KUAI");
+        test('\u64d4', "DAN");
+        test('\u64d5', "XIE");
+        test('\u64d6', "KA");
+        test('\u64d7', "PI");
+        test('\u64d8', "BAI");
+        test('\u64d9', "AO");
+        test('\u64da', "JU");
+        test('\u64db', "YE");
+        test('\u64dc', "E");
+        test('\u64dd', "MENG");
+        test('\u64de', "SOU");
+        test('\u64df', "MI");
+        test('\u64e0', "JI");
+        test('\u64e1', "TAI");
+        test('\u64e2', "ZHUO");
+        test('\u64e3', "DAO");
+        test('\u64e4', "XING");
+        test('\u64e5', "LAN");
+        test('\u64e6', "CA");
+        test('\u64e7', "JU");
+        test('\u64e8', "YE");
+        test('\u64e9', "RU");
+        test('\u64ea', "YE");
+        test('\u64eb', "YE");
+        test('\u64ec', "NI");
+        test('\u64ed', "WO");
+        test('\u64ee', "JI");
+        test('\u64ef', "BIN");
+        test('\u64f0', "NING");
+        test('\u64f1', "GE");
+        test('\u64f2', "ZHI");
+        test('\u64f3', "ZHI");
+        test('\u64f4', "KUO");
+        test('\u64f5', "MO");
+        test('\u64f6', "JIAN");
+        test('\u64f7', "XIE");
+        test('\u64f8', "LIE");
+        test('\u64f9', "TAN");
+        test('\u64fa', "BAI");
+        test('\u64fb', "SOU");
+        test('\u64fc', "LU");
+        test('\u64fd', "LUE");
+        test('\u64fe', "RAO");
+        test('\u64ff', "TI");
+        test('\u6500', "PAN");
+        test('\u6501', "YANG");
+        test('\u6502', "LEI");
+        test('\u6503', "CA");
+        test('\u6504', "SHU");
+        test('\u6505', "ZAN");
+        test('\u6506', "NIAN");
+        test('\u6507', "XIAN");
+        test('\u6508', "JUN");
+        test('\u6509', "HUO");
+        test('\u650a', "LI");
+        test('\u650b', "LA");
+        test('\u650c', "HUAN");
+        test('\u650d', "YING");
+        test('\u650e', "LU");
+        test('\u650f', "LONG");
+        test('\u6510', "QIAN");
+        test('\u6511', "QIAN");
+        test('\u6512', "ZAN");
+        test('\u6513', "QIAN");
+        test('\u6514', "LAN");
+        test('\u6515', "XIAN");
+        test('\u6516', "YING");
+        test('\u6517', "MEI");
+        test('\u6518', "RANG");
+        test('\u6519', "CHAN");
+        test('\u651a', "YING");
+        test('\u651b', "CUAN");
+        test('\u651c', "XIE");
+        test('\u651d', "SHE");
+        test('\u651e', "LUO");
+        test('\u651f', "JUN");
+        test('\u6520', "MI");
+        test('\u6521', "LI");
+        test('\u6522', "ZAN");
+        test('\u6523', "LUAN");
+        test('\u6524', "TAN");
+        test('\u6525', "ZUAN");
+        test('\u6526', "LI");
+        test('\u6527', "DIAN");
+        test('\u6528', "WA");
+        test('\u6529', "DANG");
+        test('\u652a', "JIAO");
+        test('\u652b', "JUE");
+        test('\u652c', "LAN");
+        test('\u652d', "LI");
+        test('\u652e', "NANG");
+        test('\u652f', "ZHI");
+        test('\u6530', "GUI");
+        test('\u6531', "GUI");
+        test('\u6532', "QI");
+        test('\u6533', "XUN");
+        test('\u6534', "PU");
+        test('\u6535', "SUI");
+        test('\u6536', "SHOU");
+        test('\u6537', "KAO");
+        test('\u6538', "YOU");
+        test('\u6539', "GAI");
+        test('\u653a', "YI");
+        test('\u653b', "GONG");
+        test('\u653c', "GAN");
+        test('\u653d', "BAN");
+        test('\u653e', "FANG");
+        test('\u653f', "ZHENG");
+        test('\u6540', "PO");
+        test('\u6541', "DIAN");
+        test('\u6542', "KOU");
+        test('\u6543', "MIN");
+        test('\u6544', "WU");
+        test('\u6545', "GU");
+        test('\u6546', "HE");
+        test('\u6547', "CE");
+        test('\u6548', "XIAO");
+        test('\u6549', "MI");
+        test('\u654a', "CHU");
+        test('\u654b', "GE");
+        test('\u654c', "DI");
+        test('\u654d', "XU");
+        test('\u654e', "JIAO");
+        test('\u654f', "MIN");
+        test('\u6550', "CHEN");
+        test('\u6551', "JIU");
+        test('\u6552', "SHEN");
+        test('\u6553', "DUO");
+        test('\u6554', "YU");
+        test('\u6555', "CHI");
+        test('\u6556', "AO");
+        test('\u6557', "BAI");
+        test('\u6558', "XU");
+        test('\u6559', "JIAO");
+        test('\u655a', "DUO");
+        test('\u655b', "LIAN");
+        test('\u655c', "NIE");
+        test('\u655d', "BI");
+        test('\u655e', "CHANG");
+        test('\u655f', "DIAN");
+        test('\u6560', "DUO");
+        test('\u6561', "YI");
+        test('\u6562', "GAN");
+        test('\u6563', "SAN");
+        test('\u6564', "KE");
+        test('\u6565', "YAN");
+        test('\u6566', "DUN");
+        test('\u6567', "JI");
+        test('\u6568', "TOU");
+        test('\u6569', "XIAO");
+        test('\u656a', "DUO");
+        test('\u656b', "JIAO");
+        test('\u656c', "JING");
+        test('\u656d', "YANG");
+        test('\u656e', "XIA");
+        test('\u656f', "MIN");
+        test('\u6570', "SHU");
+        test('\u6571', "AI");
+        test('\u6572', "QIAO");
+        test('\u6573', "AI");
+        test('\u6574', "ZHENG");
+        test('\u6575', "DI");
+        test('\u6576', "ZHEN");
+        test('\u6577', "FU");
+        test('\u6578', "SHU");
+        test('\u6579', "LIAO");
+        test('\u657a', "QU");
+        test('\u657b', "XIONG");
+        test('\u657c', "YI");
+        test('\u657d', "JIAO");
+        test('\u657e', "SHAN");
+        test('\u657f', "JIAO");
+        test('\u6580', "ZHUO");
+        test('\u6581', "YI");
+        test('\u6582', "LIAN");
+        test('\u6583', "BI");
+        test('\u6584', "LI");
+        test('\u6585', "XIAO");
+        test('\u6586', "XIAO");
+        test('\u6587', "WEN");
+        test('\u6588', "XUE");
+        test('\u6589', "QI");
+        test('\u658a', "QI");
+        test('\u658b', "ZHAI");
+        test('\u658c', "BIN");
+        test('\u658d', "JUE");
+        test('\u658e', "ZHAI");
+        test('\u658f', "LANG");
+        test('\u6590', "FEI");
+        test('\u6591', "BAN");
+        test('\u6592', "BAN");
+        test('\u6593', "LAN");
+        test('\u6594', "YU");
+        test('\u6595', "LAN");
+        test('\u6596', "WEI");
+        test('\u6597', "DOU");
+        test('\u6598', "SHENG");
+        test('\u6599', "LIAO");
+        test('\u659a', "JIA");
+        test('\u659b', "HU");
+        test('\u659c', "XIE");
+        test('\u659d', "JIA");
+        test('\u659e', "YU");
+        test('\u659f', "ZHEN");
+        test('\u65a0', "JIAO");
+        test('\u65a1', "WO");
+        test('\u65a2', "TIAO");
+        test('\u65a3', "DOU");
+        test('\u65a4', "JIN");
+        test('\u65a5', "CHI");
+        test('\u65a6', "YIN");
+        test('\u65a7', "FU");
+        test('\u65a8', "QIANG");
+        test('\u65a9', "ZHAN");
+        test('\u65aa', "QU");
+        test('\u65ab', "ZHUO");
+        test('\u65ac', "ZHAN");
+        test('\u65ad', "DUAN");
+        test('\u65ae', "CUO");
+        test('\u65af', "SI");
+        test('\u65b0', "XIN");
+        test('\u65b1', "ZHUO");
+        test('\u65b2', "ZHUO");
+        test('\u65b3', "QIN");
+        test('\u65b4', "LIN");
+        test('\u65b5', "ZHUO");
+        test('\u65b6', "CHU");
+        test('\u65b7', "DUAN");
+        test('\u65b8', "ZHU");
+        test('\u65b9', "FANG");
+        test('\u65ba', "CHAN");
+        test('\u65bb', "HANG");
+        test('\u65bc', "YU");
+        test('\u65bd', "SHI");
+        test('\u65be', "PEI");
+        test('\u65bf', "YOU");
+        test('\u65c0', "MEI");
+        test('\u65c1', "PANG");
+        test('\u65c2', "QI");
+        test('\u65c3', "ZHAN");
+        test('\u65c4', "MAO");
+        test('\u65c5', "LU");
+        test('\u65c6', "PEI");
+        test('\u65c7', "PI");
+        test('\u65c8', "LIU");
+        test('\u65c9', "FU");
+        test('\u65ca', "FANG");
+        test('\u65cb', "XUAN");
+        test('\u65cc', "JING");
+        test('\u65cd', "JING");
+        test('\u65ce', "NI");
+        test('\u65cf', "ZU");
+        test('\u65d0', "ZHAO");
+        test('\u65d1', "YI");
+        test('\u65d2', "LIU");
+        test('\u65d3', "SHAO");
+        test('\u65d4', "JIAN");
+        test('\u65d5', "YU");
+        test('\u65d6', "YI");
+        test('\u65d7', "QI");
+        test('\u65d8', "ZHI");
+        test('\u65d9', "FAN");
+        test('\u65da', "PIAO");
+        test('\u65db', "FAN");
+        test('\u65dc', "ZHAN");
+        test('\u65dd', "KUAI");
+        test('\u65de', "SUI");
+        test('\u65df', "YU");
+        test('\u65e0', "WU");
+        test('\u65e1', "JI");
+        test('\u65e2', "JI");
+        test('\u65e3', "JI");
+        test('\u65e4', "HUO");
+        test('\u65e5', "RI");
+        test('\u65e6', "DAN");
+        test('\u65e7', "JIU");
+        test('\u65e8', "ZHI");
+        test('\u65e9', "ZAO");
+        test('\u65ea', "XIE");
+        test('\u65eb', "TIAO");
+        test('\u65ec', "XUN");
+        test('\u65ed', "XU");
+        test('\u65ee', "GA");
+        test('\u65ef', "LA");
+        test('\u65f0', "GAN");
+        test('\u65f1', "HAN");
+        test('\u65f2', "TAI");
+        test('\u65f3', "DI");
+        test('\u65f4', "XU");
+        test('\u65f5', "CHAN");
+        test('\u65f6', "SHI");
+        test('\u65f7', "KUANG");
+        test('\u65f8', "YANG");
+        test('\u65f9', "SHI");
+        test('\u65fa', "WANG");
+        test('\u65fb', "MIN");
+        test('\u65fc', "MIN");
+        test('\u65fd', "TUN");
+        test('\u65fe', "CHUN");
+        test('\u65ff', "WU");
+    }
+
+    @SmallTest
+    public void test_6() throws Exception {
+        if (!hasChineseTransliterator()) {
+            return;
+        }
+        test('\u6600', "YUN");
+        test('\u6601', "BEI");
+        test('\u6602', "ANG");
+        test('\u6603', "ZE");
+        test('\u6604', "BAN");
+        test('\u6605', "JIE");
+        test('\u6606', "KUN");
+        test('\u6607', "SHENG");
+        test('\u6608', "HU");
+        test('\u6609', "FANG");
+        test('\u660a', "HAO");
+        test('\u660b', "GUI");
+        test('\u660c', "CHANG");
+        test('\u660d', "XUAN");
+        test('\u660e', "MING");
+        test('\u660f', "HUN");
+        test('\u6610', "FEN");
+        test('\u6611', "QIN");
+        test('\u6612', "HU");
+        test('\u6613', "YI");
+        test('\u6614', "XI");
+        test('\u6615', "XIN");
+        test('\u6616', "YAN");
+        test('\u6617', "ZE");
+        test('\u6618', "FANG");
+        test('\u6619', "TAN");
+        test('\u661a', "SHEN");
+        test('\u661b', "JU");
+        test('\u661c', "YANG");
+        test('\u661d', "ZAN");
+        test('\u661e', "BING");
+        test('\u661f', "XING");
+        test('\u6620', "YING");
+        test('\u6621', "XUAN");
+        test('\u6622', "PO");
+        test('\u6623', "ZHEN");
+        test('\u6624', "LING");
+        test('\u6625', "CHUN");
+        test('\u6626', "HAO");
+        test('\u6627', "MEI");
+        test('\u6628', "ZUO");
+        test('\u6629', "MO");
+        test('\u662a', "BIAN");
+        test('\u662b', "XU");
+        test('\u662c', "HUN");
+        test('\u662d', "ZHAO");
+        test('\u662e', "ZONG");
+        test('\u662f', "SHI");
+        test('\u6630', "SHI");
+        test('\u6631', "YU");
+        test('\u6632', "FEI");
+        test('\u6633', "DIE");
+        test('\u6634', "MAO");
+        test('\u6635', "NI");
+        test('\u6636', "CHANG");
+        test('\u6637', "WEN");
+        test('\u6638', "DONG");
+        test('\u6639', "AI");
+        test('\u663a', "BING");
+        test('\u663b', "ANG");
+        test('\u663c', "ZHOU");
+        test('\u663d', "LONG");
+        test('\u663e', "XIAN");
+        test('\u663f', "KUANG");
+        test('\u6640', "TIAO");
+        test('\u6641', "CHAO");
+        test('\u6642', "SHI");
+        test('\u6643', "HUANG");
+        test('\u6644', "HUANG");
+        test('\u6645', "XUAN");
+        test('\u6646', "KUI");
+        test('\u6647', "XU");
+        test('\u6648', "JIAO");
+        test('\u6649', "JIN");
+        test('\u664a', "ZHI");
+        test('\u664b', "JIN");
+        test('\u664c', "SHANG");
+        test('\u664d', "TONG");
+        test('\u664e', "HONG");
+        test('\u664f', "YAN");
+        test('\u6650', "GAI");
+        test('\u6651', "XIANG");
+        test('\u6652', "SHAI");
+        test('\u6653', "XIAO");
+        test('\u6654', "YE");
+        test('\u6655', "YUN");
+        test('\u6656', "HUI");
+        test('\u6657', "HAN");
+        test('\u6658', "HAN");
+        test('\u6659', "JUN");
+        test('\u665a', "WAN");
+        test('\u665b', "XIAN");
+        test('\u665c', "KUN");
+        test('\u665d', "ZHOU");
+        test('\u665e', "XI");
+        test('\u665f', "CHENG");
+        test('\u6660', "SHENG");
+        test('\u6661', "BU");
+        test('\u6662', "ZHE");
+        test('\u6663', "ZHE");
+        test('\u6664', "WU");
+        test('\u6665', "HAN");
+        test('\u6666', "HUI");
+        test('\u6667', "HAO");
+        test('\u6668', "CHEN");
+        test('\u6669', "WAN");
+        test('\u666a', "TIAN");
+        test('\u666b', "ZHUO");
+        test('\u666c', "ZUI");
+        test('\u666d', "ZHOU");
+        test('\u666e', "PU");
+        test('\u666f', "JING");
+        test('\u6670', "XI");
+        test('\u6671', "SHAN");
+        test('\u6672', "NI");
+        test('\u6673', "XI");
+        test('\u6674', "QING");
+        test('\u6675', "QI");
+        test('\u6676', "JING");
+        test('\u6677', "GUI");
+        test('\u6678', "ZHENG");
+        test('\u6679', "YI");
+        test('\u667a', "ZHI");
+        test('\u667b', "AN");
+        test('\u667c', "WAN");
+        test('\u667d', "LIN");
+        test('\u667e', "LIANG");
+        test('\u667f', "CHANG");
+        test('\u6680', "WANG");
+        test('\u6681', "XIAO");
+        test('\u6682', "ZAN");
+        test('\u6683', "FEI");
+        test('\u6684', "XUAN");
+        test('\u6685', "GENG");
+        test('\u6686', "YI");
+        test('\u6687', "XIA");
+        test('\u6688', "YUN");
+        test('\u6689', "HUI");
+        test('\u668a', "XU");
+        test('\u668b', "MIN");
+        test('\u668c', "KUI");
+        test('\u668d', "YE");
+        test('\u668e', "YING");
+        test('\u668f', "SHU");
+        test('\u6690', "WEI");
+        test('\u6691', "SHU");
+        test('\u6692', "QING");
+        test('\u6693', "MAO");
+        test('\u6694', "NAN");
+        test('\u6695', "JIAN");
+        test('\u6696', "NUAN");
+        test('\u6697', "AN");
+        test('\u6698', "YANG");
+        test('\u6699', "CHUN");
+        test('\u669a', "YAO");
+        test('\u669b', "SUO");
+        test('\u669c', "JIN");
+        test('\u669d', "MING");
+        test('\u669e', "JIAO");
+        test('\u669f', "KAI");
+        test('\u66a0', "GAO");
+        test('\u66a1', "WENG");
+        test('\u66a2', "CHANG");
+        test('\u66a3', "QI");
+        test('\u66a4', "HAO");
+        test('\u66a5', "YAN");
+        test('\u66a6', "LI");
+        test('\u66a7', "AI");
+        test('\u66a8', "JI");
+        test('\u66a9', "JI");
+        test('\u66aa', "MEN");
+        test('\u66ab', "ZAN");
+        test('\u66ac', "XIE");
+        test('\u66ad', "HAO");
+        test('\u66ae', "MU");
+        test('\u66af', "MO");
+        test('\u66b0', "CONG");
+        test('\u66b1', "NI");
+        test('\u66b2', "ZHANG");
+        test('\u66b3', "HUI");
+        test('\u66b4', "BAO");
+        test('\u66b5', "HAN");
+        test('\u66b6', "XUAN");
+        test('\u66b7', "CHUAN");
+        test('\u66b8', "LIAO");
+        test('\u66b9', "XIAN");
+        test('\u66ba', "DAN");
+        test('\u66bb', "JING");
+        test('\u66bc', "PIE");
+        test('\u66bd', "LIN");
+        test('\u66be', "TUN");
+        test('\u66bf', "XI");
+        test('\u66c0', "YI");
+        test('\u66c1', "JI");
+        test('\u66c2', "HUANG");
+        test('\u66c3', "DAI");
+        test('\u66c4', "YE");
+        test('\u66c5', "YE");
+        test('\u66c6', "LI");
+        test('\u66c7', "TAN");
+        test('\u66c8', "TONG");
+        test('\u66c9', "XIAO");
+        test('\u66ca', "FEI");
+        test('\u66cb', "SHEN");
+        test('\u66cc', "ZHAO");
+        test('\u66cd', "HAO");
+        test('\u66ce', "YI");
+        test('\u66cf', "XIANG");
+        test('\u66d0', "XING");
+        test('\u66d1', "SHEN");
+        test('\u66d2', "JIAO");
+        test('\u66d3', "BAO");
+        test('\u66d4', "JING");
+        test('\u66d5', "YAN");
+        test('\u66d6', "AI");
+        test('\u66d7', "YE");
+        test('\u66d8', "RU");
+        test('\u66d9', "SHU");
+        test('\u66da', "MENG");
+        test('\u66db', "XUN");
+        test('\u66dc', "YAO");
+        test('\u66dd', "PU");
+        test('\u66de', "LI");
+        test('\u66df', "CHEN");
+        test('\u66e0', "KUANG");
+        test('\u66e1', "DIE");
+        test('\u66e2', "LIAO");
+        test('\u66e3', "YAN");
+        test('\u66e4', "HUO");
+        test('\u66e5', "LU");
+        test('\u66e6', "XI");
+        test('\u66e7', "RONG");
+        test('\u66e8', "LONG");
+        test('\u66e9', "NANG");
+        test('\u66ea', "LUO");
+        test('\u66eb', "LUAN");
+        test('\u66ec', "SHAI");
+        test('\u66ed', "TANG");
+        test('\u66ee', "YAN");
+        test('\u66ef', "ZHU");
+        test('\u66f0', "YUE");
+        test('\u66f1', "YUE");
+        test('\u66f2', "QU");
+        test('\u66f3', "YE");
+        test('\u66f4', "GENG");
+        test('\u66f5', "YE");
+        test('\u66f6', "HU");
+        test('\u66f7', "HE");
+        test('\u66f8', "SHU");
+        test('\u66f9', "CAO");
+        test('\u66fa', "CAO");
+        test('\u66fb', "SHENG");
+        test('\u66fc', "MAN");
+        test('\u66fd', "CENG");
+        test('\u66fe', "ZENG");
+        test('\u66ff', "TI");
+        test('\u6700', "ZUI");
+        test('\u6701', "CAN");
+        test('\u6702', "XU");
+        test('\u6703', "HUI");
+        test('\u6704', "YIN");
+        test('\u6705', "QIE");
+        test('\u6706', "FEN");
+        test('\u6707', "PI");
+        test('\u6708', "YUE");
+        test('\u6709', "YOU");
+        test('\u670a', "RUAN");
+        test('\u670b', "PENG");
+        test('\u670c', "FEN");
+        test('\u670d', "FU");
+        test('\u670e', "LING");
+        test('\u670f', "FEI");
+        test('\u6710', "QU");
+        test('\u6711', "TI");
+        test('\u6712', "NU");
+        test('\u6713', "TIAO");
+        test('\u6714', "SHUO");
+        test('\u6715', "ZHEN");
+        test('\u6716', "LANG");
+        test('\u6717', "LANG");
+        test('\u6718', "ZUI");
+        test('\u6719', "MING");
+        test('\u671a', "HUANG");
+        test('\u671b', "WANG");
+        test('\u671c', "TUN");
+        test('\u671d', "CHAO");
+        test('\u671e', "JI");
+        test('\u671f', "QI");
+        test('\u6720', "YING");
+        test('\u6721', "ZONG");
+        test('\u6722', "WANG");
+        test('\u6723', "TONG");
+        test('\u6724', "LANG");
+        test('\u6725', "LAO");
+        test('\u6726', "MENG");
+        test('\u6727', "LONG");
+        test('\u6728', "MU");
+        test('\u6729', "DENG");
+        test('\u672a', "WEI");
+        test('\u672b', "MO");
+        test('\u672c', "BEN");
+        test('\u672d', "ZHA");
+        test('\u672e', "SHU");
+        test('\u672f', "SHU");
+        test('\u6730', "MU");
+        test('\u6731', "ZHU");
+        test('\u6732', "REN");
+        test('\u6733', "BA");
+        test('\u6734', "PU");
+        test('\u6735', "DUO");
+        test('\u6736', "DUO");
+        test('\u6737', "DAO");
+        test('\u6738', "LI");
+        test('\u6739', "GUI");
+        test('\u673a', "JI");
+        test('\u673b', "JIU");
+        test('\u673c', "BI");
+        test('\u673d', "XIU");
+        test('\u673e', "CHENG");
+        test('\u673f', "CI");
+        test('\u6740', "SHA");
+        test('\u6741', "RU");
+        test('\u6742', "ZA");
+        test('\u6743', "QUAN");
+        test('\u6744', "QIAN");
+        test('\u6745', "YU");
+        test('\u6746', "GAN");
+        test('\u6747', "WU");
+        test('\u6748', "CHA");
+        test('\u6749', "SHAN");
+        test('\u674a', "XUN");
+        test('\u674b', "FAN");
+        test('\u674c', "WU");
+        test('\u674d', "ZI");
+        test('\u674e', "LI");
+        test('\u674f', "XING");
+        test('\u6750', "CAI");
+        test('\u6751', "CUN");
+        test('\u6752', "REN");
+        test('\u6753', "BIAO");
+        test('\u6754', "TUO");
+        test('\u6755', "DI");
+        test('\u6756', "ZHANG");
+        test('\u6757', "MANG");
+        test('\u6758', "CHI");
+        test('\u6759', "YI");
+        test('\u675a', "GAI");
+        test('\u675b', "GONG");
+        test('\u675c', "DU");
+        test('\u675d', "LI");
+        test('\u675e', "QI");
+        test('\u675f', "SHU");
+        test('\u6760', "GANG");
+        test('\u6761', "TIAO");
+        test('\u6762', "JIANG");
+        test('\u6763', "SHAN");
+        test('\u6764', "WAN");
+        test('\u6765', "LAI");
+        test('\u6766', "JIU");
+        test('\u6767', "MANG");
+        test('\u6768', "YANG");
+        test('\u6769', "MA");
+        test('\u676a', "MIAO");
+        test('\u676b', "SI");
+        test('\u676c', "YUAN");
+        test('\u676d', "HANG");
+        test('\u676e', "FEI");
+        test('\u676f', "BEI");
+        test('\u6770', "JIE");
+        test('\u6771', "DONG");
+        test('\u6772', "GAO");
+        test('\u6773', "YAO");
+        test('\u6774', "XIAN");
+        test('\u6775', "CHU");
+        test('\u6776', "CHUN");
+        test('\u6777', "PA");
+        test('\u6778', "SHU");
+        test('\u6779', "HUA");
+        test('\u677a', "XIN");
+        test('\u677b', "CHOU");
+        test('\u677c', "ZHU");
+        test('\u677d', "CHOU");
+        test('\u677e', "SONG");
+        test('\u677f', "BAN");
+        test('\u6780', "SONG");
+        test('\u6781', "JI");
+        test('\u6782', "WO");
+        test('\u6783', "JIN");
+        test('\u6784', "GOU");
+        test('\u6785', "JI");
+        test('\u6786', "MAO");
+        test('\u6787', "PI");
+        test('\u6788', "BI");
+        test('\u6789', "WANG");
+        test('\u678a', "ANG");
+        test('\u678b', "FANG");
+        test('\u678c', "FEN");
+        test('\u678d', "YI");
+        test('\u678e', "FU");
+        test('\u678f', "NAN");
+        test('\u6790', "XI");
+        test('\u6791', "HU");
+        test('\u6792', "YA");
+        test('\u6793', "DOU");
+        test('\u6794', "XIN");
+        test('\u6795', "ZHEN");
+        test('\u6796', "YAO");
+        test('\u6797', "LIN");
+        test('\u6798', "RUI");
+        test('\u6799', "E");
+        test('\u679a', "MEI");
+        test('\u679b', "ZHAO");
+        test('\u679c', "GUO");
+        test('\u679d', "ZHI");
+        test('\u679e', "CONG");
+        test('\u679f', "YUN");
+        test('\u67a0', "ZUI");
+        test('\u67a1', "DOU");
+        test('\u67a2', "SHU");
+        test('\u67a3', "ZAO");
+        test('\u67a4', "DUO");
+        test('\u67a5', "LI");
+        test('\u67a6', "LU");
+        test('\u67a7', "JIAN");
+        test('\u67a8', "CHENG");
+        test('\u67a9', "SONG");
+        test('\u67aa', "QIANG");
+        test('\u67ab', "FENG");
+        test('\u67ac', "NAN");
+        test('\u67ad', "XIAO");
+        test('\u67ae', "XIAN");
+        test('\u67af', "KU");
+        test('\u67b0', "PING");
+        test('\u67b1', "TAI");
+        test('\u67b2', "XI");
+        test('\u67b3', "ZHI");
+        test('\u67b4', "GUAI");
+        test('\u67b5', "XIAO");
+        test('\u67b6', "JIA");
+        test('\u67b7', "JIA");
+        test('\u67b8', "GOU");
+        test('\u67b9', "BAO");
+        test('\u67ba', "MO");
+        test('\u67bb', "YI");
+        test('\u67bc', "YE");
+        test('\u67bd', "YE");
+        test('\u67be', "SHI");
+        test('\u67bf', "NIE");
+        test('\u67c0', "BI");
+        test('\u67c1', "DUO");
+        test('\u67c2', "YI");
+        test('\u67c3', "LING");
+        test('\u67c4', "BING");
+        test('\u67c5', "NI");
+        test('\u67c6', "LA");
+        test('\u67c7', "HE");
+        test('\u67c8', "BAN");
+        test('\u67c9', "FAN");
+        test('\u67ca', "ZHONG");
+        test('\u67cb', "DAI");
+        test('\u67cc', "CI");
+        test('\u67cd', "YANG");
+        test('\u67ce', "FU");
+        test('\u67cf', "BAI");
+        test('\u67d0', "MOU");
+        test('\u67d1', "GAN");
+        test('\u67d2', "QI");
+        test('\u67d3', "RAN");
+        test('\u67d4', "ROU");
+        test('\u67d5', "MAO");
+        test('\u67d6', "SHAO");
+        test('\u67d7', "SONG");
+        test('\u67d8', "ZHE");
+        test('\u67d9', "XIA");
+        test('\u67da', "YOU");
+        test('\u67db', "SHEN");
+        test('\u67dc', "GUI");
+        test('\u67dd', "TUO");
+        test('\u67de', "ZHA");
+        test('\u67df', "NAN");
+        test('\u67e0', "NING");
+        test('\u67e1', "YONG");
+        test('\u67e2', "DI");
+        test('\u67e3', "ZHI");
+        test('\u67e4', "ZHA");
+        test('\u67e5', "CHA");
+        test('\u67e6', "DAN");
+        test('\u67e7', "GU");
+        test('\u67e8', "BU");
+        test('\u67e9', "JIU");
+        test('\u67ea', "AO");
+        test('\u67eb', "FU");
+        test('\u67ec', "JIAN");
+        test('\u67ed', "BA");
+        test('\u67ee', "DUO");
+        test('\u67ef', "KE");
+        test('\u67f0', "NAI");
+        test('\u67f1', "ZHU");
+        test('\u67f2', "BI");
+        test('\u67f3', "LIU");
+        test('\u67f4', "CHAI");
+        test('\u67f5', "SHAN");
+        test('\u67f6', "SI");
+        test('\u67f7', "CHU");
+        test('\u67f8', "PEI");
+        test('\u67f9', "SHI");
+        test('\u67fa', "GUAI");
+        test('\u67fb', "ZHA");
+        test('\u67fc', "YAO");
+        test('\u67fd', "CHENG");
+        test('\u67fe', "JIU");
+        test('\u67ff', "SHI");
+        test('\u6800', "ZHI");
+        test('\u6801', "LIU");
+        test('\u6802', "MEI");
+        test('\u6803', "LI");
+        test('\u6804', "RONG");
+        test('\u6805', "ZHA");
+        test('\u6806', "ZAO");
+        test('\u6807', "BIAO");
+        test('\u6808', "ZHAN");
+        test('\u6809', "ZHI");
+        test('\u680a', "LONG");
+        test('\u680b', "DONG");
+        test('\u680c', "LU");
+        test('\u680d', "SHENG");
+        test('\u680e', "LI");
+        test('\u680f', "LAN");
+        test('\u6810', "YONG");
+        test('\u6811', "SHU");
+        test('\u6812', "XUN");
+        test('\u6813', "SHUAN");
+        test('\u6814', "QI");
+        test('\u6815', "ZHEN");
+        test('\u6816', "QI");
+        test('\u6817', "LI");
+        test('\u6818', "YI");
+        test('\u6819', "XIANG");
+        test('\u681a', "ZHEN");
+        test('\u681b', "LI");
+        test('\u681c', "SE");
+        test('\u681d', "GUA");
+        test('\u681e', "KAN");
+        test('\u681f', "BEN");
+        test('\u6820', "REN");
+        test('\u6821', "XIAO");
+        test('\u6822', "BAI");
+        test('\u6823', "REN");
+        test('\u6824', "BING");
+        test('\u6825', "ZI");
+        test('\u6826', "CHOU");
+        test('\u6827', "YI");
+        test('\u6828', "CI");
+        test('\u6829', "XU");
+        test('\u682a', "ZHU");
+        test('\u682b', "JIAN");
+        test('\u682c', "ZUI");
+        test('\u682d', "ER");
+        test('\u682e', "ER");
+        test('\u682f', "YOU");
+        test('\u6830', "FA");
+        test('\u6831', "GONG");
+        test('\u6832', "KAO");
+        test('\u6833', "LAO");
+        test('\u6834', "ZHAN");
+        test('\u6835', "LIE");
+        test('\u6836', "YIN");
+        test('\u6837', "YANG");
+        test('\u6838', "HE");
+        test('\u6839', "GEN");
+        test('\u683a', "YI");
+        test('\u683b', "SHI");
+        test('\u683c', "GE");
+        test('\u683d', "ZAI");
+        test('\u683e', "LUAN");
+        test('\u683f', "FU");
+        test('\u6840', "JIE");
+        test('\u6841', "HENG");
+        test('\u6842', "GUI");
+        test('\u6843', "TAO");
+        test('\u6844', "GUANG");
+        test('\u6845', "WEI");
+        test('\u6846', "KUANG");
+        test('\u6847', "RU");
+        test('\u6848', "AN");
+        test('\u6849', "AN");
+        test('\u684a', "JUAN");
+        test('\u684b', "YI");
+        test('\u684c', "ZHUO");
+        test('\u684d', "KU");
+        test('\u684e', "ZHI");
+        test('\u684f', "QIONG");
+        test('\u6850', "TONG");
+        test('\u6851', "SANG");
+        test('\u6852', "SANG");
+        test('\u6853', "HUAN");
+        test('\u6854', "JU");
+        test('\u6855', "JIU");
+        test('\u6856', "XUE");
+        test('\u6857', "DUO");
+        test('\u6858', "ZHUI");
+        test('\u6859', "YU");
+        test('\u685a', "ZAN");
+        test('\u685b', "");
+        test('\u685c', "YING");
+        test('\u685d', "JIE");
+        test('\u685e', "LIU");
+        test('\u685f', "ZHAN");
+        test('\u6860', "YA");
+        test('\u6861', "RAO");
+        test('\u6862', "ZHEN");
+        test('\u6863', "DANG");
+        test('\u6864', "QI");
+        test('\u6865', "QIAO");
+        test('\u6866', "HUA");
+        test('\u6867', "GUI");
+        test('\u6868', "JIANG");
+        test('\u6869', "ZHUANG");
+        test('\u686a', "XUN");
+        test('\u686b', "SUO");
+        test('\u686c', "SHA");
+        test('\u686d', "ZHEN");
+        test('\u686e', "BEI");
+        test('\u686f', "TING");
+        test('\u6870', "KUO");
+        test('\u6871', "JING");
+        test('\u6872', "PO");
+        test('\u6873', "BEN");
+        test('\u6874', "FU");
+        test('\u6875', "RUI");
+        test('\u6876', "TONG");
+        test('\u6877', "JUE");
+        test('\u6878', "XI");
+        test('\u6879', "LANG");
+        test('\u687a', "LIU");
+        test('\u687b', "FENG");
+        test('\u687c', "QI");
+        test('\u687d', "WEN");
+        test('\u687e', "JUN");
+        test('\u687f', "GAN");
+        test('\u6880', "SU");
+        test('\u6881', "LIANG");
+        test('\u6882', "QIU");
+        test('\u6883', "TING");
+        test('\u6884', "YOU");
+        test('\u6885', "MEI");
+        test('\u6886', "BANG");
+        test('\u6887', "LONG");
+        test('\u6888', "PENG");
+        test('\u6889', "ZHUANG");
+        test('\u688a', "DI");
+        test('\u688b', "XUAN");
+        test('\u688c', "TU");
+        test('\u688d', "ZAO");
+        test('\u688e', "AO");
+        test('\u688f', "GU");
+        test('\u6890', "BI");
+        test('\u6891', "DI");
+        test('\u6892', "HAN");
+        test('\u6893', "ZI");
+        test('\u6894', "ZHI");
+        test('\u6895', "REN");
+        test('\u6896', "BEI");
+        test('\u6897', "GENG");
+        test('\u6898', "JIAN");
+        test('\u6899', "HUAN");
+        test('\u689a', "WAN");
+        test('\u689b', "NUO");
+        test('\u689c', "JIA");
+        test('\u689d', "TIAO");
+        test('\u689e', "JI");
+        test('\u689f', "XIAO");
+        test('\u68a0', "LU");
+        test('\u68a1', "HUN");
+        test('\u68a2', "SHAO");
+        test('\u68a3', "CEN");
+        test('\u68a4', "FEN");
+        test('\u68a5', "SONG");
+        test('\u68a6', "MENG");
+        test('\u68a7', "WU");
+        test('\u68a8', "LI");
+        test('\u68a9', "LI");
+        test('\u68aa', "DOU");
+        test('\u68ab', "QIN");
+        test('\u68ac', "YING");
+        test('\u68ad', "SUO");
+        test('\u68ae', "JU");
+        test('\u68af', "TI");
+        test('\u68b0', "XIE");
+        test('\u68b1', "KUN");
+        test('\u68b2', "ZHUO");
+        test('\u68b3', "SHU");
+        test('\u68b4', "CHAN");
+        test('\u68b5', "FAN");
+        test('\u68b6', "WEI");
+        test('\u68b7', "JING");
+        test('\u68b8', "LI");
+        test('\u68b9', "BIN");
+        test('\u68ba', "XIA");
+        test('\u68bb', "FO");
+        test('\u68bc', "TAO");
+        test('\u68bd', "ZHI");
+        test('\u68be', "LAI");
+        test('\u68bf', "LIAN");
+        test('\u68c0', "JIAN");
+        test('\u68c1', "ZHUO");
+        test('\u68c2', "LING");
+        test('\u68c3', "LI");
+        test('\u68c4', "QI");
+        test('\u68c5', "BING");
+        test('\u68c6', "LUN");
+        test('\u68c7', "CONG");
+        test('\u68c8', "QIAN");
+        test('\u68c9', "MIAN");
+        test('\u68ca', "QI");
+        test('\u68cb', "QI");
+        test('\u68cc', "CAI");
+        test('\u68cd', "GUN");
+        test('\u68ce', "CHAN");
+        test('\u68cf', "DE");
+        test('\u68d0', "FEI");
+        test('\u68d1', "PAI");
+        test('\u68d2', "BANG");
+        test('\u68d3', "BANG");
+        test('\u68d4', "HUN");
+        test('\u68d5', "ZONG");
+        test('\u68d6', "CHENG");
+        test('\u68d7', "ZAO");
+        test('\u68d8', "JI");
+        test('\u68d9', "LI");
+        test('\u68da', "PENG");
+        test('\u68db', "YU");
+        test('\u68dc', "YU");
+        test('\u68dd', "GU");
+        test('\u68de', "JUN");
+        test('\u68df', "DONG");
+        test('\u68e0', "TANG");
+        test('\u68e1', "GANG");
+        test('\u68e2', "WANG");
+        test('\u68e3', "DI");
+        test('\u68e4', "CUO");
+        test('\u68e5', "FAN");
+        test('\u68e6', "CHENG");
+        test('\u68e7', "ZHAN");
+        test('\u68e8', "QI");
+        test('\u68e9', "YUAN");
+        test('\u68ea', "YAN");
+        test('\u68eb', "YU");
+        test('\u68ec', "QUAN");
+        test('\u68ed', "YI");
+        test('\u68ee', "SEN");
+        test('\u68ef', "REN");
+        test('\u68f0', "CHUI");
+        test('\u68f1', "LENG");
+        test('\u68f2', "QI");
+        test('\u68f3', "ZHUO");
+        test('\u68f4', "FU");
+        test('\u68f5', "KE");
+        test('\u68f6', "LAI");
+        test('\u68f7', "ZOU");
+        test('\u68f8', "ZOU");
+        test('\u68f9', "ZHAO");
+        test('\u68fa', "GUAN");
+        test('\u68fb', "FEN");
+        test('\u68fc', "FEN");
+        test('\u68fd', "SHEN");
+        test('\u68fe', "QING");
+        test('\u68ff', "NI");
+        test('\u6900', "WAN");
+        test('\u6901', "GUO");
+        test('\u6902', "LU");
+        test('\u6903', "HAO");
+        test('\u6904', "JIE");
+        test('\u6905', "YI");
+        test('\u6906', "CHOU");
+        test('\u6907', "JU");
+        test('\u6908', "JU");
+        test('\u6909', "CHENG");
+        test('\u690a', "ZUO");
+        test('\u690b', "LIANG");
+        test('\u690c', "QIANG");
+        test('\u690d', "ZHI");
+        test('\u690e', "CHUI");
+        test('\u690f', "YA");
+        test('\u6910', "JU");
+        test('\u6911', "BEI");
+        test('\u6912', "JIAO");
+        test('\u6913', "ZHUO");
+        test('\u6914', "ZI");
+        test('\u6915', "BIN");
+        test('\u6916', "PENG");
+        test('\u6917', "DING");
+        test('\u6918', "CHU");
+        test('\u6919', "CHANG");
+        test('\u691a', "MEN");
+        test('\u691b', "HUA");
+        test('\u691c', "JIAN");
+        test('\u691d', "GUI");
+        test('\u691e', "XI");
+        test('\u691f', "DU");
+        test('\u6920', "QIAN");
+        test('\u6921', "DAO");
+        test('\u6922', "GUI");
+        test('\u6923', "DIAN");
+        test('\u6924', "LUO");
+        test('\u6925', "ZHI");
+        test('\u6926', "QUAN");
+        test('\u6927', "MING");
+        test('\u6928', "FU");
+        test('\u6929', "GENG");
+        test('\u692a', "PENG");
+        test('\u692b', "ZHAN");
+        test('\u692c', "YI");
+        test('\u692d', "TUO");
+        test('\u692e', "SEN");
+        test('\u692f', "DUO");
+        test('\u6930', "YE");
+        test('\u6931', "FU");
+        test('\u6932', "WEI");
+        test('\u6933', "WEI");
+        test('\u6934', "DUAN");
+        test('\u6935', "JIA");
+        test('\u6936', "ZONG");
+        test('\u6937', "JIAN");
+        test('\u6938', "YI");
+        test('\u6939', "SHEN");
+        test('\u693a', "XI");
+        test('\u693b', "YAN");
+        test('\u693c', "YAN");
+        test('\u693d', "CHUAN");
+        test('\u693e', "JIAN");
+        test('\u693f', "CHUN");
+        test('\u6940', "YU");
+        test('\u6941', "HE");
+        test('\u6942', "ZHA");
+        test('\u6943', "WO");
+        test('\u6944', "PIAN");
+        test('\u6945', "BI");
+        test('\u6946', "YAO");
+        test('\u6947', "HUO");
+        test('\u6948', "XU");
+        test('\u6949', "RUO");
+        test('\u694a', "YANG");
+        test('\u694b', "LA");
+        test('\u694c', "YAN");
+        test('\u694d', "BEN");
+        test('\u694e', "HUI");
+        test('\u694f', "KUI");
+        test('\u6950', "JIE");
+        test('\u6951', "KUI");
+        test('\u6952', "SI");
+        test('\u6953', "FENG");
+        test('\u6954', "XIE");
+        test('\u6955', "TUO");
+        test('\u6956', "ZHI");
+        test('\u6957', "JIAN");
+        test('\u6958', "MU");
+        test('\u6959', "MAO");
+        test('\u695a', "CHU");
+        test('\u695b', "HU");
+        test('\u695c', "HU");
+        test('\u695d', "LIAN");
+        test('\u695e', "LENG");
+        test('\u695f', "TING");
+        test('\u6960', "NAN");
+        test('\u6961', "YU");
+        test('\u6962', "YOU");
+        test('\u6963', "MEI");
+        test('\u6964', "SONG");
+        test('\u6965', "XUAN");
+        test('\u6966', "XUAN");
+        test('\u6967', "YANG");
+        test('\u6968', "ZHEN");
+        test('\u6969', "PIAN");
+        test('\u696a', "YE");
+        test('\u696b', "JI");
+        test('\u696c', "JIE");
+        test('\u696d', "YE");
+        test('\u696e', "CHU");
+        test('\u696f', "DUN");
+        test('\u6970', "YU");
+        test('\u6971', "ZOU");
+        test('\u6972', "WEI");
+        test('\u6973', "MEI");
+        test('\u6974', "TI");
+        test('\u6975', "JI");
+        test('\u6976', "JIE");
+        test('\u6977', "KAI");
+        test('\u6978', "QIU");
+        test('\u6979', "YING");
+        test('\u697a', "ROU");
+        test('\u697b', "HUANG");
+        test('\u697c', "LOU");
+        test('\u697d', "LE");
+        test('\u697e', "QUAN");
+        test('\u697f', "XIANG");
+        test('\u6980', "PIN");
+        test('\u6981', "SHI");
+        test('\u6982', "GAI");
+        test('\u6983', "TAN");
+        test('\u6984', "LAN");
+        test('\u6985', "WEN");
+        test('\u6986', "YU");
+        test('\u6987', "CHEN");
+        test('\u6988', "LU");
+        test('\u6989', "JU");
+        test('\u698a', "SHEN");
+        test('\u698b', "CHU");
+        test('\u698c', "PI");
+        test('\u698d', "XIE");
+        test('\u698e', "JIA");
+        test('\u698f', "YI");
+        test('\u6990', "ZHAN");
+        test('\u6991', "FU");
+        test('\u6992', "NUO");
+        test('\u6993', "MI");
+        test('\u6994', "LANG");
+        test('\u6995', "RONG");
+        test('\u6996', "GU");
+        test('\u6997', "JIAN");
+        test('\u6998', "JU");
+        test('\u6999', "TA");
+        test('\u699a', "YAO");
+        test('\u699b', "ZHEN");
+        test('\u699c', "BANG");
+        test('\u699d', "SHA");
+        test('\u699e', "YUAN");
+        test('\u699f', "ZI");
+        test('\u69a0', "MING");
+        test('\u69a1', "SU");
+        test('\u69a2', "JIA");
+        test('\u69a3', "YAO");
+        test('\u69a4', "JIE");
+        test('\u69a5', "HUANG");
+        test('\u69a6', "GAN");
+        test('\u69a7', "FEI");
+        test('\u69a8', "ZHA");
+        test('\u69a9', "QIAN");
+        test('\u69aa', "MA");
+        test('\u69ab', "SUN");
+        test('\u69ac', "YUAN");
+        test('\u69ad', "XIE");
+        test('\u69ae', "RONG");
+        test('\u69af', "SHI");
+        test('\u69b0', "ZHI");
+        test('\u69b1', "CUI");
+        test('\u69b2', "YUN");
+        test('\u69b3', "TING");
+        test('\u69b4', "LIU");
+        test('\u69b5', "RONG");
+        test('\u69b6', "TANG");
+        test('\u69b7', "QUE");
+        test('\u69b8', "ZHAI");
+        test('\u69b9', "SI");
+        test('\u69ba', "SHENG");
+        test('\u69bb', "TA");
+        test('\u69bc', "KE");
+        test('\u69bd', "XI");
+        test('\u69be', "GU");
+        test('\u69bf', "QI");
+        test('\u69c0', "GAO");
+        test('\u69c1', "GAO");
+        test('\u69c2', "SUN");
+        test('\u69c3', "PAN");
+        test('\u69c4', "TAO");
+        test('\u69c5', "GE");
+        test('\u69c6', "XUN");
+        test('\u69c7', "DIAN");
+        test('\u69c8', "NOU");
+        test('\u69c9', "JI");
+        test('\u69ca', "SHUO");
+        test('\u69cb', "GOU");
+        test('\u69cc', "CHUI");
+        test('\u69cd', "QIANG");
+        test('\u69ce', "CHA");
+        test('\u69cf', "QIAN");
+        test('\u69d0', "HUAI");
+        test('\u69d1', "MEI");
+        test('\u69d2', "XU");
+        test('\u69d3', "GANG");
+        test('\u69d4', "GAO");
+        test('\u69d5', "ZHUO");
+        test('\u69d6', "TUO");
+        test('\u69d7', "QIAO");
+        test('\u69d8', "YANG");
+        test('\u69d9', "DIAN");
+        test('\u69da', "JIA");
+        test('\u69db', "KAN");
+        test('\u69dc', "ZUI");
+        test('\u69dd', "DAO");
+        test('\u69de', "LONG");
+        test('\u69df', "BIN");
+        test('\u69e0', "ZHU");
+        test('\u69e1', "SANG");
+        test('\u69e2', "XI");
+        test('\u69e3', "JI");
+        test('\u69e4', "LIAN");
+        test('\u69e5', "HUI");
+        test('\u69e6', "YONG");
+        test('\u69e7', "QIAN");
+        test('\u69e8', "GUO");
+        test('\u69e9', "GAI");
+        test('\u69ea', "GAI");
+        test('\u69eb', "TUAN");
+        test('\u69ec', "HUA");
+        test('\u69ed', "QI");
+        test('\u69ee', "SEN");
+        test('\u69ef', "CUI");
+        test('\u69f0', "PENG");
+        test('\u69f1', "YOU");
+        test('\u69f2', "HU");
+        test('\u69f3', "JIANG");
+        test('\u69f4', "HU");
+        test('\u69f5', "HUAN");
+        test('\u69f6', "GUI");
+        test('\u69f7', "NIE");
+        test('\u69f8', "YI");
+        test('\u69f9', "GAO");
+        test('\u69fa', "KANG");
+        test('\u69fb', "GUI");
+        test('\u69fc', "GUI");
+        test('\u69fd', "CAO");
+        test('\u69fe', "MAN");
+        test('\u69ff', "JIN");
+    }
+
+    @SmallTest
+    public void test_7() throws Exception {
+        if (!hasChineseTransliterator()) {
+            return;
+        }
+        test('\u6a00', "DI");
+        test('\u6a01', "ZHUANG");
+        test('\u6a02', "LE");
+        test('\u6a03', "LANG");
+        test('\u6a04', "CHEN");
+        test('\u6a05', "CONG");
+        test('\u6a06', "LI");
+        test('\u6a07', "XIU");
+        test('\u6a08', "QING");
+        test('\u6a09', "SHUANG");
+        test('\u6a0a', "FAN");
+        test('\u6a0b', "TONG");
+        test('\u6a0c', "GUAN");
+        test('\u6a0d', "ZE");
+        test('\u6a0e', "SU");
+        test('\u6a0f', "LEI");
+        test('\u6a10', "LU");
+        test('\u6a11', "LIANG");
+        test('\u6a12', "MI");
+        test('\u6a13', "LOU");
+        test('\u6a14', "CHAO");
+        test('\u6a15', "SU");
+        test('\u6a16', "KE");
+        test('\u6a17', "CHU");
+        test('\u6a18', "TANG");
+        test('\u6a19', "BIAO");
+        test('\u6a1a', "LU");
+        test('\u6a1b', "JIU");
+        test('\u6a1c', "ZHE");
+        test('\u6a1d', "ZHA");
+        test('\u6a1e', "SHU");
+        test('\u6a1f', "ZHANG");
+        test('\u6a20', "MAN");
+        test('\u6a21', "MO");
+        test('\u6a22', "NIAO");
+        test('\u6a23', "YANG");
+        test('\u6a24', "TIAO");
+        test('\u6a25', "PENG");
+        test('\u6a26', "ZHU");
+        test('\u6a27', "SHA");
+        test('\u6a28', "XI");
+        test('\u6a29', "QUAN");
+        test('\u6a2a', "HENG");
+        test('\u6a2b', "JIAN");
+        test('\u6a2c', "CONG");
+        test('\u6a2d', "JI");
+        test('\u6a2e', "YAN");
+        test('\u6a2f', "QIANG");
+        test('\u6a30', "XUE");
+        test('\u6a31', "YING");
+        test('\u6a32', "ER");
+        test('\u6a33', "XUN");
+        test('\u6a34', "ZHI");
+        test('\u6a35', "QIAO");
+        test('\u6a36', "ZUI");
+        test('\u6a37', "CONG");
+        test('\u6a38', "PU");
+        test('\u6a39', "SHU");
+        test('\u6a3a', "HUA");
+        test('\u6a3b', "KUI");
+        test('\u6a3c', "ZHEN");
+        test('\u6a3d', "ZUN");
+        test('\u6a3e', "YUE");
+        test('\u6a3f', "SHAN");
+        test('\u6a40', "XI");
+        test('\u6a41', "CHUN");
+        test('\u6a42', "DIAN");
+        test('\u6a43', "FA");
+        test('\u6a44', "GAN");
+        test('\u6a45', "MO");
+        test('\u6a46', "WU");
+        test('\u6a47', "QIAO");
+        test('\u6a48', "RAO");
+        test('\u6a49', "LIN");
+        test('\u6a4a', "LIU");
+        test('\u6a4b', "QIAO");
+        test('\u6a4c', "XIAN");
+        test('\u6a4d', "RUN");
+        test('\u6a4e', "FAN");
+        test('\u6a4f', "ZHAN");
+        test('\u6a50', "TUO");
+        test('\u6a51', "LAO");
+        test('\u6a52', "YUN");
+        test('\u6a53', "SHUN");
+        test('\u6a54', "DUN");
+        test('\u6a55', "CHENG");
+        test('\u6a56', "TANG");
+        test('\u6a57', "MENG");
+        test('\u6a58', "JU");
+        test('\u6a59', "CHENG");
+        test('\u6a5a', "SU");
+        test('\u6a5b', "JUE");
+        test('\u6a5c', "JUE");
+        test('\u6a5d', "DIAN");
+        test('\u6a5e', "HUI");
+        test('\u6a5f', "JI");
+        test('\u6a60', "NUO");
+        test('\u6a61', "XIANG");
+        test('\u6a62', "TUO");
+        test('\u6a63', "NING");
+        test('\u6a64', "RUI");
+        test('\u6a65', "ZHU");
+        test('\u6a66', "TONG");
+        test('\u6a67', "ZENG");
+        test('\u6a68', "FEN");
+        test('\u6a69', "QIONG");
+        test('\u6a6a', "RAN");
+        test('\u6a6b', "HENG");
+        test('\u6a6c', "QIAN");
+        test('\u6a6d', "GU");
+        test('\u6a6e', "LIU");
+        test('\u6a6f', "LAO");
+        test('\u6a70', "GAO");
+        test('\u6a71', "CHU");
+        test('\u6a72', "XI");
+        test('\u6a73', "SHENG");
+        test('\u6a74', "ZI");
+        test('\u6a75', "SAN");
+        test('\u6a76', "JI");
+        test('\u6a77', "DOU");
+        test('\u6a78', "JING");
+        test('\u6a79', "LU");
+        test('\u6a7a', "JIAN");
+        test('\u6a7b', "CHU");
+        test('\u6a7c', "YUAN");
+        test('\u6a7d', "TA");
+        test('\u6a7e', "SHU");
+        test('\u6a7f', "JIANG");
+        test('\u6a80', "TAN");
+        test('\u6a81', "LIN");
+        test('\u6a82', "NONG");
+        test('\u6a83', "YIN");
+        test('\u6a84', "XI");
+        test('\u6a85', "SUI");
+        test('\u6a86', "SHAN");
+        test('\u6a87', "ZUI");
+        test('\u6a88', "XUAN");
+        test('\u6a89', "CHENG");
+        test('\u6a8a', "GAN");
+        test('\u6a8b', "JU");
+        test('\u6a8c', "ZUI");
+        test('\u6a8d', "YI");
+        test('\u6a8e', "QIN");
+        test('\u6a8f', "PU");
+        test('\u6a90', "YAN");
+        test('\u6a91', "LEI");
+        test('\u6a92', "FENG");
+        test('\u6a93', "HUI");
+        test('\u6a94', "DANG");
+        test('\u6a95', "JI");
+        test('\u6a96', "SUI");
+        test('\u6a97', "BO");
+        test('\u6a98', "PING");
+        test('\u6a99', "CHENG");
+        test('\u6a9a', "CHU");
+        test('\u6a9b', "ZHUA");
+        test('\u6a9c', "GUI");
+        test('\u6a9d', "JI");
+        test('\u6a9e', "JIE");
+        test('\u6a9f', "JIA");
+        test('\u6aa0', "QING");
+        test('\u6aa1', "ZHAI");
+        test('\u6aa2', "JIAN");
+        test('\u6aa3', "QIANG");
+        test('\u6aa4', "DAO");
+        test('\u6aa5', "YI");
+        test('\u6aa6', "BIAO");
+        test('\u6aa7', "SONG");
+        test('\u6aa8', "SHE");
+        test('\u6aa9', "LIN");
+        test('\u6aaa', "LI");
+        test('\u6aab', "CHA");
+        test('\u6aac', "MENG");
+        test('\u6aad', "YIN");
+        test('\u6aae', "TAO");
+        test('\u6aaf', "TAI");
+        test('\u6ab0', "MIAN");
+        test('\u6ab1', "QI");
+        test('\u6ab2', "TUAN");
+        test('\u6ab3', "BIN");
+        test('\u6ab4', "HUO");
+        test('\u6ab5', "JI");
+        test('\u6ab6', "QIAN");
+        test('\u6ab7', "NI");
+        test('\u6ab8', "NING");
+        test('\u6ab9', "YI");
+        test('\u6aba', "GAO");
+        test('\u6abb', "KAN");
+        test('\u6abc', "YIN");
+        test('\u6abd', "NOU");
+        test('\u6abe', "QING");
+        test('\u6abf', "YAN");
+        test('\u6ac0', "QI");
+        test('\u6ac1', "MI");
+        test('\u6ac2', "ZHAO");
+        test('\u6ac3', "GUI");
+        test('\u6ac4', "CHUN");
+        test('\u6ac5', "JI");
+        test('\u6ac6', "KUI");
+        test('\u6ac7', "PO");
+        test('\u6ac8', "DENG");
+        test('\u6ac9', "CHU");
+        test('\u6aca', "GE");
+        test('\u6acb', "MIAN");
+        test('\u6acc', "YOU");
+        test('\u6acd', "ZHI");
+        test('\u6ace', "HUANG");
+        test('\u6acf', "QIAN");
+        test('\u6ad0', "LEI");
+        test('\u6ad1', "LEI");
+        test('\u6ad2', "SA");
+        test('\u6ad3', "LU");
+        test('\u6ad4', "LI");
+        test('\u6ad5', "CUAN");
+        test('\u6ad6', "LU");
+        test('\u6ad7', "MIE");
+        test('\u6ad8', "HUI");
+        test('\u6ad9', "OU");
+        test('\u6ada', "LU");
+        test('\u6adb', "ZHI");
+        test('\u6adc', "GAO");
+        test('\u6add', "DU");
+        test('\u6ade', "YUAN");
+        test('\u6adf', "LI");
+        test('\u6ae0', "FEI");
+        test('\u6ae1', "ZHUO");
+        test('\u6ae2', "SOU");
+        test('\u6ae3', "LIAN");
+        test('\u6ae4', "JIANG");
+        test('\u6ae5', "CHU");
+        test('\u6ae6', "QING");
+        test('\u6ae7', "ZHU");
+        test('\u6ae8', "LU");
+        test('\u6ae9', "YAN");
+        test('\u6aea', "LI");
+        test('\u6aeb', "ZHU");
+        test('\u6aec', "CHEN");
+        test('\u6aed', "JIE");
+        test('\u6aee', "E");
+        test('\u6aef', "SU");
+        test('\u6af0', "HUAI");
+        test('\u6af1', "NIE");
+        test('\u6af2', "YU");
+        test('\u6af3', "LONG");
+        test('\u6af4', "LAI");
+        test('\u6af5', "JIAO");
+        test('\u6af6', "XIAN");
+        test('\u6af7', "GUI");
+        test('\u6af8', "JU");
+        test('\u6af9', "XIAO");
+        test('\u6afa', "LING");
+        test('\u6afb', "YING");
+        test('\u6afc', "JIAN");
+        test('\u6afd', "YIN");
+        test('\u6afe', "YOU");
+        test('\u6aff', "YING");
+        test('\u6b00', "XIANG");
+        test('\u6b01', "NONG");
+        test('\u6b02', "BO");
+        test('\u6b03', "CHAN");
+        test('\u6b04', "LAN");
+        test('\u6b05', "JU");
+        test('\u6b06', "SHUANG");
+        test('\u6b07', "SHE");
+        test('\u6b08', "WEI");
+        test('\u6b09', "CONG");
+        test('\u6b0a', "QUAN");
+        test('\u6b0b', "QU");
+        test('\u6b0c', "CANG");
+        test('\u6b0d', "JIU");
+        test('\u6b0e', "YU");
+        test('\u6b0f', "LUO");
+        test('\u6b10', "LI");
+        test('\u6b11', "CUAN");
+        test('\u6b12', "LUAN");
+        test('\u6b13', "DANG");
+        test('\u6b14', "JUE");
+        test('\u6b15', "YAN");
+        test('\u6b16', "LAN");
+        test('\u6b17', "LAN");
+        test('\u6b18', "ZHU");
+        test('\u6b19', "LEI");
+        test('\u6b1a', "LI");
+        test('\u6b1b', "BA");
+        test('\u6b1c', "NANG");
+        test('\u6b1d', "YU");
+        test('\u6b1e', "LING");
+        test('\u6b1f', "GUANG");
+        test('\u6b20', "QIAN");
+        test('\u6b21', "CI");
+        test('\u6b22', "HUAN");
+        test('\u6b23', "XIN");
+        test('\u6b24', "YU");
+        test('\u6b25', "YI");
+        test('\u6b26', "QIAN");
+        test('\u6b27', "OU");
+        test('\u6b28', "XU");
+        test('\u6b29', "CHAO");
+        test('\u6b2a', "CHU");
+        test('\u6b2b', "QI");
+        test('\u6b2c', "KAI");
+        test('\u6b2d', "YI");
+        test('\u6b2e', "JUE");
+        test('\u6b2f', "XI");
+        test('\u6b30', "XU");
+        test('\u6b31', "HE");
+        test('\u6b32', "YU");
+        test('\u6b33', "KUI");
+        test('\u6b34', "LANG");
+        test('\u6b35', "KUAN");
+        test('\u6b36', "SHUO");
+        test('\u6b37', "XI");
+        test('\u6b38', "AI");
+        test('\u6b39', "YI");
+        test('\u6b3a', "QI");
+        test('\u6b3b', "CHUA");
+        test('\u6b3c', "CHI");
+        test('\u6b3d', "QIN");
+        test('\u6b3e', "KUAN");
+        test('\u6b3f', "KAN");
+        test('\u6b40', "KUAN");
+        test('\u6b41', "KAN");
+        test('\u6b42', "CHUAN");
+        test('\u6b43', "SHA");
+        test('\u6b44', "GUA");
+        test('\u6b45', "YIN");
+        test('\u6b46', "XIN");
+        test('\u6b47', "XIE");
+        test('\u6b48', "YU");
+        test('\u6b49', "QIAN");
+        test('\u6b4a', "XIAO");
+        test('\u6b4b', "YE");
+        test('\u6b4c', "GE");
+        test('\u6b4d', "WU");
+        test('\u6b4e', "TAN");
+        test('\u6b4f', "JIN");
+        test('\u6b50', "OU");
+        test('\u6b51', "HU");
+        test('\u6b52', "TI");
+        test('\u6b53', "HUAN");
+        test('\u6b54', "XU");
+        test('\u6b55', "PEN");
+        test('\u6b56', "XI");
+        test('\u6b57', "XIAO");
+        test('\u6b58', "CHUA");
+        test('\u6b59', "SHE");
+        test('\u6b5a', "SHAN");
+        test('\u6b5b', "HAN");
+        test('\u6b5c', "CHU");
+        test('\u6b5d', "YI");
+        test('\u6b5e', "E");
+        test('\u6b5f', "YU");
+        test('\u6b60', "CHUO");
+        test('\u6b61', "HUAN");
+        test('\u6b62', "ZHI");
+        test('\u6b63', "ZHENG");
+        test('\u6b64', "CI");
+        test('\u6b65', "BU");
+        test('\u6b66', "WU");
+        test('\u6b67', "QI");
+        test('\u6b68', "BU");
+        test('\u6b69', "BU");
+        test('\u6b6a', "WAI");
+        test('\u6b6b', "JU");
+        test('\u6b6c', "QIAN");
+        test('\u6b6d', "CHI");
+        test('\u6b6e', "SE");
+        test('\u6b6f', "CHI");
+        test('\u6b70', "SE");
+        test('\u6b71', "ZHONG");
+        test('\u6b72', "SUI");
+        test('\u6b73', "SUI");
+        test('\u6b74', "LI");
+        test('\u6b75', "CUO");
+        test('\u6b76', "YU");
+        test('\u6b77', "LI");
+        test('\u6b78', "GUI");
+        test('\u6b79', "DAI");
+        test('\u6b7a', "E");
+        test('\u6b7b', "SI");
+        test('\u6b7c', "JIAN");
+        test('\u6b7d', "ZHE");
+        test('\u6b7e', "MO");
+        test('\u6b7f', "MO");
+        test('\u6b80', "YAO");
+        test('\u6b81', "MO");
+        test('\u6b82', "CU");
+        test('\u6b83', "YANG");
+        test('\u6b84', "TIAN");
+        test('\u6b85', "SHENG");
+        test('\u6b86', "DAI");
+        test('\u6b87', "SHANG");
+        test('\u6b88', "XU");
+        test('\u6b89', "XUN");
+        test('\u6b8a', "SHU");
+        test('\u6b8b', "CAN");
+        test('\u6b8c', "JUE");
+        test('\u6b8d', "PIAO");
+        test('\u6b8e', "QIA");
+        test('\u6b8f', "QIU");
+        test('\u6b90', "SU");
+        test('\u6b91', "QING");
+        test('\u6b92', "YUN");
+        test('\u6b93', "LIAN");
+        test('\u6b94', "YI");
+        test('\u6b95', "FOU");
+        test('\u6b96', "ZHI");
+        test('\u6b97', "YE");
+        test('\u6b98', "CAN");
+        test('\u6b99', "HUN");
+        test('\u6b9a', "DAN");
+        test('\u6b9b', "JI");
+        test('\u6b9c', "DIE");
+        test('\u6b9d', "ZHEN");
+        test('\u6b9e', "YUN");
+        test('\u6b9f', "WEN");
+        test('\u6ba0', "CHOU");
+        test('\u6ba1', "BIN");
+        test('\u6ba2', "TI");
+        test('\u6ba3', "JIN");
+        test('\u6ba4', "SHANG");
+        test('\u6ba5', "YIN");
+        test('\u6ba6', "DIAO");
+        test('\u6ba7', "JIU");
+        test('\u6ba8', "HUI");
+        test('\u6ba9', "CUAN");
+        test('\u6baa', "YI");
+        test('\u6bab', "DAN");
+        test('\u6bac', "DU");
+        test('\u6bad', "JIANG");
+        test('\u6bae', "LIAN");
+        test('\u6baf', "BIN");
+        test('\u6bb0', "DU");
+        test('\u6bb1', "JIAN");
+        test('\u6bb2', "JIAN");
+        test('\u6bb3', "SHU");
+        test('\u6bb4', "OU");
+        test('\u6bb5', "DUAN");
+        test('\u6bb6', "ZHU");
+        test('\u6bb7', "YIN");
+        test('\u6bb8', "QING");
+        test('\u6bb9', "YI");
+        test('\u6bba', "SHA");
+        test('\u6bbb', "QIAO");
+        test('\u6bbc', "KE");
+        test('\u6bbd', "XIAO");
+        test('\u6bbe', "XUN");
+        test('\u6bbf', "DIAN");
+        test('\u6bc0', "HUI");
+        test('\u6bc1', "HUI");
+        test('\u6bc2', "GU");
+        test('\u6bc3', "QIAO");
+        test('\u6bc4', "JI");
+        test('\u6bc5', "YI");
+        test('\u6bc6', "OU");
+        test('\u6bc7', "HUI");
+        test('\u6bc8', "DUAN");
+        test('\u6bc9', "YI");
+        test('\u6bca', "XIAO");
+        test('\u6bcb', "WU");
+        test('\u6bcc', "GUAN");
+        test('\u6bcd', "MU");
+        test('\u6bce', "MEI");
+        test('\u6bcf', "MEI");
+        test('\u6bd0', "AI");
+        test('\u6bd1', "JIE");
+        test('\u6bd2', "DU");
+        test('\u6bd3', "YU");
+        test('\u6bd4', "BI");
+        test('\u6bd5', "BI");
+        test('\u6bd6', "BI");
+        test('\u6bd7', "PI");
+        test('\u6bd8', "PI");
+        test('\u6bd9', "BI");
+        test('\u6bda', "CHAN");
+        test('\u6bdb', "MAO");
+        test('\u6bdc', "HAO");
+        test('\u6bdd', "CAI");
+        test('\u6bde', "PI");
+        test('\u6bdf', "LIE");
+        test('\u6be0', "JIA");
+        test('\u6be1', "ZHAN");
+        test('\u6be2', "SAI");
+        test('\u6be3', "MU");
+        test('\u6be4', "TUO");
+        test('\u6be5', "XUN");
+        test('\u6be6', "ER");
+        test('\u6be7', "RONG");
+        test('\u6be8', "XIAN");
+        test('\u6be9', "JU");
+        test('\u6bea', "MU");
+        test('\u6beb', "HAO");
+        test('\u6bec', "QIU");
+        test('\u6bed', "DOU");
+        test('\u6bee', "SHA");
+        test('\u6bef', "TAN");
+        test('\u6bf0', "PEI");
+        test('\u6bf1', "JU");
+        test('\u6bf2', "DUO");
+        test('\u6bf3', "CUI");
+        test('\u6bf4', "BI");
+        test('\u6bf5', "SAN");
+        test('\u6bf6', "SAN");
+        test('\u6bf7', "MAO");
+        test('\u6bf8', "SAI");
+        test('\u6bf9', "SHU");
+        test('\u6bfa', "YU");
+        test('\u6bfb', "TUO");
+        test('\u6bfc', "HE");
+        test('\u6bfd', "JIAN");
+        test('\u6bfe', "TA");
+        test('\u6bff', "SAN");
+        test('\u6c00', "LU");
+        test('\u6c01', "MU");
+        test('\u6c02', "MAO");
+        test('\u6c03', "TONG");
+        test('\u6c04', "RONG");
+        test('\u6c05', "CHANG");
+        test('\u6c06', "PU");
+        test('\u6c07', "LU");
+        test('\u6c08', "ZHAN");
+        test('\u6c09', "SAO");
+        test('\u6c0a', "ZHAN");
+        test('\u6c0b', "MENG");
+        test('\u6c0c', "LU");
+        test('\u6c0d', "QU");
+        test('\u6c0e', "DIE");
+        test('\u6c0f', "SHI");
+        test('\u6c10', "DI");
+        test('\u6c11', "MIN");
+        test('\u6c12', "JUE");
+        test('\u6c13', "MANG");
+        test('\u6c14', "QI");
+        test('\u6c15', "PIE");
+        test('\u6c16', "NAI");
+        test('\u6c17', "QI");
+        test('\u6c18', "DAO");
+        test('\u6c19', "XIAN");
+        test('\u6c1a', "CHUAN");
+        test('\u6c1b', "FEN");
+        test('\u6c1c', "YANG");
+        test('\u6c1d', "NEI");
+        test('\u6c1e', "BIN");
+        test('\u6c1f', "FU");
+        test('\u6c20', "SHEN");
+        test('\u6c21', "DONG");
+        test('\u6c22', "QING");
+        test('\u6c23', "QI");
+        test('\u6c24', "YIN");
+        test('\u6c25', "XI");
+        test('\u6c26', "HAI");
+        test('\u6c27', "YANG");
+        test('\u6c28', "AN");
+        test('\u6c29', "YA");
+        test('\u6c2a', "KE");
+        test('\u6c2b', "QING");
+        test('\u6c2c', "YA");
+        test('\u6c2d', "DONG");
+        test('\u6c2e', "DAN");
+        test('\u6c2f', "LU");
+        test('\u6c30', "QING");
+        test('\u6c31', "YANG");
+        test('\u6c32', "YUN");
+        test('\u6c33', "YUN");
+        test('\u6c34', "SHUI");
+        test('\u6c35', "SHUI");
+        test('\u6c36', "ZHENG");
+        test('\u6c37', "BING");
+        test('\u6c38', "YONG");
+        test('\u6c39', "DANG");
+        test('\u6c3a', "SHUI");
+        test('\u6c3b', "LE");
+        test('\u6c3c', "NI");
+        test('\u6c3d', "TUN");
+        test('\u6c3e', "FAN");
+        test('\u6c3f', "GUI");
+        test('\u6c40', "TING");
+        test('\u6c41', "ZHI");
+        test('\u6c42', "QIU");
+        test('\u6c43', "BIN");
+        test('\u6c44', "ZE");
+        test('\u6c45', "MIAN");
+        test('\u6c46', "CUAN");
+        test('\u6c47', "HUI");
+        test('\u6c48', "DIAO");
+        test('\u6c49', "HAN");
+        test('\u6c4a', "CHA");
+        test('\u6c4b', "ZHUO");
+        test('\u6c4c', "CHUAN");
+        test('\u6c4d', "WAN");
+        test('\u6c4e', "FAN");
+        test('\u6c4f', "DA");
+        test('\u6c50', "XI");
+        test('\u6c51', "TUO");
+        test('\u6c52', "MANG");
+        test('\u6c53', "QIU");
+        test('\u6c54', "QI");
+        test('\u6c55', "SHAN");
+        test('\u6c56', "PIN");
+        test('\u6c57', "HAN");
+        test('\u6c58', "QIAN");
+        test('\u6c59', "WU");
+        test('\u6c5a', "WU");
+        test('\u6c5b', "XUN");
+        test('\u6c5c', "SI");
+        test('\u6c5d', "RU");
+        test('\u6c5e', "GONG");
+        test('\u6c5f', "JIANG");
+        test('\u6c60', "CHI");
+        test('\u6c61', "WU");
+        test('\u6c62', "TU");
+        test('\u6c63', "JIU");
+        test('\u6c64', "TANG");
+        test('\u6c65', "ZHI");
+        test('\u6c66', "ZHI");
+        test('\u6c67', "QIAN");
+        test('\u6c68', "MI");
+        test('\u6c69', "GU");
+        test('\u6c6a', "WANG");
+        test('\u6c6b', "JING");
+        test('\u6c6c', "JING");
+        test('\u6c6d', "RUI");
+        test('\u6c6e', "JUN");
+        test('\u6c6f', "HONG");
+        test('\u6c70', "TAI");
+        test('\u6c71', "QUAN");
+        test('\u6c72', "JI");
+        test('\u6c73', "BIAN");
+        test('\u6c74', "BIAN");
+        test('\u6c75', "GAN");
+        test('\u6c76', "WEN");
+        test('\u6c77', "ZHONG");
+        test('\u6c78', "FANG");
+        test('\u6c79', "XIONG");
+        test('\u6c7a', "JUE");
+        test('\u6c7b', "HU");
+        test('\u6c7c', "NIU");
+        test('\u6c7d', "QI");
+        test('\u6c7e', "FEN");
+        test('\u6c7f', "XU");
+        test('\u6c80', "XU");
+        test('\u6c81', "QIN");
+        test('\u6c82', "YI");
+        test('\u6c83', "WO");
+        test('\u6c84', "YUN");
+        test('\u6c85', "YUAN");
+        test('\u6c86', "HANG");
+        test('\u6c87', "YAN");
+        test('\u6c88', "SHEN");
+        test('\u6c89', "CHEN");
+        test('\u6c8a', "DAN");
+        test('\u6c8b', "YOU");
+        test('\u6c8c', "DUN");
+        test('\u6c8d', "HU");
+        test('\u6c8e', "HUO");
+        test('\u6c8f', "QI");
+        test('\u6c90', "MU");
+        test('\u6c91', "NU");
+        test('\u6c92', "MEI");
+        test('\u6c93', "DA");
+        test('\u6c94', "MIAN");
+        test('\u6c95', "MI");
+        test('\u6c96', "CHONG");
+        test('\u6c97', "PANG");
+        test('\u6c98', "BI");
+        test('\u6c99', "SHA");
+        test('\u6c9a', "ZHI");
+        test('\u6c9b', "PEI");
+        test('\u6c9c', "PAN");
+        test('\u6c9d', "ZHUI");
+        test('\u6c9e', "ZA");
+        test('\u6c9f', "GOU");
+        test('\u6ca0', "LIU");
+        test('\u6ca1', "MEI");
+        test('\u6ca2', "ZE");
+        test('\u6ca3', "FENG");
+        test('\u6ca4', "OU");
+        test('\u6ca5', "LI");
+        test('\u6ca6', "LUN");
+        test('\u6ca7', "CANG");
+        test('\u6ca8', "FENG");
+        test('\u6ca9', "WEI");
+        test('\u6caa', "HU");
+        test('\u6cab', "MO");
+        test('\u6cac', "MEI");
+        test('\u6cad', "SHU");
+        test('\u6cae', "JU");
+        test('\u6caf', "ZAN");
+        test('\u6cb0', "TUO");
+        test('\u6cb1', "TUO");
+        test('\u6cb2', "TUO");
+        test('\u6cb3', "HE");
+        test('\u6cb4', "LI");
+        test('\u6cb5', "MI");
+        test('\u6cb6', "YI");
+        test('\u6cb7', "FA");
+        test('\u6cb8', "FEI");
+        test('\u6cb9', "YOU");
+        test('\u6cba', "TIAN");
+        test('\u6cbb', "ZHI");
+        test('\u6cbc', "ZHAO");
+        test('\u6cbd', "GU");
+        test('\u6cbe', "ZHAN");
+        test('\u6cbf', "YAN");
+        test('\u6cc0', "SI");
+        test('\u6cc1', "KUANG");
+        test('\u6cc2', "JIONG");
+        test('\u6cc3', "JU");
+        test('\u6cc4', "XIE");
+        test('\u6cc5', "QIU");
+        test('\u6cc6', "YI");
+        test('\u6cc7', "JIA");
+        test('\u6cc8', "ZHONG");
+        test('\u6cc9', "QUAN");
+        test('\u6cca', "PO");
+        test('\u6ccb', "HUI");
+        test('\u6ccc', "MI");
+        test('\u6ccd', "BEN");
+        test('\u6cce', "ZE");
+        test('\u6ccf', "ZHU");
+        test('\u6cd0', "LE");
+        test('\u6cd1', "YOU");
+        test('\u6cd2', "GU");
+        test('\u6cd3', "HONG");
+        test('\u6cd4', "GAN");
+        test('\u6cd5', "FA");
+        test('\u6cd6', "MAO");
+        test('\u6cd7', "SI");
+        test('\u6cd8', "HU");
+        test('\u6cd9', "PING");
+        test('\u6cda', "CI");
+        test('\u6cdb', "FAN");
+        test('\u6cdc', "ZHI");
+        test('\u6cdd', "SU");
+        test('\u6cde', "NING");
+        test('\u6cdf', "CHENG");
+        test('\u6ce0', "LING");
+        test('\u6ce1', "PAO");
+        test('\u6ce2', "BO");
+        test('\u6ce3', "QI");
+        test('\u6ce4', "SI");
+        test('\u6ce5', "NI");
+        test('\u6ce6', "JU");
+        test('\u6ce7', "SA");
+        test('\u6ce8', "ZHU");
+        test('\u6ce9', "SHENG");
+        test('\u6cea', "LEI");
+        test('\u6ceb', "XUAN");
+        test('\u6cec', "JUE");
+        test('\u6ced', "FU");
+        test('\u6cee', "PAN");
+        test('\u6cef', "MIN");
+        test('\u6cf0', "TAI");
+        test('\u6cf1', "YANG");
+        test('\u6cf2', "JI");
+        test('\u6cf3', "YONG");
+        test('\u6cf4', "GUAN");
+        test('\u6cf5', "BENG");
+        test('\u6cf6', "XUE");
+        test('\u6cf7', "LONG");
+        test('\u6cf8', "LU");
+        test('\u6cf9', "DAN");
+        test('\u6cfa', "LUO");
+        test('\u6cfb', "XIE");
+        test('\u6cfc', "PO");
+        test('\u6cfd', "ZE");
+        test('\u6cfe', "JING");
+        test('\u6cff', "YIN");
+        test('\u6d00', "PAN");
+        test('\u6d01', "JIE");
+        test('\u6d02', "YI");
+        test('\u6d03', "HUI");
+        test('\u6d04', "HUI");
+        test('\u6d05', "ZAI");
+        test('\u6d06', "CHENG");
+        test('\u6d07', "YIN");
+        test('\u6d08', "WEI");
+        test('\u6d09', "HOU");
+        test('\u6d0a', "JIAN");
+        test('\u6d0b', "YANG");
+        test('\u6d0c', "LIE");
+        test('\u6d0d', "SI");
+        test('\u6d0e', "JI");
+        test('\u6d0f', "ER");
+        test('\u6d10', "XING");
+        test('\u6d11', "FU");
+        test('\u6d12', "SA");
+        test('\u6d13', "SE");
+        test('\u6d14', "ZHI");
+        test('\u6d15', "YIN");
+        test('\u6d16', "WU");
+        test('\u6d17', "XI");
+        test('\u6d18', "KAO");
+        test('\u6d19', "ZHU");
+        test('\u6d1a', "JIANG");
+        test('\u6d1b', "LUO");
+        test('\u6d1c', "LUO");
+        test('\u6d1d', "AN");
+        test('\u6d1e', "DONG");
+        test('\u6d1f', "TI");
+        test('\u6d20', "MOU");
+        test('\u6d21', "LEI");
+        test('\u6d22', "YI");
+        test('\u6d23', "MI");
+        test('\u6d24', "QUAN");
+        test('\u6d25', "JIN");
+        test('\u6d26', "PO");
+        test('\u6d27', "WEI");
+        test('\u6d28', "XIAO");
+        test('\u6d29', "XIE");
+        test('\u6d2a', "HONG");
+        test('\u6d2b', "XU");
+        test('\u6d2c', "SU");
+        test('\u6d2d', "KUANG");
+        test('\u6d2e', "TAO");
+        test('\u6d2f', "QIE");
+        test('\u6d30', "JU");
+        test('\u6d31', "ER");
+        test('\u6d32', "ZHOU");
+        test('\u6d33', "RU");
+        test('\u6d34', "PING");
+        test('\u6d35', "XUN");
+        test('\u6d36', "XIONG");
+        test('\u6d37', "ZHI");
+        test('\u6d38', "GUANG");
+        test('\u6d39', "HUAN");
+        test('\u6d3a', "MING");
+        test('\u6d3b', "HUO");
+        test('\u6d3c', "WA");
+        test('\u6d3d', "QIA");
+        test('\u6d3e', "PAI");
+        test('\u6d3f', "WU");
+        test('\u6d40', "QU");
+        test('\u6d41', "LIU");
+        test('\u6d42', "YI");
+        test('\u6d43', "JIA");
+        test('\u6d44', "JING");
+        test('\u6d45', "QIAN");
+        test('\u6d46', "JIANG");
+        test('\u6d47', "JIAO");
+        test('\u6d48', "ZHEN");
+        test('\u6d49', "SHI");
+        test('\u6d4a', "ZHUO");
+        test('\u6d4b', "CE");
+        test('\u6d4c', "FA");
+        test('\u6d4d', "HUI");
+        test('\u6d4e', "JI");
+        test('\u6d4f', "LIU");
+        test('\u6d50', "CHAN");
+        test('\u6d51', "HUN");
+        test('\u6d52', "HU");
+        test('\u6d53', "NONG");
+        test('\u6d54', "XUN");
+        test('\u6d55', "JIN");
+        test('\u6d56', "LIE");
+        test('\u6d57', "QIU");
+        test('\u6d58', "WEI");
+        test('\u6d59', "ZHE");
+        test('\u6d5a', "JUN");
+        test('\u6d5b', "HAN");
+        test('\u6d5c', "BANG");
+        test('\u6d5d', "MANG");
+        test('\u6d5e', "ZHUO");
+        test('\u6d5f', "YOU");
+        test('\u6d60', "XI");
+        test('\u6d61', "BO");
+        test('\u6d62', "DOU");
+        test('\u6d63', "HUAN");
+        test('\u6d64', "HONG");
+        test('\u6d65', "YI");
+        test('\u6d66', "PU");
+        test('\u6d67', "YING");
+        test('\u6d68', "LAN");
+        test('\u6d69', "HAO");
+        test('\u6d6a', "LANG");
+        test('\u6d6b', "HAN");
+        test('\u6d6c', "LI");
+        test('\u6d6d', "GENG");
+        test('\u6d6e', "FU");
+        test('\u6d6f', "WU");
+        test('\u6d70', "LIAN");
+        test('\u6d71', "CHUN");
+        test('\u6d72', "FENG");
+        test('\u6d73', "YI");
+        test('\u6d74', "YU");
+        test('\u6d75', "TONG");
+        test('\u6d76', "LAO");
+        test('\u6d77', "HAI");
+        test('\u6d78', "JIN");
+        test('\u6d79', "JIA");
+        test('\u6d7a', "CHONG");
+        test('\u6d7b', "JIONG");
+        test('\u6d7c', "MEI");
+        test('\u6d7d', "SUI");
+        test('\u6d7e', "CHENG");
+        test('\u6d7f', "PEI");
+        test('\u6d80', "XIAN");
+        test('\u6d81', "SHEN");
+        test('\u6d82', "TU");
+        test('\u6d83', "KUN");
+        test('\u6d84', "PING");
+        test('\u6d85', "NIE");
+        test('\u6d86', "HAN");
+        test('\u6d87', "JING");
+        test('\u6d88', "XIAO");
+        test('\u6d89', "SHE");
+        test('\u6d8a', "NIAN");
+        test('\u6d8b', "TU");
+        test('\u6d8c', "YONG");
+        test('\u6d8d', "XIAO");
+        test('\u6d8e', "XIAN");
+        test('\u6d8f', "TING");
+        test('\u6d90', "E");
+        test('\u6d91', "SU");
+        test('\u6d92', "TUN");
+        test('\u6d93', "JUAN");
+        test('\u6d94', "CEN");
+        test('\u6d95', "TI");
+        test('\u6d96', "LI");
+        test('\u6d97', "SHUI");
+        test('\u6d98', "SI");
+        test('\u6d99', "LEI");
+        test('\u6d9a', "SHUI");
+        test('\u6d9b', "TAO");
+        test('\u6d9c', "DU");
+        test('\u6d9d', "LAO");
+        test('\u6d9e', "LAI");
+        test('\u6d9f', "LIAN");
+        test('\u6da0', "WEI");
+        test('\u6da1', "WO");
+        test('\u6da2', "YUN");
+        test('\u6da3', "HUAN");
+        test('\u6da4', "DI");
+        test('\u6da5', "HENG");
+        test('\u6da6', "RUN");
+        test('\u6da7', "JIAN");
+        test('\u6da8', "ZHANG");
+        test('\u6da9', "SE");
+        test('\u6daa', "FU");
+        test('\u6dab', "GUAN");
+        test('\u6dac', "XING");
+        test('\u6dad', "SHOU");
+        test('\u6dae', "SHUAN");
+        test('\u6daf', "YA");
+        test('\u6db0', "CHUO");
+        test('\u6db1', "ZHANG");
+        test('\u6db2', "YE");
+        test('\u6db3', "KONG");
+        test('\u6db4', "WO");
+        test('\u6db5', "HAN");
+        test('\u6db6', "TUO");
+        test('\u6db7', "DONG");
+        test('\u6db8', "HE");
+        test('\u6db9', "WO");
+        test('\u6dba', "JU");
+        test('\u6dbb', "SHE");
+        test('\u6dbc', "LIANG");
+        test('\u6dbd', "HUN");
+        test('\u6dbe', "TA");
+        test('\u6dbf', "ZHUO");
+        test('\u6dc0', "DIAN");
+        test('\u6dc1', "QIE");
+        test('\u6dc2', "DE");
+        test('\u6dc3', "JUAN");
+        test('\u6dc4', "ZI");
+        test('\u6dc5', "XI");
+        test('\u6dc6', "XIAO");
+        test('\u6dc7', "QI");
+        test('\u6dc8', "GU");
+        test('\u6dc9', "GUO");
+        test('\u6dca', "YAN");
+        test('\u6dcb', "LIN");
+        test('\u6dcc', "TANG");
+        test('\u6dcd', "ZHOU");
+        test('\u6dce', "PENG");
+        test('\u6dcf', "HAO");
+        test('\u6dd0', "CHANG");
+        test('\u6dd1', "SHU");
+        test('\u6dd2', "QI");
+        test('\u6dd3', "FANG");
+        test('\u6dd4', "ZHI");
+        test('\u6dd5', "LU");
+        test('\u6dd6', "NAO");
+        test('\u6dd7', "JU");
+        test('\u6dd8', "TAO");
+        test('\u6dd9', "CONG");
+        test('\u6dda', "LEI");
+        test('\u6ddb', "ZHE");
+        test('\u6ddc', "PING");
+        test('\u6ddd', "FEI");
+        test('\u6dde', "SONG");
+        test('\u6ddf', "TIAN");
+        test('\u6de0', "PI");
+        test('\u6de1', "DAN");
+        test('\u6de2', "YU");
+        test('\u6de3', "NI");
+        test('\u6de4', "YU");
+        test('\u6de5', "LU");
+        test('\u6de6', "GAN");
+        test('\u6de7', "MI");
+        test('\u6de8', "JING");
+        test('\u6de9', "LING");
+        test('\u6dea', "LUN");
+        test('\u6deb', "YIN");
+        test('\u6dec', "CUI");
+        test('\u6ded', "QU");
+        test('\u6dee', "HUAI");
+        test('\u6def', "YU");
+        test('\u6df0', "NIAN");
+        test('\u6df1', "SHEN");
+        test('\u6df2', "BIAO");
+        test('\u6df3', "CHUN");
+        test('\u6df4', "HU");
+        test('\u6df5', "YUAN");
+        test('\u6df6', "LAI");
+        test('\u6df7', "HUN");
+        test('\u6df8', "QING");
+        test('\u6df9', "YAN");
+        test('\u6dfa', "QIAN");
+        test('\u6dfb', "TIAN");
+        test('\u6dfc', "MIAO");
+        test('\u6dfd', "ZHI");
+        test('\u6dfe', "YIN");
+        test('\u6dff', "MI");
+    }
+
+    @SmallTest
+    public void test_8() throws Exception {
+        if (!hasChineseTransliterator()) {
+            return;
+        }
+        test('\u6e00', "BEN");
+        test('\u6e01', "YUAN");
+        test('\u6e02', "WEN");
+        test('\u6e03', "RUO");
+        test('\u6e04', "FEI");
+        test('\u6e05', "QING");
+        test('\u6e06', "YUAN");
+        test('\u6e07', "KE");
+        test('\u6e08', "JI");
+        test('\u6e09', "SHE");
+        test('\u6e0a', "YUAN");
+        test('\u6e0b', "SE");
+        test('\u6e0c', "LU");
+        test('\u6e0d', "ZI");
+        test('\u6e0e', "DU");
+        test('\u6e0f', "QI");
+        test('\u6e10', "JIAN");
+        test('\u6e11', "MIAN");
+        test('\u6e12', "PI");
+        test('\u6e13', "XI");
+        test('\u6e14', "YU");
+        test('\u6e15', "YUAN");
+        test('\u6e16', "SHEN");
+        test('\u6e17', "SHEN");
+        test('\u6e18', "ROU");
+        test('\u6e19', "HUAN");
+        test('\u6e1a', "ZHU");
+        test('\u6e1b', "JIAN");
+        test('\u6e1c', "NUAN");
+        test('\u6e1d', "YU");
+        test('\u6e1e', "QIU");
+        test('\u6e1f', "TING");
+        test('\u6e20', "QU");
+        test('\u6e21', "DU");
+        test('\u6e22', "FAN");
+        test('\u6e23', "ZHA");
+        test('\u6e24', "BO");
+        test('\u6e25', "WO");
+        test('\u6e26', "WO");
+        test('\u6e27', "DI");
+        test('\u6e28', "WEI");
+        test('\u6e29', "WEN");
+        test('\u6e2a', "RU");
+        test('\u6e2b', "XIE");
+        test('\u6e2c', "CE");
+        test('\u6e2d', "WEI");
+        test('\u6e2e', "HE");
+        test('\u6e2f', "GANG");
+        test('\u6e30', "YAN");
+        test('\u6e31', "HONG");
+        test('\u6e32', "XUAN");
+        test('\u6e33', "MI");
+        test('\u6e34', "KE");
+        test('\u6e35', "MAO");
+        test('\u6e36', "YING");
+        test('\u6e37', "YAN");
+        test('\u6e38', "YOU");
+        test('\u6e39', "HONG");
+        test('\u6e3a', "MIAO");
+        test('\u6e3b', "SHENG");
+        test('\u6e3c', "MEI");
+        test('\u6e3d', "ZAI");
+        test('\u6e3e', "HUN");
+        test('\u6e3f', "NAI");
+        test('\u6e40', "GUI");
+        test('\u6e41', "CHI");
+        test('\u6e42', "E");
+        test('\u6e43', "PAI");
+        test('\u6e44', "MEI");
+        test('\u6e45', "LIAN");
+        test('\u6e46', "QI");
+        test('\u6e47', "QI");
+        test('\u6e48', "MEI");
+        test('\u6e49', "TIAN");
+        test('\u6e4a', "COU");
+        test('\u6e4b', "WEI");
+        test('\u6e4c', "CAN");
+        test('\u6e4d', "TUAN");
+        test('\u6e4e', "MIAN");
+        test('\u6e4f', "HUI");
+        test('\u6e50', "MO");
+        test('\u6e51', "XU");
+        test('\u6e52', "JI");
+        test('\u6e53', "PEN");
+        test('\u6e54', "JIAN");
+        test('\u6e55', "JIAN");
+        test('\u6e56', "HU");
+        test('\u6e57', "FENG");
+        test('\u6e58', "XIANG");
+        test('\u6e59', "YI");
+        test('\u6e5a', "YIN");
+        test('\u6e5b', "ZHAN");
+        test('\u6e5c', "SHI");
+        test('\u6e5d', "JIE");
+        test('\u6e5e', "CHENG");
+        test('\u6e5f', "HUANG");
+        test('\u6e60', "TAN");
+        test('\u6e61', "YU");
+        test('\u6e62', "BI");
+        test('\u6e63', "MIN");
+        test('\u6e64', "SHI");
+        test('\u6e65', "TU");
+        test('\u6e66', "SHENG");
+        test('\u6e67', "YONG");
+        test('\u6e68', "JU");
+        test('\u6e69', "DONG");
+        test('\u6e6a', "TUAN");
+        test('\u6e6b', "JIAO");
+        test('\u6e6c', "JIAO");
+        test('\u6e6d', "QIU");
+        test('\u6e6e', "YAN");
+        test('\u6e6f', "TANG");
+        test('\u6e70', "LONG");
+        test('\u6e71', "HUO");
+        test('\u6e72', "YUAN");
+        test('\u6e73', "NAN");
+        test('\u6e74', "BAN");
+        test('\u6e75', "YOU");
+        test('\u6e76', "QUAN");
+        test('\u6e77', "ZHUANG");
+        test('\u6e78', "LIANG");
+        test('\u6e79', "CHAN");
+        test('\u6e7a', "YAN");
+        test('\u6e7b', "CHUN");
+        test('\u6e7c', "NIE");
+        test('\u6e7d', "ZI");
+        test('\u6e7e', "WAN");
+        test('\u6e7f', "SHI");
+        test('\u6e80', "MAN");
+        test('\u6e81', "YING");
+        test('\u6e82', "LA");
+        test('\u6e83', "KUI");
+        test('\u6e84', "FENG");
+        test('\u6e85', "JIAN");
+        test('\u6e86', "XU");
+        test('\u6e87', "LOU");
+        test('\u6e88', "WEI");
+        test('\u6e89', "GAI");
+        test('\u6e8a', "XIA");
+        test('\u6e8b', "YING");
+        test('\u6e8c', "PO");
+        test('\u6e8d', "JIN");
+        test('\u6e8e', "YAN");
+        test('\u6e8f', "TANG");
+        test('\u6e90', "YUAN");
+        test('\u6e91', "SUO");
+        test('\u6e92', "YUAN");
+        test('\u6e93', "LIAN");
+        test('\u6e94', "YAO");
+        test('\u6e95', "MENG");
+        test('\u6e96', "ZHUN");
+        test('\u6e97', "CHENG");
+        test('\u6e98', "KE");
+        test('\u6e99', "TAI");
+        test('\u6e9a', "TA");
+        test('\u6e9b', "WA");
+        test('\u6e9c', "LIU");
+        test('\u6e9d', "GOU");
+        test('\u6e9e', "SAO");
+        test('\u6e9f', "MING");
+        test('\u6ea0', "ZHA");
+        test('\u6ea1', "SHI");
+        test('\u6ea2', "YI");
+        test('\u6ea3', "LUN");
+        test('\u6ea4', "MA");
+        test('\u6ea5', "PU");
+        test('\u6ea6', "WEI");
+        test('\u6ea7', "LI");
+        test('\u6ea8', "CAI");
+        test('\u6ea9', "WU");
+        test('\u6eaa', "XI");
+        test('\u6eab', "WEN");
+        test('\u6eac', "QIANG");
+        test('\u6ead', "ZE");
+        test('\u6eae', "SHI");
+        test('\u6eaf', "SU");
+        test('\u6eb0', "AI");
+        test('\u6eb1', "QIN");
+        test('\u6eb2', "SOU");
+        test('\u6eb3', "YUN");
+        test('\u6eb4', "XIU");
+        test('\u6eb5', "YIN");
+        test('\u6eb6', "RONG");
+        test('\u6eb7', "HUN");
+        test('\u6eb8', "SU");
+        test('\u6eb9', "SUO");
+        test('\u6eba', "NI");
+        test('\u6ebb', "TA");
+        test('\u6ebc', "SHI");
+        test('\u6ebd', "RU");
+        test('\u6ebe', "AI");
+        test('\u6ebf', "PAN");
+        test('\u6ec0', "CHU");
+        test('\u6ec1', "CHU");
+        test('\u6ec2', "PANG");
+        test('\u6ec3', "WENG");
+        test('\u6ec4', "CANG");
+        test('\u6ec5', "MIE");
+        test('\u6ec6', "GE");
+        test('\u6ec7', "DIAN");
+        test('\u6ec8', "HAO");
+        test('\u6ec9', "HUANG");
+        test('\u6eca', "XI");
+        test('\u6ecb', "ZI");
+        test('\u6ecc', "DI");
+        test('\u6ecd', "ZHI");
+        test('\u6ece', "XING");
+        test('\u6ecf', "FU");
+        test('\u6ed0', "JIE");
+        test('\u6ed1', "HUA");
+        test('\u6ed2', "GE");
+        test('\u6ed3', "ZI");
+        test('\u6ed4', "TAO");
+        test('\u6ed5', "TENG");
+        test('\u6ed6', "SUI");
+        test('\u6ed7', "BI");
+        test('\u6ed8', "JIAO");
+        test('\u6ed9', "HUI");
+        test('\u6eda', "GUN");
+        test('\u6edb', "YIN");
+        test('\u6edc', "GAO");
+        test('\u6edd', "LONG");
+        test('\u6ede', "ZHI");
+        test('\u6edf', "YAN");
+        test('\u6ee0', "SHE");
+        test('\u6ee1', "MAN");
+        test('\u6ee2', "YING");
+        test('\u6ee3', "CHUN");
+        test('\u6ee4', "LU");
+        test('\u6ee5', "LAN");
+        test('\u6ee6', "LUAN");
+        test('\u6ee7', "XIAO");
+        test('\u6ee8', "BIN");
+        test('\u6ee9', "TAN");
+        test('\u6eea', "YU");
+        test('\u6eeb', "XIU");
+        test('\u6eec', "HU");
+        test('\u6eed', "BI");
+        test('\u6eee', "BIAO");
+        test('\u6eef', "ZHI");
+        test('\u6ef0', "JIANG");
+        test('\u6ef1', "KOU");
+        test('\u6ef2', "SHEN");
+        test('\u6ef3', "SHANG");
+        test('\u6ef4', "DI");
+        test('\u6ef5', "MI");
+        test('\u6ef6', "AO");
+        test('\u6ef7', "LU");
+        test('\u6ef8', "HU");
+        test('\u6ef9', "HU");
+        test('\u6efa', "YOU");
+        test('\u6efb', "CHAN");
+        test('\u6efc', "FAN");
+        test('\u6efd', "YONG");
+        test('\u6efe', "GUN");
+        test('\u6eff', "MAN");
+        test('\u6f00', "QING");
+        test('\u6f01', "YU");
+        test('\u6f02', "PIAO");
+        test('\u6f03', "JI");
+        test('\u6f04', "YA");
+        test('\u6f05', "CHAO");
+        test('\u6f06', "QI");
+        test('\u6f07', "XI");
+        test('\u6f08', "JI");
+        test('\u6f09', "LU");
+        test('\u6f0a', "LOU");
+        test('\u6f0b', "LONG");
+        test('\u6f0c', "JIN");
+        test('\u6f0d', "GUO");
+        test('\u6f0e', "CONG");
+        test('\u6f0f', "LOU");
+        test('\u6f10', "ZHI");
+        test('\u6f11', "GAI");
+        test('\u6f12', "QIANG");
+        test('\u6f13', "LI");
+        test('\u6f14', "YAN");
+        test('\u6f15', "CAO");
+        test('\u6f16', "JIAO");
+        test('\u6f17', "CONG");
+        test('\u6f18', "CHUN");
+        test('\u6f19', "TUAN");
+        test('\u6f1a', "OU");
+        test('\u6f1b', "TENG");
+        test('\u6f1c', "YE");
+        test('\u6f1d', "XI");
+        test('\u6f1e', "MI");
+        test('\u6f1f', "TANG");
+        test('\u6f20', "MO");
+        test('\u6f21', "SHANG");
+        test('\u6f22', "HAN");
+        test('\u6f23', "LIAN");
+        test('\u6f24', "LAN");
+        test('\u6f25', "WA");
+        test('\u6f26', "CHI");
+        test('\u6f27', "GAN");
+        test('\u6f28', "FENG");
+        test('\u6f29', "XUAN");
+        test('\u6f2a', "YI");
+        test('\u6f2b', "MAN");
+        test('\u6f2c', "ZI");
+        test('\u6f2d', "MANG");
+        test('\u6f2e', "KANG");
+        test('\u6f2f', "LUO");
+        test('\u6f30', "PENG");
+        test('\u6f31', "SHU");
+        test('\u6f32', "ZHANG");
+        test('\u6f33', "ZHANG");
+        test('\u6f34', "ZHUANG");
+        test('\u6f35', "XU");
+        test('\u6f36', "HUAN");
+        test('\u6f37', "HUO");
+        test('\u6f38', "JIAN");
+        test('\u6f39', "YAN");
+        test('\u6f3a', "SHUANG");
+        test('\u6f3b', "LIAO");
+        test('\u6f3c', "CUI");
+        test('\u6f3d', "TI");
+        test('\u6f3e', "YANG");
+        test('\u6f3f', "JIANG");
+        test('\u6f40', "CONG");
+        test('\u6f41', "YING");
+        test('\u6f42', "HONG");
+        test('\u6f43', "XUN");
+        test('\u6f44', "SHU");
+        test('\u6f45', "GUAN");
+        test('\u6f46', "YING");
+        test('\u6f47', "XIAO");
+        test('\u6f48', "ZONG");
+        test('\u6f49', "KUN");
+        test('\u6f4a', "XU");
+        test('\u6f4b', "LIAN");
+        test('\u6f4c', "ZHI");
+        test('\u6f4d', "WEI");
+        test('\u6f4e', "PI");
+        test('\u6f4f', "YU");
+        test('\u6f50', "JIAO");
+        test('\u6f51', "PO");
+        test('\u6f52', "DANG");
+        test('\u6f53', "HUI");
+        test('\u6f54', "JIE");
+        test('\u6f55', "WU");
+        test('\u6f56', "PA");
+        test('\u6f57', "JI");
+        test('\u6f58', "PAN");
+        test('\u6f59', "WEI");
+        test('\u6f5a', "SU");
+        test('\u6f5b', "QIAN");
+        test('\u6f5c', "QIAN");
+        test('\u6f5d', "XI");
+        test('\u6f5e', "LU");
+        test('\u6f5f', "XI");
+        test('\u6f60', "XUN");
+        test('\u6f61', "DUN");
+        test('\u6f62', "HUANG");
+        test('\u6f63', "MIN");
+        test('\u6f64', "RUN");
+        test('\u6f65', "SU");
+        test('\u6f66', "LAO");
+        test('\u6f67', "ZHEN");
+        test('\u6f68', "CONG");
+        test('\u6f69', "YI");
+        test('\u6f6a', "ZHE");
+        test('\u6f6b', "WAN");
+        test('\u6f6c', "SHAN");
+        test('\u6f6d', "TAN");
+        test('\u6f6e', "CHAO");
+        test('\u6f6f', "XUN");
+        test('\u6f70', "KUI");
+        test('\u6f71', "YE");
+        test('\u6f72', "SHAO");
+        test('\u6f73', "TU");
+        test('\u6f74', "ZHU");
+        test('\u6f75', "SA");
+        test('\u6f76', "HEI");
+        test('\u6f77', "BI");
+        test('\u6f78', "SHAN");
+        test('\u6f79', "CHAN");
+        test('\u6f7a', "CHAN");
+        test('\u6f7b', "SHU");
+        test('\u6f7c', "TONG");
+        test('\u6f7d', "PU");
+        test('\u6f7e', "LIN");
+        test('\u6f7f', "WEI");
+        test('\u6f80', "SE");
+        test('\u6f81', "SE");
+        test('\u6f82', "CHENG");
+        test('\u6f83', "JIONG");
+        test('\u6f84', "CHENG");
+        test('\u6f85', "HUA");
+        test('\u6f86', "JIAO");
+        test('\u6f87', "LAO");
+        test('\u6f88', "CHE");
+        test('\u6f89', "GAN");
+        test('\u6f8a', "CUN");
+        test('\u6f8b', "HONG");
+        test('\u6f8c', "SI");
+        test('\u6f8d', "SHU");
+        test('\u6f8e', "PENG");
+        test('\u6f8f', "HAN");
+        test('\u6f90', "YUN");
+        test('\u6f91', "LIU");
+        test('\u6f92', "HONG");
+        test('\u6f93', "FU");
+        test('\u6f94', "HAO");
+        test('\u6f95', "HE");
+        test('\u6f96', "XIAN");
+        test('\u6f97', "JIAN");
+        test('\u6f98', "SHAN");
+        test('\u6f99', "XI");
+        test('\u6f9a', "YU");
+        test('\u6f9b', "LU");
+        test('\u6f9c', "LAN");
+        test('\u6f9d', "NING");
+        test('\u6f9e', "YU");
+        test('\u6f9f', "LIN");
+        test('\u6fa0', "MIAN");
+        test('\u6fa1', "ZAO");
+        test('\u6fa2', "DANG");
+        test('\u6fa3', "HUAN");
+        test('\u6fa4', "ZE");
+        test('\u6fa5', "XIE");
+        test('\u6fa6', "YU");
+        test('\u6fa7', "LI");
+        test('\u6fa8', "SHI");
+        test('\u6fa9', "XUE");
+        test('\u6faa', "LING");
+        test('\u6fab', "WAN");
+        test('\u6fac', "ZI");
+        test('\u6fad', "YONG");
+        test('\u6fae', "HUI");
+        test('\u6faf', "CAN");
+        test('\u6fb0', "LIAN");
+        test('\u6fb1', "DIAN");
+        test('\u6fb2', "YE");
+        test('\u6fb3', "AO");
+        test('\u6fb4', "HUAN");
+        test('\u6fb5', "ZHEN");
+        test('\u6fb6', "CHAN");
+        test('\u6fb7', "MAN");
+        test('\u6fb8', "DAN");
+        test('\u6fb9', "DAN");
+        test('\u6fba', "YI");
+        test('\u6fbb', "SUI");
+        test('\u6fbc', "PI");
+        test('\u6fbd', "JU");
+        test('\u6fbe', "TA");
+        test('\u6fbf', "QIN");
+        test('\u6fc0', "JI");
+        test('\u6fc1', "ZHUO");
+        test('\u6fc2', "LIAN");
+        test('\u6fc3', "NONG");
+        test('\u6fc4', "GUO");
+        test('\u6fc5', "JIN");
+        test('\u6fc6', "FEN");
+        test('\u6fc7', "SE");
+        test('\u6fc8', "JI");
+        test('\u6fc9', "SUI");
+        test('\u6fca', "HUI");
+        test('\u6fcb', "CHU");
+        test('\u6fcc', "TA");
+        test('\u6fcd', "SONG");
+        test('\u6fce', "DING");
+        test('\u6fcf', "SE");
+        test('\u6fd0', "ZHU");
+        test('\u6fd1', "LAI");
+        test('\u6fd2', "BIN");
+        test('\u6fd3', "LIAN");
+        test('\u6fd4', "MI");
+        test('\u6fd5', "SHI");
+        test('\u6fd6', "SHU");
+        test('\u6fd7', "MI");
+        test('\u6fd8', "NING");
+        test('\u6fd9', "YING");
+        test('\u6fda', "YING");
+        test('\u6fdb', "MENG");
+        test('\u6fdc', "JIN");
+        test('\u6fdd', "QI");
+        test('\u6fde', "BI");
+        test('\u6fdf', "JI");
+        test('\u6fe0', "HAO");
+        test('\u6fe1', "RU");
+        test('\u6fe2', "CUI");
+        test('\u6fe3', "WO");
+        test('\u6fe4', "TAO");
+        test('\u6fe5', "YIN");
+        test('\u6fe6', "YIN");
+        test('\u6fe7', "DUI");
+        test('\u6fe8', "CI");
+        test('\u6fe9', "HUO");
+        test('\u6fea', "JING");
+        test('\u6feb', "LAN");
+        test('\u6fec', "JUN");
+        test('\u6fed', "AI");
+        test('\u6fee', "PU");
+        test('\u6fef', "ZHUO");
+        test('\u6ff0', "WEI");
+        test('\u6ff1', "BIN");
+        test('\u6ff2', "GU");
+        test('\u6ff3', "QIAN");
+        test('\u6ff4', "YING");
+        test('\u6ff5', "BIN");
+        test('\u6ff6', "KUO");
+        test('\u6ff7', "FEI");
+        test('\u6ff8', "CANG");
+        test('\u6ff9', "ME");
+        test('\u6ffa', "JIAN");
+        test('\u6ffb', "WEI");
+        test('\u6ffc', "LUO");
+        test('\u6ffd', "ZAN");
+        test('\u6ffe', "LU");
+        test('\u6fff', "LI");
+        test('\u7000', "YOU");
+        test('\u7001', "YANG");
+        test('\u7002', "LU");
+        test('\u7003', "SI");
+        test('\u7004', "ZHI");
+        test('\u7005', "YING");
+        test('\u7006', "DU");
+        test('\u7007', "WANG");
+        test('\u7008', "HUI");
+        test('\u7009', "XIE");
+        test('\u700a', "PAN");
+        test('\u700b', "SHEN");
+        test('\u700c', "BIAO");
+        test('\u700d', "CHAN");
+        test('\u700e', "MO");
+        test('\u700f', "LIU");
+        test('\u7010', "JIAN");
+        test('\u7011', "PU");
+        test('\u7012', "SE");
+        test('\u7013', "CHENG");
+        test('\u7014', "GU");
+        test('\u7015', "BIN");
+        test('\u7016', "HUO");
+        test('\u7017', "XIAN");
+        test('\u7018', "LU");
+        test('\u7019', "QIN");
+        test('\u701a', "HAN");
+        test('\u701b', "YING");
+        test('\u701c', "RONG");
+        test('\u701d', "LI");
+        test('\u701e', "JING");
+        test('\u701f', "XIAO");
+        test('\u7020', "YING");
+        test('\u7021', "SUI");
+        test('\u7022', "WEI");
+        test('\u7023', "XIE");
+        test('\u7024', "HUAI");
+        test('\u7025', "XUE");
+        test('\u7026', "ZHU");
+        test('\u7027', "LONG");
+        test('\u7028', "LAI");
+        test('\u7029', "DUI");
+        test('\u702a', "FAN");
+        test('\u702b', "HU");
+        test('\u702c', "LAI");
+        test('\u702d', "SHU");
+        test('\u702e', "LING");
+        test('\u702f', "YING");
+        test('\u7030', "MI");
+        test('\u7031', "JI");
+        test('\u7032', "LIAN");
+        test('\u7033', "JIAN");
+        test('\u7034', "YING");
+        test('\u7035', "FEN");
+        test('\u7036', "LIN");
+        test('\u7037', "YI");
+        test('\u7038', "JIAN");
+        test('\u7039', "YUE");
+        test('\u703a', "CHAN");
+        test('\u703b', "DAI");
+        test('\u703c', "RANG");
+        test('\u703d', "JIAN");
+        test('\u703e', "LAN");
+        test('\u703f', "FAN");
+        test('\u7040', "SHUANG");
+        test('\u7041', "YUAN");
+        test('\u7042', "ZHUO");
+        test('\u7043', "FENG");
+        test('\u7044', "SHE");
+        test('\u7045', "LEI");
+        test('\u7046', "LAN");
+        test('\u7047', "CONG");
+        test('\u7048', "QU");
+        test('\u7049', "YONG");
+        test('\u704a', "QIAN");
+        test('\u704b', "FA");
+        test('\u704c', "GUAN");
+        test('\u704d', "QUE");
+        test('\u704e', "YAN");
+        test('\u704f', "HAO");
+        test('\u7050', "YING");
+        test('\u7051', "SA");
+        test('\u7052', "ZAN");
+        test('\u7053', "LUAN");
+        test('\u7054', "YAN");
+        test('\u7055', "LI");
+        test('\u7056', "MI");
+        test('\u7057', "SHAN");
+        test('\u7058', "TAN");
+        test('\u7059', "DANG");
+        test('\u705a', "JIAO");
+        test('\u705b', "CHAN");
+        test('\u705c', "YING");
+        test('\u705d', "HAO");
+        test('\u705e', "BA");
+        test('\u705f', "ZHU");
+        test('\u7060', "LAN");
+        test('\u7061', "LAN");
+        test('\u7062', "NANG");
+        test('\u7063', "WAN");
+        test('\u7064', "LUAN");
+        test('\u7065', "XUN");
+        test('\u7066', "XIAN");
+        test('\u7067', "YAN");
+        test('\u7068', "GAN");
+        test('\u7069', "YAN");
+        test('\u706a', "YU");
+        test('\u706b', "HUO");
+        test('\u706c', "BIAO");
+        test('\u706d', "MIE");
+        test('\u706e', "GUANG");
+        test('\u706f', "DENG");
+        test('\u7070', "HUI");
+        test('\u7071', "XIAO");
+        test('\u7072', "XIAO");
+        test('\u7073', "HUI");
+        test('\u7074', "HONG");
+        test('\u7075', "LING");
+        test('\u7076', "ZAO");
+        test('\u7077', "ZHUAN");
+        test('\u7078', "JIU");
+        test('\u7079', "ZHA");
+        test('\u707a', "XIE");
+        test('\u707b', "CHI");
+        test('\u707c', "ZHUO");
+        test('\u707d', "ZAI");
+        test('\u707e', "ZAI");
+        test('\u707f', "CAN");
+        test('\u7080', "YANG");
+        test('\u7081', "QI");
+        test('\u7082', "ZHONG");
+        test('\u7083', "FEN");
+        test('\u7084', "NIU");
+        test('\u7085', "JIONG");
+        test('\u7086', "WEN");
+        test('\u7087', "PO");
+        test('\u7088', "YI");
+        test('\u7089', "LU");
+        test('\u708a', "CHUI");
+        test('\u708b', "PI");
+        test('\u708c', "KAI");
+        test('\u708d', "PAN");
+        test('\u708e', "YAN");
+        test('\u708f', "KAI");
+        test('\u7090', "PANG");
+        test('\u7091', "MU");
+        test('\u7092', "CHAO");
+        test('\u7093', "LIAO");
+        test('\u7094', "GUI");
+        test('\u7095', "KANG");
+        test('\u7096', "DUN");
+        test('\u7097', "GUANG");
+        test('\u7098', "XIN");
+        test('\u7099', "ZHI");
+        test('\u709a', "GUANG");
+        test('\u709b', "GUANG");
+        test('\u709c', "WEI");
+        test('\u709d', "QIANG");
+        test('\u709e', "BIAN");
+        test('\u709f', "DA");
+        test('\u70a0', "XIA");
+        test('\u70a1', "ZHENG");
+        test('\u70a2', "ZHU");
+        test('\u70a3', "KE");
+        test('\u70a4', "ZHAO");
+        test('\u70a5', "FU");
+        test('\u70a6', "BA");
+        test('\u70a7', "XIE");
+        test('\u70a8', "DUO");
+        test('\u70a9', "LING");
+        test('\u70aa', "ZHUO");
+        test('\u70ab', "XUAN");
+        test('\u70ac', "JU");
+        test('\u70ad', "TAN");
+        test('\u70ae', "PAO");
+        test('\u70af', "JIONG");
+        test('\u70b0', "PAO");
+        test('\u70b1', "TAI");
+        test('\u70b2', "TAI");
+        test('\u70b3', "BING");
+        test('\u70b4', "YANG");
+        test('\u70b5', "TONG");
+        test('\u70b6', "HAN");
+        test('\u70b7', "ZHU");
+        test('\u70b8', "ZHA");
+        test('\u70b9', "DIAN");
+        test('\u70ba', "WEI");
+        test('\u70bb', "SHI");
+        test('\u70bc', "LIAN");
+        test('\u70bd', "CHI");
+        test('\u70be', "HUANG");
+        test('\u70bf', "ZHOU");
+        test('\u70c0', "HU");
+        test('\u70c1', "SHUO");
+        test('\u70c2', "LAN");
+        test('\u70c3', "TING");
+        test('\u70c4', "JIAO");
+        test('\u70c5', "XU");
+        test('\u70c6', "HENG");
+        test('\u70c7', "QUAN");
+        test('\u70c8', "LIE");
+        test('\u70c9', "HUAN");
+        test('\u70ca', "YANG");
+        test('\u70cb', "XIU");
+        test('\u70cc', "XIU");
+        test('\u70cd', "XIAN");
+        test('\u70ce', "YIN");
+        test('\u70cf', "WU");
+        test('\u70d0', "ZHOU");
+        test('\u70d1', "YAO");
+        test('\u70d2', "SHI");
+        test('\u70d3', "WEI");
+        test('\u70d4', "TONG");
+        test('\u70d5', "MIE");
+        test('\u70d6', "ZAI");
+        test('\u70d7', "KAI");
+        test('\u70d8', "HONG");
+        test('\u70d9', "LAO");
+        test('\u70da', "XIA");
+        test('\u70db', "ZHU");
+        test('\u70dc', "XUAN");
+        test('\u70dd', "ZHENG");
+        test('\u70de', "PO");
+        test('\u70df', "YAN");
+        test('\u70e0', "HUI");
+        test('\u70e1', "GUANG");
+        test('\u70e2', "CHE");
+        test('\u70e3', "HUI");
+        test('\u70e4', "KAO");
+        test('\u70e5', "CHEN");
+        test('\u70e6', "FAN");
+        test('\u70e7', "SHAO");
+        test('\u70e8', "YE");
+        test('\u70e9', "HUI");
+        test('\u70ea', "");
+        test('\u70eb', "TANG");
+        test('\u70ec', "JIN");
+        test('\u70ed', "RE");
+        test('\u70ee', "LIE");
+        test('\u70ef', "XI");
+        test('\u70f0', "FU");
+        test('\u70f1', "JIONG");
+        test('\u70f2', "XIE");
+        test('\u70f3', "PU");
+        test('\u70f4', "TING");
+        test('\u70f5', "ZHUO");
+        test('\u70f6', "TING");
+        test('\u70f7', "WAN");
+        test('\u70f8', "HAI");
+        test('\u70f9', "PENG");
+        test('\u70fa', "LANG");
+        test('\u70fb', "YAN");
+        test('\u70fc', "XU");
+        test('\u70fd', "FENG");
+        test('\u70fe', "CHI");
+        test('\u70ff', "RONG");
+        test('\u7100', "HU");
+        test('\u7101', "XI");
+        test('\u7102', "SHU");
+        test('\u7103', "HE");
+        test('\u7104', "XUN");
+        test('\u7105', "KU");
+        test('\u7106', "JUAN");
+        test('\u7107', "XIAO");
+        test('\u7108', "XI");
+        test('\u7109', "YAN");
+        test('\u710a', "HAN");
+        test('\u710b', "ZHUANG");
+        test('\u710c', "JUN");
+        test('\u710d', "DI");
+        test('\u710e', "XIE");
+        test('\u710f', "JI");
+        test('\u7110', "WU");
+        test('\u7111', "YAN");
+        test('\u7112', "LU");
+        test('\u7113', "HAN");
+        test('\u7114', "YAN");
+        test('\u7115', "HUAN");
+        test('\u7116', "MEN");
+        test('\u7117', "JU");
+        test('\u7118', "DAO");
+        test('\u7119', "BEI");
+        test('\u711a', "FEN");
+        test('\u711b', "LIN");
+        test('\u711c', "KUN");
+        test('\u711d', "HUN");
+        test('\u711e', "TUN");
+        test('\u711f', "XI");
+        test('\u7120', "CUI");
+        test('\u7121', "WU");
+        test('\u7122', "HONG");
+        test('\u7123', "CHAO");
+        test('\u7124', "FU");
+        test('\u7125', "WO");
+        test('\u7126', "JIAO");
+        test('\u7127', "CONG");
+        test('\u7128', "FENG");
+        test('\u7129', "PING");
+        test('\u712a', "QIONG");
+        test('\u712b', "RUO");
+        test('\u712c', "XI");
+        test('\u712d', "QIONG");
+        test('\u712e', "XIN");
+        test('\u712f', "CHAO");
+        test('\u7130', "YAN");
+        test('\u7131', "YAN");
+        test('\u7132', "YI");
+        test('\u7133', "JUE");
+        test('\u7134', "YU");
+        test('\u7135', "GANG");
+        test('\u7136', "RAN");
+        test('\u7137', "PI");
+        test('\u7138', "XIONG");
+        test('\u7139', "WANG");
+        test('\u713a', "SHENG");
+        test('\u713b', "CHANG");
+        test('\u713c', "SHAO");
+        test('\u713d', "XIONG");
+        test('\u713e', "NIAN");
+        test('\u713f', "GENG");
+        test('\u7140', "WEI");
+        test('\u7141', "CHEN");
+        test('\u7142', "HE");
+        test('\u7143', "KUI");
+        test('\u7144', "ZHONG");
+        test('\u7145', "DUAN");
+        test('\u7146', "XIA");
+        test('\u7147', "HUI");
+        test('\u7148', "FENG");
+        test('\u7149', "LIAN");
+        test('\u714a', "XUAN");
+        test('\u714b', "XING");
+        test('\u714c', "HUANG");
+        test('\u714d', "JIAO");
+        test('\u714e', "JIAN");
+        test('\u714f', "BI");
+        test('\u7150', "YING");
+        test('\u7151', "ZHU");
+        test('\u7152', "WEI");
+        test('\u7153', "TUAN");
+        test('\u7154', "SHAN");
+        test('\u7155', "XI");
+        test('\u7156', "NUAN");
+        test('\u7157', "NUAN");
+        test('\u7158', "CHAN");
+        test('\u7159', "YAN");
+        test('\u715a', "JIONG");
+        test('\u715b', "JIONG");
+        test('\u715c', "YU");
+        test('\u715d', "MEI");
+        test('\u715e', "SHA");
+        test('\u715f', "WEI");
+        test('\u7160', "ZHA");
+        test('\u7161', "XIN");
+        test('\u7162', "QIONG");
+        test('\u7163', "ROU");
+        test('\u7164', "MEI");
+        test('\u7165', "HUAN");
+        test('\u7166', "XU");
+        test('\u7167', "ZHAO");
+        test('\u7168', "WEI");
+        test('\u7169', "FAN");
+        test('\u716a', "QIU");
+        test('\u716b', "SUI");
+        test('\u716c', "YANG");
+        test('\u716d', "LIE");
+        test('\u716e', "ZHU");
+        test('\u716f', "JIE");
+        test('\u7170', "GAO");
+        test('\u7171', "GUA");
+        test('\u7172', "BAO");
+        test('\u7173', "HU");
+        test('\u7174', "YUN");
+        test('\u7175', "XIA");
+        test('\u7176', "SHI");
+        test('\u7177', "LIANG");
+        test('\u7178', "BIAN");
+        test('\u7179', "GOU");
+        test('\u717a', "TUI");
+        test('\u717b', "TANG");
+        test('\u717c', "CHAO");
+        test('\u717d', "SHAN");
+        test('\u717e', "EN");
+        test('\u717f', "BO");
+        test('\u7180', "HUANG");
+        test('\u7181', "XIE");
+        test('\u7182', "XI");
+        test('\u7183', "WU");
+        test('\u7184', "XI");
+        test('\u7185', "YUN");
+        test('\u7186', "HE");
+        test('\u7187', "HE");
+        test('\u7188', "XI");
+        test('\u7189', "YUN");
+        test('\u718a', "XIONG");
+        test('\u718b', "NAI");
+        test('\u718c', "SHAN");
+        test('\u718d', "QIONG");
+        test('\u718e', "YAO");
+        test('\u718f', "XUN");
+        test('\u7190', "MI");
+        test('\u7191', "LIAN");
+        test('\u7192', "YING");
+        test('\u7193', "WU");
+        test('\u7194', "RONG");
+        test('\u7195', "GONG");
+        test('\u7196', "YAN");
+        test('\u7197', "QIANG");
+        test('\u7198', "LIU");
+        test('\u7199', "XI");
+        test('\u719a', "BI");
+        test('\u719b', "BIAO");
+        test('\u719c', "CONG");
+        test('\u719d', "LU");
+        test('\u719e', "JIAN");
+        test('\u719f', "SHU");
+        test('\u71a0', "YI");
+        test('\u71a1', "LOU");
+        test('\u71a2', "PENG");
+        test('\u71a3', "SUI");
+        test('\u71a4', "YI");
+        test('\u71a5', "TENG");
+        test('\u71a6', "JUE");
+        test('\u71a7', "ZONG");
+        test('\u71a8', "YUN");
+        test('\u71a9', "HU");
+        test('\u71aa', "YI");
+        test('\u71ab', "ZHI");
+        test('\u71ac', "AO");
+        test('\u71ad', "WEI");
+        test('\u71ae', "LIU");
+        test('\u71af', "HAN");
+        test('\u71b0', "OU");
+        test('\u71b1', "RE");
+        test('\u71b2', "JIONG");
+        test('\u71b3', "MAN");
+        test('\u71b4', "KUN");
+        test('\u71b5', "SHANG");
+        test('\u71b6', "CUAN");
+        test('\u71b7', "ZENG");
+        test('\u71b8', "JIAN");
+        test('\u71b9', "XI");
+        test('\u71ba', "XI");
+        test('\u71bb', "XI");
+        test('\u71bc', "YI");
+        test('\u71bd', "XIAO");
+        test('\u71be', "CHI");
+        test('\u71bf', "HUANG");
+        test('\u71c0', "CHAN");
+        test('\u71c1', "YE");
+        test('\u71c2', "TAN");
+        test('\u71c3', "RAN");
+        test('\u71c4', "YAN");
+        test('\u71c5', "XIAN");
+        test('\u71c6', "QIAO");
+        test('\u71c7', "JUN");
+        test('\u71c8', "DENG");
+        test('\u71c9', "DUN");
+        test('\u71ca', "SHEN");
+        test('\u71cb', "JIAO");
+        test('\u71cc', "FEN");
+        test('\u71cd', "SI");
+        test('\u71ce', "LIAO");
+        test('\u71cf', "YU");
+        test('\u71d0', "LIN");
+        test('\u71d1', "TONG");
+        test('\u71d2', "SHAO");
+        test('\u71d3', "FEN");
+        test('\u71d4', "FAN");
+        test('\u71d5', "YAN");
+        test('\u71d6', "XUN");
+        test('\u71d7', "LAN");
+        test('\u71d8', "MEI");
+        test('\u71d9', "TANG");
+        test('\u71da', "YI");
+        test('\u71db', "JING");
+        test('\u71dc', "MEN");
+        test('\u71dd', "JING");
+        test('\u71de', "JIAO");
+        test('\u71df', "YING");
+        test('\u71e0', "YU");
+        test('\u71e1', "YI");
+        test('\u71e2', "XUE");
+        test('\u71e3', "LAN");
+        test('\u71e4', "TAI");
+        test('\u71e5', "ZAO");
+        test('\u71e6', "CAN");
+        test('\u71e7', "SUI");
+        test('\u71e8', "XI");
+        test('\u71e9', "QUE");
+        test('\u71ea', "CONG");
+        test('\u71eb', "LIAN");
+        test('\u71ec', "HUI");
+        test('\u71ed', "ZHU");
+        test('\u71ee', "XIE");
+        test('\u71ef', "LING");
+        test('\u71f0', "WEI");
+        test('\u71f1', "YI");
+        test('\u71f2', "XIE");
+        test('\u71f3', "ZHAO");
+        test('\u71f4', "HUI");
+        test('\u71f5', "DA");
+        test('\u71f6', "NONG");
+        test('\u71f7', "LAN");
+        test('\u71f8', "RU");
+        test('\u71f9', "XIAN");
+        test('\u71fa', "KAO");
+        test('\u71fb', "XUN");
+        test('\u71fc', "JIN");
+        test('\u71fd', "CHOU");
+        test('\u71fe', "DAO");
+        test('\u71ff', "YAO");
+    }
+
+    @SmallTest
+    public void test_9() throws Exception {
+        if (!hasChineseTransliterator()) {
+            return;
+        }
+        test('\u7200', "HE");
+        test('\u7201', "LAN");
+        test('\u7202', "BIAO");
+        test('\u7203', "RONG");
+        test('\u7204', "LI");
+        test('\u7205', "MO");
+        test('\u7206', "BAO");
+        test('\u7207', "RUO");
+        test('\u7208', "LU");
+        test('\u7209', "LA");
+        test('\u720a', "AO");
+        test('\u720b', "XUN");
+        test('\u720c', "KUANG");
+        test('\u720d', "SHUO");
+        test('\u720e', "LIAO");
+        test('\u720f', "LI");
+        test('\u7210', "LU");
+        test('\u7211', "JUE");
+        test('\u7212', "LIAO");
+        test('\u7213', "YAN");
+        test('\u7214', "XI");
+        test('\u7215', "XIE");
+        test('\u7216', "LONG");
+        test('\u7217', "YE");
+        test('\u7218', "CAN");
+        test('\u7219', "RANG");
+        test('\u721a', "YUE");
+        test('\u721b', "LAN");
+        test('\u721c', "CONG");
+        test('\u721d', "JUE");
+        test('\u721e', "CHONG");
+        test('\u721f', "GUAN");
+        test('\u7220', "JU");
+        test('\u7221', "CHE");
+        test('\u7222', "MI");
+        test('\u7223', "TANG");
+        test('\u7224', "LAN");
+        test('\u7225', "ZHU");
+        test('\u7226', "LAN");
+        test('\u7227', "LING");
+        test('\u7228', "CUAN");
+        test('\u7229', "YU");
+        test('\u722a', "ZHAO");
+        test('\u722b', "ZHAO");
+        test('\u722c', "PA");
+        test('\u722d', "ZHENG");
+        test('\u722e', "PAO");
+        test('\u722f', "CHENG");
+        test('\u7230', "YUAN");
+        test('\u7231', "AI");
+        test('\u7232', "WEI");
+        test('\u7233', "HAN");
+        test('\u7234', "JUE");
+        test('\u7235', "JUE");
+        test('\u7236', "FU");
+        test('\u7237', "YE");
+        test('\u7238', "BA");
+        test('\u7239', "DIE");
+        test('\u723a', "YE");
+        test('\u723b', "YAO");
+        test('\u723c', "ZU");
+        test('\u723d', "SHUANG");
+        test('\u723e', "ER");
+        test('\u723f', "PAN");
+        test('\u7240', "CHUANG");
+        test('\u7241', "KE");
+        test('\u7242', "ZANG");
+        test('\u7243', "DIE");
+        test('\u7244', "QIANG");
+        test('\u7245', "YONG");
+        test('\u7246', "QIANG");
+        test('\u7247', "PIAN");
+        test('\u7248', "BAN");
+        test('\u7249', "PAN");
+        test('\u724a', "CHAO");
+        test('\u724b', "JIAN");
+        test('\u724c', "PAI");
+        test('\u724d', "DU");
+        test('\u724e', "CHUANG");
+        test('\u724f', "YU");
+        test('\u7250', "ZHA");
+        test('\u7251', "BIAN");
+        test('\u7252', "DIE");
+        test('\u7253', "BANG");
+        test('\u7254', "BO");
+        test('\u7255', "CHUANG");
+        test('\u7256', "YOU");
+        test('\u7257', "YOU");
+        test('\u7258', "DU");
+        test('\u7259', "YA");
+        test('\u725a', "CHENG");
+        test('\u725b', "NIU");
+        test('\u725c', "NIU");
+        test('\u725d', "PIN");
+        test('\u725e', "JIU");
+        test('\u725f', "MOU");
+        test('\u7260', "TA");
+        test('\u7261', "MU");
+        test('\u7262', "LAO");
+        test('\u7263', "REN");
+        test('\u7264', "MANG");
+        test('\u7265', "FANG");
+        test('\u7266', "MAO");
+        test('\u7267', "MU");
+        test('\u7268', "GANG");
+        test('\u7269', "WU");
+        test('\u726a', "YAN");
+        test('\u726b', "GE");
+        test('\u726c', "BEI");
+        test('\u726d', "SI");
+        test('\u726e', "JIAN");
+        test('\u726f', "GU");
+        test('\u7270', "YOU");
+        test('\u7271', "GE");
+        test('\u7272', "SHENG");
+        test('\u7273', "MU");
+        test('\u7274', "DI");
+        test('\u7275', "QIAN");
+        test('\u7276', "QUAN");
+        test('\u7277', "QUAN");
+        test('\u7278', "ZI");
+        test('\u7279', "TE");
+        test('\u727a', "XI");
+        test('\u727b', "MANG");
+        test('\u727c', "KENG");
+        test('\u727d', "QIAN");
+        test('\u727e', "WU");
+        test('\u727f', "GU");
+        test('\u7280', "XI");
+        test('\u7281', "LI");
+        test('\u7282', "LI");
+        test('\u7283', "POU");
+        test('\u7284', "JI");
+        test('\u7285', "GANG");
+        test('\u7286', "ZHI");
+        test('\u7287', "BEN");
+        test('\u7288', "QUAN");
+        test('\u7289', "CHUN");
+        test('\u728a', "DU");
+        test('\u728b', "JU");
+        test('\u728c', "JIA");
+        test('\u728d', "JIAN");
+        test('\u728e', "FENG");
+        test('\u728f', "PIAN");
+        test('\u7290', "KE");
+        test('\u7291', "JU");
+        test('\u7292', "KAO");
+        test('\u7293', "CHU");
+        test('\u7294', "XI");
+        test('\u7295', "BEI");
+        test('\u7296', "LUO");
+        test('\u7297', "JIE");
+        test('\u7298', "MA");
+        test('\u7299', "SAN");
+        test('\u729a', "WEI");
+        test('\u729b', "MAO");
+        test('\u729c', "DUN");
+        test('\u729d', "TONG");
+        test('\u729e', "QIAO");
+        test('\u729f', "JIANG");
+        test('\u72a0', "XI");
+        test('\u72a1', "LI");
+        test('\u72a2', "DU");
+        test('\u72a3', "LIE");
+        test('\u72a4', "PAI");
+        test('\u72a5', "PIAO");
+        test('\u72a6', "BO");
+        test('\u72a7', "XI");
+        test('\u72a8', "CHOU");
+        test('\u72a9', "WEI");
+        test('\u72aa', "KUI");
+        test('\u72ab', "CHOU");
+        test('\u72ac', "QUAN");
+        test('\u72ad', "QUAN");
+        test('\u72ae', "BA");
+        test('\u72af', "FAN");
+        test('\u72b0', "QIU");
+        test('\u72b1', "JI");
+        test('\u72b2', "CAI");
+        test('\u72b3', "ZHUO");
+        test('\u72b4', "AN");
+        test('\u72b5', "GE");
+        test('\u72b6', "ZHUANG");
+        test('\u72b7', "GUANG");
+        test('\u72b8', "MA");
+        test('\u72b9', "YOU");
+        test('\u72ba', "KANG");
+        test('\u72bb', "BO");
+        test('\u72bc', "HOU");
+        test('\u72bd', "YA");
+        test('\u72be', "YIN");
+        test('\u72bf', "HUAN");
+        test('\u72c0', "ZHUANG");
+        test('\u72c1', "YUN");
+        test('\u72c2', "KUANG");
+        test('\u72c3', "NIU");
+        test('\u72c4', "DI");
+        test('\u72c5', "QING");
+        test('\u72c6', "ZHONG");
+        test('\u72c7', "MU");
+        test('\u72c8', "BEI");
+        test('\u72c9', "PI");
+        test('\u72ca', "JU");
+        test('\u72cb', "YI");
+        test('\u72cc', "SHENG");
+        test('\u72cd', "PAO");
+        test('\u72ce', "XIA");
+        test('\u72cf', "TUO");
+        test('\u72d0', "HU");
+        test('\u72d1', "LING");
+        test('\u72d2', "FEI");
+        test('\u72d3', "PI");
+        test('\u72d4', "NI");
+        test('\u72d5', "YAO");
+        test('\u72d6', "YOU");
+        test('\u72d7', "GOU");
+        test('\u72d8', "XUE");
+        test('\u72d9', "JU");
+        test('\u72da', "DAN");
+        test('\u72db', "BO");
+        test('\u72dc', "KU");
+        test('\u72dd', "XIAN");
+        test('\u72de', "NING");
+        test('\u72df', "HUAN");
+        test('\u72e0', "HEN");
+        test('\u72e1', "JIAO");
+        test('\u72e2', "HE");
+        test('\u72e3', "ZHAO");
+        test('\u72e4', "JI");
+        test('\u72e5', "XUN");
+        test('\u72e6', "SHAN");
+        test('\u72e7', "TA");
+        test('\u72e8', "RONG");
+        test('\u72e9', "SHOU");
+        test('\u72ea', "TONG");
+        test('\u72eb', "LAO");
+        test('\u72ec', "DU");
+        test('\u72ed', "XIA");
+        test('\u72ee', "SHI");
+        test('\u72ef', "KUAI");
+        test('\u72f0', "ZHENG");
+        test('\u72f1', "YU");
+        test('\u72f2', "SUN");
+        test('\u72f3', "YU");
+        test('\u72f4', "BI");
+        test('\u72f5', "MANG");
+        test('\u72f6', "XI");
+        test('\u72f7', "JUAN");
+        test('\u72f8', "LI");
+        test('\u72f9', "XIA");
+        test('\u72fa', "YIN");
+        test('\u72fb', "SUAN");
+        test('\u72fc', "LANG");
+        test('\u72fd', "BEI");
+        test('\u72fe', "ZHI");
+        test('\u72ff', "YAN");
+        test('\u7300', "SHA");
+        test('\u7301', "LI");
+        test('\u7302', "HAN");
+        test('\u7303', "XIAN");
+        test('\u7304', "JING");
+        test('\u7305', "PAI");
+        test('\u7306', "FEI");
+        test('\u7307', "XIAO");
+        test('\u7308', "BAI");
+        test('\u7309', "QI");
+        test('\u730a', "NI");
+        test('\u730b', "BIAO");
+        test('\u730c', "YIN");
+        test('\u730d', "LAI");
+        test('\u730e', "LIE");
+        test('\u730f', "JIAN");
+        test('\u7310', "QIANG");
+        test('\u7311', "KUN");
+        test('\u7312', "YAN");
+        test('\u7313', "GUO");
+        test('\u7314', "ZONG");
+        test('\u7315', "MI");
+        test('\u7316', "CHANG");
+        test('\u7317', "YI");
+        test('\u7318', "ZHI");
+        test('\u7319', "ZHENG");
+        test('\u731a', "YA");
+        test('\u731b', "MENG");
+        test('\u731c', "CAI");
+        test('\u731d', "CU");
+        test('\u731e', "SHE");
+        test('\u731f', "LIE");
+        test('\u7320', "DIAN");
+        test('\u7321', "LUO");
+        test('\u7322', "HU");
+        test('\u7323', "ZONG");
+        test('\u7324', "GUI");
+        test('\u7325', "WEI");
+        test('\u7326', "FENG");
+        test('\u7327', "WO");
+        test('\u7328', "YUAN");
+        test('\u7329', "XING");
+        test('\u732a', "ZHU");
+        test('\u732b', "MAO");
+        test('\u732c', "WEI");
+        test('\u732d', "CHUAN");
+        test('\u732e', "XIAN");
+        test('\u732f', "TUAN");
+        test('\u7330', "YA");
+        test('\u7331', "NAO");
+        test('\u7332', "XIE");
+        test('\u7333', "JIA");
+        test('\u7334', "HOU");
+        test('\u7335', "BIAN");
+        test('\u7336', "YOU");
+        test('\u7337', "YOU");
+        test('\u7338', "MEI");
+        test('\u7339', "CHA");
+        test('\u733a', "YAO");
+        test('\u733b', "SUN");
+        test('\u733c', "BO");
+        test('\u733d', "MING");
+        test('\u733e', "HUA");
+        test('\u733f', "YUAN");
+        test('\u7340', "SOU");
+        test('\u7341', "MA");
+        test('\u7342', "YUAN");
+        test('\u7343', "DAI");
+        test('\u7344', "YU");
+        test('\u7345', "SHI");
+        test('\u7346', "HAO");
+        test('\u7347', "QIANG");
+        test('\u7348', "YI");
+        test('\u7349', "ZHEN");
+        test('\u734a', "CANG");
+        test('\u734b', "HAO");
+        test('\u734c', "MAN");
+        test('\u734d', "JING");
+        test('\u734e', "JIANG");
+        test('\u734f', "MO");
+        test('\u7350', "ZHANG");
+        test('\u7351', "CHAN");
+        test('\u7352', "AO");
+        test('\u7353', "AO");
+        test('\u7354', "HAO");
+        test('\u7355', "CUI");
+        test('\u7356', "BEN");
+        test('\u7357', "JUE");
+        test('\u7358', "BI");
+        test('\u7359', "BI");
+        test('\u735a', "HUANG");
+        test('\u735b', "PU");
+        test('\u735c', "LIN");
+        test('\u735d', "XU");
+        test('\u735e', "TONG");
+        test('\u735f', "YAO");
+        test('\u7360', "LIAO");
+        test('\u7361', "SHUO");
+        test('\u7362', "XIAO");
+        test('\u7363', "SHOU");
+        test('\u7364', "DUN");
+        test('\u7365', "JIAO");
+        test('\u7366', "GE");
+        test('\u7367', "JUAN");
+        test('\u7368', "DU");
+        test('\u7369', "HUI");
+        test('\u736a', "KUAI");
+        test('\u736b', "XIAN");
+        test('\u736c', "XIE");
+        test('\u736d', "TA");
+        test('\u736e', "XIAN");
+        test('\u736f', "XUN");
+        test('\u7370', "NING");
+        test('\u7371', "PIN");
+        test('\u7372', "HUO");
+        test('\u7373', "NOU");
+        test('\u7374', "MENG");
+        test('\u7375', "LIE");
+        test('\u7376', "NAO");
+        test('\u7377', "GUANG");
+        test('\u7378', "SHOU");
+        test('\u7379', "LU");
+        test('\u737a', "TA");
+        test('\u737b', "XIAN");
+        test('\u737c', "MI");
+        test('\u737d', "RANG");
+        test('\u737e', "HUAN");
+        test('\u737f', "NAO");
+        test('\u7380', "LUO");
+        test('\u7381', "XIAN");
+        test('\u7382', "QI");
+        test('\u7383', "JUE");
+        test('\u7384', "XUAN");
+        test('\u7385', "MIAO");
+        test('\u7386', "ZI");
+        test('\u7387', "LU");
+        test('\u7388', "LU");
+        test('\u7389', "YU");
+        test('\u738a', "SU");
+        test('\u738b', "WANG");
+        test('\u738c', "QIU");
+        test('\u738d', "GA");
+        test('\u738e', "DING");
+        test('\u738f', "LE");
+        test('\u7390', "BA");
+        test('\u7391', "JI");
+        test('\u7392', "HONG");
+        test('\u7393', "DI");
+        test('\u7394', "CHUAN");
+        test('\u7395', "GAN");
+        test('\u7396', "JIU");
+        test('\u7397', "YU");
+        test('\u7398', "QI");
+        test('\u7399', "YU");
+        test('\u739a', "CHANG");
+        test('\u739b', "MA");
+        test('\u739c', "GONG");
+        test('\u739d', "WU");
+        test('\u739e', "FU");
+        test('\u739f', "WEN");
+        test('\u73a0', "JIE");
+        test('\u73a1', "YA");
+        test('\u73a2', "BIN");
+        test('\u73a3', "BIAN");
+        test('\u73a4', "BANG");
+        test('\u73a5', "YUE");
+        test('\u73a6', "JUE");
+        test('\u73a7', "MEN");
+        test('\u73a8', "JUE");
+        test('\u73a9', "WAN");
+        test('\u73aa', "JIAN");
+        test('\u73ab', "MEI");
+        test('\u73ac', "DAN");
+        test('\u73ad', "PIN");
+        test('\u73ae', "WEI");
+        test('\u73af', "HUAN");
+        test('\u73b0', "XIAN");
+        test('\u73b1', "QIANG");
+        test('\u73b2', "LING");
+        test('\u73b3', "DAI");
+        test('\u73b4', "YI");
+        test('\u73b5', "AN");
+        test('\u73b6', "PING");
+        test('\u73b7', "DIAN");
+        test('\u73b8', "FU");
+        test('\u73b9', "XUAN");
+        test('\u73ba', "XI");
+        test('\u73bb', "BO");
+        test('\u73bc', "CI");
+        test('\u73bd', "GOU");
+        test('\u73be', "JIA");
+        test('\u73bf', "SHAO");
+        test('\u73c0', "PO");
+        test('\u73c1', "CI");
+        test('\u73c2', "KE");
+        test('\u73c3', "RAN");
+        test('\u73c4', "SHENG");
+        test('\u73c5', "SHEN");
+        test('\u73c6', "YI");
+        test('\u73c7', "ZU");
+        test('\u73c8', "JIA");
+        test('\u73c9', "MIN");
+        test('\u73ca', "SHAN");
+        test('\u73cb', "LIU");
+        test('\u73cc', "BI");
+        test('\u73cd', "ZHEN");
+        test('\u73ce', "ZHEN");
+        test('\u73cf', "JUE");
+        test('\u73d0', "FA");
+        test('\u73d1', "LONG");
+        test('\u73d2', "JIN");
+        test('\u73d3', "JIAO");
+        test('\u73d4', "JIAN");
+        test('\u73d5', "LI");
+        test('\u73d6', "GUANG");
+        test('\u73d7', "XIAN");
+        test('\u73d8', "ZHOU");
+        test('\u73d9', "GONG");
+        test('\u73da', "YAN");
+        test('\u73db', "XIU");
+        test('\u73dc', "YANG");
+        test('\u73dd', "XU");
+        test('\u73de', "LUO");
+        test('\u73df', "SU");
+        test('\u73e0', "ZHU");
+        test('\u73e1', "QIN");
+        test('\u73e2', "YIN");
+        test('\u73e3', "XUN");
+        test('\u73e4', "BAO");
+        test('\u73e5', "ER");
+        test('\u73e6', "XIANG");
+        test('\u73e7', "YAO");
+        test('\u73e8', "XIA");
+        test('\u73e9', "HANG");
+        test('\u73ea', "GUI");
+        test('\u73eb', "CHONG");
+        test('\u73ec', "XU");
+        test('\u73ed', "BAN");
+        test('\u73ee', "PEI");
+        test('\u73ef', "LAO");
+        test('\u73f0', "DANG");
+        test('\u73f1', "YING");
+        test('\u73f2', "HUI");
+        test('\u73f3', "WEN");
+        test('\u73f4', "E");
+        test('\u73f5', "CHENG");
+        test('\u73f6', "DI");
+        test('\u73f7', "WU");
+        test('\u73f8', "WU");
+        test('\u73f9', "CHENG");
+        test('\u73fa', "JUN");
+        test('\u73fb', "MEI");
+        test('\u73fc', "BEI");
+        test('\u73fd', "TING");
+        test('\u73fe', "XIAN");
+        test('\u73ff', "CHU");
+        test('\u7400', "HAN");
+        test('\u7401', "XUAN");
+        test('\u7402', "YAN");
+        test('\u7403', "QIU");
+        test('\u7404', "XUAN");
+        test('\u7405', "LANG");
+        test('\u7406', "LI");
+        test('\u7407', "XIU");
+        test('\u7408', "FU");
+        test('\u7409', "LIU");
+        test('\u740a', "YA");
+        test('\u740b', "XI");
+        test('\u740c', "LING");
+        test('\u740d', "LI");
+        test('\u740e', "JIN");
+        test('\u740f', "LIAN");
+        test('\u7410', "SUO");
+        test('\u7411', "SUO");
+        test('\u7412', "FENG");
+        test('\u7413', "WAN");
+        test('\u7414', "DIAN");
+        test('\u7415', "PIN");
+        test('\u7416', "ZHAN");
+        test('\u7417', "SE");
+        test('\u7418', "MIN");
+        test('\u7419', "YU");
+        test('\u741a', "JU");
+        test('\u741b', "CHEN");
+        test('\u741c', "LAI");
+        test('\u741d', "WEN");
+        test('\u741e', "SHENG");
+        test('\u741f', "WEI");
+        test('\u7420', "TIAN");
+        test('\u7421', "CHU");
+        test('\u7422', "ZUO");
+        test('\u7423', "BENG");
+        test('\u7424', "CHENG");
+        test('\u7425', "HU");
+        test('\u7426', "QI");
+        test('\u7427', "E");
+        test('\u7428', "KUN");
+        test('\u7429', "CHANG");
+        test('\u742a', "QI");
+        test('\u742b', "BENG");
+        test('\u742c', "WAN");
+        test('\u742d', "LU");
+        test('\u742e', "CONG");
+        test('\u742f', "GUAN");
+        test('\u7430', "YAN");
+        test('\u7431', "DIAO");
+        test('\u7432', "BEI");
+        test('\u7433', "LIN");
+        test('\u7434', "QIN");
+        test('\u7435', "PI");
+        test('\u7436', "PA");
+        test('\u7437', "QUE");
+        test('\u7438', "ZHUO");
+        test('\u7439', "QIN");
+        test('\u743a', "FA");
+        test('\u743b', "JIN");
+        test('\u743c', "QIONG");
+        test('\u743d', "DU");
+        test('\u743e', "JIE");
+        test('\u743f', "HUN");
+        test('\u7440', "YU");
+        test('\u7441', "MAO");
+        test('\u7442', "MEI");
+        test('\u7443', "CHUN");
+        test('\u7444', "XUAN");
+        test('\u7445', "TI");
+        test('\u7446', "XING");
+        test('\u7447', "DAI");
+        test('\u7448', "ROU");
+        test('\u7449', "MIN");
+        test('\u744a', "JIAN");
+        test('\u744b', "WEI");
+        test('\u744c', "RUAN");
+        test('\u744d', "HUAN");
+        test('\u744e', "XIE");
+        test('\u744f', "CHUAN");
+        test('\u7450', "JIAN");
+        test('\u7451', "ZHUAN");
+        test('\u7452', "CHANG");
+        test('\u7453', "LIAN");
+        test('\u7454', "QUAN");
+        test('\u7455', "XIA");
+        test('\u7456', "DUAN");
+        test('\u7457', "YUAN");
+        test('\u7458', "YA");
+        test('\u7459', "NAO");
+        test('\u745a', "HU");
+        test('\u745b', "YING");
+        test('\u745c', "YU");
+        test('\u745d', "HUANG");
+        test('\u745e', "RUI");
+        test('\u745f', "SE");
+        test('\u7460', "LIU");
+        test('\u7461', "SHI");
+        test('\u7462', "RONG");
+        test('\u7463', "SUO");
+        test('\u7464', "YAO");
+        test('\u7465', "WEN");
+        test('\u7466', "WU");
+        test('\u7467', "ZHEN");
+        test('\u7468', "JIN");
+        test('\u7469', "YING");
+        test('\u746a', "MA");
+        test('\u746b', "TAO");
+        test('\u746c', "LIU");
+        test('\u746d', "TANG");
+        test('\u746e', "LI");
+        test('\u746f', "LANG");
+        test('\u7470', "GUI");
+        test('\u7471', "ZHEN");
+        test('\u7472', "QIANG");
+        test('\u7473', "CUO");
+        test('\u7474', "JUE");
+        test('\u7475', "ZHAO");
+        test('\u7476', "YAO");
+        test('\u7477', "AI");
+        test('\u7478', "BIN");
+        test('\u7479', "SHU");
+        test('\u747a', "CHANG");
+        test('\u747b', "KUN");
+        test('\u747c', "ZHUAN");
+        test('\u747d', "CONG");
+        test('\u747e', "JIN");
+        test('\u747f', "YI");
+        test('\u7480', "CUI");
+        test('\u7481', "CONG");
+        test('\u7482', "QI");
+        test('\u7483', "LI");
+        test('\u7484', "YING");
+        test('\u7485', "SUO");
+        test('\u7486', "QIU");
+        test('\u7487', "XUAN");
+        test('\u7488', "AO");
+        test('\u7489', "LIAN");
+        test('\u748a', "MEN");
+        test('\u748b', "ZHANG");
+        test('\u748c', "YIN");
+        test('\u748d', "HUA");
+        test('\u748e', "YING");
+        test('\u748f', "WEI");
+        test('\u7490', "LU");
+        test('\u7491', "WU");
+        test('\u7492', "DENG");
+        test('\u7493', "XIU");
+        test('\u7494', "ZENG");
+        test('\u7495', "XUN");
+        test('\u7496', "QU");
+        test('\u7497', "DANG");
+        test('\u7498', "LIN");
+        test('\u7499', "LIAO");
+        test('\u749a', "QIONG");
+        test('\u749b', "SU");
+        test('\u749c', "HUANG");
+        test('\u749d', "GUI");
+        test('\u749e', "PU");
+        test('\u749f', "JING");
+        test('\u74a0', "FAN");
+        test('\u74a1', "JIN");
+        test('\u74a2', "LIU");
+        test('\u74a3', "JI");
+        test('\u74a4', "HUI");
+        test('\u74a5', "JING");
+        test('\u74a6', "AI");
+        test('\u74a7', "BI");
+        test('\u74a8', "CAN");
+        test('\u74a9', "QU");
+        test('\u74aa', "ZAO");
+        test('\u74ab', "DANG");
+        test('\u74ac', "JIAO");
+        test('\u74ad', "GUN");
+        test('\u74ae', "TAN");
+        test('\u74af', "HUI");
+        test('\u74b0', "HUAN");
+        test('\u74b1', "SE");
+        test('\u74b2', "SUI");
+        test('\u74b3', "TIAN");
+        test('\u74b4', "CHU");
+        test('\u74b5', "YU");
+        test('\u74b6', "JIN");
+        test('\u74b7', "LU");
+        test('\u74b8', "BIN");
+        test('\u74b9', "SHU");
+        test('\u74ba', "WEN");
+        test('\u74bb', "ZUI");
+        test('\u74bc', "LAN");
+        test('\u74bd', "XI");
+        test('\u74be', "ZI");
+        test('\u74bf', "XUAN");
+        test('\u74c0', "RUAN");
+        test('\u74c1', "WO");
+        test('\u74c2', "GAI");
+        test('\u74c3', "LEI");
+        test('\u74c4', "DU");
+        test('\u74c5', "LI");
+        test('\u74c6', "ZHI");
+        test('\u74c7', "ROU");
+        test('\u74c8', "LI");
+        test('\u74c9', "ZAN");
+        test('\u74ca', "QIONG");
+        test('\u74cb', "TI");
+        test('\u74cc', "GUI");
+        test('\u74cd', "SUI");
+        test('\u74ce', "LA");
+        test('\u74cf', "LONG");
+        test('\u74d0', "LU");
+        test('\u74d1', "LI");
+        test('\u74d2', "ZAN");
+        test('\u74d3', "LAN");
+        test('\u74d4', "YING");
+        test('\u74d5', "MI");
+        test('\u74d6', "XIANG");
+        test('\u74d7', "QIONG");
+        test('\u74d8', "GUAN");
+        test('\u74d9', "DAO");
+        test('\u74da', "ZAN");
+        test('\u74db', "HUAN");
+        test('\u74dc', "GUA");
+        test('\u74dd', "BO");
+        test('\u74de', "DIE");
+        test('\u74df', "BO");
+        test('\u74e0', "HU");
+        test('\u74e1', "ZHI");
+        test('\u74e2', "PIAO");
+        test('\u74e3', "BAN");
+        test('\u74e4', "RANG");
+        test('\u74e5', "LI");
+        test('\u74e6', "WA");
+        test('\u74e7', "");
+        test('\u74e8', "XIANG");
+        test('\u74e9', "QIAN");
+        test('\u74ea', "BAN");
+        test('\u74eb', "PEN");
+        test('\u74ec', "FANG");
+        test('\u74ed', "DAN");
+        test('\u74ee', "WENG");
+        test('\u74ef', "OU");
+        test('\u74f0', "");
+        test('\u74f1', "");
+        test('\u74f2', "WA");
+        test('\u74f3', "HU");
+        test('\u74f4', "LING");
+        test('\u74f5', "YI");
+        test('\u74f6', "PING");
+        test('\u74f7', "CI");
+        test('\u74f8', "BAI");
+        test('\u74f9', "JUAN");
+        test('\u74fa', "CHANG");
+        test('\u74fb', "CHI");
+        test('\u74fc', "");
+        test('\u74fd', "DANG");
+        test('\u74fe', "MENG");
+        test('\u74ff', "BU");
+        test('\u7500', "ZHUI");
+        test('\u7501', "PING");
+        test('\u7502', "BIAN");
+        test('\u7503', "ZHOU");
+        test('\u7504', "ZHEN");
+        test('\u7505', "");
+        test('\u7506', "CI");
+        test('\u7507', "YING");
+        test('\u7508', "QI");
+        test('\u7509', "XIAN");
+        test('\u750a', "LOU");
+        test('\u750b', "DI");
+        test('\u750c', "OU");
+        test('\u750d', "MENG");
+        test('\u750e', "ZHUAN");
+        test('\u750f', "BENG");
+        test('\u7510', "LIN");
+        test('\u7511', "ZENG");
+        test('\u7512', "WU");
+        test('\u7513', "PI");
+        test('\u7514', "DAN");
+        test('\u7515', "WENG");
+        test('\u7516', "YING");
+        test('\u7517', "YAN");
+        test('\u7518', "GAN");
+        test('\u7519', "DAI");
+        test('\u751a', "SHEN");
+        test('\u751b', "TIAN");
+        test('\u751c', "TIAN");
+        test('\u751d', "HAN");
+        test('\u751e', "CHANG");
+        test('\u751f', "SHENG");
+        test('\u7520', "QING");
+        test('\u7521', "SHEN");
+        test('\u7522', "CHAN");
+        test('\u7523', "CHAN");
+        test('\u7524', "RUI");
+        test('\u7525', "SHENG");
+        test('\u7526', "SU");
+        test('\u7527', "SHEN");
+        test('\u7528', "YONG");
+        test('\u7529', "SHUAI");
+        test('\u752a', "LU");
+        test('\u752b', "FU");
+        test('\u752c', "YONG");
+        test('\u752d', "BENG");
+        test('\u752e', "FENG");
+        test('\u752f', "NING");
+        test('\u7530', "TIAN");
+        test('\u7531', "YOU");
+        test('\u7532', "JIA");
+        test('\u7533', "SHEN");
+        test('\u7534', "ZHA");
+        test('\u7535', "DIAN");
+        test('\u7536', "FU");
+        test('\u7537', "NAN");
+        test('\u7538', "DIAN");
+        test('\u7539', "PING");
+        test('\u753a', "TING");
+        test('\u753b', "HUA");
+        test('\u753c', "TING");
+        test('\u753d', "ZHEN");
+        test('\u753e', "ZAI");
+        test('\u753f', "MENG");
+        test('\u7540', "BI");
+        test('\u7541', "QI");
+        test('\u7542', "LIU");
+        test('\u7543', "XUN");
+        test('\u7544', "LIU");
+        test('\u7545', "CHANG");
+        test('\u7546', "MU");
+        test('\u7547', "YUN");
+        test('\u7548', "FAN");
+        test('\u7549', "FU");
+        test('\u754a', "GENG");
+        test('\u754b', "TIAN");
+        test('\u754c', "JIE");
+        test('\u754d', "JIE");
+        test('\u754e', "QUAN");
+        test('\u754f', "WEI");
+        test('\u7550', "FU");
+        test('\u7551', "TIAN");
+        test('\u7552', "MU");
+        test('\u7553', "DUO");
+        test('\u7554', "PAN");
+        test('\u7555', "JIANG");
+        test('\u7556', "WA");
+        test('\u7557', "DA");
+        test('\u7558', "NAN");
+        test('\u7559', "LIU");
+        test('\u755a', "BEN");
+        test('\u755b', "ZHEN");
+        test('\u755c', "CHU");
+        test('\u755d', "MU");
+        test('\u755e', "MU");
+        test('\u755f', "CE");
+        test('\u7560', "TIAN");
+        test('\u7561', "GAI");
+        test('\u7562', "BI");
+        test('\u7563', "DA");
+        test('\u7564', "ZHI");
+        test('\u7565', "LUE");
+        test('\u7566', "QI");
+        test('\u7567', "LUE");
+        test('\u7568', "PAN");
+        test('\u7569', "YI");
+        test('\u756a', "FAN");
+        test('\u756b', "HUA");
+        test('\u756c', "SHE");
+        test('\u756d', "YU");
+        test('\u756e', "MU");
+        test('\u756f', "JUN");
+        test('\u7570', "YI");
+        test('\u7571', "LIU");
+        test('\u7572', "SHE");
+        test('\u7573', "DIE");
+        test('\u7574', "CHOU");
+        test('\u7575', "HUA");
+        test('\u7576', "DANG");
+        test('\u7577', "ZHUI");
+        test('\u7578', "JI");
+        test('\u7579', "WAN");
+        test('\u757a', "JIANG");
+        test('\u757b', "CHENG");
+        test('\u757c', "CHANG");
+        test('\u757d', "TUN");
+        test('\u757e', "LEI");
+        test('\u757f', "JI");
+        test('\u7580', "CHA");
+        test('\u7581', "LIU");
+        test('\u7582', "DIE");
+        test('\u7583', "TUAN");
+        test('\u7584', "LIN");
+        test('\u7585', "JIANG");
+        test('\u7586', "JIANG");
+        test('\u7587', "CHOU");
+        test('\u7588', "PI");
+        test('\u7589', "DIE");
+        test('\u758a', "DIE");
+        test('\u758b', "PI");
+        test('\u758c', "JIE");
+        test('\u758d', "DAN");
+        test('\u758e', "SHU");
+        test('\u758f', "SHU");
+        test('\u7590', "ZHI");
+        test('\u7591', "YI");
+        test('\u7592', "NE");
+        test('\u7593', "NAI");
+        test('\u7594', "DING");
+        test('\u7595', "BI");
+        test('\u7596', "JIE");
+        test('\u7597', "LIAO");
+        test('\u7598', "GANG");
+        test('\u7599', "GE");
+        test('\u759a', "JIU");
+        test('\u759b', "ZHOU");
+        test('\u759c', "XIA");
+        test('\u759d', "SHAN");
+        test('\u759e', "XU");
+        test('\u759f', "NUE");
+        test('\u75a0', "LI");
+        test('\u75a1', "YANG");
+        test('\u75a2', "CHEN");
+        test('\u75a3', "YOU");
+        test('\u75a4', "BA");
+        test('\u75a5', "JIE");
+        test('\u75a6', "JUE");
+        test('\u75a7', "QI");
+        test('\u75a8', "XIA");
+        test('\u75a9', "CUI");
+        test('\u75aa', "BI");
+        test('\u75ab', "YI");
+        test('\u75ac', "LI");
+        test('\u75ad', "ZONG");
+        test('\u75ae', "CHUANG");
+        test('\u75af', "FENG");
+        test('\u75b0', "ZHU");
+        test('\u75b1', "PAO");
+        test('\u75b2', "PI");
+        test('\u75b3', "GAN");
+        test('\u75b4', "KE");
+        test('\u75b5', "CI");
+        test('\u75b6', "XUE");
+        test('\u75b7', "ZHI");
+        test('\u75b8', "DAN");
+        test('\u75b9', "ZHEN");
+        test('\u75ba', "FA");
+        test('\u75bb', "ZHI");
+        test('\u75bc', "TENG");
+        test('\u75bd', "JU");
+        test('\u75be', "JI");
+        test('\u75bf', "FEI");
+        test('\u75c0', "JU");
+        test('\u75c1', "SHAN");
+        test('\u75c2', "JIA");
+        test('\u75c3', "XUAN");
+        test('\u75c4', "ZHA");
+        test('\u75c5', "BING");
+        test('\u75c6', "NIE");
+        test('\u75c7', "ZHENG");
+        test('\u75c8', "YONG");
+        test('\u75c9', "JING");
+        test('\u75ca', "QUAN");
+        test('\u75cb', "TENG");
+        test('\u75cc', "TONG");
+        test('\u75cd', "YI");
+        test('\u75ce', "JIE");
+        test('\u75cf', "WEI");
+        test('\u75d0', "HUI");
+        test('\u75d1', "TAN");
+        test('\u75d2', "YANG");
+        test('\u75d3', "CHI");
+        test('\u75d4', "ZHI");
+        test('\u75d5', "HEN");
+        test('\u75d6', "YA");
+        test('\u75d7', "MEI");
+        test('\u75d8', "DOU");
+        test('\u75d9', "JING");
+        test('\u75da', "XIAO");
+        test('\u75db', "TONG");
+        test('\u75dc', "TU");
+        test('\u75dd', "MANG");
+        test('\u75de', "PI");
+        test('\u75df', "XIAO");
+        test('\u75e0', "SUAN");
+        test('\u75e1', "FU");
+        test('\u75e2', "LI");
+        test('\u75e3', "ZHI");
+        test('\u75e4', "CUO");
+        test('\u75e5', "DUO");
+        test('\u75e6', "WU");
+        test('\u75e7', "SHA");
+        test('\u75e8', "LAO");
+        test('\u75e9', "SHOU");
+        test('\u75ea', "HUAN");
+        test('\u75eb', "XIAN");
+        test('\u75ec', "YI");
+        test('\u75ed', "BENG");
+        test('\u75ee', "ZHANG");
+        test('\u75ef', "GUAN");
+        test('\u75f0', "TAN");
+        test('\u75f1', "FEI");
+        test('\u75f2', "MA");
+        test('\u75f3', "LIN");
+        test('\u75f4', "CHI");
+        test('\u75f5', "JI");
+        test('\u75f6', "TIAN");
+        test('\u75f7', "AN");
+        test('\u75f8', "CHI");
+        test('\u75f9', "BI");
+        test('\u75fa', "BI");
+        test('\u75fb', "MIN");
+        test('\u75fc', "GU");
+        test('\u75fd', "DUI");
+        test('\u75fe', "E");
+        test('\u75ff', "WEI");
+    }
+
+    @SmallTest
+    public void test_10() throws Exception {
+        if (!hasChineseTransliterator()) {
+            return;
+        }
+        test('\u7600', "YU");
+        test('\u7601', "CUI");
+        test('\u7602', "YA");
+        test('\u7603', "ZHU");
+        test('\u7604', "CU");
+        test('\u7605', "DAN");
+        test('\u7606', "SHEN");
+        test('\u7607', "ZHONG");
+        test('\u7608', "CHI");
+        test('\u7609', "YU");
+        test('\u760a', "HOU");
+        test('\u760b', "FENG");
+        test('\u760c', "LA");
+        test('\u760d', "YANG");
+        test('\u760e', "CHEN");
+        test('\u760f', "TU");
+        test('\u7610', "YU");
+        test('\u7611', "GUO");
+        test('\u7612', "WEN");
+        test('\u7613', "HUAN");
+        test('\u7614', "KU");
+        test('\u7615', "JIA");
+        test('\u7616', "YIN");
+        test('\u7617', "YI");
+        test('\u7618', "LOU");
+        test('\u7619', "SAO");
+        test('\u761a', "JUE");
+        test('\u761b', "CHI");
+        test('\u761c', "XI");
+        test('\u761d', "GUAN");
+        test('\u761e', "YI");
+        test('\u761f', "WEN");
+        test('\u7620', "JI");
+        test('\u7621', "CHUANG");
+        test('\u7622', "BAN");
+        test('\u7623', "HUI");
+        test('\u7624', "LIU");
+        test('\u7625', "CHAI");
+        test('\u7626', "SHOU");
+        test('\u7627', "NUE");
+        test('\u7628', "DIAN");
+        test('\u7629', "DA");
+        test('\u762a', "BIE");
+        test('\u762b', "TAN");
+        test('\u762c', "ZHANG");
+        test('\u762d', "BIAO");
+        test('\u762e', "SHEN");
+        test('\u762f', "CU");
+        test('\u7630', "LUO");
+        test('\u7631', "YI");
+        test('\u7632', "ZONG");
+        test('\u7633', "CHOU");
+        test('\u7634', "ZHANG");
+        test('\u7635', "ZHAI");
+        test('\u7636', "SOU");
+        test('\u7637', "SE");
+        test('\u7638', "QUE");
+        test('\u7639', "DIAO");
+        test('\u763a', "LOU");
+        test('\u763b', "LOU");
+        test('\u763c', "MO");
+        test('\u763d', "QIN");
+        test('\u763e', "YIN");
+        test('\u763f', "YING");
+        test('\u7640', "HUANG");
+        test('\u7641', "FU");
+        test('\u7642', "LIAO");
+        test('\u7643', "LONG");
+        test('\u7644', "QIAO");
+        test('\u7645', "LIU");
+        test('\u7646', "LAO");
+        test('\u7647', "XIAN");
+        test('\u7648', "FEI");
+        test('\u7649', "DAN");
+        test('\u764a', "YIN");
+        test('\u764b', "HE");
+        test('\u764c', "AI");
+        test('\u764d', "BAN");
+        test('\u764e', "XIAN");
+        test('\u764f', "GUAN");
+        test('\u7650', "GUI");
+        test('\u7651', "NONG");
+        test('\u7652', "YU");
+        test('\u7653', "WEI");
+        test('\u7654', "YI");
+        test('\u7655', "YONG");
+        test('\u7656', "PI");
+        test('\u7657', "LEI");
+        test('\u7658', "LI");
+        test('\u7659', "SHU");
+        test('\u765a', "DAN");
+        test('\u765b', "LIN");
+        test('\u765c', "DIAN");
+        test('\u765d', "LIN");
+        test('\u765e', "LAI");
+        test('\u765f', "BIE");
+        test('\u7660', "JI");
+        test('\u7661', "CHI");
+        test('\u7662', "YANG");
+        test('\u7663', "XUAN");
+        test('\u7664', "JIE");
+        test('\u7665', "ZHENG");
+        test('\u7666', "ME");
+        test('\u7667', "LI");
+        test('\u7668', "HUO");
+        test('\u7669', "LAI");
+        test('\u766a', "JI");
+        test('\u766b', "DIAN");
+        test('\u766c', "XUAN");
+        test('\u766d', "YING");
+        test('\u766e', "YIN");
+        test('\u766f', "QU");
+        test('\u7670', "YONG");
+        test('\u7671', "TAN");
+        test('\u7672', "DIAN");
+        test('\u7673', "LUO");
+        test('\u7674', "LUAN");
+        test('\u7675', "LUAN");
+        test('\u7676', "BO");
+        test('\u7677', "BO");
+        test('\u7678', "GUI");
+        test('\u7679', "BA");
+        test('\u767a', "FA");
+        test('\u767b', "DENG");
+        test('\u767c', "FA");
+        test('\u767d', "BAI");
+        test('\u767e', "BAI");
+        test('\u767f', "QIE");
+        test('\u7680', "JI");
+        test('\u7681', "ZAO");
+        test('\u7682', "ZAO");
+        test('\u7683', "MAO");
+        test('\u7684', "DE");
+        test('\u7685', "PA");
+        test('\u7686', "JIE");
+        test('\u7687', "HUANG");
+        test('\u7688', "GUI");
+        test('\u7689', "CI");
+        test('\u768a', "LING");
+        test('\u768b', "GAO");
+        test('\u768c', "MO");
+        test('\u768d', "JI");
+        test('\u768e', "JIAO");
+        test('\u768f', "PENG");
+        test('\u7690', "GAO");
+        test('\u7691', "AI");
+        test('\u7692', "E");
+        test('\u7693', "HAO");
+        test('\u7694', "HAN");
+        test('\u7695', "BI");
+        test('\u7696', "WAN");
+        test('\u7697', "CHOU");
+        test('\u7698', "QIAN");
+        test('\u7699', "XI");
+        test('\u769a', "AI");
+        test('\u769b', "XIAO");
+        test('\u769c', "HAO");
+        test('\u769d', "HUANG");
+        test('\u769e', "HAO");
+        test('\u769f', "ZE");
+        test('\u76a0', "CUI");
+        test('\u76a1', "HAO");
+        test('\u76a2', "XIAO");
+        test('\u76a3', "YE");
+        test('\u76a4', "PO");
+        test('\u76a5', "HAO");
+        test('\u76a6', "JIAO");
+        test('\u76a7', "AI");
+        test('\u76a8', "XING");
+        test('\u76a9', "HUANG");
+        test('\u76aa', "LI");
+        test('\u76ab', "PIAO");
+        test('\u76ac', "HE");
+        test('\u76ad', "JIAO");
+        test('\u76ae', "PI");
+        test('\u76af', "GAN");
+        test('\u76b0', "PAO");
+        test('\u76b1', "ZHOU");
+        test('\u76b2', "JUN");
+        test('\u76b3', "QIU");
+        test('\u76b4', "CUN");
+        test('\u76b5', "QUE");
+        test('\u76b6', "ZHA");
+        test('\u76b7', "GU");
+        test('\u76b8', "JUN");
+        test('\u76b9', "JUN");
+        test('\u76ba', "ZHOU");
+        test('\u76bb', "ZHA");
+        test('\u76bc', "GU");
+        test('\u76bd', "ZHAO");
+        test('\u76be', "DU");
+        test('\u76bf', "MIN");
+        test('\u76c0', "QI");
+        test('\u76c1', "YING");
+        test('\u76c2', "YU");
+        test('\u76c3', "BEI");
+        test('\u76c4', "ZHAO");
+        test('\u76c5', "ZHONG");
+        test('\u76c6', "PEN");
+        test('\u76c7', "HE");
+        test('\u76c8', "YING");
+        test('\u76c9', "HE");
+        test('\u76ca', "YI");
+        test('\u76cb', "BO");
+        test('\u76cc', "WAN");
+        test('\u76cd', "HE");
+        test('\u76ce', "ANG");
+        test('\u76cf', "ZHAN");
+        test('\u76d0', "YAN");
+        test('\u76d1', "JIAN");
+        test('\u76d2', "HE");
+        test('\u76d3', "YU");
+        test('\u76d4', "KUI");
+        test('\u76d5', "FAN");
+        test('\u76d6', "GAI");
+        test('\u76d7', "DAO");
+        test('\u76d8', "PAN");
+        test('\u76d9', "FU");
+        test('\u76da', "QIU");
+        test('\u76db', "SHENG");
+        test('\u76dc', "DAO");
+        test('\u76dd', "LU");
+        test('\u76de', "ZHAN");
+        test('\u76df', "MENG");
+        test('\u76e0', "LI");
+        test('\u76e1', "JIN");
+        test('\u76e2', "XU");
+        test('\u76e3', "JIAN");
+        test('\u76e4', "PAN");
+        test('\u76e5', "GUAN");
+        test('\u76e6', "AN");
+        test('\u76e7', "LU");
+        test('\u76e8', "XU");
+        test('\u76e9', "ZHOU");
+        test('\u76ea', "DANG");
+        test('\u76eb', "AN");
+        test('\u76ec', "GU");
+        test('\u76ed', "LI");
+        test('\u76ee', "MU");
+        test('\u76ef', "DING");
+        test('\u76f0', "GAN");
+        test('\u76f1', "XU");
+        test('\u76f2', "MANG");
+        test('\u76f3', "WANG");
+        test('\u76f4', "ZHI");
+        test('\u76f5', "QI");
+        test('\u76f6', "YUAN");
+        test('\u76f7', "TIAN");
+        test('\u76f8', "XIANG");
+        test('\u76f9', "DUN");
+        test('\u76fa', "XIN");
+        test('\u76fb', "XI");
+        test('\u76fc', "PAN");
+        test('\u76fd', "FENG");
+        test('\u76fe', "DUN");
+        test('\u76ff', "MIN");
+        test('\u7700', "MING");
+        test('\u7701', "SHENG");
+        test('\u7702', "SHI");
+        test('\u7703', "YUN");
+        test('\u7704', "MIAN");
+        test('\u7705', "PAN");
+        test('\u7706', "FANG");
+        test('\u7707', "MIAO");
+        test('\u7708', "DAN");
+        test('\u7709', "MEI");
+        test('\u770a', "MAO");
+        test('\u770b', "KAN");
+        test('\u770c', "XIAN");
+        test('\u770d', "KOU");
+        test('\u770e', "SHI");
+        test('\u770f', "YANG");
+        test('\u7710', "ZHENG");
+        test('\u7711', "YAO");
+        test('\u7712', "SHEN");
+        test('\u7713', "HUO");
+        test('\u7714', "DA");
+        test('\u7715', "ZHEN");
+        test('\u7716', "KUANG");
+        test('\u7717', "JU");
+        test('\u7718', "SHEN");
+        test('\u7719', "YI");
+        test('\u771a', "SHENG");
+        test('\u771b', "MEI");
+        test('\u771c', "MO");
+        test('\u771d', "ZHU");
+        test('\u771e', "ZHEN");
+        test('\u771f', "ZHEN");
+        test('\u7720', "MIAN");
+        test('\u7721', "SHI");
+        test('\u7722', "YUAN");
+        test('\u7723', "DIE");
+        test('\u7724', "NI");
+        test('\u7725', "ZI");
+        test('\u7726', "ZI");
+        test('\u7727', "CHAO");
+        test('\u7728', "ZHA");
+        test('\u7729', "XUAN");
+        test('\u772a', "BING");
+        test('\u772b', "MI");
+        test('\u772c', "LONG");
+        test('\u772d', "SUI");
+        test('\u772e', "TONG");
+        test('\u772f', "MI");
+        test('\u7730', "DIE");
+        test('\u7731', "DI");
+        test('\u7732', "NE");
+        test('\u7733', "MING");
+        test('\u7734', "XUAN");
+        test('\u7735', "CHI");
+        test('\u7736', "KUANG");
+        test('\u7737', "JUAN");
+        test('\u7738', "MOU");
+        test('\u7739', "ZHEN");
+        test('\u773a', "TIAO");
+        test('\u773b', "YANG");
+        test('\u773c', "YAN");
+        test('\u773d', "MO");
+        test('\u773e', "ZHONG");
+        test('\u773f', "MO");
+        test('\u7740', "ZHE");
+        test('\u7741', "ZHENG");
+        test('\u7742', "MEI");
+        test('\u7743', "SUO");
+        test('\u7744', "SHAO");
+        test('\u7745', "HAN");
+        test('\u7746', "HUAN");
+        test('\u7747', "DI");
+        test('\u7748', "CHENG");
+        test('\u7749', "CUO");
+        test('\u774a', "JUAN");
+        test('\u774b', "E");
+        test('\u774c', "MAN");
+        test('\u774d', "XIAN");
+        test('\u774e', "XI");
+        test('\u774f', "KUN");
+        test('\u7750', "LAI");
+        test('\u7751', "JIAN");
+        test('\u7752', "SHAN");
+        test('\u7753', "TIAN");
+        test('\u7754', "GUN");
+        test('\u7755', "WAN");
+        test('\u7756', "LENG");
+        test('\u7757', "SHI");
+        test('\u7758', "QIONG");
+        test('\u7759', "LIE");
+        test('\u775a', "YA");
+        test('\u775b', "JING");
+        test('\u775c', "ZHENG");
+        test('\u775d', "LI");
+        test('\u775e', "LAI");
+        test('\u775f', "SUI");
+        test('\u7760', "JUAN");
+        test('\u7761', "SHUI");
+        test('\u7762', "SUI");
+        test('\u7763', "DU");
+        test('\u7764', "BI");
+        test('\u7765', "PI");
+        test('\u7766', "MU");
+        test('\u7767', "HUN");
+        test('\u7768', "NI");
+        test('\u7769', "LU");
+        test('\u776a', "YI");
+        test('\u776b', "JIE");
+        test('\u776c', "CAI");
+        test('\u776d', "ZHOU");
+        test('\u776e', "YU");
+        test('\u776f', "HUN");
+        test('\u7770', "MA");
+        test('\u7771', "XIA");
+        test('\u7772', "XING");
+        test('\u7773', "HUI");
+        test('\u7774', "GUN");
+        test('\u7775', "ZAI");
+        test('\u7776', "CHUN");
+        test('\u7777', "JIAN");
+        test('\u7778', "MEI");
+        test('\u7779', "DU");
+        test('\u777a', "HOU");
+        test('\u777b', "XUAN");
+        test('\u777c', "TIAN");
+        test('\u777d', "KUI");
+        test('\u777e', "GAO");
+        test('\u777f', "RUI");
+        test('\u7780', "MAO");
+        test('\u7781', "XU");
+        test('\u7782', "FA");
+        test('\u7783', "WO");
+        test('\u7784', "MIAO");
+        test('\u7785', "CHOU");
+        test('\u7786', "KUI");
+        test('\u7787', "MI");
+        test('\u7788', "WENG");
+        test('\u7789', "KOU");
+        test('\u778a', "DANG");
+        test('\u778b', "CHEN");
+        test('\u778c', "KE");
+        test('\u778d', "SOU");
+        test('\u778e', "XIA");
+        test('\u778f', "QIONG");
+        test('\u7790', "MO");
+        test('\u7791', "MING");
+        test('\u7792', "MAN");
+        test('\u7793', "SHUI");
+        test('\u7794', "ZE");
+        test('\u7795', "ZHANG");
+        test('\u7796', "YI");
+        test('\u7797', "DIAO");
+        test('\u7798', "KOU");
+        test('\u7799', "MO");
+        test('\u779a', "SHUN");
+        test('\u779b', "CONG");
+        test('\u779c', "LOU");
+        test('\u779d', "CHI");
+        test('\u779e', "MAN");
+        test('\u779f', "PIAO");
+        test('\u77a0', "CHENG");
+        test('\u77a1', "GUI");
+        test('\u77a2', "MENG");
+        test('\u77a3', "HUAN");
+        test('\u77a4', "RUN");
+        test('\u77a5', "PIE");
+        test('\u77a6', "XI");
+        test('\u77a7', "QIAO");
+        test('\u77a8', "PU");
+        test('\u77a9', "ZHU");
+        test('\u77aa', "DENG");
+        test('\u77ab', "SHEN");
+        test('\u77ac', "SHUN");
+        test('\u77ad', "LIAO");
+        test('\u77ae', "CHE");
+        test('\u77af', "XIAN");
+        test('\u77b0', "KAN");
+        test('\u77b1', "YE");
+        test('\u77b2', "XU");
+        test('\u77b3', "TONG");
+        test('\u77b4', "MOU");
+        test('\u77b5', "LIN");
+        test('\u77b6', "GUI");
+        test('\u77b7', "JIAN");
+        test('\u77b8', "YE");
+        test('\u77b9', "AI");
+        test('\u77ba', "HUI");
+        test('\u77bb', "ZHAN");
+        test('\u77bc', "JIAN");
+        test('\u77bd', "GU");
+        test('\u77be', "ZHAO");
+        test('\u77bf', "QU");
+        test('\u77c0', "MEI");
+        test('\u77c1', "CHOU");
+        test('\u77c2', "SAO");
+        test('\u77c3', "NING");
+        test('\u77c4', "XUN");
+        test('\u77c5', "YAO");
+        test('\u77c6', "HUO");
+        test('\u77c7', "MENG");
+        test('\u77c8', "MIAN");
+        test('\u77c9', "PIN");
+        test('\u77ca', "MIAN");
+        test('\u77cb', "LI");
+        test('\u77cc', "KUANG");
+        test('\u77cd', "JUE");
+        test('\u77ce', "XUAN");
+        test('\u77cf', "MIAN");
+        test('\u77d0', "HUO");
+        test('\u77d1', "LU");
+        test('\u77d2', "MENG");
+        test('\u77d3', "LONG");
+        test('\u77d4', "GUAN");
+        test('\u77d5', "MAN");
+        test('\u77d6', "XI");
+        test('\u77d7', "CHU");
+        test('\u77d8', "TANG");
+        test('\u77d9', "KAN");
+        test('\u77da', "ZHU");
+        test('\u77db', "MAO");
+        test('\u77dc', "JIN");
+        test('\u77dd', "LIN");
+        test('\u77de', "YU");
+        test('\u77df', "SHUO");
+        test('\u77e0', "ZE");
+        test('\u77e1', "JUE");
+        test('\u77e2', "SHI");
+        test('\u77e3', "YI");
+        test('\u77e4', "SHEN");
+        test('\u77e5', "ZHI");
+        test('\u77e6', "HOU");
+        test('\u77e7', "SHEN");
+        test('\u77e8', "YING");
+        test('\u77e9', "JU");
+        test('\u77ea', "ZHOU");
+        test('\u77eb', "JIAO");
+        test('\u77ec', "CUO");
+        test('\u77ed', "DUAN");
+        test('\u77ee', "AI");
+        test('\u77ef', "JIAO");
+        test('\u77f0', "ZENG");
+        test('\u77f1', "YUE");
+        test('\u77f2', "BA");
+        test('\u77f3', "SHI");
+        test('\u77f4', "DING");
+        test('\u77f5', "QI");
+        test('\u77f6', "JI");
+        test('\u77f7', "ZI");
+        test('\u77f8', "GAN");
+        test('\u77f9', "WU");
+        test('\u77fa', "ZHE");
+        test('\u77fb', "KU");
+        test('\u77fc', "GANG");
+        test('\u77fd', "XI");
+        test('\u77fe', "FAN");
+        test('\u77ff', "KUANG");
+        test('\u7800', "DANG");
+        test('\u7801', "MA");
+        test('\u7802', "SHA");
+        test('\u7803', "DAN");
+        test('\u7804', "JUE");
+        test('\u7805', "LI");
+        test('\u7806', "FU");
+        test('\u7807', "MIN");
+        test('\u7808', "E");
+        test('\u7809', "HUO");
+        test('\u780a', "KANG");
+        test('\u780b', "ZHI");
+        test('\u780c', "QI");
+        test('\u780d', "KAN");
+        test('\u780e', "JIE");
+        test('\u780f', "BIN");
+        test('\u7810', "E");
+        test('\u7811', "YA");
+        test('\u7812', "PI");
+        test('\u7813', "ZHE");
+        test('\u7814', "YAN");
+        test('\u7815', "SUI");
+        test('\u7816', "ZHUAN");
+        test('\u7817', "CHE");
+        test('\u7818', "DUN");
+        test('\u7819', "PAN");
+        test('\u781a', "YAN");
+        test('\u781b', "JIN");
+        test('\u781c', "FENG");
+        test('\u781d', "FA");
+        test('\u781e', "MO");
+        test('\u781f', "ZHA");
+        test('\u7820', "JU");
+        test('\u7821', "YU");
+        test('\u7822', "KE");
+        test('\u7823', "TUO");
+        test('\u7824', "TUO");
+        test('\u7825', "DI");
+        test('\u7826', "ZHAI");
+        test('\u7827', "ZHEN");
+        test('\u7828', "E");
+        test('\u7829', "FU");
+        test('\u782a', "MU");
+        test('\u782b', "ZHU");
+        test('\u782c', "LA");
+        test('\u782d', "BIAN");
+        test('\u782e', "NU");
+        test('\u782f', "PING");
+        test('\u7830', "PENG");
+        test('\u7831', "LING");
+        test('\u7832', "PAO");
+        test('\u7833', "LE");
+        test('\u7834', "PO");
+        test('\u7835', "BO");
+        test('\u7836', "PO");
+        test('\u7837', "SHEN");
+        test('\u7838', "ZA");
+        test('\u7839', "AI");
+        test('\u783a', "LI");
+        test('\u783b', "LONG");
+        test('\u783c', "TONG");
+        test('\u783d', "YONG");
+        test('\u783e', "LI");
+        test('\u783f', "KUANG");
+        test('\u7840', "CHU");
+        test('\u7841', "KENG");
+        test('\u7842', "QUAN");
+        test('\u7843', "ZHU");
+        test('\u7844', "KUANG");
+        test('\u7845', "GUI");
+        test('\u7846', "E");
+        test('\u7847', "NAO");
+        test('\u7848', "QIA");
+        test('\u7849', "LU");
+        test('\u784a', "WEI");
+        test('\u784b', "AI");
+        test('\u784c', "GE");
+        test('\u784d', "XIAN");
+        test('\u784e', "XING");
+        test('\u784f', "YAN");
+        test('\u7850', "DONG");
+        test('\u7851', "PENG");
+        test('\u7852', "XI");
+        test('\u7853', "LAO");
+        test('\u7854', "HONG");
+        test('\u7855', "SHUO");
+        test('\u7856', "XIA");
+        test('\u7857', "QIAO");
+        test('\u7858', "QING");
+        test('\u7859', "WEI");
+        test('\u785a', "QIAO");
+        test('\u785b', "YI");
+        test('\u785c', "KENG");
+        test('\u785d', "XIAO");
+        test('\u785e', "QUE");
+        test('\u785f', "CHAN");
+        test('\u7860', "LANG");
+        test('\u7861', "HONG");
+        test('\u7862', "YU");
+        test('\u7863', "XIAO");
+        test('\u7864', "XIA");
+        test('\u7865', "MANG");
+        test('\u7866', "LUO");
+        test('\u7867', "YONG");
+        test('\u7868', "CHE");
+        test('\u7869', "CHE");
+        test('\u786a', "WO");
+        test('\u786b', "LIU");
+        test('\u786c', "YING");
+        test('\u786d', "MANG");
+        test('\u786e', "QUE");
+        test('\u786f', "YAN");
+        test('\u7870', "SHA");
+        test('\u7871', "KUN");
+        test('\u7872', "YU");
+        test('\u7873', "CHI");
+        test('\u7874', "HUA");
+        test('\u7875', "LU");
+        test('\u7876', "CHEN");
+        test('\u7877', "JIAN");
+        test('\u7878', "NUE");
+        test('\u7879', "SONG");
+        test('\u787a', "ZHUO");
+        test('\u787b', "KENG");
+        test('\u787c', "PENG");
+        test('\u787d', "YAN");
+        test('\u787e', "ZHUI");
+        test('\u787f', "KONG");
+        test('\u7880', "CHENG");
+        test('\u7881', "QI");
+        test('\u7882', "ZONG");
+        test('\u7883', "QING");
+        test('\u7884', "LIN");
+        test('\u7885', "JUN");
+        test('\u7886', "BO");
+        test('\u7887', "DING");
+        test('\u7888', "MIN");
+        test('\u7889', "DIAO");
+        test('\u788a', "JIAN");
+        test('\u788b', "HE");
+        test('\u788c', "LU");
+        test('\u788d', "AI");
+        test('\u788e', "SUI");
+        test('\u788f', "QUE");
+        test('\u7890', "LENG");
+        test('\u7891', "BEI");
+        test('\u7892', "YIN");
+        test('\u7893', "DUI");
+        test('\u7894', "WU");
+        test('\u7895', "QI");
+        test('\u7896', "LUN");
+        test('\u7897', "WAN");
+        test('\u7898', "DIAN");
+        test('\u7899', "NAO");
+        test('\u789a', "BEI");
+        test('\u789b', "QI");
+        test('\u789c', "CHEN");
+        test('\u789d', "RUAN");
+        test('\u789e', "YAN");
+        test('\u789f', "DIE");
+        test('\u78a0', "DING");
+        test('\u78a1', "DU");
+        test('\u78a2', "TUO");
+        test('\u78a3', "JIE");
+        test('\u78a4', "YING");
+        test('\u78a5', "BIAN");
+        test('\u78a6', "KE");
+        test('\u78a7', "BI");
+        test('\u78a8', "WEI");
+        test('\u78a9', "SHUO");
+        test('\u78aa', "ZHEN");
+        test('\u78ab', "DUAN");
+        test('\u78ac', "XIA");
+        test('\u78ad', "DANG");
+        test('\u78ae', "TI");
+        test('\u78af', "NAO");
+        test('\u78b0', "PENG");
+        test('\u78b1', "JIAN");
+        test('\u78b2', "DI");
+        test('\u78b3', "TAN");
+        test('\u78b4', "CHA");
+        test('\u78b5', "TIAN");
+        test('\u78b6', "QI");
+        test('\u78b7', "DUN");
+        test('\u78b8', "FENG");
+        test('\u78b9', "XUAN");
+        test('\u78ba', "QUE");
+        test('\u78bb', "QUE");
+        test('\u78bc', "MA");
+        test('\u78bd', "GONG");
+        test('\u78be', "NIAN");
+        test('\u78bf', "SU");
+        test('\u78c0', "E");
+        test('\u78c1', "CI");
+        test('\u78c2', "LIU");
+        test('\u78c3', "SI");
+        test('\u78c4', "TANG");
+        test('\u78c5', "BANG");
+        test('\u78c6', "HUA");
+        test('\u78c7', "PI");
+        test('\u78c8', "WEI");
+        test('\u78c9', "SANG");
+        test('\u78ca', "LEI");
+        test('\u78cb', "CUO");
+        test('\u78cc', "TIAN");
+        test('\u78cd', "XIA");
+        test('\u78ce', "XI");
+        test('\u78cf', "LIAN");
+        test('\u78d0', "PAN");
+        test('\u78d1', "WEI");
+        test('\u78d2', "YUN");
+        test('\u78d3', "DUI");
+        test('\u78d4', "ZHE");
+        test('\u78d5', "KE");
+        test('\u78d6', "LA");
+        test('\u78d7', "ZHUAN");
+        test('\u78d8', "QING");
+        test('\u78d9', "GUN");
+        test('\u78da', "ZHUAN");
+        test('\u78db', "CHAN");
+        test('\u78dc', "QI");
+        test('\u78dd', "AO");
+        test('\u78de', "PENG");
+        test('\u78df', "LIU");
+        test('\u78e0', "LU");
+        test('\u78e1', "KAN");
+        test('\u78e2', "CHUANG");
+        test('\u78e3', "CHEN");
+        test('\u78e4', "YIN");
+        test('\u78e5', "LEI");
+        test('\u78e6', "BIAO");
+        test('\u78e7', "QI");
+        test('\u78e8', "MO");
+        test('\u78e9', "QI");
+        test('\u78ea', "CUI");
+        test('\u78eb', "ZONG");
+        test('\u78ec', "QING");
+        test('\u78ed', "CHUO");
+        test('\u78ee', "LUN");
+        test('\u78ef', "JI");
+        test('\u78f0', "SHAN");
+        test('\u78f1', "LAO");
+        test('\u78f2', "QU");
+        test('\u78f3', "ZENG");
+        test('\u78f4', "DENG");
+        test('\u78f5', "JIAN");
+        test('\u78f6', "XI");
+        test('\u78f7', "LIN");
+        test('\u78f8', "DING");
+        test('\u78f9', "TAN");
+        test('\u78fa', "HUANG");
+        test('\u78fb', "PAN");
+        test('\u78fc', "ZA");
+        test('\u78fd', "QIAO");
+        test('\u78fe', "DI");
+        test('\u78ff', "LI");
+        test('\u7900', "JIAN");
+        test('\u7901', "JIAO");
+        test('\u7902', "XI");
+        test('\u7903', "ZHANG");
+        test('\u7904', "QIAO");
+        test('\u7905', "DUN");
+        test('\u7906', "JIAN");
+        test('\u7907', "YU");
+        test('\u7908', "ZHUI");
+        test('\u7909', "HE");
+        test('\u790a', "KE");
+        test('\u790b', "ZE");
+        test('\u790c', "LEI");
+        test('\u790d', "KE");
+        test('\u790e', "CHU");
+        test('\u790f', "YE");
+        test('\u7910', "QUE");
+        test('\u7911', "DANG");
+        test('\u7912', "YI");
+        test('\u7913', "JIANG");
+        test('\u7914', "PI");
+        test('\u7915', "PI");
+        test('\u7916', "YU");
+        test('\u7917', "PIN");
+        test('\u7918', "E");
+        test('\u7919', "AI");
+        test('\u791a', "KE");
+        test('\u791b', "JIAN");
+        test('\u791c', "YU");
+        test('\u791d', "RUAN");
+        test('\u791e', "MENG");
+        test('\u791f', "PAO");
+        test('\u7920', "CI");
+        test('\u7921', "BO");
+        test('\u7922', "YANG");
+        test('\u7923', "MA");
+        test('\u7924', "CA");
+        test('\u7925', "XIAN");
+        test('\u7926', "KUANG");
+        test('\u7927', "LEI");
+        test('\u7928', "LEI");
+        test('\u7929', "ZHI");
+        test('\u792a', "LI");
+        test('\u792b', "LI");
+        test('\u792c', "FAN");
+        test('\u792d', "QUE");
+        test('\u792e', "PAO");
+        test('\u792f', "YING");
+        test('\u7930', "LI");
+        test('\u7931', "LONG");
+        test('\u7932', "LONG");
+        test('\u7933', "MO");
+        test('\u7934', "BO");
+        test('\u7935', "SHUANG");
+        test('\u7936', "GUAN");
+        test('\u7937', "LAN");
+        test('\u7938', "ZAN");
+        test('\u7939', "YAN");
+        test('\u793a', "SHI");
+        test('\u793b', "SHI");
+        test('\u793c', "LI");
+        test('\u793d', "RENG");
+        test('\u793e', "SHE");
+        test('\u793f', "YUE");
+        test('\u7940', "SI");
+        test('\u7941', "QI");
+        test('\u7942', "TA");
+        test('\u7943', "MA");
+        test('\u7944', "XIE");
+        test('\u7945', "YAO");
+        test('\u7946', "XIAN");
+        test('\u7947', "QI");
+        test('\u7948', "QI");
+        test('\u7949', "ZHI");
+        test('\u794a', "BENG");
+        test('\u794b', "DUI");
+        test('\u794c', "ZHONG");
+        test('\u794d', "REN");
+        test('\u794e', "YI");
+        test('\u794f', "SHI");
+        test('\u7950', "YOU");
+        test('\u7951', "ZHI");
+        test('\u7952', "TIAO");
+        test('\u7953', "FU");
+        test('\u7954', "FU");
+        test('\u7955', "MI");
+        test('\u7956', "ZU");
+        test('\u7957', "ZHI");
+        test('\u7958', "SUAN");
+        test('\u7959', "MEI");
+        test('\u795a', "ZUO");
+        test('\u795b', "QU");
+        test('\u795c', "HU");
+        test('\u795d', "ZHU");
+        test('\u795e', "SHEN");
+        test('\u795f', "SUI");
+        test('\u7960', "CI");
+        test('\u7961', "CHAI");
+        test('\u7962', "MI");
+        test('\u7963', "LU");
+        test('\u7964', "YU");
+        test('\u7965', "XIANG");
+        test('\u7966', "WU");
+        test('\u7967', "TIAO");
+        test('\u7968', "PIAO");
+        test('\u7969', "ZHU");
+        test('\u796a', "GUI");
+        test('\u796b', "XIA");
+        test('\u796c', "ZHI");
+        test('\u796d', "JI");
+        test('\u796e', "GAO");
+        test('\u796f', "ZHEN");
+        test('\u7970', "GAO");
+        test('\u7971', "SHUI");
+        test('\u7972', "JIN");
+        test('\u7973', "SHEN");
+        test('\u7974', "GAI");
+        test('\u7975', "KUN");
+        test('\u7976', "DI");
+        test('\u7977', "DAO");
+        test('\u7978', "HUO");
+        test('\u7979', "TAO");
+        test('\u797a', "QI");
+        test('\u797b', "GU");
+        test('\u797c', "GUAN");
+        test('\u797d', "ZUI");
+        test('\u797e', "LING");
+        test('\u797f', "LU");
+        test('\u7980', "BING");
+        test('\u7981', "JIN");
+        test('\u7982', "DAO");
+        test('\u7983', "ZHI");
+        test('\u7984', "LU");
+        test('\u7985', "CHAN");
+        test('\u7986', "BEI");
+        test('\u7987', "ZHE");
+        test('\u7988', "HUI");
+        test('\u7989', "YOU");
+        test('\u798a', "XI");
+        test('\u798b', "YIN");
+        test('\u798c', "ZI");
+        test('\u798d', "HUO");
+        test('\u798e', "ZHEN");
+        test('\u798f', "FU");
+        test('\u7990', "YUAN");
+        test('\u7991', "WU");
+        test('\u7992', "XIAN");
+        test('\u7993', "YANG");
+        test('\u7994', "ZHI");
+        test('\u7995', "YI");
+        test('\u7996', "MEI");
+        test('\u7997', "SI");
+        test('\u7998', "DI");
+        test('\u7999', "BEI");
+        test('\u799a', "ZHUO");
+        test('\u799b', "ZHEN");
+        test('\u799c', "YONG");
+        test('\u799d', "JI");
+        test('\u799e', "GAO");
+        test('\u799f', "TANG");
+        test('\u79a0', "SI");
+        test('\u79a1', "MA");
+        test('\u79a2', "TA");
+        test('\u79a3', "FU");
+        test('\u79a4', "XUAN");
+        test('\u79a5', "QI");
+        test('\u79a6', "YU");
+        test('\u79a7', "XI");
+        test('\u79a8', "JI");
+        test('\u79a9', "SI");
+        test('\u79aa', "CHAN");
+        test('\u79ab', "DAN");
+        test('\u79ac', "GUI");
+        test('\u79ad', "SUI");
+        test('\u79ae', "LI");
+        test('\u79af', "NONG");
+        test('\u79b0', "MI");
+        test('\u79b1', "DAO");
+        test('\u79b2', "LI");
+        test('\u79b3', "RANG");
+        test('\u79b4', "YUE");
+        test('\u79b5', "TI");
+        test('\u79b6', "ZAN");
+        test('\u79b7', "LEI");
+        test('\u79b8', "ROU");
+        test('\u79b9', "YU");
+        test('\u79ba', "YU");
+        test('\u79bb', "LI");
+        test('\u79bc', "XIE");
+        test('\u79bd', "QIN");
+        test('\u79be', "HE");
+        test('\u79bf', "TU");
+        test('\u79c0', "XIU");
+        test('\u79c1', "SI");
+        test('\u79c2', "REN");
+        test('\u79c3', "TU");
+        test('\u79c4', "ZI");
+        test('\u79c5', "CHA");
+        test('\u79c6', "GAN");
+        test('\u79c7', "YI");
+        test('\u79c8', "XIAN");
+        test('\u79c9', "BING");
+        test('\u79ca', "NIAN");
+        test('\u79cb', "QIU");
+        test('\u79cc', "QIU");
+        test('\u79cd', "ZHONG");
+        test('\u79ce', "FEN");
+        test('\u79cf', "HAO");
+        test('\u79d0', "YUN");
+        test('\u79d1', "KE");
+        test('\u79d2', "MIAO");
+        test('\u79d3', "ZHI");
+        test('\u79d4', "JING");
+        test('\u79d5', "BI");
+        test('\u79d6', "ZHI");
+        test('\u79d7', "YU");
+        test('\u79d8', "MI");
+        test('\u79d9', "KU");
+        test('\u79da', "BAN");
+        test('\u79db', "PI");
+        test('\u79dc', "NI");
+        test('\u79dd', "LI");
+        test('\u79de', "YOU");
+        test('\u79df', "ZU");
+        test('\u79e0', "PI");
+        test('\u79e1', "BO");
+        test('\u79e2', "LING");
+        test('\u79e3', "MO");
+        test('\u79e4', "CHENG");
+        test('\u79e5', "NIAN");
+        test('\u79e6', "QIN");
+        test('\u79e7', "YANG");
+        test('\u79e8', "ZUO");
+        test('\u79e9', "ZHI");
+        test('\u79ea', "ZHI");
+        test('\u79eb', "SHU");
+        test('\u79ec', "JU");
+        test('\u79ed', "ZI");
+        test('\u79ee', "HUO");
+        test('\u79ef', "JI");
+        test('\u79f0', "CHENG");
+        test('\u79f1', "TONG");
+        test('\u79f2', "ZHI");
+        test('\u79f3', "HUO");
+        test('\u79f4', "HE");
+        test('\u79f5', "YIN");
+        test('\u79f6', "ZI");
+        test('\u79f7', "ZHI");
+        test('\u79f8', "JIE");
+        test('\u79f9', "REN");
+        test('\u79fa', "DU");
+        test('\u79fb', "YI");
+        test('\u79fc', "ZHU");
+        test('\u79fd', "HUI");
+        test('\u79fe', "NONG");
+        test('\u79ff', "FU");
+    }
+
+    @SmallTest
+    public void test_11() throws Exception {
+        if (!hasChineseTransliterator()) {
+            return;
+        }
+        test('\u7a00', "XI");
+        test('\u7a01', "KAO");
+        test('\u7a02', "LANG");
+        test('\u7a03', "FU");
+        test('\u7a04', "XUN");
+        test('\u7a05', "SHUI");
+        test('\u7a06', "LU");
+        test('\u7a07', "KUN");
+        test('\u7a08', "GAN");
+        test('\u7a09', "JING");
+        test('\u7a0a', "TI");
+        test('\u7a0b', "CHENG");
+        test('\u7a0c', "TU");
+        test('\u7a0d', "SHAO");
+        test('\u7a0e', "SHUI");
+        test('\u7a0f', "YA");
+        test('\u7a10', "LUN");
+        test('\u7a11', "LU");
+        test('\u7a12', "GU");
+        test('\u7a13', "ZUO");
+        test('\u7a14', "REN");
+        test('\u7a15', "ZHUN");
+        test('\u7a16', "BANG");
+        test('\u7a17', "BAI");
+        test('\u7a18', "JI");
+        test('\u7a19', "ZHI");
+        test('\u7a1a', "ZHI");
+        test('\u7a1b', "KUN");
+        test('\u7a1c', "LENG");
+        test('\u7a1d', "PENG");
+        test('\u7a1e', "KE");
+        test('\u7a1f', "BING");
+        test('\u7a20', "CHOU");
+        test('\u7a21', "ZUI");
+        test('\u7a22', "YU");
+        test('\u7a23', "SU");
+        test('\u7a24', "LUE");
+        test('\u7a25', "XIANG");
+        test('\u7a26', "YI");
+        test('\u7a27', "XI");
+        test('\u7a28', "BIAN");
+        test('\u7a29', "JI");
+        test('\u7a2a', "FU");
+        test('\u7a2b', "PI");
+        test('\u7a2c', "NUO");
+        test('\u7a2d', "JIE");
+        test('\u7a2e', "ZHONG");
+        test('\u7a2f', "ZONG");
+        test('\u7a30', "XU");
+        test('\u7a31', "CHENG");
+        test('\u7a32', "DAO");
+        test('\u7a33', "WEN");
+        test('\u7a34', "XIAN");
+        test('\u7a35', "ZI");
+        test('\u7a36', "YU");
+        test('\u7a37', "JI");
+        test('\u7a38', "XU");
+        test('\u7a39', "ZHEN");
+        test('\u7a3a', "ZHI");
+        test('\u7a3b', "DAO");
+        test('\u7a3c', "JIA");
+        test('\u7a3d', "JI");
+        test('\u7a3e', "GAO");
+        test('\u7a3f', "GAO");
+        test('\u7a40', "GU");
+        test('\u7a41', "RONG");
+        test('\u7a42', "SUI");
+        test('\u7a43', "RONG");
+        test('\u7a44', "JI");
+        test('\u7a45', "KANG");
+        test('\u7a46', "MU");
+        test('\u7a47', "CAN");
+        test('\u7a48', "MEI");
+        test('\u7a49', "ZHI");
+        test('\u7a4a', "JI");
+        test('\u7a4b', "LU");
+        test('\u7a4c', "SU");
+        test('\u7a4d', "JI");
+        test('\u7a4e', "YING");
+        test('\u7a4f', "WEN");
+        test('\u7a50', "QIU");
+        test('\u7a51', "SE");
+        test('\u7a52', "HE");
+        test('\u7a53', "YI");
+        test('\u7a54', "HUANG");
+        test('\u7a55', "QIE");
+        test('\u7a56', "JI");
+        test('\u7a57', "SUI");
+        test('\u7a58', "XIAO");
+        test('\u7a59', "PU");
+        test('\u7a5a', "JIAO");
+        test('\u7a5b', "ZHUO");
+        test('\u7a5c', "ZHONG");
+        test('\u7a5d', "ZUI");
+        test('\u7a5e', "LU");
+        test('\u7a5f', "SUI");
+        test('\u7a60', "NONG");
+        test('\u7a61', "SE");
+        test('\u7a62', "HUI");
+        test('\u7a63', "RANG");
+        test('\u7a64', "NUO");
+        test('\u7a65', "YU");
+        test('\u7a66', "PIN");
+        test('\u7a67', "JI");
+        test('\u7a68', "TUI");
+        test('\u7a69', "WEN");
+        test('\u7a6a', "CHENG");
+        test('\u7a6b', "HUO");
+        test('\u7a6c', "KUANG");
+        test('\u7a6d', "LU");
+        test('\u7a6e', "BIAO");
+        test('\u7a6f', "SE");
+        test('\u7a70', "RANG");
+        test('\u7a71', "ZHUO");
+        test('\u7a72', "LI");
+        test('\u7a73', "CUAN");
+        test('\u7a74', "XUE");
+        test('\u7a75', "WA");
+        test('\u7a76', "JIU");
+        test('\u7a77', "QIONG");
+        test('\u7a78', "XI");
+        test('\u7a79', "QIONG");
+        test('\u7a7a', "KONG");
+        test('\u7a7b', "YU");
+        test('\u7a7c', "SHEN");
+        test('\u7a7d', "JING");
+        test('\u7a7e', "YAO");
+        test('\u7a7f', "CHUAN");
+        test('\u7a80', "ZHUN");
+        test('\u7a81', "TU");
+        test('\u7a82', "LAO");
+        test('\u7a83', "QIE");
+        test('\u7a84', "ZHAI");
+        test('\u7a85', "YAO");
+        test('\u7a86', "BIAN");
+        test('\u7a87', "BAO");
+        test('\u7a88', "YAO");
+        test('\u7a89', "BING");
+        test('\u7a8a', "WA");
+        test('\u7a8b', "ZHU");
+        test('\u7a8c', "JIAO");
+        test('\u7a8d', "QIAO");
+        test('\u7a8e', "DIAO");
+        test('\u7a8f', "WU");
+        test('\u7a90', "GUI");
+        test('\u7a91', "YAO");
+        test('\u7a92', "ZHI");
+        test('\u7a93', "CHUANG");
+        test('\u7a94', "YAO");
+        test('\u7a95', "TIAO");
+        test('\u7a96', "JIAO");
+        test('\u7a97', "CHUANG");
+        test('\u7a98', "JIONG");
+        test('\u7a99', "XIAO");
+        test('\u7a9a', "CHENG");
+        test('\u7a9b', "KOU");
+        test('\u7a9c', "CUAN");
+        test('\u7a9d', "WO");
+        test('\u7a9e', "DAN");
+        test('\u7a9f', "KU");
+        test('\u7aa0', "KE");
+        test('\u7aa1', "ZHUO");
+        test('\u7aa2', "XU");
+        test('\u7aa3', "SU");
+        test('\u7aa4', "GUAN");
+        test('\u7aa5', "KUI");
+        test('\u7aa6', "DOU");
+        test('\u7aa7', "ZHUO");
+        test('\u7aa8', "XUN");
+        test('\u7aa9', "WO");
+        test('\u7aaa', "WA");
+        test('\u7aab', "YA");
+        test('\u7aac', "YU");
+        test('\u7aad', "JU");
+        test('\u7aae', "QIONG");
+        test('\u7aaf', "YAO");
+        test('\u7ab0', "YAO");
+        test('\u7ab1', "TIAO");
+        test('\u7ab2', "CHAO");
+        test('\u7ab3', "YU");
+        test('\u7ab4', "TIAN");
+        test('\u7ab5', "DIAO");
+        test('\u7ab6', "JU");
+        test('\u7ab7', "LIAO");
+        test('\u7ab8', "XI");
+        test('\u7ab9', "WU");
+        test('\u7aba', "KUI");
+        test('\u7abb', "CHUANG");
+        test('\u7abc', "ZHAO");
+        test('\u7abd', "KUAN");
+        test('\u7abe', "KUAN");
+        test('\u7abf', "LONG");
+        test('\u7ac0', "CHENG");
+        test('\u7ac1', "CUI");
+        test('\u7ac2', "PIAO");
+        test('\u7ac3', "ZAO");
+        test('\u7ac4', "CUAN");
+        test('\u7ac5', "QIAO");
+        test('\u7ac6', "QIONG");
+        test('\u7ac7', "DOU");
+        test('\u7ac8', "ZAO");
+        test('\u7ac9', "LONG");
+        test('\u7aca', "QIE");
+        test('\u7acb', "LI");
+        test('\u7acc', "CHU");
+        test('\u7acd', "SHI");
+        test('\u7ace', "FU");
+        test('\u7acf', "QIAN");
+        test('\u7ad0', "CHU");
+        test('\u7ad1', "HONG");
+        test('\u7ad2', "QI");
+        test('\u7ad3', "HAO");
+        test('\u7ad4', "SHENG");
+        test('\u7ad5', "FEN");
+        test('\u7ad6', "SHU");
+        test('\u7ad7', "MIAO");
+        test('\u7ad8', "QU");
+        test('\u7ad9', "ZHAN");
+        test('\u7ada', "ZHU");
+        test('\u7adb', "LING");
+        test('\u7adc', "LONG");
+        test('\u7add', "BING");
+        test('\u7ade', "JING");
+        test('\u7adf', "JING");
+        test('\u7ae0', "ZHANG");
+        test('\u7ae1', "BAI");
+        test('\u7ae2', "SI");
+        test('\u7ae3', "JUN");
+        test('\u7ae4', "HONG");
+        test('\u7ae5', "TONG");
+        test('\u7ae6', "SONG");
+        test('\u7ae7', "JING");
+        test('\u7ae8', "DIAO");
+        test('\u7ae9', "YI");
+        test('\u7aea', "SHU");
+        test('\u7aeb', "JING");
+        test('\u7aec', "QU");
+        test('\u7aed', "JIE");
+        test('\u7aee', "PING");
+        test('\u7aef', "DUAN");
+        test('\u7af0', "SHAO");
+        test('\u7af1', "ZHUAN");
+        test('\u7af2', "CENG");
+        test('\u7af3', "DENG");
+        test('\u7af4', "CUN");
+        test('\u7af5', "WAI");
+        test('\u7af6', "JING");
+        test('\u7af7', "KAN");
+        test('\u7af8', "JING");
+        test('\u7af9', "ZHU");
+        test('\u7afa', "ZHU");
+        test('\u7afb', "LE");
+        test('\u7afc', "PENG");
+        test('\u7afd', "YU");
+        test('\u7afe', "CHI");
+        test('\u7aff', "GAN");
+        test('\u7b00', "MANG");
+        test('\u7b01', "ZHU");
+        test('\u7b02', "WAN");
+        test('\u7b03', "DU");
+        test('\u7b04', "JI");
+        test('\u7b05', "XIAO");
+        test('\u7b06', "BA");
+        test('\u7b07', "SUAN");
+        test('\u7b08', "JI");
+        test('\u7b09', "QIN");
+        test('\u7b0a', "ZHAO");
+        test('\u7b0b', "SUN");
+        test('\u7b0c', "YA");
+        test('\u7b0d', "ZHUI");
+        test('\u7b0e', "YUAN");
+        test('\u7b0f', "HU");
+        test('\u7b10', "HANG");
+        test('\u7b11', "XIAO");
+        test('\u7b12', "CEN");
+        test('\u7b13', "BI");
+        test('\u7b14', "BI");
+        test('\u7b15', "JIAN");
+        test('\u7b16', "YI");
+        test('\u7b17', "DONG");
+        test('\u7b18', "SHAN");
+        test('\u7b19', "SHENG");
+        test('\u7b1a', "DA");
+        test('\u7b1b', "DI");
+        test('\u7b1c', "ZHU");
+        test('\u7b1d', "NA");
+        test('\u7b1e', "CHI");
+        test('\u7b1f', "GU");
+        test('\u7b20', "LI");
+        test('\u7b21', "QIE");
+        test('\u7b22', "MIN");
+        test('\u7b23', "BAO");
+        test('\u7b24', "TIAO");
+        test('\u7b25', "SI");
+        test('\u7b26', "FU");
+        test('\u7b27', "CE");
+        test('\u7b28', "BEN");
+        test('\u7b29', "PEI");
+        test('\u7b2a', "DA");
+        test('\u7b2b', "ZI");
+        test('\u7b2c', "DI");
+        test('\u7b2d', "LING");
+        test('\u7b2e', "ZE");
+        test('\u7b2f', "NU");
+        test('\u7b30', "FU");
+        test('\u7b31', "GOU");
+        test('\u7b32', "FAN");
+        test('\u7b33', "JIA");
+        test('\u7b34', "GAN");
+        test('\u7b35', "FAN");
+        test('\u7b36', "SHI");
+        test('\u7b37', "MAO");
+        test('\u7b38', "PO");
+        test('\u7b39', "TI");
+        test('\u7b3a', "JIAN");
+        test('\u7b3b', "QIONG");
+        test('\u7b3c', "LONG");
+        test('\u7b3d', "MIN");
+        test('\u7b3e', "BIAN");
+        test('\u7b3f', "LUO");
+        test('\u7b40', "GUI");
+        test('\u7b41', "QU");
+        test('\u7b42', "CHI");
+        test('\u7b43', "YIN");
+        test('\u7b44', "YAO");
+        test('\u7b45', "XIAN");
+        test('\u7b46', "BI");
+        test('\u7b47', "QIONG");
+        test('\u7b48', "KUO");
+        test('\u7b49', "DENG");
+        test('\u7b4a', "XIAO");
+        test('\u7b4b', "JIN");
+        test('\u7b4c', "QUAN");
+        test('\u7b4d', "SUN");
+        test('\u7b4e', "RU");
+        test('\u7b4f', "FA");
+        test('\u7b50', "KUANG");
+        test('\u7b51', "ZHU");
+        test('\u7b52', "TONG");
+        test('\u7b53', "JI");
+        test('\u7b54', "DA");
+        test('\u7b55', "HANG");
+        test('\u7b56', "CE");
+        test('\u7b57', "ZHONG");
+        test('\u7b58', "KOU");
+        test('\u7b59', "LAI");
+        test('\u7b5a', "BI");
+        test('\u7b5b', "SHAI");
+        test('\u7b5c', "DANG");
+        test('\u7b5d', "ZHENG");
+        test('\u7b5e', "CE");
+        test('\u7b5f', "FU");
+        test('\u7b60', "JUN");
+        test('\u7b61', "TU");
+        test('\u7b62', "PA");
+        test('\u7b63', "LI");
+        test('\u7b64', "LANG");
+        test('\u7b65', "JU");
+        test('\u7b66', "GUAN");
+        test('\u7b67', "JIAN");
+        test('\u7b68', "HAN");
+        test('\u7b69', "TONG");
+        test('\u7b6a', "XIA");
+        test('\u7b6b', "ZHI");
+        test('\u7b6c', "CHENG");
+        test('\u7b6d', "SUAN");
+        test('\u7b6e', "SHI");
+        test('\u7b6f', "ZHU");
+        test('\u7b70', "ZUO");
+        test('\u7b71', "XIAO");
+        test('\u7b72', "SHAO");
+        test('\u7b73', "TING");
+        test('\u7b74', "CE");
+        test('\u7b75', "YAN");
+        test('\u7b76', "GAO");
+        test('\u7b77', "KUAI");
+        test('\u7b78', "GAN");
+        test('\u7b79', "CHOU");
+        test('\u7b7a', "KUANG");
+        test('\u7b7b', "GANG");
+        test('\u7b7c', "YUN");
+        test('\u7b7d', "O");
+        test('\u7b7e', "QIAN");
+        test('\u7b7f', "XIAO");
+        test('\u7b80', "JIAN");
+        test('\u7b81', "POU");
+        test('\u7b82', "LAI");
+        test('\u7b83', "ZOU");
+        test('\u7b84', "BI");
+        test('\u7b85', "BI");
+        test('\u7b86', "BI");
+        test('\u7b87', "GE");
+        test('\u7b88', "TAI");
+        test('\u7b89', "GUAI");
+        test('\u7b8a', "YU");
+        test('\u7b8b', "JIAN");
+        test('\u7b8c', "DAO");
+        test('\u7b8d', "GU");
+        test('\u7b8e', "CHI");
+        test('\u7b8f', "ZHENG");
+        test('\u7b90', "QING");
+        test('\u7b91', "SHA");
+        test('\u7b92', "ZHOU");
+        test('\u7b93', "LU");
+        test('\u7b94', "BO");
+        test('\u7b95', "JI");
+        test('\u7b96', "LIN");
+        test('\u7b97', "SUAN");
+        test('\u7b98', "JUN");
+        test('\u7b99', "FU");
+        test('\u7b9a', "ZHA");
+        test('\u7b9b', "GU");
+        test('\u7b9c', "KONG");
+        test('\u7b9d', "QIAN");
+        test('\u7b9e', "QIAN");
+        test('\u7b9f', "JUN");
+        test('\u7ba0', "CHUI");
+        test('\u7ba1', "GUAN");
+        test('\u7ba2', "YUAN");
+        test('\u7ba3', "CE");
+        test('\u7ba4', "ZU");
+        test('\u7ba5', "BO");
+        test('\u7ba6', "ZE");
+        test('\u7ba7', "QIE");
+        test('\u7ba8', "TUO");
+        test('\u7ba9', "LUO");
+        test('\u7baa', "DAN");
+        test('\u7bab', "XIAO");
+        test('\u7bac', "RUO");
+        test('\u7bad', "JIAN");
+        test('\u7bae', "XUAN");
+        test('\u7baf', "BIAN");
+        test('\u7bb0', "SUN");
+        test('\u7bb1', "XIANG");
+        test('\u7bb2', "XIAN");
+        test('\u7bb3', "PING");
+        test('\u7bb4', "ZHEN");
+        test('\u7bb5', "XING");
+        test('\u7bb6', "HU");
+        test('\u7bb7', "YI");
+        test('\u7bb8', "ZHU");
+        test('\u7bb9', "YUE");
+        test('\u7bba', "CHUN");
+        test('\u7bbb', "LU");
+        test('\u7bbc', "WU");
+        test('\u7bbd', "DONG");
+        test('\u7bbe', "SHUO");
+        test('\u7bbf', "JI");
+        test('\u7bc0', "JIE");
+        test('\u7bc1', "HUANG");
+        test('\u7bc2', "XING");
+        test('\u7bc3', "MEI");
+        test('\u7bc4', "FAN");
+        test('\u7bc5', "CHUAN");
+        test('\u7bc6', "ZHUAN");
+        test('\u7bc7', "PIAN");
+        test('\u7bc8', "FENG");
+        test('\u7bc9', "ZHU");
+        test('\u7bca', "HUANG");
+        test('\u7bcb', "QIE");
+        test('\u7bcc', "HOU");
+        test('\u7bcd', "QIU");
+        test('\u7bce', "MIAO");
+        test('\u7bcf', "QIAN");
+        test('\u7bd0', "GU");
+        test('\u7bd1', "KUI");
+        test('\u7bd2', "SHI");
+        test('\u7bd3', "LOU");
+        test('\u7bd4', "YUN");
+        test('\u7bd5', "HE");
+        test('\u7bd6', "TANG");
+        test('\u7bd7', "YUE");
+        test('\u7bd8', "CHOU");
+        test('\u7bd9', "GAO");
+        test('\u7bda', "FEI");
+        test('\u7bdb', "RUO");
+        test('\u7bdc', "ZHENG");
+        test('\u7bdd', "GOU");
+        test('\u7bde', "NIE");
+        test('\u7bdf', "QIAN");
+        test('\u7be0', "XIAO");
+        test('\u7be1', "CUAN");
+        test('\u7be2', "LONG");
+        test('\u7be3', "PENG");
+        test('\u7be4', "DU");
+        test('\u7be5', "LI");
+        test('\u7be6', "BI");
+        test('\u7be7', "ZHUO");
+        test('\u7be8', "CHU");
+        test('\u7be9', "SHAI");
+        test('\u7bea', "CHI");
+        test('\u7beb', "ZHU");
+        test('\u7bec', "QIANG");
+        test('\u7bed', "LONG");
+        test('\u7bee', "LAN");
+        test('\u7bef', "JIAN");
+        test('\u7bf0', "BU");
+        test('\u7bf1', "LI");
+        test('\u7bf2', "HUI");
+        test('\u7bf3', "BI");
+        test('\u7bf4', "DI");
+        test('\u7bf5', "CONG");
+        test('\u7bf6', "YAN");
+        test('\u7bf7', "PENG");
+        test('\u7bf8', "CAN");
+        test('\u7bf9', "ZHUAN");
+        test('\u7bfa', "PI");
+        test('\u7bfb', "PIAO");
+        test('\u7bfc', "DOU");
+        test('\u7bfd', "YU");
+        test('\u7bfe', "MIE");
+        test('\u7bff', "TUAN");
+        test('\u7c00', "ZE");
+        test('\u7c01', "SHAI");
+        test('\u7c02', "GUI");
+        test('\u7c03', "YI");
+        test('\u7c04', "HU");
+        test('\u7c05', "CHAN");
+        test('\u7c06', "KOU");
+        test('\u7c07', "CU");
+        test('\u7c08', "PING");
+        test('\u7c09', "ZAO");
+        test('\u7c0a', "JI");
+        test('\u7c0b', "GUI");
+        test('\u7c0c', "SU");
+        test('\u7c0d', "LOU");
+        test('\u7c0e', "CE");
+        test('\u7c0f', "LU");
+        test('\u7c10', "NIAN");
+        test('\u7c11', "SUO");
+        test('\u7c12', "CUAN");
+        test('\u7c13', "DIAO");
+        test('\u7c14', "SUO");
+        test('\u7c15', "LE");
+        test('\u7c16', "DUAN");
+        test('\u7c17', "LIANG");
+        test('\u7c18', "XIAO");
+        test('\u7c19', "BO");
+        test('\u7c1a', "MI");
+        test('\u7c1b', "SHAI");
+        test('\u7c1c', "DANG");
+        test('\u7c1d', "LIAO");
+        test('\u7c1e', "DAN");
+        test('\u7c1f', "DIAN");
+        test('\u7c20', "FU");
+        test('\u7c21', "JIAN");
+        test('\u7c22', "MIN");
+        test('\u7c23', "KUI");
+        test('\u7c24', "DAI");
+        test('\u7c25', "JIAO");
+        test('\u7c26', "DENG");
+        test('\u7c27', "HUANG");
+        test('\u7c28', "SUN");
+        test('\u7c29', "LAO");
+        test('\u7c2a', "ZAN");
+        test('\u7c2b', "XIAO");
+        test('\u7c2c', "LU");
+        test('\u7c2d', "SHI");
+        test('\u7c2e', "ZAN");
+        test('\u7c2f', "QI");
+        test('\u7c30', "PAI");
+        test('\u7c31', "QI");
+        test('\u7c32', "PAI");
+        test('\u7c33', "GAN");
+        test('\u7c34', "JU");
+        test('\u7c35', "DU");
+        test('\u7c36', "LU");
+        test('\u7c37', "YAN");
+        test('\u7c38', "BO");
+        test('\u7c39', "DANG");
+        test('\u7c3a', "SAI");
+        test('\u7c3b', "ZHUA");
+        test('\u7c3c', "LONG");
+        test('\u7c3d', "QIAN");
+        test('\u7c3e', "LIAN");
+        test('\u7c3f', "BU");
+        test('\u7c40', "ZHOU");
+        test('\u7c41', "LAI");
+        test('\u7c42', "SHI");
+        test('\u7c43', "LAN");
+        test('\u7c44', "KUI");
+        test('\u7c45', "YU");
+        test('\u7c46', "YUE");
+        test('\u7c47', "HAO");
+        test('\u7c48', "ZHEN");
+        test('\u7c49', "TAI");
+        test('\u7c4a', "TI");
+        test('\u7c4b', "NIE");
+        test('\u7c4c', "CHOU");
+        test('\u7c4d', "JI");
+        test('\u7c4e', "YI");
+        test('\u7c4f', "QI");
+        test('\u7c50', "TENG");
+        test('\u7c51', "ZHUAN");
+        test('\u7c52', "ZHOU");
+        test('\u7c53', "FAN");
+        test('\u7c54', "SOU");
+        test('\u7c55', "ZHOU");
+        test('\u7c56', "QIAN");
+        test('\u7c57', "ZHUO");
+        test('\u7c58', "TENG");
+        test('\u7c59', "LU");
+        test('\u7c5a', "LU");
+        test('\u7c5b', "JIAN");
+        test('\u7c5c', "TUO");
+        test('\u7c5d', "YING");
+        test('\u7c5e', "YU");
+        test('\u7c5f', "LAI");
+        test('\u7c60', "LONG");
+        test('\u7c61', "QIE");
+        test('\u7c62', "LIAN");
+        test('\u7c63', "LAN");
+        test('\u7c64', "QIAN");
+        test('\u7c65', "YUE");
+        test('\u7c66', "ZHONG");
+        test('\u7c67', "QU");
+        test('\u7c68', "LIAN");
+        test('\u7c69', "BIAN");
+        test('\u7c6a', "DUAN");
+        test('\u7c6b', "ZUAN");
+        test('\u7c6c', "LI");
+        test('\u7c6d', "SI");
+        test('\u7c6e', "LUO");
+        test('\u7c6f', "YING");
+        test('\u7c70', "YUE");
+        test('\u7c71', "ZHUO");
+        test('\u7c72', "YU");
+        test('\u7c73', "MI");
+        test('\u7c74', "DI");
+        test('\u7c75', "FAN");
+        test('\u7c76', "SHEN");
+        test('\u7c77', "ZHE");
+        test('\u7c78', "SHEN");
+        test('\u7c79', "NU");
+        test('\u7c7a', "HE");
+        test('\u7c7b', "LEI");
+        test('\u7c7c', "XIAN");
+        test('\u7c7d', "ZI");
+        test('\u7c7e', "NI");
+        test('\u7c7f', "CUN");
+        test('\u7c80', "ZHANG");
+        test('\u7c81', "QIAN");
+        test('\u7c82', "ZHAI");
+        test('\u7c83', "BI");
+        test('\u7c84', "BAN");
+        test('\u7c85', "WU");
+        test('\u7c86', "SHA");
+        test('\u7c87', "KANG");
+        test('\u7c88', "ROU");
+        test('\u7c89', "FEN");
+        test('\u7c8a', "BI");
+        test('\u7c8b', "CUI");
+        test('\u7c8c', "YIN");
+        test('\u7c8d', "ZHE");
+        test('\u7c8e', "CHI");
+        test('\u7c8f', "TAI");
+        test('\u7c90', "HU");
+        test('\u7c91', "BA");
+        test('\u7c92', "LI");
+        test('\u7c93', "GAN");
+        test('\u7c94', "JU");
+        test('\u7c95', "PO");
+        test('\u7c96', "MO");
+        test('\u7c97', "CU");
+        test('\u7c98', "ZHAN");
+        test('\u7c99', "ZHOU");
+        test('\u7c9a', "LI");
+        test('\u7c9b', "SU");
+        test('\u7c9c', "TIAO");
+        test('\u7c9d', "LI");
+        test('\u7c9e', "XI");
+        test('\u7c9f', "SU");
+        test('\u7ca0', "HONG");
+        test('\u7ca1', "TONG");
+        test('\u7ca2', "ZI");
+        test('\u7ca3', "CE");
+        test('\u7ca4', "YUE");
+        test('\u7ca5', "ZHOU");
+        test('\u7ca6', "LIN");
+        test('\u7ca7', "ZHUANG");
+        test('\u7ca8', "BAI");
+        test('\u7ca9', "LAO");
+        test('\u7caa', "FEN");
+        test('\u7cab', "ER");
+        test('\u7cac', "QU");
+        test('\u7cad', "HE");
+        test('\u7cae', "LIANG");
+        test('\u7caf', "XIAN");
+        test('\u7cb0', "FU");
+        test('\u7cb1', "LIANG");
+        test('\u7cb2', "CAN");
+        test('\u7cb3', "JING");
+        test('\u7cb4', "LI");
+        test('\u7cb5', "YUE");
+        test('\u7cb6', "LU");
+        test('\u7cb7', "JU");
+        test('\u7cb8', "QI");
+        test('\u7cb9', "CUI");
+        test('\u7cba', "BAI");
+        test('\u7cbb', "ZHANG");
+        test('\u7cbc', "LIN");
+        test('\u7cbd', "ZONG");
+        test('\u7cbe', "JING");
+        test('\u7cbf', "GUO");
+        test('\u7cc0', "HUA");
+        test('\u7cc1', "SAN");
+        test('\u7cc2', "SAN");
+        test('\u7cc3', "TANG");
+        test('\u7cc4', "BIAN");
+        test('\u7cc5', "ROU");
+        test('\u7cc6', "MIAN");
+        test('\u7cc7', "HOU");
+        test('\u7cc8', "XU");
+        test('\u7cc9', "ZONG");
+        test('\u7cca', "HU");
+        test('\u7ccb', "JIAN");
+        test('\u7ccc', "ZAN");
+        test('\u7ccd', "CI");
+        test('\u7cce', "LI");
+        test('\u7ccf', "XIE");
+        test('\u7cd0', "FU");
+        test('\u7cd1', "NUO");
+        test('\u7cd2', "BEI");
+        test('\u7cd3', "GU");
+        test('\u7cd4', "XIU");
+        test('\u7cd5', "GAO");
+        test('\u7cd6', "TANG");
+        test('\u7cd7', "QIU");
+        test('\u7cd8', "JIA");
+        test('\u7cd9', "CAO");
+        test('\u7cda', "ZHUANG");
+        test('\u7cdb', "TANG");
+        test('\u7cdc', "MI");
+        test('\u7cdd', "SAN");
+        test('\u7cde', "FEN");
+        test('\u7cdf', "ZAO");
+        test('\u7ce0', "KANG");
+        test('\u7ce1', "JIANG");
+        test('\u7ce2', "MO");
+        test('\u7ce3', "SAN");
+        test('\u7ce4', "SAN");
+        test('\u7ce5', "NUO");
+        test('\u7ce6', "XI");
+        test('\u7ce7', "LIANG");
+        test('\u7ce8', "JIANG");
+        test('\u7ce9', "KUAI");
+        test('\u7cea', "BO");
+        test('\u7ceb', "HUAN");
+        test('\u7cec', "SHU");
+        test('\u7ced', "ZONG");
+        test('\u7cee', "XIAN");
+        test('\u7cef', "NUO");
+        test('\u7cf0', "TUAN");
+        test('\u7cf1', "NIE");
+        test('\u7cf2', "LI");
+        test('\u7cf3', "ZUO");
+        test('\u7cf4', "DI");
+        test('\u7cf5', "NIE");
+        test('\u7cf6', "TIAO");
+        test('\u7cf7', "LAN");
+        test('\u7cf8', "MI");
+        test('\u7cf9', "SI");
+        test('\u7cfa', "JIU");
+        test('\u7cfb', "XI");
+        test('\u7cfc', "GONG");
+        test('\u7cfd', "ZHENG");
+        test('\u7cfe', "JIU");
+        test('\u7cff', "YOU");
+        test('\u7d00', "JI");
+        test('\u7d01', "CHA");
+        test('\u7d02', "ZHOU");
+        test('\u7d03', "XUN");
+        test('\u7d04', "YUE");
+        test('\u7d05', "HONG");
+        test('\u7d06', "YU");
+        test('\u7d07', "HE");
+        test('\u7d08', "WAN");
+        test('\u7d09', "REN");
+        test('\u7d0a', "WEN");
+        test('\u7d0b', "WEN");
+        test('\u7d0c', "QIU");
+        test('\u7d0d', "NA");
+        test('\u7d0e', "ZI");
+        test('\u7d0f', "TOU");
+        test('\u7d10', "NIU");
+        test('\u7d11', "FOU");
+        test('\u7d12', "JI");
+        test('\u7d13', "SHU");
+        test('\u7d14', "CHUN");
+        test('\u7d15', "PI");
+        test('\u7d16', "ZHEN");
+        test('\u7d17', "SHA");
+        test('\u7d18', "HONG");
+        test('\u7d19', "ZHI");
+        test('\u7d1a', "JI");
+        test('\u7d1b', "FEN");
+        test('\u7d1c', "YUN");
+        test('\u7d1d', "REN");
+        test('\u7d1e', "DAN");
+        test('\u7d1f', "JIN");
+        test('\u7d20', "SU");
+        test('\u7d21', "FANG");
+        test('\u7d22', "SUO");
+        test('\u7d23', "CUI");
+        test('\u7d24', "JIU");
+        test('\u7d25', "ZA");
+        test('\u7d26', "BA");
+        test('\u7d27', "JIN");
+        test('\u7d28', "FU");
+        test('\u7d29', "ZHI");
+        test('\u7d2a', "CI");
+        test('\u7d2b', "ZI");
+        test('\u7d2c', "CHOU");
+        test('\u7d2d', "HONG");
+        test('\u7d2e', "ZA");
+        test('\u7d2f', "LEI");
+        test('\u7d30', "XI");
+        test('\u7d31', "FU");
+        test('\u7d32', "XIE");
+        test('\u7d33', "SHEN");
+        test('\u7d34', "BO");
+        test('\u7d35', "ZHU");
+        test('\u7d36', "QU");
+        test('\u7d37', "LING");
+        test('\u7d38', "ZHU");
+        test('\u7d39', "SHAO");
+        test('\u7d3a', "GAN");
+        test('\u7d3b', "YANG");
+        test('\u7d3c', "FU");
+        test('\u7d3d', "TUO");
+        test('\u7d3e', "ZHEN");
+        test('\u7d3f', "DAI");
+        test('\u7d40', "CHU");
+        test('\u7d41', "SHI");
+        test('\u7d42', "ZHONG");
+        test('\u7d43', "XIAN");
+        test('\u7d44', "ZU");
+        test('\u7d45', "JIONG");
+        test('\u7d46', "BAN");
+        test('\u7d47', "QU");
+        test('\u7d48', "MO");
+        test('\u7d49', "SHU");
+        test('\u7d4a', "ZUI");
+        test('\u7d4b', "KUANG");
+        test('\u7d4c', "JING");
+        test('\u7d4d', "REN");
+        test('\u7d4e', "HANG");
+        test('\u7d4f', "XIE");
+        test('\u7d50', "JIE");
+        test('\u7d51', "ZHU");
+        test('\u7d52', "CHOU");
+        test('\u7d53', "GUA");
+        test('\u7d54', "BAI");
+        test('\u7d55', "JUE");
+        test('\u7d56', "KUANG");
+        test('\u7d57', "HU");
+        test('\u7d58', "CI");
+        test('\u7d59', "HUAN");
+        test('\u7d5a', "GENG");
+        test('\u7d5b', "TAO");
+        test('\u7d5c', "JIE");
+        test('\u7d5d', "KU");
+        test('\u7d5e', "JIAO");
+        test('\u7d5f', "QUAN");
+        test('\u7d60', "GAI");
+        test('\u7d61', "LUO");
+        test('\u7d62', "XUAN");
+        test('\u7d63', "BENG");
+        test('\u7d64', "XIAN");
+        test('\u7d65', "FU");
+        test('\u7d66', "GEI");
+        test('\u7d67', "DONG");
+        test('\u7d68', "RONG");
+        test('\u7d69', "TIAO");
+        test('\u7d6a', "YIN");
+        test('\u7d6b', "LEI");
+        test('\u7d6c', "XIE");
+        test('\u7d6d', "JUAN");
+        test('\u7d6e', "XU");
+        test('\u7d6f', "GAI");
+        test('\u7d70', "DIE");
+        test('\u7d71', "TONG");
+        test('\u7d72', "SI");
+        test('\u7d73', "JIANG");
+        test('\u7d74', "XIANG");
+        test('\u7d75', "HUI");
+        test('\u7d76', "JUE");
+        test('\u7d77', "ZHI");
+        test('\u7d78', "JIAN");
+        test('\u7d79', "JUAN");
+        test('\u7d7a', "CHI");
+        test('\u7d7b', "MIAN");
+        test('\u7d7c', "ZHEN");
+        test('\u7d7d', "LU");
+        test('\u7d7e', "CHENG");
+        test('\u7d7f', "QIU");
+        test('\u7d80', "SHU");
+        test('\u7d81', "BANG");
+        test('\u7d82', "TONG");
+        test('\u7d83', "XIAO");
+        test('\u7d84', "HUAN");
+        test('\u7d85', "QIN");
+        test('\u7d86', "GENG");
+        test('\u7d87', "XIU");
+        test('\u7d88', "TI");
+        test('\u7d89', "TOU");
+        test('\u7d8a', "XIE");
+        test('\u7d8b', "HONG");
+        test('\u7d8c', "XI");
+        test('\u7d8d', "FU");
+        test('\u7d8e', "TING");
+        test('\u7d8f', "SUI");
+        test('\u7d90', "DUI");
+        test('\u7d91', "KUN");
+        test('\u7d92', "FU");
+        test('\u7d93', "JING");
+        test('\u7d94', "HU");
+        test('\u7d95', "ZHI");
+        test('\u7d96', "YAN");
+        test('\u7d97', "JIONG");
+        test('\u7d98', "FENG");
+        test('\u7d99', "JI");
+        test('\u7d9a', "XU");
+        test('\u7d9b', "REN");
+        test('\u7d9c', "ZONG");
+        test('\u7d9d', "CHEN");
+        test('\u7d9e', "DUO");
+        test('\u7d9f', "LI");
+        test('\u7da0', "LU");
+        test('\u7da1', "LIANG");
+        test('\u7da2', "CHOU");
+        test('\u7da3', "QUAN");
+        test('\u7da4', "SHAO");
+        test('\u7da5', "QI");
+        test('\u7da6', "QI");
+        test('\u7da7', "ZHUN");
+        test('\u7da8', "QI");
+        test('\u7da9', "WAN");
+        test('\u7daa', "QIAN");
+        test('\u7dab', "XIAN");
+        test('\u7dac', "SHOU");
+        test('\u7dad', "WEI");
+        test('\u7dae', "QI");
+        test('\u7daf', "TAO");
+        test('\u7db0', "WAN");
+        test('\u7db1', "GANG");
+        test('\u7db2', "WANG");
+        test('\u7db3', "BENG");
+        test('\u7db4', "ZHUI");
+        test('\u7db5', "CAI");
+        test('\u7db6', "GUO");
+        test('\u7db7', "CUI");
+        test('\u7db8', "LUN");
+        test('\u7db9', "LIU");
+        test('\u7dba', "QI");
+        test('\u7dbb', "ZHAN");
+        test('\u7dbc', "BI");
+        test('\u7dbd', "CHUO");
+        test('\u7dbe', "LING");
+        test('\u7dbf', "MIAN");
+        test('\u7dc0', "QI");
+        test('\u7dc1', "QIE");
+        test('\u7dc2', "TIAN");
+        test('\u7dc3', "ZONG");
+        test('\u7dc4', "GUN");
+        test('\u7dc5', "ZOU");
+        test('\u7dc6', "XI");
+        test('\u7dc7', "ZI");
+        test('\u7dc8', "XING");
+        test('\u7dc9', "LIANG");
+        test('\u7dca', "JIN");
+        test('\u7dcb', "FEI");
+        test('\u7dcc', "RUI");
+        test('\u7dcd', "MIN");
+        test('\u7dce', "YU");
+        test('\u7dcf', "ZONG");
+        test('\u7dd0', "FAN");
+        test('\u7dd1', "LU");
+        test('\u7dd2', "XU");
+        test('\u7dd3', "YING");
+        test('\u7dd4', "SHANG");
+        test('\u7dd5', "QI");
+        test('\u7dd6', "XU");
+        test('\u7dd7', "XIANG");
+        test('\u7dd8', "JIAN");
+        test('\u7dd9', "KE");
+        test('\u7dda', "XIAN");
+        test('\u7ddb', "RUAN");
+        test('\u7ddc', "MIAN");
+        test('\u7ddd', "JI");
+        test('\u7dde', "DUAN");
+        test('\u7ddf', "CHONG");
+        test('\u7de0', "DI");
+        test('\u7de1', "MIN");
+        test('\u7de2', "MIAO");
+        test('\u7de3', "YUAN");
+        test('\u7de4', "XIE");
+        test('\u7de5', "BAO");
+        test('\u7de6', "SI");
+        test('\u7de7', "QIU");
+        test('\u7de8', "BIAN");
+        test('\u7de9', "HUAN");
+        test('\u7dea', "GENG");
+        test('\u7deb', "CONG");
+        test('\u7dec', "MIAN");
+        test('\u7ded', "WEI");
+        test('\u7dee', "FU");
+        test('\u7def', "WEI");
+        test('\u7df0', "TOU");
+        test('\u7df1', "GOU");
+        test('\u7df2', "MIAO");
+        test('\u7df3', "XIE");
+        test('\u7df4', "LIAN");
+        test('\u7df5', "ZONG");
+        test('\u7df6', "BIAN");
+        test('\u7df7', "YUN");
+        test('\u7df8', "YIN");
+        test('\u7df9', "TI");
+        test('\u7dfa', "GUA");
+        test('\u7dfb', "ZHI");
+        test('\u7dfc', "YUN");
+        test('\u7dfd', "CHENG");
+        test('\u7dfe', "CHAN");
+        test('\u7dff', "DAI");
+    }
+
+    @SmallTest
+    public void test_12() throws Exception {
+        if (!hasChineseTransliterator()) {
+            return;
+        }
+        test('\u7e00', "XIA");
+        test('\u7e01', "YUAN");
+        test('\u7e02', "ZONG");
+        test('\u7e03', "XU");
+        test('\u7e04', "YING");
+        test('\u7e05', "WEI");
+        test('\u7e06', "GENG");
+        test('\u7e07', "XUAN");
+        test('\u7e08', "YING");
+        test('\u7e09', "JIN");
+        test('\u7e0a', "YI");
+        test('\u7e0b', "ZHUI");
+        test('\u7e0c', "NI");
+        test('\u7e0d', "BANG");
+        test('\u7e0e', "GU");
+        test('\u7e0f', "PAN");
+        test('\u7e10', "ZHOU");
+        test('\u7e11', "JIAN");
+        test('\u7e12', "CI");
+        test('\u7e13', "QUAN");
+        test('\u7e14', "SHUANG");
+        test('\u7e15', "YUN");
+        test('\u7e16', "XIA");
+        test('\u7e17', "CUI");
+        test('\u7e18', "XI");
+        test('\u7e19', "RONG");
+        test('\u7e1a', "TAO");
+        test('\u7e1b', "FU");
+        test('\u7e1c', "YUN");
+        test('\u7e1d', "CHEN");
+        test('\u7e1e', "GAO");
+        test('\u7e1f', "RU");
+        test('\u7e20', "HU");
+        test('\u7e21', "ZAI");
+        test('\u7e22', "TENG");
+        test('\u7e23', "XIAN");
+        test('\u7e24', "SU");
+        test('\u7e25', "ZHEN");
+        test('\u7e26', "ZONG");
+        test('\u7e27', "TAO");
+        test('\u7e28', "HUANG");
+        test('\u7e29', "CAI");
+        test('\u7e2a', "BI");
+        test('\u7e2b', "FENG");
+        test('\u7e2c', "CU");
+        test('\u7e2d', "LI");
+        test('\u7e2e', "SUO");
+        test('\u7e2f', "YAN");
+        test('\u7e30', "XI");
+        test('\u7e31', "ZONG");
+        test('\u7e32', "LEI");
+        test('\u7e33', "JUAN");
+        test('\u7e34', "QIAN");
+        test('\u7e35', "MAN");
+        test('\u7e36', "ZHI");
+        test('\u7e37', "LU");
+        test('\u7e38', "MU");
+        test('\u7e39', "PIAO");
+        test('\u7e3a', "LIAN");
+        test('\u7e3b', "MI");
+        test('\u7e3c', "XUAN");
+        test('\u7e3d', "ZONG");
+        test('\u7e3e', "JI");
+        test('\u7e3f', "SHAN");
+        test('\u7e40', "SUI");
+        test('\u7e41', "FAN");
+        test('\u7e42', "LU");
+        test('\u7e43', "BENG");
+        test('\u7e44', "YI");
+        test('\u7e45', "SAO");
+        test('\u7e46', "MOU");
+        test('\u7e47', "YAO");
+        test('\u7e48', "QIANG");
+        test('\u7e49', "HUN");
+        test('\u7e4a', "XIAN");
+        test('\u7e4b', "JI");
+        test('\u7e4c', "SHA");
+        test('\u7e4d', "XIU");
+        test('\u7e4e', "RAN");
+        test('\u7e4f', "XUAN");
+        test('\u7e50', "SUI");
+        test('\u7e51', "QIAO");
+        test('\u7e52', "ZENG");
+        test('\u7e53', "ZUO");
+        test('\u7e54', "ZHI");
+        test('\u7e55', "SHAN");
+        test('\u7e56', "SAN");
+        test('\u7e57', "LIN");
+        test('\u7e58', "YU");
+        test('\u7e59', "FAN");
+        test('\u7e5a', "LIAO");
+        test('\u7e5b', "CHUO");
+        test('\u7e5c', "ZUN");
+        test('\u7e5d', "JIAN");
+        test('\u7e5e', "RAO");
+        test('\u7e5f', "CHAN");
+        test('\u7e60', "RUI");
+        test('\u7e61', "XIU");
+        test('\u7e62', "HUI");
+        test('\u7e63', "HUA");
+        test('\u7e64', "ZUAN");
+        test('\u7e65', "XI");
+        test('\u7e66', "QIANG");
+        test('\u7e67', "YUN");
+        test('\u7e68', "DA");
+        test('\u7e69', "SHENG");
+        test('\u7e6a', "HUI");
+        test('\u7e6b', "XI");
+        test('\u7e6c', "SE");
+        test('\u7e6d', "JIAN");
+        test('\u7e6e', "JIANG");
+        test('\u7e6f', "HUAN");
+        test('\u7e70', "ZAO");
+        test('\u7e71', "CONG");
+        test('\u7e72', "XIE");
+        test('\u7e73', "JIAO");
+        test('\u7e74', "BI");
+        test('\u7e75', "DAN");
+        test('\u7e76', "YI");
+        test('\u7e77', "NONG");
+        test('\u7e78', "SUI");
+        test('\u7e79', "YI");
+        test('\u7e7a', "SHAI");
+        test('\u7e7b', "XU");
+        test('\u7e7c', "JI");
+        test('\u7e7d', "BIN");
+        test('\u7e7e', "QIAN");
+        test('\u7e7f', "LAN");
+        test('\u7e80', "PU");
+        test('\u7e81', "XUN");
+        test('\u7e82', "ZUAN");
+        test('\u7e83', "QI");
+        test('\u7e84', "PENG");
+        test('\u7e85', "YAO");
+        test('\u7e86', "MO");
+        test('\u7e87', "LEI");
+        test('\u7e88', "XIE");
+        test('\u7e89', "ZUAN");
+        test('\u7e8a', "KUANG");
+        test('\u7e8b', "YOU");
+        test('\u7e8c', "XU");
+        test('\u7e8d', "LEI");
+        test('\u7e8e', "XIAN");
+        test('\u7e8f', "CHAN");
+        test('\u7e90', "JIAO");
+        test('\u7e91', "LU");
+        test('\u7e92', "CHAN");
+        test('\u7e93', "YING");
+        test('\u7e94', "CAI");
+        test('\u7e95', "RANG");
+        test('\u7e96', "XIAN");
+        test('\u7e97', "ZUI");
+        test('\u7e98', "ZUAN");
+        test('\u7e99', "LUO");
+        test('\u7e9a', "LI");
+        test('\u7e9b', "DAO");
+        test('\u7e9c', "LAN");
+        test('\u7e9d', "LEI");
+        test('\u7e9e', "LIAN");
+        test('\u7e9f', "SI");
+        test('\u7ea0', "JIU");
+        test('\u7ea1', "YU");
+        test('\u7ea2', "HONG");
+        test('\u7ea3', "ZHOU");
+        test('\u7ea4', "XIAN");
+        test('\u7ea5', "GE");
+        test('\u7ea6', "YUE");
+        test('\u7ea7', "JI");
+        test('\u7ea8', "WAN");
+        test('\u7ea9', "KUANG");
+        test('\u7eaa', "JI");
+        test('\u7eab', "REN");
+        test('\u7eac', "WEI");
+        test('\u7ead', "YUN");
+        test('\u7eae', "HONG");
+        test('\u7eaf', "CHUN");
+        test('\u7eb0', "PI");
+        test('\u7eb1', "SHA");
+        test('\u7eb2', "GANG");
+        test('\u7eb3', "NA");
+        test('\u7eb4', "REN");
+        test('\u7eb5', "ZONG");
+        test('\u7eb6', "LUN");
+        test('\u7eb7', "FEN");
+        test('\u7eb8', "ZHI");
+        test('\u7eb9', "WEN");
+        test('\u7eba', "FANG");
+        test('\u7ebb', "ZHU");
+        test('\u7ebc', "ZHEN");
+        test('\u7ebd', "NIU");
+        test('\u7ebe', "SHU");
+        test('\u7ebf', "XIAN");
+        test('\u7ec0', "GAN");
+        test('\u7ec1', "XIE");
+        test('\u7ec2', "FU");
+        test('\u7ec3', "LIAN");
+        test('\u7ec4', "ZU");
+        test('\u7ec5', "SHEN");
+        test('\u7ec6', "XI");
+        test('\u7ec7', "ZHI");
+        test('\u7ec8', "ZHONG");
+        test('\u7ec9', "ZHOU");
+        test('\u7eca', "BAN");
+        test('\u7ecb', "FU");
+        test('\u7ecc', "CHU");
+        test('\u7ecd', "SHAO");
+        test('\u7ece', "YI");
+        test('\u7ecf', "JING");
+        test('\u7ed0', "DAI");
+        test('\u7ed1', "BANG");
+        test('\u7ed2', "RONG");
+        test('\u7ed3', "JIE");
+        test('\u7ed4', "KU");
+        test('\u7ed5', "RAO");
+        test('\u7ed6', "DIE");
+        test('\u7ed7', "HANG");
+        test('\u7ed8', "HUI");
+        test('\u7ed9', "GEI");
+        test('\u7eda', "XUAN");
+        test('\u7edb', "JIANG");
+        test('\u7edc', "LUO");
+        test('\u7edd', "JUE");
+        test('\u7ede', "JIAO");
+        test('\u7edf', "TONG");
+        test('\u7ee0', "GENG");
+        test('\u7ee1', "XIAO");
+        test('\u7ee2', "JUAN");
+        test('\u7ee3', "XIU");
+        test('\u7ee4', "XI");
+        test('\u7ee5', "SUI");
+        test('\u7ee6', "TAO");
+        test('\u7ee7', "JI");
+        test('\u7ee8', "TI");
+        test('\u7ee9', "JI");
+        test('\u7eea', "XU");
+        test('\u7eeb', "LING");
+        test('\u7eec', "YING");
+        test('\u7eed', "XU");
+        test('\u7eee', "QI");
+        test('\u7eef', "FEI");
+        test('\u7ef0', "CHUO");
+        test('\u7ef1', "SHANG");
+        test('\u7ef2', "GUN");
+        test('\u7ef3', "SHENG");
+        test('\u7ef4', "WEI");
+        test('\u7ef5', "MIAN");
+        test('\u7ef6', "SHOU");
+        test('\u7ef7', "BENG");
+        test('\u7ef8', "CHOU");
+        test('\u7ef9', "TAO");
+        test('\u7efa', "LIU");
+        test('\u7efb', "QUAN");
+        test('\u7efc', "ZONG");
+        test('\u7efd', "ZHAN");
+        test('\u7efe', "WAN");
+        test('\u7eff', "LU");
+        test('\u7f00', "ZHUI");
+        test('\u7f01', "ZI");
+        test('\u7f02', "KE");
+        test('\u7f03', "XIANG");
+        test('\u7f04', "JIAN");
+        test('\u7f05', "MIAN");
+        test('\u7f06', "LAN");
+        test('\u7f07', "TI");
+        test('\u7f08', "MIAO");
+        test('\u7f09', "JI");
+        test('\u7f0a', "YUN");
+        test('\u7f0b', "HUI");
+        test('\u7f0c', "SI");
+        test('\u7f0d', "DUO");
+        test('\u7f0e', "DUAN");
+        test('\u7f0f', "BIAN");
+        test('\u7f10', "XIAN");
+        test('\u7f11', "GOU");
+        test('\u7f12', "ZHUI");
+        test('\u7f13', "HUAN");
+        test('\u7f14', "DI");
+        test('\u7f15', "LU");
+        test('\u7f16', "BIAN");
+        test('\u7f17', "MIN");
+        test('\u7f18', "YUAN");
+        test('\u7f19', "JIN");
+        test('\u7f1a', "FU");
+        test('\u7f1b', "RU");
+        test('\u7f1c', "ZHEN");
+        test('\u7f1d', "FENG");
+        test('\u7f1e', "CUI");
+        test('\u7f1f', "GAO");
+        test('\u7f20', "CHAN");
+        test('\u7f21', "LI");
+        test('\u7f22', "YI");
+        test('\u7f23', "JIAN");
+        test('\u7f24', "BIN");
+        test('\u7f25', "PIAO");
+        test('\u7f26', "MAN");
+        test('\u7f27', "LEI");
+        test('\u7f28', "YING");
+        test('\u7f29', "SUO");
+        test('\u7f2a', "MOU");
+        test('\u7f2b', "SAO");
+        test('\u7f2c', "XIE");
+        test('\u7f2d', "LIAO");
+        test('\u7f2e', "SHAN");
+        test('\u7f2f', "ZENG");
+        test('\u7f30', "JIANG");
+        test('\u7f31', "QIAN");
+        test('\u7f32', "QIAO");
+        test('\u7f33', "HUAN");
+        test('\u7f34', "JIAO");
+        test('\u7f35', "ZUAN");
+        test('\u7f36', "FOU");
+        test('\u7f37', "XIE");
+        test('\u7f38', "GANG");
+        test('\u7f39', "FOU");
+        test('\u7f3a', "QUE");
+        test('\u7f3b', "FOU");
+        test('\u7f3c', "QI");
+        test('\u7f3d', "BO");
+        test('\u7f3e', "PING");
+        test('\u7f3f', "XIANG");
+        test('\u7f40', "ZHAO");
+        test('\u7f41', "GANG");
+        test('\u7f42', "YING");
+        test('\u7f43', "YING");
+        test('\u7f44', "QING");
+        test('\u7f45', "XIA");
+        test('\u7f46', "GUAN");
+        test('\u7f47', "ZUN");
+        test('\u7f48', "TAN");
+        test('\u7f49', "CANG");
+        test('\u7f4a', "QI");
+        test('\u7f4b', "WENG");
+        test('\u7f4c', "YING");
+        test('\u7f4d', "LEI");
+        test('\u7f4e', "TAN");
+        test('\u7f4f', "LU");
+        test('\u7f50', "GUAN");
+        test('\u7f51', "WANG");
+        test('\u7f52', "WANG");
+        test('\u7f53', "GANG");
+        test('\u7f54', "WANG");
+        test('\u7f55', "HAN");
+        test('\u7f56', "LUO");
+        test('\u7f57', "LUO");
+        test('\u7f58', "FU");
+        test('\u7f59', "MI");
+        test('\u7f5a', "FA");
+        test('\u7f5b', "GU");
+        test('\u7f5c', "ZHU");
+        test('\u7f5d', "JU");
+        test('\u7f5e', "MAO");
+        test('\u7f5f', "GU");
+        test('\u7f60', "MIN");
+        test('\u7f61', "GANG");
+        test('\u7f62', "BA");
+        test('\u7f63', "GUA");
+        test('\u7f64', "TI");
+        test('\u7f65', "JUAN");
+        test('\u7f66', "FU");
+        test('\u7f67', "SHEN");
+        test('\u7f68', "YAN");
+        test('\u7f69', "ZHAO");
+        test('\u7f6a', "ZUI");
+        test('\u7f6b', "GUA");
+        test('\u7f6c', "ZHUO");
+        test('\u7f6d', "YU");
+        test('\u7f6e', "ZHI");
+        test('\u7f6f', "AN");
+        test('\u7f70', "FA");
+        test('\u7f71', "LAN");
+        test('\u7f72', "SHU");
+        test('\u7f73', "SI");
+        test('\u7f74', "PI");
+        test('\u7f75', "MA");
+        test('\u7f76', "LIU");
+        test('\u7f77', "BA");
+        test('\u7f78', "FA");
+        test('\u7f79', "LI");
+        test('\u7f7a', "CHAO");
+        test('\u7f7b', "WEI");
+        test('\u7f7c', "BI");
+        test('\u7f7d', "JI");
+        test('\u7f7e', "ZENG");
+        test('\u7f7f', "CHONG");
+        test('\u7f80', "LIU");
+        test('\u7f81', "JI");
+        test('\u7f82', "JUAN");
+        test('\u7f83', "MI");
+        test('\u7f84', "ZHAO");
+        test('\u7f85', "LUO");
+        test('\u7f86', "PI");
+        test('\u7f87', "JI");
+        test('\u7f88', "JI");
+        test('\u7f89', "LUAN");
+        test('\u7f8a', "YANG");
+        test('\u7f8b', "MI");
+        test('\u7f8c', "QIANG");
+        test('\u7f8d', "DA");
+        test('\u7f8e', "MEI");
+        test('\u7f8f', "YANG");
+        test('\u7f90', "YOU");
+        test('\u7f91', "YOU");
+        test('\u7f92', "FEN");
+        test('\u7f93', "BA");
+        test('\u7f94', "GAO");
+        test('\u7f95', "YANG");
+        test('\u7f96', "GU");
+        test('\u7f97', "QIANG");
+        test('\u7f98', "ZANG");
+        test('\u7f99', "GAO");
+        test('\u7f9a', "LING");
+        test('\u7f9b', "YI");
+        test('\u7f9c', "ZHU");
+        test('\u7f9d', "DI");
+        test('\u7f9e', "XIU");
+        test('\u7f9f', "QIANG");
+        test('\u7fa0', "YI");
+        test('\u7fa1', "XIAN");
+        test('\u7fa2', "RONG");
+        test('\u7fa3', "QUN");
+        test('\u7fa4', "QUN");
+        test('\u7fa5', "QIANG");
+        test('\u7fa6', "HUAN");
+        test('\u7fa7', "SUO");
+        test('\u7fa8', "XIAN");
+        test('\u7fa9', "YI");
+        test('\u7faa', "YANG");
+        test('\u7fab', "QIANG");
+        test('\u7fac', "QIAN");
+        test('\u7fad', "YU");
+        test('\u7fae', "GENG");
+        test('\u7faf', "JIE");
+        test('\u7fb0', "TANG");
+        test('\u7fb1', "YUAN");
+        test('\u7fb2', "XI");
+        test('\u7fb3', "FAN");
+        test('\u7fb4', "SHAN");
+        test('\u7fb5', "FEN");
+        test('\u7fb6', "SHAN");
+        test('\u7fb7', "LIAN");
+        test('\u7fb8', "LEI");
+        test('\u7fb9', "GENG");
+        test('\u7fba', "NOU");
+        test('\u7fbb', "QIANG");
+        test('\u7fbc', "CHAN");
+        test('\u7fbd', "YU");
+        test('\u7fbe', "GONG");
+        test('\u7fbf', "YI");
+        test('\u7fc0', "CHONG");
+        test('\u7fc1', "WENG");
+        test('\u7fc2', "FEN");
+        test('\u7fc3', "HONG");
+        test('\u7fc4', "CHI");
+        test('\u7fc5', "CHI");
+        test('\u7fc6', "CUI");
+        test('\u7fc7', "FU");
+        test('\u7fc8', "XIA");
+        test('\u7fc9', "BEN");
+        test('\u7fca', "YI");
+        test('\u7fcb', "LA");
+        test('\u7fcc', "YI");
+        test('\u7fcd', "PI");
+        test('\u7fce', "LING");
+        test('\u7fcf', "LIU");
+        test('\u7fd0', "ZHI");
+        test('\u7fd1', "QU");
+        test('\u7fd2', "XI");
+        test('\u7fd3', "XIE");
+        test('\u7fd4', "XIANG");
+        test('\u7fd5', "XI");
+        test('\u7fd6', "XI");
+        test('\u7fd7', "KE");
+        test('\u7fd8', "QIAO");
+        test('\u7fd9', "HUI");
+        test('\u7fda', "HUI");
+        test('\u7fdb', "XIAO");
+        test('\u7fdc', "SHA");
+        test('\u7fdd', "HONG");
+        test('\u7fde', "JIANG");
+        test('\u7fdf', "DI");
+        test('\u7fe0', "CUI");
+        test('\u7fe1', "FEI");
+        test('\u7fe2', "DAO");
+        test('\u7fe3', "SHA");
+        test('\u7fe4', "CHI");
+        test('\u7fe5', "ZHU");
+        test('\u7fe6', "JIAN");
+        test('\u7fe7', "XUAN");
+        test('\u7fe8', "CHI");
+        test('\u7fe9', "PIAN");
+        test('\u7fea', "ZONG");
+        test('\u7feb', "WAN");
+        test('\u7fec', "HUI");
+        test('\u7fed', "HOU");
+        test('\u7fee', "HE");
+        test('\u7fef', "HE");
+        test('\u7ff0', "HAN");
+        test('\u7ff1', "AO");
+        test('\u7ff2', "PIAO");
+        test('\u7ff3', "YI");
+        test('\u7ff4', "LIAN");
+        test('\u7ff5', "HOU");
+        test('\u7ff6', "AO");
+        test('\u7ff7', "LIN");
+        test('\u7ff8', "PEN");
+        test('\u7ff9', "QIAO");
+        test('\u7ffa', "AO");
+        test('\u7ffb', "FAN");
+        test('\u7ffc', "YI");
+        test('\u7ffd', "HUI");
+        test('\u7ffe', "XUAN");
+        test('\u7fff', "DAO");
+        test('\u8000', "YAO");
+        test('\u8001', "LAO");
+        test('\u8002', "LAO");
+        test('\u8003', "KAO");
+        test('\u8004', "MAO");
+        test('\u8005', "ZHE");
+        test('\u8006', "QI");
+        test('\u8007', "GOU");
+        test('\u8008', "GOU");
+        test('\u8009', "GOU");
+        test('\u800a', "DIE");
+        test('\u800b', "DIE");
+        test('\u800c', "ER");
+        test('\u800d', "SHUA");
+        test('\u800e', "RUAN");
+        test('\u800f', "NAI");
+        test('\u8010', "NAI");
+        test('\u8011', "DUAN");
+        test('\u8012', "LEI");
+        test('\u8013', "TING");
+        test('\u8014', "ZI");
+        test('\u8015', "GENG");
+        test('\u8016', "CHAO");
+        test('\u8017', "HAO");
+        test('\u8018', "YUN");
+        test('\u8019', "BA");
+        test('\u801a', "PI");
+        test('\u801b', "YI");
+        test('\u801c', "SI");
+        test('\u801d', "QU");
+        test('\u801e', "JIA");
+        test('\u801f', "JU");
+        test('\u8020', "HUO");
+        test('\u8021', "CHU");
+        test('\u8022', "LAO");
+        test('\u8023', "LUN");
+        test('\u8024', "JI");
+        test('\u8025', "TANG");
+        test('\u8026', "OU");
+        test('\u8027', "LOU");
+        test('\u8028', "NOU");
+        test('\u8029', "JIANG");
+        test('\u802a', "PANG");
+        test('\u802b', "ZHA");
+        test('\u802c', "LOU");
+        test('\u802d', "JI");
+        test('\u802e', "LAO");
+        test('\u802f', "HUO");
+        test('\u8030', "YOU");
+        test('\u8031', "MO");
+        test('\u8032', "HUAI");
+        test('\u8033', "ER");
+        test('\u8034', "YI");
+        test('\u8035', "DING");
+        test('\u8036', "YE");
+        test('\u8037', "DA");
+        test('\u8038', "SONG");
+        test('\u8039', "QIN");
+        test('\u803a', "YUN");
+        test('\u803b', "CHI");
+        test('\u803c', "DAN");
+        test('\u803d', "DAN");
+        test('\u803e', "HONG");
+        test('\u803f', "GENG");
+        test('\u8040', "ZHI");
+        test('\u8041', "PAN");
+        test('\u8042', "NIE");
+        test('\u8043', "DAN");
+        test('\u8044', "ZHEN");
+        test('\u8045', "CHE");
+        test('\u8046', "LING");
+        test('\u8047', "ZHENG");
+        test('\u8048', "YOU");
+        test('\u8049', "WA");
+        test('\u804a', "LIAO");
+        test('\u804b', "LONG");
+        test('\u804c', "ZHI");
+        test('\u804d', "NING");
+        test('\u804e', "TIAO");
+        test('\u804f', "ER");
+        test('\u8050', "YA");
+        test('\u8051', "TIE");
+        test('\u8052', "GUA");
+        test('\u8053', "XU");
+        test('\u8054', "LIAN");
+        test('\u8055', "HAO");
+        test('\u8056', "SHENG");
+        test('\u8057', "LIE");
+        test('\u8058', "PIN");
+        test('\u8059', "JING");
+        test('\u805a', "JU");
+        test('\u805b', "BI");
+        test('\u805c', "DI");
+        test('\u805d', "GUO");
+        test('\u805e', "WEN");
+        test('\u805f', "XU");
+        test('\u8060', "PING");
+        test('\u8061', "CONG");
+        test('\u8062', "DING");
+        test('\u8063', "NI");
+        test('\u8064', "TING");
+        test('\u8065', "JU");
+        test('\u8066', "CONG");
+        test('\u8067', "KUI");
+        test('\u8068', "LIAN");
+        test('\u8069', "KUI");
+        test('\u806a', "CONG");
+        test('\u806b', "LIAN");
+        test('\u806c', "WENG");
+        test('\u806d', "KUI");
+        test('\u806e', "LIAN");
+        test('\u806f', "LIAN");
+        test('\u8070', "CONG");
+        test('\u8071', "AO");
+        test('\u8072', "SHENG");
+        test('\u8073', "SONG");
+        test('\u8074', "TING");
+        test('\u8075', "KUI");
+        test('\u8076', "NIE");
+        test('\u8077', "ZHI");
+        test('\u8078', "DAN");
+        test('\u8079', "NING");
+        test('\u807a', "QIE");
+        test('\u807b', "NI");
+        test('\u807c', "TING");
+        test('\u807d', "TING");
+        test('\u807e', "LONG");
+        test('\u807f', "YU");
+        test('\u8080', "YU");
+        test('\u8081', "ZHAO");
+        test('\u8082', "SI");
+        test('\u8083', "SU");
+        test('\u8084', "YI");
+        test('\u8085', "SU");
+        test('\u8086', "SI");
+        test('\u8087', "ZHAO");
+        test('\u8088', "ZHAO");
+        test('\u8089', "ROU");
+        test('\u808a', "YI");
+        test('\u808b', "LE");
+        test('\u808c', "JI");
+        test('\u808d', "QIU");
+        test('\u808e', "KEN");
+        test('\u808f', "CAO");
+        test('\u8090', "GE");
+        test('\u8091', "BO");
+        test('\u8092', "HUAN");
+        test('\u8093', "HUANG");
+        test('\u8094', "YI");
+        test('\u8095', "REN");
+        test('\u8096', "XIAO");
+        test('\u8097', "RU");
+        test('\u8098', "ZHOU");
+        test('\u8099', "YUAN");
+        test('\u809a', "DU");
+        test('\u809b', "GANG");
+        test('\u809c', "RONG");
+        test('\u809d', "GAN");
+        test('\u809e', "CHA");
+        test('\u809f', "WO");
+        test('\u80a0', "CHANG");
+        test('\u80a1', "GU");
+        test('\u80a2', "ZHI");
+        test('\u80a3', "HAN");
+        test('\u80a4', "FU");
+        test('\u80a5', "FEI");
+        test('\u80a6', "FEN");
+        test('\u80a7', "PEI");
+        test('\u80a8', "PANG");
+        test('\u80a9', "JIAN");
+        test('\u80aa', "FANG");
+        test('\u80ab', "ZHUN");
+        test('\u80ac', "YOU");
+        test('\u80ad', "NA");
+        test('\u80ae', "ANG");
+        test('\u80af', "KEN");
+        test('\u80b0', "RAN");
+        test('\u80b1', "GONG");
+        test('\u80b2', "YU");
+        test('\u80b3', "WEN");
+        test('\u80b4', "YAO");
+        test('\u80b5', "QI");
+        test('\u80b6', "PI");
+        test('\u80b7', "QIAN");
+        test('\u80b8', "XI");
+        test('\u80b9', "XI");
+        test('\u80ba', "FEI");
+        test('\u80bb', "KEN");
+        test('\u80bc', "JING");
+        test('\u80bd', "TAI");
+        test('\u80be', "SHEN");
+        test('\u80bf', "ZHONG");
+        test('\u80c0', "ZHANG");
+        test('\u80c1', "XIE");
+        test('\u80c2', "SHEN");
+        test('\u80c3', "WEI");
+        test('\u80c4', "ZHOU");
+        test('\u80c5', "DIE");
+        test('\u80c6', "DAN");
+        test('\u80c7', "FEI");
+        test('\u80c8', "BA");
+        test('\u80c9', "BO");
+        test('\u80ca', "QU");
+        test('\u80cb', "TIAN");
+        test('\u80cc', "BEI");
+        test('\u80cd', "GUA");
+        test('\u80ce', "TAI");
+        test('\u80cf', "ZI");
+        test('\u80d0', "KU");
+        test('\u80d1', "ZHI");
+        test('\u80d2', "NI");
+        test('\u80d3', "PING");
+        test('\u80d4', "ZI");
+        test('\u80d5', "FU");
+        test('\u80d6', "PANG");
+        test('\u80d7', "ZHEN");
+        test('\u80d8', "XIAN");
+        test('\u80d9', "ZUO");
+        test('\u80da', "PEI");
+        test('\u80db', "JIA");
+        test('\u80dc', "SHENG");
+        test('\u80dd', "ZHI");
+        test('\u80de', "BAO");
+        test('\u80df', "MU");
+        test('\u80e0', "QU");
+        test('\u80e1', "HU");
+        test('\u80e2', "KE");
+        test('\u80e3', "CHI");
+        test('\u80e4', "YIN");
+        test('\u80e5', "XU");
+        test('\u80e6', "YANG");
+        test('\u80e7', "LONG");
+        test('\u80e8', "DONG");
+        test('\u80e9', "KA");
+        test('\u80ea', "LU");
+        test('\u80eb', "JING");
+        test('\u80ec', "NU");
+        test('\u80ed', "YAN");
+        test('\u80ee', "PANG");
+        test('\u80ef', "KUA");
+        test('\u80f0', "YI");
+        test('\u80f1', "GUANG");
+        test('\u80f2', "HAI");
+        test('\u80f3', "GE");
+        test('\u80f4', "DONG");
+        test('\u80f5', "CHI");
+        test('\u80f6', "JIAO");
+        test('\u80f7', "XIONG");
+        test('\u80f8', "XIONG");
+        test('\u80f9', "ER");
+        test('\u80fa', "AN");
+        test('\u80fb', "HENG");
+        test('\u80fc', "PIAN");
+        test('\u80fd', "NENG");
+        test('\u80fe', "ZI");
+        test('\u80ff', "GUI");
+        test('\u8100', "CHENG");
+        test('\u8101', "TIAO");
+        test('\u8102', "ZHI");
+        test('\u8103', "CUI");
+        test('\u8104', "MEI");
+        test('\u8105', "XIE");
+        test('\u8106', "CUI");
+        test('\u8107', "XIE");
+        test('\u8108', "MAI");
+        test('\u8109', "MAI");
+        test('\u810a', "JI");
+        test('\u810b', "XIE");
+        test('\u810c', "NIN");
+        test('\u810d', "KUAI");
+        test('\u810e', "SA");
+        test('\u810f', "ZANG");
+        test('\u8110', "QI");
+        test('\u8111', "NAO");
+        test('\u8112', "MI");
+        test('\u8113', "NONG");
+        test('\u8114', "LUAN");
+        test('\u8115', "WAN");
+        test('\u8116', "BO");
+        test('\u8117', "WEN");
+        test('\u8118', "WAN");
+        test('\u8119', "XIU");
+        test('\u811a', "JIAO");
+        test('\u811b', "JING");
+        test('\u811c', "YOU");
+        test('\u811d', "HENG");
+        test('\u811e', "CUO");
+        test('\u811f', "LIE");
+        test('\u8120', "SHAN");
+        test('\u8121', "TING");
+        test('\u8122', "MEI");
+        test('\u8123', "CHUN");
+        test('\u8124', "SHEN");
+        test('\u8125', "QIAN");
+        test('\u8126', "DE");
+        test('\u8127', "JUAN");
+        test('\u8128', "CU");
+        test('\u8129', "XIU");
+        test('\u812a', "XIN");
+        test('\u812b', "TUO");
+        test('\u812c', "PAO");
+        test('\u812d', "CHENG");
+        test('\u812e', "NEI");
+        test('\u812f', "PU");
+        test('\u8130', "DOU");
+        test('\u8131', "TUO");
+        test('\u8132', "NIAO");
+        test('\u8133', "NAO");
+        test('\u8134', "PI");
+        test('\u8135', "GU");
+        test('\u8136', "LUO");
+        test('\u8137', "LI");
+        test('\u8138', "LIAN");
+        test('\u8139', "ZHANG");
+        test('\u813a', "CUI");
+        test('\u813b', "JIE");
+        test('\u813c', "LIANG");
+        test('\u813d', "SHUI");
+        test('\u813e', "PI");
+        test('\u813f', "BIAO");
+        test('\u8140', "LUN");
+        test('\u8141', "PIAN");
+        test('\u8142', "LEI");
+        test('\u8143', "KUI");
+        test('\u8144', "CHUI");
+        test('\u8145', "DAN");
+        test('\u8146', "TIAN");
+        test('\u8147', "NEI");
+        test('\u8148', "JING");
+        test('\u8149', "NAI");
+        test('\u814a', "LA");
+        test('\u814b', "YE");
+        test('\u814c', "YAN");
+        test('\u814d', "REN");
+        test('\u814e', "SHEN");
+        test('\u814f', "CHUO");
+        test('\u8150', "FU");
+        test('\u8151', "FU");
+        test('\u8152', "JU");
+        test('\u8153', "FEI");
+        test('\u8154', "QIANG");
+        test('\u8155', "WAN");
+        test('\u8156', "DONG");
+        test('\u8157', "PI");
+        test('\u8158', "GUO");
+        test('\u8159', "ZONG");
+        test('\u815a', "DING");
+        test('\u815b', "WO");
+        test('\u815c', "MEI");
+        test('\u815d', "NI");
+        test('\u815e', "ZHUAN");
+        test('\u815f', "CHI");
+        test('\u8160', "COU");
+        test('\u8161', "LUO");
+        test('\u8162', "OU");
+        test('\u8163', "DI");
+        test('\u8164', "AN");
+        test('\u8165', "XING");
+        test('\u8166', "NAO");
+        test('\u8167', "SHU");
+        test('\u8168', "SHUAN");
+        test('\u8169', "NAN");
+        test('\u816a', "YUN");
+        test('\u816b', "ZHONG");
+        test('\u816c', "ROU");
+        test('\u816d', "E");
+        test('\u816e', "SAI");
+        test('\u816f', "TU");
+        test('\u8170', "YAO");
+        test('\u8171', "JIAN");
+        test('\u8172', "WEI");
+        test('\u8173', "JIAO");
+        test('\u8174', "YU");
+        test('\u8175', "JIA");
+        test('\u8176', "DUAN");
+        test('\u8177', "BI");
+        test('\u8178', "CHANG");
+        test('\u8179', "FU");
+        test('\u817a', "XIAN");
+        test('\u817b', "NI");
+        test('\u817c', "MIAN");
+        test('\u817d', "WA");
+        test('\u817e', "TENG");
+        test('\u817f', "TUI");
+        test('\u8180', "BANG");
+        test('\u8181', "QIAN");
+        test('\u8182', "LU");
+        test('\u8183', "WA");
+        test('\u8184', "SOU");
+        test('\u8185', "TANG");
+        test('\u8186', "SU");
+        test('\u8187', "ZHUI");
+        test('\u8188', "GE");
+        test('\u8189', "YI");
+        test('\u818a', "BO");
+        test('\u818b', "LIAO");
+        test('\u818c', "JI");
+        test('\u818d', "PI");
+        test('\u818e', "XIE");
+        test('\u818f', "GAO");
+        test('\u8190', "LU");
+        test('\u8191', "BIN");
+        test('\u8192', "OU");
+        test('\u8193', "CHANG");
+        test('\u8194', "LU");
+        test('\u8195', "GUO");
+        test('\u8196', "PANG");
+        test('\u8197', "CHUAI");
+        test('\u8198', "BIAO");
+        test('\u8199', "JIANG");
+        test('\u819a', "FU");
+        test('\u819b', "TANG");
+        test('\u819c', "MO");
+        test('\u819d', "XI");
+        test('\u819e', "ZHUAN");
+        test('\u819f', "LU");
+        test('\u81a0', "JIAO");
+        test('\u81a1', "YING");
+        test('\u81a2', "LU");
+        test('\u81a3', "ZHI");
+        test('\u81a4', "XUE");
+        test('\u81a5', "CHUN");
+        test('\u81a6', "LIN");
+        test('\u81a7', "TONG");
+        test('\u81a8', "PENG");
+        test('\u81a9', "NI");
+        test('\u81aa', "CHUAI");
+        test('\u81ab', "LIAO");
+        test('\u81ac', "CUI");
+        test('\u81ad', "GUI");
+        test('\u81ae', "XIAO");
+        test('\u81af', "TENG");
+        test('\u81b0', "FAN");
+        test('\u81b1', "ZHI");
+        test('\u81b2', "JIAO");
+        test('\u81b3', "SHAN");
+        test('\u81b4', "HU");
+        test('\u81b5', "CUI");
+        test('\u81b6', "RUN");
+        test('\u81b7', "XIANG");
+        test('\u81b8', "SUI");
+        test('\u81b9', "FEN");
+        test('\u81ba', "YING");
+        test('\u81bb', "SHAN");
+        test('\u81bc', "ZHUA");
+        test('\u81bd', "DAN");
+        test('\u81be', "KUAI");
+        test('\u81bf', "NONG");
+        test('\u81c0', "TUN");
+        test('\u81c1', "LIAN");
+        test('\u81c2', "BI");
+        test('\u81c3', "YONG");
+        test('\u81c4', "JUE");
+        test('\u81c5', "CHU");
+        test('\u81c6', "YI");
+        test('\u81c7', "JUAN");
+        test('\u81c8', "LA");
+        test('\u81c9', "LIAN");
+        test('\u81ca', "SAO");
+        test('\u81cb', "TUN");
+        test('\u81cc', "GU");
+        test('\u81cd', "QI");
+        test('\u81ce', "CUI");
+        test('\u81cf', "BIN");
+        test('\u81d0', "XUN");
+        test('\u81d1', "NAO");
+        test('\u81d2', "WO");
+        test('\u81d3', "ZANG");
+        test('\u81d4', "XIAN");
+        test('\u81d5', "BIAO");
+        test('\u81d6', "XING");
+        test('\u81d7', "KUAN");
+        test('\u81d8', "LA");
+        test('\u81d9', "YAN");
+        test('\u81da', "LU");
+        test('\u81db', "HUO");
+        test('\u81dc', "ZA");
+        test('\u81dd', "LUO");
+        test('\u81de', "QU");
+        test('\u81df', "ZANG");
+        test('\u81e0', "LUAN");
+        test('\u81e1', "NI");
+        test('\u81e2', "ZA");
+        test('\u81e3', "CHEN");
+        test('\u81e4', "QIAN");
+        test('\u81e5', "WO");
+        test('\u81e6', "GUANG");
+        test('\u81e7', "ZANG");
+        test('\u81e8', "LIN");
+        test('\u81e9', "GUANG");
+        test('\u81ea', "ZI");
+        test('\u81eb', "JIAO");
+        test('\u81ec', "NIE");
+        test('\u81ed', "CHOU");
+        test('\u81ee', "JI");
+        test('\u81ef', "GAO");
+        test('\u81f0', "CHOU");
+        test('\u81f1', "MIAN");
+        test('\u81f2', "NIE");
+        test('\u81f3', "ZHI");
+        test('\u81f4', "ZHI");
+        test('\u81f5', "GE");
+        test('\u81f6', "JIAN");
+        test('\u81f7', "DIE");
+        test('\u81f8', "ZHI");
+        test('\u81f9', "XIU");
+        test('\u81fa', "TAI");
+        test('\u81fb', "ZHEN");
+        test('\u81fc', "JIU");
+        test('\u81fd', "XIAN");
+        test('\u81fe', "YU");
+        test('\u81ff', "CHA");
+    }
+
+    @SmallTest
+    public void test_13() throws Exception {
+        if (!hasChineseTransliterator()) {
+            return;
+        }
+        test('\u8200', "YAO");
+        test('\u8201', "YU");
+        test('\u8202', "CHONG");
+        test('\u8203', "XI");
+        test('\u8204', "XI");
+        test('\u8205', "JIU");
+        test('\u8206', "YU");
+        test('\u8207', "YU");
+        test('\u8208', "XING");
+        test('\u8209', "JU");
+        test('\u820a', "JIU");
+        test('\u820b', "XIN");
+        test('\u820c', "SHE");
+        test('\u820d', "SHE");
+        test('\u820e', "SHE");
+        test('\u820f', "JIU");
+        test('\u8210', "SHI");
+        test('\u8211', "TAN");
+        test('\u8212', "SHU");
+        test('\u8213', "SHI");
+        test('\u8214', "TIAN");
+        test('\u8215', "TAN");
+        test('\u8216', "PU");
+        test('\u8217', "PU");
+        test('\u8218', "GUAN");
+        test('\u8219', "HUA");
+        test('\u821a', "TIAN");
+        test('\u821b', "CHUAN");
+        test('\u821c', "SHUN");
+        test('\u821d', "XIA");
+        test('\u821e', "WU");
+        test('\u821f', "ZHOU");
+        test('\u8220', "DAO");
+        test('\u8221', "CHUAN");
+        test('\u8222', "SHAN");
+        test('\u8223', "YI");
+        test('\u8224', "FAN");
+        test('\u8225', "PA");
+        test('\u8226', "TAI");
+        test('\u8227', "FAN");
+        test('\u8228', "BAN");
+        test('\u8229', "CHUAN");
+        test('\u822a', "HANG");
+        test('\u822b', "FANG");
+        test('\u822c', "BAN");
+        test('\u822d', "BI");
+        test('\u822e', "LU");
+        test('\u822f', "ZHONG");
+        test('\u8230', "JIAN");
+        test('\u8231', "CANG");
+        test('\u8232', "LING");
+        test('\u8233', "ZHU");
+        test('\u8234', "ZE");
+        test('\u8235', "DUO");
+        test('\u8236', "BO");
+        test('\u8237', "XIAN");
+        test('\u8238', "GE");
+        test('\u8239', "CHUAN");
+        test('\u823a', "XIA");
+        test('\u823b', "LU");
+        test('\u823c', "QIONG");
+        test('\u823d', "PANG");
+        test('\u823e', "XI");
+        test('\u823f', "KUA");
+        test('\u8240', "FU");
+        test('\u8241', "ZAO");
+        test('\u8242', "FENG");
+        test('\u8243', "LI");
+        test('\u8244', "SHAO");
+        test('\u8245', "YU");
+        test('\u8246', "LANG");
+        test('\u8247', "TING");
+        test('\u8248', "YU");
+        test('\u8249', "WEI");
+        test('\u824a', "BO");
+        test('\u824b', "MENG");
+        test('\u824c', "NIAN");
+        test('\u824d', "JU");
+        test('\u824e', "HUANG");
+        test('\u824f', "SHOU");
+        test('\u8250', "KE");
+        test('\u8251', "BIAN");
+        test('\u8252', "MU");
+        test('\u8253', "DIE");
+        test('\u8254', "DOU");
+        test('\u8255', "BANG");
+        test('\u8256', "CHA");
+        test('\u8257', "YI");
+        test('\u8258', "SOU");
+        test('\u8259', "CANG");
+        test('\u825a', "CAO");
+        test('\u825b', "LOU");
+        test('\u825c', "DAI");
+        test('\u825d', "XUE");
+        test('\u825e', "YAO");
+        test('\u825f', "CHONG");
+        test('\u8260', "DENG");
+        test('\u8261', "DANG");
+        test('\u8262', "QIANG");
+        test('\u8263', "LU");
+        test('\u8264', "YI");
+        test('\u8265', "JI");
+        test('\u8266', "JIAN");
+        test('\u8267', "HUO");
+        test('\u8268', "MENG");
+        test('\u8269', "QI");
+        test('\u826a', "LU");
+        test('\u826b', "LU");
+        test('\u826c', "CHAN");
+        test('\u826d', "SHUANG");
+        test('\u826e', "GEN");
+        test('\u826f', "LIANG");
+        test('\u8270', "JIAN");
+        test('\u8271', "JIAN");
+        test('\u8272', "SE");
+        test('\u8273', "YAN");
+        test('\u8274', "FU");
+        test('\u8275', "PING");
+        test('\u8276', "YAN");
+        test('\u8277', "YAN");
+        test('\u8278', "CAO");
+        test('\u8279', "CAO");
+        test('\u827a', "YI");
+        test('\u827b', "LE");
+        test('\u827c', "TING");
+        test('\u827d', "JIAO");
+        test('\u827e', "AI");
+        test('\u827f', "NAI");
+        test('\u8280', "TIAO");
+        test('\u8281', "JIAO");
+        test('\u8282', "JIE");
+        test('\u8283', "PENG");
+        test('\u8284', "WAN");
+        test('\u8285', "YI");
+        test('\u8286', "CHAI");
+        test('\u8287', "MIAN");
+        test('\u8288', "MI");
+        test('\u8289', "GAN");
+        test('\u828a', "QIAN");
+        test('\u828b', "YU");
+        test('\u828c', "YU");
+        test('\u828d', "SHAO");
+        test('\u828e', "QIONG");
+        test('\u828f', "DU");
+        test('\u8290', "HU");
+        test('\u8291', "QI");
+        test('\u8292', "MANG");
+        test('\u8293', "ZI");
+        test('\u8294', "HUI");
+        test('\u8295', "SUI");
+        test('\u8296', "ZHI");
+        test('\u8297', "XIANG");
+        test('\u8298', "PI");
+        test('\u8299', "FU");
+        test('\u829a', "TUN");
+        test('\u829b', "WEI");
+        test('\u829c', "WU");
+        test('\u829d', "ZHI");
+        test('\u829e', "QI");
+        test('\u829f', "SHAN");
+        test('\u82a0', "WEN");
+        test('\u82a1', "QIAN");
+        test('\u82a2', "REN");
+        test('\u82a3', "FU");
+        test('\u82a4', "KOU");
+        test('\u82a5', "JIE");
+        test('\u82a6', "LU");
+        test('\u82a7', "XU");
+        test('\u82a8', "JI");
+        test('\u82a9', "QIN");
+        test('\u82aa', "QI");
+        test('\u82ab', "YAN");
+        test('\u82ac', "FEN");
+        test('\u82ad', "BA");
+        test('\u82ae', "RUI");
+        test('\u82af', "XIN");
+        test('\u82b0', "JI");
+        test('\u82b1', "HUA");
+        test('\u82b2', "HUA");
+        test('\u82b3', "FANG");
+        test('\u82b4', "WU");
+        test('\u82b5', "JUE");
+        test('\u82b6', "GOU");
+        test('\u82b7', "ZHI");
+        test('\u82b8', "YUN");
+        test('\u82b9', "QIN");
+        test('\u82ba', "AO");
+        test('\u82bb', "CHU");
+        test('\u82bc', "MAO");
+        test('\u82bd', "YA");
+        test('\u82be', "FEI");
+        test('\u82bf', "RENG");
+        test('\u82c0', "HANG");
+        test('\u82c1', "CONG");
+        test('\u82c2', "YIN");
+        test('\u82c3', "YOU");
+        test('\u82c4', "BIAN");
+        test('\u82c5', "YI");
+        test('\u82c6', "QIE");
+        test('\u82c7', "WEI");
+        test('\u82c8', "LI");
+        test('\u82c9', "PI");
+        test('\u82ca', "E");
+        test('\u82cb', "XIAN");
+        test('\u82cc', "CHANG");
+        test('\u82cd', "CANG");
+        test('\u82ce', "ZHU");
+        test('\u82cf', "SU");
+        test('\u82d0', "TI");
+        test('\u82d1', "YUAN");
+        test('\u82d2', "RAN");
+        test('\u82d3', "LING");
+        test('\u82d4', "TAI");
+        test('\u82d5', "SHAO");
+        test('\u82d6', "DI");
+        test('\u82d7', "MIAO");
+        test('\u82d8', "QING");
+        test('\u82d9', "LI");
+        test('\u82da', "YONG");
+        test('\u82db', "KE");
+        test('\u82dc', "MU");
+        test('\u82dd', "BEI");
+        test('\u82de', "BAO");
+        test('\u82df', "GOU");
+        test('\u82e0', "MIN");
+        test('\u82e1', "YI");
+        test('\u82e2', "YI");
+        test('\u82e3', "JU");
+        test('\u82e4', "PIE");
+        test('\u82e5', "RUO");
+        test('\u82e6', "KU");
+        test('\u82e7', "NING");
+        test('\u82e8', "NI");
+        test('\u82e9', "BO");
+        test('\u82ea', "BING");
+        test('\u82eb', "SHAN");
+        test('\u82ec', "XIU");
+        test('\u82ed', "YAO");
+        test('\u82ee', "XIAN");
+        test('\u82ef', "BEN");
+        test('\u82f0', "HONG");
+        test('\u82f1', "YING");
+        test('\u82f2', "ZHA");
+        test('\u82f3', "DONG");
+        test('\u82f4', "JU");
+        test('\u82f5', "DIE");
+        test('\u82f6', "NIE");
+        test('\u82f7', "GAN");
+        test('\u82f8', "HU");
+        test('\u82f9', "PING");
+        test('\u82fa', "MEI");
+        test('\u82fb', "FU");
+        test('\u82fc', "SHENG");
+        test('\u82fd', "GU");
+        test('\u82fe', "BI");
+        test('\u82ff', "WEI");
+        test('\u8300', "FU");
+        test('\u8301', "ZHUO");
+        test('\u8302', "MAO");
+        test('\u8303', "FAN");
+        test('\u8304', "JIA");
+        test('\u8305', "MAO");
+        test('\u8306', "MAO");
+        test('\u8307', "BA");
+        test('\u8308', "CI");
+        test('\u8309', "MO");
+        test('\u830a', "ZI");
+        test('\u830b', "DI");
+        test('\u830c', "CHI");
+        test('\u830d', "JI");
+        test('\u830e', "JING");
+        test('\u830f', "LONG");
+        test('\u8310', "CONG");
+        test('\u8311', "NIAO");
+        test('\u8312', "YUAN");
+        test('\u8313', "XUE");
+        test('\u8314', "YING");
+        test('\u8315', "QIONG");
+        test('\u8316', "GE");
+        test('\u8317', "MING");
+        test('\u8318', "LI");
+        test('\u8319', "RONG");
+        test('\u831a', "YIN");
+        test('\u831b', "GEN");
+        test('\u831c', "QIAN");
+        test('\u831d', "CHAI");
+        test('\u831e', "CHEN");
+        test('\u831f', "YU");
+        test('\u8320', "HAO");
+        test('\u8321', "ZI");
+        test('\u8322', "LIE");
+        test('\u8323', "WU");
+        test('\u8324', "JI");
+        test('\u8325', "GUI");
+        test('\u8326', "CI");
+        test('\u8327', "JIAN");
+        test('\u8328', "CI");
+        test('\u8329', "GOU");
+        test('\u832a', "GUANG");
+        test('\u832b', "MANG");
+        test('\u832c', "CHA");
+        test('\u832d', "JIAO");
+        test('\u832e', "JIAO");
+        test('\u832f', "FU");
+        test('\u8330', "YU");
+        test('\u8331', "ZHU");
+        test('\u8332', "ZI");
+        test('\u8333', "JIANG");
+        test('\u8334', "HUI");
+        test('\u8335', "YIN");
+        test('\u8336', "CHA");
+        test('\u8337', "FA");
+        test('\u8338', "RONG");
+        test('\u8339', "RU");
+        test('\u833a', "CHONG");
+        test('\u833b', "MANG");
+        test('\u833c', "TONG");
+        test('\u833d', "ZHONG");
+        test('\u833e', "QIAN");
+        test('\u833f', "ZHU");
+        test('\u8340', "XUN");
+        test('\u8341', "HUAN");
+        test('\u8342', "FU");
+        test('\u8343', "QUAN");
+        test('\u8344', "GAI");
+        test('\u8345', "DA");
+        test('\u8346', "JING");
+        test('\u8347', "XING");
+        test('\u8348', "CHUAN");
+        test('\u8349', "CAO");
+        test('\u834a', "JING");
+        test('\u834b', "ER");
+        test('\u834c', "AN");
+        test('\u834d', "QIAO");
+        test('\u834e', "CHI");
+        test('\u834f', "REN");
+        test('\u8350', "JIAN");
+        test('\u8351', "TI");
+        test('\u8352', "HUANG");
+        test('\u8353', "PING");
+        test('\u8354', "LI");
+        test('\u8355', "JIN");
+        test('\u8356', "LAO");
+        test('\u8357', "SHU");
+        test('\u8358', "ZHUANG");
+        test('\u8359', "DA");
+        test('\u835a', "JIA");
+        test('\u835b', "RAO");
+        test('\u835c', "BI");
+        test('\u835d', "ZE");
+        test('\u835e', "QIAO");
+        test('\u835f', "HUI");
+        test('\u8360', "JI");
+        test('\u8361', "DANG");
+        test('\u8362', "YU");
+        test('\u8363', "RONG");
+        test('\u8364', "HUN");
+        test('\u8365', "XING");
+        test('\u8366', "LUO");
+        test('\u8367', "YING");
+        test('\u8368', "XUN");
+        test('\u8369', "JIN");
+        test('\u836a', "SUN");
+        test('\u836b', "YIN");
+        test('\u836c', "MAI");
+        test('\u836d', "HONG");
+        test('\u836e', "ZHOU");
+        test('\u836f', "YAO");
+        test('\u8370', "DU");
+        test('\u8371', "WEI");
+        test('\u8372', "LI");
+        test('\u8373', "DOU");
+        test('\u8374', "FU");
+        test('\u8375', "REN");
+        test('\u8376', "YIN");
+        test('\u8377', "HE");
+        test('\u8378', "BI");
+        test('\u8379', "BU");
+        test('\u837a', "YUN");
+        test('\u837b', "DI");
+        test('\u837c', "TU");
+        test('\u837d', "SUI");
+        test('\u837e', "SUI");
+        test('\u837f', "CHENG");
+        test('\u8380', "CHEN");
+        test('\u8381', "WU");
+        test('\u8382', "BIE");
+        test('\u8383', "XI");
+        test('\u8384', "GENG");
+        test('\u8385', "LI");
+        test('\u8386', "PU");
+        test('\u8387', "ZHU");
+        test('\u8388', "MO");
+        test('\u8389', "LI");
+        test('\u838a', "ZHUANG");
+        test('\u838b', "ZUO");
+        test('\u838c', "TUO");
+        test('\u838d', "QIU");
+        test('\u838e', "SHA");
+        test('\u838f', "SUO");
+        test('\u8390', "CHEN");
+        test('\u8391', "PENG");
+        test('\u8392', "JU");
+        test('\u8393', "MEI");
+        test('\u8394', "MENG");
+        test('\u8395', "XING");
+        test('\u8396', "JING");
+        test('\u8397', "CHE");
+        test('\u8398', "XIN");
+        test('\u8399', "JUN");
+        test('\u839a', "YAN");
+        test('\u839b', "TING");
+        test('\u839c', "YOU");
+        test('\u839d', "CUO");
+        test('\u839e', "GUAN");
+        test('\u839f', "HAN");
+        test('\u83a0', "YOU");
+        test('\u83a1', "CUO");
+        test('\u83a2', "JIA");
+        test('\u83a3', "WANG");
+        test('\u83a4', "SU");
+        test('\u83a5', "NIU");
+        test('\u83a6', "SHAO");
+        test('\u83a7', "XIAN");
+        test('\u83a8', "LANG");
+        test('\u83a9', "FU");
+        test('\u83aa', "E");
+        test('\u83ab', "MO");
+        test('\u83ac', "WEN");
+        test('\u83ad', "JIE");
+        test('\u83ae', "NAN");
+        test('\u83af', "MU");
+        test('\u83b0', "KAN");
+        test('\u83b1', "LAI");
+        test('\u83b2', "LIAN");
+        test('\u83b3', "SHI");
+        test('\u83b4', "WO");
+        test('\u83b5', "TU");
+        test('\u83b6', "XIAN");
+        test('\u83b7', "HUO");
+        test('\u83b8', "YOU");
+        test('\u83b9', "YING");
+        test('\u83ba', "YING");
+        test('\u83bb', "GONG");
+        test('\u83bc', "CHUN");
+        test('\u83bd', "MANG");
+        test('\u83be', "MANG");
+        test('\u83bf', "CI");
+        test('\u83c0', "WAN");
+        test('\u83c1', "JING");
+        test('\u83c2', "DI");
+        test('\u83c3', "QU");
+        test('\u83c4', "DONG");
+        test('\u83c5', "JIAN");
+        test('\u83c6', "ZOU");
+        test('\u83c7', "GU");
+        test('\u83c8', "LA");
+        test('\u83c9', "LU");
+        test('\u83ca', "JU");
+        test('\u83cb', "WEI");
+        test('\u83cc', "JUN");
+        test('\u83cd', "NIE");
+        test('\u83ce', "KUN");
+        test('\u83cf', "HE");
+        test('\u83d0', "PU");
+        test('\u83d1', "ZAI");
+        test('\u83d2', "GAO");
+        test('\u83d3', "GUO");
+        test('\u83d4', "FU");
+        test('\u83d5', "LUN");
+        test('\u83d6', "CHANG");
+        test('\u83d7', "CHOU");
+        test('\u83d8', "SONG");
+        test('\u83d9', "CHUI");
+        test('\u83da', "ZHAN");
+        test('\u83db', "MEN");
+        test('\u83dc', "CAI");
+        test('\u83dd', "BA");
+        test('\u83de', "LI");
+        test('\u83df', "TU");
+        test('\u83e0', "BO");
+        test('\u83e1', "HAN");
+        test('\u83e2', "BAO");
+        test('\u83e3', "QIN");
+        test('\u83e4', "JUAN");
+        test('\u83e5', "XI");
+        test('\u83e6', "QIN");
+        test('\u83e7', "DI");
+        test('\u83e8', "JIE");
+        test('\u83e9', "PU");
+        test('\u83ea', "DANG");
+        test('\u83eb', "JIN");
+        test('\u83ec', "QIAO");
+        test('\u83ed', "TAI");
+        test('\u83ee', "GENG");
+        test('\u83ef', "HUA");
+        test('\u83f0', "GU");
+        test('\u83f1', "LING");
+        test('\u83f2', "FEI");
+        test('\u83f3', "QIN");
+        test('\u83f4', "AN");
+        test('\u83f5', "WANG");
+        test('\u83f6', "BENG");
+        test('\u83f7', "ZHOU");
+        test('\u83f8', "YAN");
+        test('\u83f9', "JU");
+        test('\u83fa', "JIAN");
+        test('\u83fb', "LIN");
+        test('\u83fc', "TAN");
+        test('\u83fd', "SHU");
+        test('\u83fe', "TIAN");
+        test('\u83ff', "DAO");
+        test('\u8400', "HU");
+        test('\u8401', "QI");
+        test('\u8402', "HE");
+        test('\u8403', "CUI");
+        test('\u8404', "TAO");
+        test('\u8405', "CHUN");
+        test('\u8406', "BI");
+        test('\u8407', "CHANG");
+        test('\u8408', "HUAN");
+        test('\u8409', "FEI");
+        test('\u840a', "LAI");
+        test('\u840b', "QI");
+        test('\u840c', "MENG");
+        test('\u840d', "PING");
+        test('\u840e', "WEI");
+        test('\u840f', "DAN");
+        test('\u8410', "SHA");
+        test('\u8411', "HUAN");
+        test('\u8412', "YAN");
+        test('\u8413', "YI");
+        test('\u8414', "TIAO");
+        test('\u8415', "QI");
+        test('\u8416', "WAN");
+        test('\u8417', "CE");
+        test('\u8418', "NAI");
+        test('\u8419', "ZHEN");
+        test('\u841a', "TUO");
+        test('\u841b', "JIU");
+        test('\u841c', "TIE");
+        test('\u841d', "LUO");
+        test('\u841e', "BI");
+        test('\u841f', "YI");
+        test('\u8420', "MENG");
+        test('\u8421', "BO");
+        test('\u8422', "PAO");
+        test('\u8423', "DING");
+        test('\u8424', "YING");
+        test('\u8425', "YING");
+        test('\u8426', "YING");
+        test('\u8427', "XIAO");
+        test('\u8428', "SA");
+        test('\u8429', "QIU");
+        test('\u842a', "KE");
+        test('\u842b', "XIANG");
+        test('\u842c', "WAN");
+        test('\u842d', "YU");
+        test('\u842e', "YU");
+        test('\u842f', "FU");
+        test('\u8430', "LIAN");
+        test('\u8431', "XUAN");
+        test('\u8432', "XUAN");
+        test('\u8433', "NAN");
+        test('\u8434', "CE");
+        test('\u8435', "WO");
+        test('\u8436', "CHUN");
+        test('\u8437', "XIAO");
+        test('\u8438', "YU");
+        test('\u8439', "BIAN");
+        test('\u843a', "MAO");
+        test('\u843b', "AN");
+        test('\u843c', "E");
+        test('\u843d', "LUO");
+        test('\u843e', "YING");
+        test('\u843f', "KUO");
+        test('\u8440', "KUO");
+        test('\u8441', "JIANG");
+        test('\u8442', "MIAN");
+        test('\u8443', "ZUO");
+        test('\u8444', "ZUO");
+        test('\u8445', "ZU");
+        test('\u8446', "BAO");
+        test('\u8447', "ROU");
+        test('\u8448', "XI");
+        test('\u8449', "YE");
+        test('\u844a', "AN");
+        test('\u844b', "QU");
+        test('\u844c', "JIAN");
+        test('\u844d', "FU");
+        test('\u844e', "LU");
+        test('\u844f', "JING");
+        test('\u8450', "PEN");
+        test('\u8451', "FENG");
+        test('\u8452', "HONG");
+        test('\u8453', "HONG");
+        test('\u8454', "HOU");
+        test('\u8455', "YAN");
+        test('\u8456', "TU");
+        test('\u8457', "ZHE");
+        test('\u8458', "ZI");
+        test('\u8459', "XIANG");
+        test('\u845a', "REN");
+        test('\u845b', "GE");
+        test('\u845c', "QIA");
+        test('\u845d', "QING");
+        test('\u845e', "MI");
+        test('\u845f', "HUANG");
+        test('\u8460', "SHEN");
+        test('\u8461', "PU");
+        test('\u8462', "GAI");
+        test('\u8463', "DONG");
+        test('\u8464', "ZHOU");
+        test('\u8465', "JIAN");
+        test('\u8466', "WEI");
+        test('\u8467', "BO");
+        test('\u8468', "WEI");
+        test('\u8469', "PA");
+        test('\u846a', "JI");
+        test('\u846b', "HU");
+        test('\u846c', "ZANG");
+        test('\u846d', "JIA");
+        test('\u846e', "DUAN");
+        test('\u846f', "YAO");
+        test('\u8470', "SUI");
+        test('\u8471', "CONG");
+        test('\u8472', "QUAN");
+        test('\u8473', "WEI");
+        test('\u8474', "ZHEN");
+        test('\u8475', "KUI");
+        test('\u8476', "TING");
+        test('\u8477', "HUN");
+        test('\u8478', "XI");
+        test('\u8479', "SHI");
+        test('\u847a', "QI");
+        test('\u847b', "LAN");
+        test('\u847c', "ZONG");
+        test('\u847d', "YAO");
+        test('\u847e', "YUAN");
+        test('\u847f', "MEI");
+        test('\u8480', "YUN");
+        test('\u8481', "SHU");
+        test('\u8482', "DI");
+        test('\u8483', "ZHUAN");
+        test('\u8484', "GUAN");
+        test('\u8485', "RAN");
+        test('\u8486', "XUE");
+        test('\u8487', "CHAN");
+        test('\u8488', "KAI");
+        test('\u8489', "KUI");
+        test('\u848a', "HUA");
+        test('\u848b', "JIANG");
+        test('\u848c', "LOU");
+        test('\u848d', "WEI");
+        test('\u848e', "PAI");
+        test('\u848f', "YOU");
+        test('\u8490', "SOU");
+        test('\u8491', "YIN");
+        test('\u8492', "SHI");
+        test('\u8493', "CHUN");
+        test('\u8494', "SHI");
+        test('\u8495', "YUN");
+        test('\u8496', "ZHEN");
+        test('\u8497', "LANG");
+        test('\u8498', "RU");
+        test('\u8499', "MENG");
+        test('\u849a', "LI");
+        test('\u849b', "QUE");
+        test('\u849c', "SUAN");
+        test('\u849d', "YUAN");
+        test('\u849e', "LI");
+        test('\u849f', "JU");
+        test('\u84a0', "XI");
+        test('\u84a1', "BANG");
+        test('\u84a2', "CHU");
+        test('\u84a3', "XU");
+        test('\u84a4', "TU");
+        test('\u84a5', "LIU");
+        test('\u84a6', "HUO");
+        test('\u84a7', "DIAN");
+        test('\u84a8', "QIAN");
+        test('\u84a9', "ZU");
+        test('\u84aa', "PO");
+        test('\u84ab', "CUO");
+        test('\u84ac', "YUAN");
+        test('\u84ad', "CHU");
+        test('\u84ae', "YU");
+        test('\u84af', "KUAI");
+        test('\u84b0', "PAN");
+        test('\u84b1', "PU");
+        test('\u84b2', "PU");
+        test('\u84b3', "NA");
+        test('\u84b4', "SHUO");
+        test('\u84b5', "XI");
+        test('\u84b6', "FEN");
+        test('\u84b7', "YUN");
+        test('\u84b8', "ZHENG");
+        test('\u84b9', "JIAN");
+        test('\u84ba', "JI");
+        test('\u84bb', "RUO");
+        test('\u84bc', "CANG");
+        test('\u84bd', "EN");
+        test('\u84be', "MI");
+        test('\u84bf', "HAO");
+        test('\u84c0', "SUN");
+        test('\u84c1', "ZHEN");
+        test('\u84c2', "MING");
+        test('\u84c3', "SOU");
+        test('\u84c4', "XU");
+        test('\u84c5', "LIU");
+        test('\u84c6', "XI");
+        test('\u84c7', "GU");
+        test('\u84c8', "LANG");
+        test('\u84c9', "RONG");
+        test('\u84ca', "WENG");
+        test('\u84cb', "GAI");
+        test('\u84cc', "CUO");
+        test('\u84cd', "SHI");
+        test('\u84ce', "TANG");
+        test('\u84cf', "LUO");
+        test('\u84d0', "RU");
+        test('\u84d1', "SUO");
+        test('\u84d2', "XUAN");
+        test('\u84d3', "BEI");
+        test('\u84d4', "YAO");
+        test('\u84d5', "GUI");
+        test('\u84d6', "BI");
+        test('\u84d7', "ZONG");
+        test('\u84d8', "GUN");
+        test('\u84d9', "ZUO");
+        test('\u84da', "TIAO");
+        test('\u84db', "CE");
+        test('\u84dc', "PEI");
+        test('\u84dd', "LAN");
+        test('\u84de', "DAN");
+        test('\u84df', "JI");
+        test('\u84e0', "LI");
+        test('\u84e1', "SHEN");
+        test('\u84e2', "LANG");
+        test('\u84e3', "YU");
+        test('\u84e4', "LING");
+        test('\u84e5', "YING");
+        test('\u84e6', "MO");
+        test('\u84e7', "DIAO");
+        test('\u84e8', "TIAO");
+        test('\u84e9', "MAO");
+        test('\u84ea', "TONG");
+        test('\u84eb', "CHU");
+        test('\u84ec', "PENG");
+        test('\u84ed', "AN");
+        test('\u84ee', "LIAN");
+        test('\u84ef', "CONG");
+        test('\u84f0', "XI");
+        test('\u84f1', "PING");
+        test('\u84f2', "QIU");
+        test('\u84f3', "JIN");
+        test('\u84f4', "CHUN");
+        test('\u84f5', "JIE");
+        test('\u84f6', "WEI");
+        test('\u84f7', "TUI");
+        test('\u84f8', "CAO");
+        test('\u84f9', "YU");
+        test('\u84fa', "YI");
+        test('\u84fb', "ZI");
+        test('\u84fc', "LIAO");
+        test('\u84fd', "BI");
+        test('\u84fe', "LU");
+        test('\u84ff', "XU");
+        test('\u8500', "BU");
+        test('\u8501', "ZHANG");
+        test('\u8502', "LEI");
+        test('\u8503', "QIANG");
+        test('\u8504', "MAN");
+        test('\u8505', "YAN");
+        test('\u8506', "LING");
+        test('\u8507', "JI");
+        test('\u8508', "BIAO");
+        test('\u8509', "GUN");
+        test('\u850a', "HAN");
+        test('\u850b', "DI");
+        test('\u850c', "SU");
+        test('\u850d', "LU");
+        test('\u850e', "SHE");
+        test('\u850f', "SHANG");
+        test('\u8510', "DI");
+        test('\u8511', "MIE");
+        test('\u8512', "XUN");
+        test('\u8513', "MAN");
+        test('\u8514', "BO");
+        test('\u8515', "DI");
+        test('\u8516', "CUO");
+        test('\u8517', "ZHE");
+        test('\u8518', "SHEN");
+        test('\u8519', "XUAN");
+        test('\u851a', "WEI");
+        test('\u851b', "HU");
+        test('\u851c', "AO");
+        test('\u851d', "MI");
+        test('\u851e', "LOU");
+        test('\u851f', "CU");
+        test('\u8520', "ZHONG");
+        test('\u8521', "CAI");
+        test('\u8522', "PO");
+        test('\u8523', "JIANG");
+        test('\u8524', "MI");
+        test('\u8525', "CONG");
+        test('\u8526', "NIAO");
+        test('\u8527', "HUI");
+        test('\u8528', "JUAN");
+        test('\u8529', "YIN");
+        test('\u852a', "JIAN");
+        test('\u852b', "NIAN");
+        test('\u852c', "SHU");
+        test('\u852d', "YIN");
+        test('\u852e', "GUO");
+        test('\u852f', "CHEN");
+        test('\u8530', "HU");
+        test('\u8531', "SHA");
+        test('\u8532', "KOU");
+        test('\u8533', "QIAN");
+        test('\u8534', "MA");
+        test('\u8535', "ZANG");
+        test('\u8536', "ZE");
+        test('\u8537', "QIANG");
+        test('\u8538', "DOU");
+        test('\u8539', "LIAN");
+        test('\u853a', "LIN");
+        test('\u853b', "KOU");
+        test('\u853c', "AI");
+        test('\u853d', "BI");
+        test('\u853e', "LI");
+        test('\u853f', "WEI");
+        test('\u8540', "JI");
+        test('\u8541', "QIAN");
+        test('\u8542', "SHENG");
+        test('\u8543', "FAN");
+        test('\u8544', "MENG");
+        test('\u8545', "OU");
+        test('\u8546', "CHAN");
+        test('\u8547', "DIAN");
+        test('\u8548', "XUN");
+        test('\u8549', "JIAO");
+        test('\u854a', "RUI");
+        test('\u854b', "RUI");
+        test('\u854c', "LEI");
+        test('\u854d', "YU");
+        test('\u854e', "QIAO");
+        test('\u854f', "CHU");
+        test('\u8550', "HUA");
+        test('\u8551', "JIAN");
+        test('\u8552', "MAI");
+        test('\u8553', "YUN");
+        test('\u8554', "BAO");
+        test('\u8555', "YOU");
+        test('\u8556', "QU");
+        test('\u8557', "LU");
+        test('\u8558', "RAO");
+        test('\u8559', "HUI");
+        test('\u855a', "E");
+        test('\u855b', "TI");
+        test('\u855c', "FEI");
+        test('\u855d', "JUE");
+        test('\u855e', "ZUI");
+        test('\u855f', "FA");
+        test('\u8560', "RU");
+        test('\u8561', "FEN");
+        test('\u8562', "KUI");
+        test('\u8563', "SHUN");
+        test('\u8564', "RUI");
+        test('\u8565', "YA");
+        test('\u8566', "XU");
+        test('\u8567', "FU");
+        test('\u8568', "JUE");
+        test('\u8569', "DANG");
+        test('\u856a', "WU");
+        test('\u856b', "DONG");
+        test('\u856c', "SI");
+        test('\u856d', "XIAO");
+        test('\u856e', "XI");
+        test('\u856f', "LONG");
+        test('\u8570', "WEN");
+        test('\u8571', "SHAO");
+        test('\u8572', "QI");
+        test('\u8573', "JIAN");
+        test('\u8574', "YUN");
+        test('\u8575', "SUN");
+        test('\u8576', "LING");
+        test('\u8577', "YU");
+        test('\u8578', "XIA");
+        test('\u8579', "WENG");
+        test('\u857a', "JI");
+        test('\u857b', "HONG");
+        test('\u857c', "SI");
+        test('\u857d', "NONG");
+        test('\u857e', "LEI");
+        test('\u857f', "XUAN");
+        test('\u8580', "YUN");
+        test('\u8581', "YU");
+        test('\u8582', "XI");
+        test('\u8583', "HAO");
+        test('\u8584', "BAO");
+        test('\u8585', "HAO");
+        test('\u8586', "AI");
+        test('\u8587', "WEI");
+        test('\u8588', "HUI");
+        test('\u8589', "HUI");
+        test('\u858a', "JI");
+        test('\u858b', "CI");
+        test('\u858c', "XIANG");
+        test('\u858d', "WAN");
+        test('\u858e', "MIE");
+        test('\u858f', "YI");
+        test('\u8590', "LENG");
+        test('\u8591', "JIANG");
+        test('\u8592', "CAN");
+        test('\u8593', "SHEN");
+        test('\u8594', "QIANG");
+        test('\u8595', "LIAN");
+        test('\u8596', "KE");
+        test('\u8597', "YUAN");
+        test('\u8598', "DA");
+        test('\u8599', "TI");
+        test('\u859a', "TANG");
+        test('\u859b', "XUE");
+        test('\u859c', "BI");
+        test('\u859d', "ZHAN");
+        test('\u859e', "SUN");
+        test('\u859f', "XIAN");
+        test('\u85a0', "FAN");
+        test('\u85a1', "DING");
+        test('\u85a2', "XIE");
+        test('\u85a3', "GU");
+        test('\u85a4', "XIE");
+        test('\u85a5', "SHU");
+        test('\u85a6', "JIAN");
+        test('\u85a7', "HAO");
+        test('\u85a8', "HONG");
+        test('\u85a9', "SA");
+        test('\u85aa', "XIN");
+        test('\u85ab', "XUN");
+        test('\u85ac', "YAO");
+        test('\u85ad', "BAI");
+        test('\u85ae', "SOU");
+        test('\u85af', "SHU");
+        test('\u85b0', "XUN");
+        test('\u85b1', "DUI");
+        test('\u85b2', "PIN");
+        test('\u85b3', "WEI");
+        test('\u85b4', "NING");
+        test('\u85b5', "CHOU");
+        test('\u85b6', "MAI");
+        test('\u85b7', "RU");
+        test('\u85b8', "PIAO");
+        test('\u85b9', "TAI");
+        test('\u85ba', "JI");
+        test('\u85bb', "ZAO");
+        test('\u85bc', "CHEN");
+        test('\u85bd', "ZHEN");
+        test('\u85be', "ER");
+        test('\u85bf', "NI");
+        test('\u85c0', "YING");
+        test('\u85c1', "GAO");
+        test('\u85c2', "CONG");
+        test('\u85c3', "XIAO");
+        test('\u85c4', "QI");
+        test('\u85c5', "FA");
+        test('\u85c6', "JIAN");
+        test('\u85c7', "XU");
+        test('\u85c8', "KUI");
+        test('\u85c9', "JI");
+        test('\u85ca', "BIAN");
+        test('\u85cb', "DIAO");
+        test('\u85cc', "MI");
+        test('\u85cd', "LAN");
+        test('\u85ce', "JIN");
+        test('\u85cf', "CANG");
+        test('\u85d0', "MIAO");
+        test('\u85d1', "QIONG");
+        test('\u85d2', "QIE");
+        test('\u85d3', "XIAN");
+        test('\u85d4', "LIAO");
+        test('\u85d5', "OU");
+        test('\u85d6', "XIAN");
+        test('\u85d7', "SU");
+        test('\u85d8', "LU");
+        test('\u85d9', "YI");
+        test('\u85da', "XU");
+        test('\u85db', "XIE");
+        test('\u85dc', "LI");
+        test('\u85dd', "YI");
+        test('\u85de', "LA");
+        test('\u85df', "LEI");
+        test('\u85e0', "JIAO");
+        test('\u85e1', "DI");
+        test('\u85e2', "ZHI");
+        test('\u85e3', "BEI");
+        test('\u85e4', "TENG");
+        test('\u85e5', "YAO");
+        test('\u85e6', "MO");
+        test('\u85e7', "HUAN");
+        test('\u85e8', "BIAO");
+        test('\u85e9', "FAN");
+        test('\u85ea', "SOU");
+        test('\u85eb', "TAN");
+        test('\u85ec', "TUI");
+        test('\u85ed', "QIONG");
+        test('\u85ee', "QIAO");
+        test('\u85ef', "WEI");
+        test('\u85f0', "LIU");
+        test('\u85f1', "HUI");
+        test('\u85f2', "OU");
+        test('\u85f3', "GAO");
+        test('\u85f4', "YUN");
+        test('\u85f5', "BAO");
+        test('\u85f6', "LI");
+        test('\u85f7', "SHU");
+        test('\u85f8', "CHU");
+        test('\u85f9', "AI");
+        test('\u85fa', "LIN");
+        test('\u85fb', "ZAO");
+        test('\u85fc', "XUAN");
+        test('\u85fd', "QIN");
+        test('\u85fe', "LAI");
+        test('\u85ff', "HUO");
+    }
+
+    @SmallTest
+    public void test_14() throws Exception {
+        if (!hasChineseTransliterator()) {
+            return;
+        }
+        test('\u8600', "TUO");
+        test('\u8601', "WU");
+        test('\u8602', "RUI");
+        test('\u8603', "RUI");
+        test('\u8604', "QI");
+        test('\u8605', "HENG");
+        test('\u8606', "LU");
+        test('\u8607', "SU");
+        test('\u8608', "TUI");
+        test('\u8609', "MENG");
+        test('\u860a', "YUN");
+        test('\u860b', "PING");
+        test('\u860c', "YU");
+        test('\u860d', "XUN");
+        test('\u860e', "JI");
+        test('\u860f', "JIONG");
+        test('\u8610', "XUAN");
+        test('\u8611', "MO");
+        test('\u8612', "QIU");
+        test('\u8613', "SU");
+        test('\u8614', "JIONG");
+        test('\u8615', "FENG");
+        test('\u8616', "NIE");
+        test('\u8617', "BO");
+        test('\u8618', "RANG");
+        test('\u8619', "YI");
+        test('\u861a', "XIAN");
+        test('\u861b', "YU");
+        test('\u861c', "JU");
+        test('\u861d', "LIAN");
+        test('\u861e', "LIAN");
+        test('\u861f', "YIN");
+        test('\u8620', "QIANG");
+        test('\u8621', "YING");
+        test('\u8622', "LONG");
+        test('\u8623', "TOU");
+        test('\u8624', "WEI");
+        test('\u8625', "YUE");
+        test('\u8626', "LING");
+        test('\u8627', "QU");
+        test('\u8628', "YAO");
+        test('\u8629', "FAN");
+        test('\u862a', "MEI");
+        test('\u862b', "HAN");
+        test('\u862c', "KUI");
+        test('\u862d', "LAN");
+        test('\u862e', "JI");
+        test('\u862f', "DANG");
+        test('\u8630', "MAN");
+        test('\u8631', "LEI");
+        test('\u8632', "LEI");
+        test('\u8633', "HUI");
+        test('\u8634', "FENG");
+        test('\u8635', "ZHI");
+        test('\u8636', "WEI");
+        test('\u8637', "KUI");
+        test('\u8638', "ZHAN");
+        test('\u8639', "HUAI");
+        test('\u863a', "LI");
+        test('\u863b', "JI");
+        test('\u863c', "MI");
+        test('\u863d', "LEI");
+        test('\u863e', "HUAI");
+        test('\u863f', "LUO");
+        test('\u8640', "JI");
+        test('\u8641', "KUI");
+        test('\u8642', "LU");
+        test('\u8643', "JIAN");
+        test('\u8644', "SA");
+        test('\u8645', "TENG");
+        test('\u8646', "LEI");
+        test('\u8647', "QUAN");
+        test('\u8648', "XIAO");
+        test('\u8649', "YI");
+        test('\u864a', "LUAN");
+        test('\u864b', "MEN");
+        test('\u864c', "BIE");
+        test('\u864d', "HU");
+        test('\u864e', "HU");
+        test('\u864f', "LU");
+        test('\u8650', "NUE");
+        test('\u8651', "LU");
+        test('\u8652', "SI");
+        test('\u8653', "XIAO");
+        test('\u8654', "QIAN");
+        test('\u8655', "CHU");
+        test('\u8656', "HU");
+        test('\u8657', "XU");
+        test('\u8658', "CUO");
+        test('\u8659', "FU");
+        test('\u865a', "XU");
+        test('\u865b', "XU");
+        test('\u865c', "LU");
+        test('\u865d', "HU");
+        test('\u865e', "YU");
+        test('\u865f', "HAO");
+        test('\u8660', "JIAO");
+        test('\u8661', "JU");
+        test('\u8662', "GUO");
+        test('\u8663', "BAO");
+        test('\u8664', "YAN");
+        test('\u8665', "ZHAN");
+        test('\u8666', "ZHAN");
+        test('\u8667', "KUI");
+        test('\u8668', "BIN");
+        test('\u8669', "XI");
+        test('\u866a', "SHU");
+        test('\u866b', "CHONG");
+        test('\u866c', "QIU");
+        test('\u866d', "DIAO");
+        test('\u866e', "JI");
+        test('\u866f', "QIU");
+        test('\u8670', "DING");
+        test('\u8671', "SHI");
+        test('\u8672', "XIA");
+        test('\u8673', "JUE");
+        test('\u8674', "ZHE");
+        test('\u8675', "SHE");
+        test('\u8676', "YU");
+        test('\u8677', "HAN");
+        test('\u8678', "ZI");
+        test('\u8679', "HONG");
+        test('\u867a', "HUI");
+        test('\u867b', "MENG");
+        test('\u867c', "GE");
+        test('\u867d', "SUI");
+        test('\u867e', "XIA");
+        test('\u867f', "CHAI");
+        test('\u8680', "SHI");
+        test('\u8681', "YI");
+        test('\u8682', "MA");
+        test('\u8683', "XIANG");
+        test('\u8684', "FANG");
+        test('\u8685', "E");
+        test('\u8686', "BA");
+        test('\u8687', "CHI");
+        test('\u8688', "QIAN");
+        test('\u8689', "WEN");
+        test('\u868a', "WEN");
+        test('\u868b', "RUI");
+        test('\u868c', "BANG");
+        test('\u868d', "PI");
+        test('\u868e', "YUE");
+        test('\u868f', "YUE");
+        test('\u8690', "JUN");
+        test('\u8691', "QI");
+        test('\u8692', "TONG");
+        test('\u8693', "YIN");
+        test('\u8694', "QI");
+        test('\u8695', "CAN");
+        test('\u8696', "YUAN");
+        test('\u8697', "JUE");
+        test('\u8698', "HUI");
+        test('\u8699', "QIN");
+        test('\u869a', "QI");
+        test('\u869b', "ZHONG");
+        test('\u869c', "YA");
+        test('\u869d', "HAO");
+        test('\u869e', "MU");
+        test('\u869f', "WANG");
+        test('\u86a0', "FEN");
+        test('\u86a1', "FEN");
+        test('\u86a2', "HANG");
+        test('\u86a3', "GONG");
+        test('\u86a4', "ZAO");
+        test('\u86a5', "FU");
+        test('\u86a6', "RAN");
+        test('\u86a7', "JIE");
+        test('\u86a8', "FU");
+        test('\u86a9', "CHI");
+        test('\u86aa', "DOU");
+        test('\u86ab', "BAO");
+        test('\u86ac', "XIAN");
+        test('\u86ad', "NI");
+        test('\u86ae', "TE");
+        test('\u86af', "QIU");
+        test('\u86b0', "YOU");
+        test('\u86b1', "ZHA");
+        test('\u86b2', "PING");
+        test('\u86b3', "CHI");
+        test('\u86b4', "YOU");
+        test('\u86b5', "HE");
+        test('\u86b6', "HAN");
+        test('\u86b7', "JU");
+        test('\u86b8', "LI");
+        test('\u86b9', "FU");
+        test('\u86ba', "RAN");
+        test('\u86bb', "ZHA");
+        test('\u86bc', "GOU");
+        test('\u86bd', "PI");
+        test('\u86be', "PI");
+        test('\u86bf', "XIAN");
+        test('\u86c0', "ZHU");
+        test('\u86c1', "DIAO");
+        test('\u86c2', "BIE");
+        test('\u86c3', "BING");
+        test('\u86c4', "GU");
+        test('\u86c5', "ZHAN");
+        test('\u86c6', "QU");
+        test('\u86c7', "SHE");
+        test('\u86c8', "TIE");
+        test('\u86c9', "LING");
+        test('\u86ca', "GU");
+        test('\u86cb', "DAN");
+        test('\u86cc', "GU");
+        test('\u86cd', "YING");
+        test('\u86ce', "LI");
+        test('\u86cf', "CHENG");
+        test('\u86d0', "QU");
+        test('\u86d1', "MOU");
+        test('\u86d2', "GE");
+        test('\u86d3', "CI");
+        test('\u86d4', "HUI");
+        test('\u86d5', "HUI");
+        test('\u86d6', "MANG");
+        test('\u86d7', "FU");
+        test('\u86d8', "YANG");
+        test('\u86d9', "WA");
+        test('\u86da', "LIE");
+        test('\u86db', "ZHU");
+        test('\u86dc', "YI");
+        test('\u86dd', "XIAN");
+        test('\u86de', "KUO");
+        test('\u86df', "JIAO");
+        test('\u86e0', "LI");
+        test('\u86e1', "YI");
+        test('\u86e2', "PING");
+        test('\u86e3', "QI");
+        test('\u86e4', "HA");
+        test('\u86e5', "SHE");
+        test('\u86e6', "YI");
+        test('\u86e7', "WANG");
+        test('\u86e8', "MO");
+        test('\u86e9', "QIONG");
+        test('\u86ea', "QIE");
+        test('\u86eb', "GUI");
+        test('\u86ec', "QIONG");
+        test('\u86ed', "ZHI");
+        test('\u86ee', "MAN");
+        test('\u86ef', "LAO");
+        test('\u86f0', "ZHE");
+        test('\u86f1', "JIA");
+        test('\u86f2', "NAO");
+        test('\u86f3', "SI");
+        test('\u86f4', "QI");
+        test('\u86f5', "XING");
+        test('\u86f6', "JIE");
+        test('\u86f7', "QIU");
+        test('\u86f8', "SHAO");
+        test('\u86f9', "YONG");
+        test('\u86fa', "JIA");
+        test('\u86fb', "TUI");
+        test('\u86fc', "CHE");
+        test('\u86fd', "BAI");
+        test('\u86fe', "E");
+        test('\u86ff', "HAN");
+        test('\u8700', "SHU");
+        test('\u8701', "XUAN");
+        test('\u8702', "FENG");
+        test('\u8703', "SHEN");
+        test('\u8704', "SHEN");
+        test('\u8705', "FU");
+        test('\u8706', "XIAN");
+        test('\u8707', "ZHE");
+        test('\u8708', "WU");
+        test('\u8709', "FU");
+        test('\u870a', "LI");
+        test('\u870b', "LANG");
+        test('\u870c', "BI");
+        test('\u870d', "CHU");
+        test('\u870e', "YUAN");
+        test('\u870f', "YOU");
+        test('\u8710', "JIE");
+        test('\u8711', "DAN");
+        test('\u8712', "YAN");
+        test('\u8713', "TING");
+        test('\u8714', "DIAN");
+        test('\u8715', "TUI");
+        test('\u8716', "HUI");
+        test('\u8717', "WO");
+        test('\u8718', "ZHI");
+        test('\u8719', "SONG");
+        test('\u871a', "FEI");
+        test('\u871b', "JU");
+        test('\u871c', "MI");
+        test('\u871d', "QI");
+        test('\u871e', "QI");
+        test('\u871f', "YU");
+        test('\u8720', "JUN");
+        test('\u8721', "LA");
+        test('\u8722', "MENG");
+        test('\u8723', "QIANG");
+        test('\u8724', "SI");
+        test('\u8725', "XI");
+        test('\u8726', "LUN");
+        test('\u8727', "LI");
+        test('\u8728', "DIE");
+        test('\u8729', "TIAO");
+        test('\u872a', "TAO");
+        test('\u872b', "KUN");
+        test('\u872c', "HAN");
+        test('\u872d', "HAN");
+        test('\u872e', "YU");
+        test('\u872f', "BANG");
+        test('\u8730', "FEI");
+        test('\u8731', "PI");
+        test('\u8732', "WEI");
+        test('\u8733', "DUN");
+        test('\u8734', "YI");
+        test('\u8735', "YUAN");
+        test('\u8736', "SUO");
+        test('\u8737', "QUAN");
+        test('\u8738', "QIAN");
+        test('\u8739', "RUI");
+        test('\u873a', "NI");
+        test('\u873b', "QING");
+        test('\u873c', "WEI");
+        test('\u873d', "LIANG");
+        test('\u873e', "GUO");
+        test('\u873f', "WAN");
+        test('\u8740', "DONG");
+        test('\u8741', "E");
+        test('\u8742', "BAN");
+        test('\u8743', "DI");
+        test('\u8744', "WANG");
+        test('\u8745', "CAN");
+        test('\u8746', "YANG");
+        test('\u8747', "YING");
+        test('\u8748', "GUO");
+        test('\u8749', "CHAN");
+        test('\u874a', "DING");
+        test('\u874b', "LA");
+        test('\u874c', "KE");
+        test('\u874d', "JIE");
+        test('\u874e', "XIE");
+        test('\u874f', "TING");
+        test('\u8750', "MAO");
+        test('\u8751', "XU");
+        test('\u8752', "MIAN");
+        test('\u8753', "YU");
+        test('\u8754', "JIE");
+        test('\u8755', "SHI");
+        test('\u8756', "XUAN");
+        test('\u8757', "HUANG");
+        test('\u8758', "YAN");
+        test('\u8759', "BIAN");
+        test('\u875a', "ROU");
+        test('\u875b', "WEI");
+        test('\u875c', "FU");
+        test('\u875d', "YUAN");
+        test('\u875e', "MEI");
+        test('\u875f', "WEI");
+        test('\u8760', "FU");
+        test('\u8761', "RU");
+        test('\u8762', "XIE");
+        test('\u8763', "YOU");
+        test('\u8764', "QIU");
+        test('\u8765', "MAO");
+        test('\u8766', "XIA");
+        test('\u8767', "YING");
+        test('\u8768', "SHI");
+        test('\u8769', "CHONG");
+        test('\u876a', "TANG");
+        test('\u876b', "ZHU");
+        test('\u876c', "ZONG");
+        test('\u876d', "TI");
+        test('\u876e', "FU");
+        test('\u876f', "YUAN");
+        test('\u8770', "KUI");
+        test('\u8771', "MENG");
+        test('\u8772', "LA");
+        test('\u8773', "DU");
+        test('\u8774', "HU");
+        test('\u8775', "QIU");
+        test('\u8776', "DIE");
+        test('\u8777', "LI");
+        test('\u8778', "WO");
+        test('\u8779', "YUN");
+        test('\u877a', "QU");
+        test('\u877b', "NAN");
+        test('\u877c', "LOU");
+        test('\u877d', "CHUN");
+        test('\u877e', "RONG");
+        test('\u877f', "YING");
+        test('\u8780', "JIANG");
+        test('\u8781', "BAN");
+        test('\u8782', "LANG");
+        test('\u8783', "PANG");
+        test('\u8784', "SI");
+        test('\u8785', "XI");
+        test('\u8786', "CI");
+        test('\u8787', "XI");
+        test('\u8788', "YUAN");
+        test('\u8789', "WENG");
+        test('\u878a', "LIAN");
+        test('\u878b', "SOU");
+        test('\u878c', "BAN");
+        test('\u878d', "RONG");
+        test('\u878e', "RONG");
+        test('\u878f', "JI");
+        test('\u8790', "WU");
+        test('\u8791', "XIU");
+        test('\u8792', "HAN");
+        test('\u8793', "QIN");
+        test('\u8794', "YI");
+        test('\u8795', "BI");
+        test('\u8796', "HUA");
+        test('\u8797', "TANG");
+        test('\u8798', "YI");
+        test('\u8799', "DU");
+        test('\u879a', "NAI");
+        test('\u879b', "HE");
+        test('\u879c', "HU");
+        test('\u879d', "GUI");
+        test('\u879e', "MA");
+        test('\u879f', "MING");
+        test('\u87a0', "YI");
+        test('\u87a1', "WEN");
+        test('\u87a2', "YING");
+        test('\u87a3', "TE");
+        test('\u87a4', "ZHONG");
+        test('\u87a5', "CANG");
+        test('\u87a6', "SAO");
+        test('\u87a7', "QI");
+        test('\u87a8', "MAN");
+        test('\u87a9', "TIAO");
+        test('\u87aa', "SHANG");
+        test('\u87ab', "SHI");
+        test('\u87ac', "CAO");
+        test('\u87ad', "CHI");
+        test('\u87ae', "DI");
+        test('\u87af', "AO");
+        test('\u87b0', "LU");
+        test('\u87b1', "WEI");
+        test('\u87b2', "ZHI");
+        test('\u87b3', "TANG");
+        test('\u87b4', "CHEN");
+        test('\u87b5', "PIAO");
+        test('\u87b6', "QU");
+        test('\u87b7', "PI");
+        test('\u87b8', "YU");
+        test('\u87b9', "JIAN");
+        test('\u87ba', "LUO");
+        test('\u87bb', "LOU");
+        test('\u87bc', "QIN");
+        test('\u87bd', "ZHONG");
+        test('\u87be', "YIN");
+        test('\u87bf', "JIANG");
+        test('\u87c0', "SHUAI");
+        test('\u87c1', "WEN");
+        test('\u87c2', "XIAO");
+        test('\u87c3', "WAN");
+        test('\u87c4', "ZHE");
+        test('\u87c5', "ZHE");
+        test('\u87c6', "MA");
+        test('\u87c7', "MA");
+        test('\u87c8', "GUO");
+        test('\u87c9', "LIU");
+        test('\u87ca', "MAO");
+        test('\u87cb', "XI");
+        test('\u87cc', "CONG");
+        test('\u87cd', "LI");
+        test('\u87ce', "MAN");
+        test('\u87cf', "XIAO");
+        test('\u87d0', "CHANG");
+        test('\u87d1', "ZHANG");
+        test('\u87d2', "MANG");
+        test('\u87d3', "XIANG");
+        test('\u87d4', "MO");
+        test('\u87d5', "ZUI");
+        test('\u87d6', "SI");
+        test('\u87d7', "QIU");
+        test('\u87d8', "TE");
+        test('\u87d9', "ZHI");
+        test('\u87da', "PENG");
+        test('\u87db', "PENG");
+        test('\u87dc', "JIAO");
+        test('\u87dd', "QU");
+        test('\u87de', "BIE");
+        test('\u87df', "LIAO");
+        test('\u87e0', "PAN");
+        test('\u87e1', "GUI");
+        test('\u87e2', "XI");
+        test('\u87e3', "JI");
+        test('\u87e4', "ZHUAN");
+        test('\u87e5', "HUANG");
+        test('\u87e6', "FEI");
+        test('\u87e7', "LAO");
+        test('\u87e8', "JUE");
+        test('\u87e9', "JUE");
+        test('\u87ea', "HUI");
+        test('\u87eb', "YIN");
+        test('\u87ec', "CHAN");
+        test('\u87ed', "JIAO");
+        test('\u87ee', "SHAN");
+        test('\u87ef', "NAO");
+        test('\u87f0', "XIAO");
+        test('\u87f1', "WU");
+        test('\u87f2', "CHONG");
+        test('\u87f3', "XUN");
+        test('\u87f4', "SI");
+        test('\u87f5', "CHU");
+        test('\u87f6', "CHENG");
+        test('\u87f7', "DANG");
+        test('\u87f8', "LI");
+        test('\u87f9', "XIE");
+        test('\u87fa', "SHAN");
+        test('\u87fb', "YI");
+        test('\u87fc', "JING");
+        test('\u87fd', "DA");
+        test('\u87fe', "CHAN");
+        test('\u87ff', "QI");
+        test('\u8800', "CI");
+        test('\u8801', "XIANG");
+        test('\u8802', "SHE");
+        test('\u8803', "LUO");
+        test('\u8804', "QIN");
+        test('\u8805', "YING");
+        test('\u8806', "CHAI");
+        test('\u8807', "LI");
+        test('\u8808', "ZEI");
+        test('\u8809', "XUAN");
+        test('\u880a', "LIAN");
+        test('\u880b', "ZHU");
+        test('\u880c', "ZE");
+        test('\u880d', "XIE");
+        test('\u880e', "MANG");
+        test('\u880f', "XIE");
+        test('\u8810', "QI");
+        test('\u8811', "RONG");
+        test('\u8812', "JIAN");
+        test('\u8813', "MENG");
+        test('\u8814', "HAO");
+        test('\u8815', "RU");
+        test('\u8816', "HUO");
+        test('\u8817', "ZHUO");
+        test('\u8818', "JIE");
+        test('\u8819', "PIN");
+        test('\u881a', "HE");
+        test('\u881b', "MIE");
+        test('\u881c', "FAN");
+        test('\u881d', "LEI");
+        test('\u881e', "JIE");
+        test('\u881f', "LA");
+        test('\u8820', "MIN");
+        test('\u8821', "LI");
+        test('\u8822', "CHUN");
+        test('\u8823', "LI");
+        test('\u8824', "QIU");
+        test('\u8825', "NIE");
+        test('\u8826', "LU");
+        test('\u8827', "DU");
+        test('\u8828', "XIAO");
+        test('\u8829', "ZHU");
+        test('\u882a', "LONG");
+        test('\u882b', "LI");
+        test('\u882c', "LONG");
+        test('\u882d', "FENG");
+        test('\u882e', "YE");
+        test('\u882f', "BENG");
+        test('\u8830', "NANG");
+        test('\u8831', "GU");
+        test('\u8832', "JUAN");
+        test('\u8833', "YING");
+        test('\u8834', "SHU");
+        test('\u8835', "XI");
+        test('\u8836', "CAN");
+        test('\u8837', "QU");
+        test('\u8838', "QUAN");
+        test('\u8839', "DU");
+        test('\u883a', "CAN");
+        test('\u883b', "MAN");
+        test('\u883c', "QU");
+        test('\u883d', "JIE");
+        test('\u883e', "ZHU");
+        test('\u883f', "ZHUO");
+        test('\u8840', "XUE");
+        test('\u8841', "HUANG");
+        test('\u8842', "NIU");
+        test('\u8843', "PEI");
+        test('\u8844', "NU");
+        test('\u8845', "XIN");
+        test('\u8846', "ZHONG");
+        test('\u8847', "MAI");
+        test('\u8848', "ER");
+        test('\u8849', "KA");
+        test('\u884a', "MIE");
+        test('\u884b', "XI");
+        test('\u884c', "XING");
+        test('\u884d', "YAN");
+        test('\u884e', "KAN");
+        test('\u884f', "YUAN");
+        test('\u8850', "QU");
+        test('\u8851', "LING");
+        test('\u8852', "XUAN");
+        test('\u8853', "SHU");
+        test('\u8854', "XIAN");
+        test('\u8855', "TONG");
+        test('\u8856', "XIANG");
+        test('\u8857', "JIE");
+        test('\u8858', "XIAN");
+        test('\u8859', "YA");
+        test('\u885a', "HU");
+        test('\u885b', "WEI");
+        test('\u885c', "DAO");
+        test('\u885d', "CHONG");
+        test('\u885e', "WEI");
+        test('\u885f', "DAO");
+        test('\u8860', "ZHUN");
+        test('\u8861', "HENG");
+        test('\u8862', "QU");
+        test('\u8863', "YI");
+        test('\u8864', "YI");
+        test('\u8865', "BU");
+        test('\u8866', "GAN");
+        test('\u8867', "YU");
+        test('\u8868', "BIAO");
+        test('\u8869', "CHA");
+        test('\u886a', "YI");
+        test('\u886b', "SHAN");
+        test('\u886c', "CHEN");
+        test('\u886d', "FU");
+        test('\u886e', "GUN");
+        test('\u886f', "FEN");
+        test('\u8870', "SHUAI");
+        test('\u8871', "JIE");
+        test('\u8872', "NA");
+        test('\u8873', "ZHONG");
+        test('\u8874', "DAN");
+        test('\u8875', "YI");
+        test('\u8876', "ZHONG");
+        test('\u8877', "ZHONG");
+        test('\u8878', "JIE");
+        test('\u8879', "ZHI");
+        test('\u887a', "XIE");
+        test('\u887b', "RAN");
+        test('\u887c', "ZHI");
+        test('\u887d', "REN");
+        test('\u887e', "QIN");
+        test('\u887f', "JIN");
+        test('\u8880', "JUN");
+        test('\u8881', "YUAN");
+        test('\u8882', "MEI");
+        test('\u8883', "CHAI");
+        test('\u8884', "AO");
+        test('\u8885', "NIAO");
+        test('\u8886', "HUI");
+        test('\u8887', "RAN");
+        test('\u8888', "JIA");
+        test('\u8889', "TUO");
+        test('\u888a', "LING");
+        test('\u888b', "DAI");
+        test('\u888c', "BAO");
+        test('\u888d', "PAO");
+        test('\u888e', "YAO");
+        test('\u888f', "ZUO");
+        test('\u8890', "BI");
+        test('\u8891', "SHAO");
+        test('\u8892', "TAN");
+        test('\u8893', "JU");
+        test('\u8894', "HE");
+        test('\u8895', "XUE");
+        test('\u8896', "XIU");
+        test('\u8897', "ZHEN");
+        test('\u8898', "YI");
+        test('\u8899', "PA");
+        test('\u889a', "BO");
+        test('\u889b', "DI");
+        test('\u889c', "WA");
+        test('\u889d', "FU");
+        test('\u889e', "GUN");
+        test('\u889f', "ZHI");
+        test('\u88a0', "ZHI");
+        test('\u88a1', "RAN");
+        test('\u88a2', "PAN");
+        test('\u88a3', "YI");
+        test('\u88a4', "MAO");
+        test('\u88a5', "TUO");
+        test('\u88a6', "NA");
+        test('\u88a7', "GOU");
+        test('\u88a8', "XUAN");
+        test('\u88a9', "ZHE");
+        test('\u88aa', "QU");
+        test('\u88ab', "BEI");
+        test('\u88ac', "GUN");
+        test('\u88ad', "XI");
+        test('\u88ae', "NI");
+        test('\u88af', "BO");
+        test('\u88b0', "BO");
+        test('\u88b1', "FU");
+        test('\u88b2', "CHI");
+        test('\u88b3', "CHI");
+        test('\u88b4', "KU");
+        test('\u88b5', "REN");
+        test('\u88b6', "JIANG");
+        test('\u88b7', "JIA");
+        test('\u88b8', "JIAN");
+        test('\u88b9', "BO");
+        test('\u88ba', "JIE");
+        test('\u88bb', "ER");
+        test('\u88bc', "GE");
+        test('\u88bd', "RU");
+        test('\u88be', "ZHU");
+        test('\u88bf', "GUI");
+        test('\u88c0', "YIN");
+        test('\u88c1', "CAI");
+        test('\u88c2', "LIE");
+        test('\u88c3', "KA");
+        test('\u88c4', "XING");
+        test('\u88c5', "ZHUANG");
+        test('\u88c6', "DANG");
+        test('\u88c7', "XU");
+        test('\u88c8', "KUN");
+        test('\u88c9', "KEN");
+        test('\u88ca', "NIAO");
+        test('\u88cb', "SHU");
+        test('\u88cc', "JIA");
+        test('\u88cd', "KUN");
+        test('\u88ce', "CHENG");
+        test('\u88cf', "LI");
+        test('\u88d0', "JUAN");
+        test('\u88d1', "SHEN");
+        test('\u88d2', "POU");
+        test('\u88d3', "GE");
+        test('\u88d4', "YI");
+        test('\u88d5', "YU");
+        test('\u88d6', "ZHEN");
+        test('\u88d7', "LIU");
+        test('\u88d8', "QIU");
+        test('\u88d9', "QUN");
+        test('\u88da', "JI");
+        test('\u88db', "YI");
+        test('\u88dc', "BU");
+        test('\u88dd', "ZHUANG");
+        test('\u88de', "SHUI");
+        test('\u88df', "SHA");
+        test('\u88e0', "QUN");
+        test('\u88e1', "LI");
+        test('\u88e2', "LIAN");
+        test('\u88e3', "LIAN");
+        test('\u88e4', "KU");
+        test('\u88e5', "JIAN");
+        test('\u88e6', "FOU");
+        test('\u88e7', "CHAN");
+        test('\u88e8', "BI");
+        test('\u88e9', "KUN");
+        test('\u88ea', "TAO");
+        test('\u88eb', "YUAN");
+        test('\u88ec', "LING");
+        test('\u88ed', "CHI");
+        test('\u88ee', "CHANG");
+        test('\u88ef', "CHOU");
+        test('\u88f0', "DUO");
+        test('\u88f1', "BIAO");
+        test('\u88f2', "LIANG");
+        test('\u88f3', "SHANG");
+        test('\u88f4', "PEI");
+        test('\u88f5', "PEI");
+        test('\u88f6', "FEI");
+        test('\u88f7', "YUAN");
+        test('\u88f8', "LUO");
+        test('\u88f9', "GUO");
+        test('\u88fa', "YAN");
+        test('\u88fb', "DU");
+        test('\u88fc', "TI");
+        test('\u88fd', "ZHI");
+        test('\u88fe', "JU");
+        test('\u88ff', "YI");
+        test('\u8900', "JI");
+        test('\u8901', "ZHI");
+        test('\u8902', "GUA");
+        test('\u8903', "KEN");
+        test('\u8904', "QI");
+        test('\u8905', "TI");
+        test('\u8906', "TI");
+        test('\u8907', "FU");
+        test('\u8908', "CHONG");
+        test('\u8909', "XIE");
+        test('\u890a', "BIAN");
+        test('\u890b', "DIE");
+        test('\u890c', "KUN");
+        test('\u890d', "DUAN");
+        test('\u890e', "XIU");
+        test('\u890f', "XIU");
+        test('\u8910', "HE");
+        test('\u8911', "YUAN");
+        test('\u8912', "BAO");
+        test('\u8913', "BAO");
+        test('\u8914', "FU");
+        test('\u8915', "YU");
+        test('\u8916', "TUAN");
+        test('\u8917', "YAN");
+        test('\u8918', "HUI");
+        test('\u8919', "BEI");
+        test('\u891a', "CHU");
+        test('\u891b', "LU");
+        test('\u891c', "PAO");
+        test('\u891d', "DAN");
+        test('\u891e', "YUN");
+        test('\u891f', "TA");
+        test('\u8920', "GOU");
+        test('\u8921', "DA");
+        test('\u8922', "HUAI");
+        test('\u8923', "RONG");
+        test('\u8924', "YUAN");
+        test('\u8925', "RU");
+        test('\u8926', "NAI");
+        test('\u8927', "JIONG");
+        test('\u8928', "SUO");
+        test('\u8929', "BAN");
+        test('\u892a', "TUI");
+        test('\u892b', "CHI");
+        test('\u892c', "SANG");
+        test('\u892d', "NIAO");
+        test('\u892e', "YING");
+        test('\u892f', "JIE");
+        test('\u8930', "QIAN");
+        test('\u8931', "HUAI");
+        test('\u8932', "KU");
+        test('\u8933', "LIAN");
+        test('\u8934', "LAN");
+        test('\u8935', "LI");
+        test('\u8936', "ZHE");
+        test('\u8937', "SHI");
+        test('\u8938', "LU");
+        test('\u8939', "YI");
+        test('\u893a', "DIE");
+        test('\u893b', "XIE");
+        test('\u893c', "XIAN");
+        test('\u893d', "WEI");
+        test('\u893e', "BIAO");
+        test('\u893f', "CAO");
+        test('\u8940', "JI");
+        test('\u8941', "QIANG");
+        test('\u8942', "SEN");
+        test('\u8943', "BAO");
+        test('\u8944', "XIANG");
+        test('\u8945', "BI");
+        test('\u8946', "FU");
+        test('\u8947', "JIAN");
+        test('\u8948', "ZHUAN");
+        test('\u8949', "JIAN");
+        test('\u894a', "CUI");
+        test('\u894b', "JI");
+        test('\u894c', "DAN");
+        test('\u894d', "ZA");
+        test('\u894e', "FAN");
+        test('\u894f', "BO");
+        test('\u8950', "XIANG");
+        test('\u8951', "XIN");
+        test('\u8952', "BIE");
+        test('\u8953', "RAO");
+        test('\u8954', "MAN");
+        test('\u8955', "LAN");
+        test('\u8956', "AO");
+        test('\u8957', "ZE");
+        test('\u8958', "GUI");
+        test('\u8959', "CAO");
+        test('\u895a', "SUI");
+        test('\u895b', "NONG");
+        test('\u895c', "CHAN");
+        test('\u895d', "LIAN");
+        test('\u895e', "BI");
+        test('\u895f', "JIN");
+        test('\u8960', "DANG");
+        test('\u8961', "SHU");
+        test('\u8962', "TAN");
+        test('\u8963', "BI");
+        test('\u8964', "LAN");
+        test('\u8965', "PU");
+        test('\u8966', "RU");
+        test('\u8967', "ZHI");
+        test('\u8968', "DUI");
+        test('\u8969', "SHU");
+        test('\u896a', "WA");
+        test('\u896b', "SHI");
+        test('\u896c', "BAI");
+        test('\u896d', "XIE");
+        test('\u896e', "BO");
+        test('\u896f', "CHEN");
+        test('\u8970', "LAI");
+        test('\u8971', "LONG");
+        test('\u8972', "XI");
+        test('\u8973', "XIAN");
+        test('\u8974', "LAN");
+        test('\u8975', "ZHE");
+        test('\u8976', "DAI");
+        test('\u8977', "JU");
+        test('\u8978', "ZAN");
+        test('\u8979', "SHI");
+        test('\u897a', "JIAN");
+        test('\u897b', "PAN");
+        test('\u897c', "YI");
+        test('\u897d', "LAN");
+        test('\u897e', "YA");
+        test('\u897f', "XI");
+        test('\u8980', "XI");
+        test('\u8981', "YAO");
+        test('\u8982', "FENG");
+        test('\u8983', "TAN");
+        test('\u8984', "FU");
+        test('\u8985', "FIAO");
+        test('\u8986', "FU");
+        test('\u8987', "BA");
+        test('\u8988', "HE");
+        test('\u8989', "JI");
+        test('\u898a', "JI");
+        test('\u898b', "JIAN");
+        test('\u898c', "GUAN");
+        test('\u898d', "BIAN");
+        test('\u898e', "YAN");
+        test('\u898f', "GUI");
+        test('\u8990', "JUE");
+        test('\u8991', "PIAN");
+        test('\u8992', "MAO");
+        test('\u8993', "MI");
+        test('\u8994', "MI");
+        test('\u8995', "MIE");
+        test('\u8996', "SHI");
+        test('\u8997', "SI");
+        test('\u8998', "CHAN");
+        test('\u8999', "LUO");
+        test('\u899a', "JUE");
+        test('\u899b', "MI");
+        test('\u899c', "TIAO");
+        test('\u899d', "LIAN");
+        test('\u899e', "YAO");
+        test('\u899f', "ZHI");
+        test('\u89a0', "JUN");
+        test('\u89a1', "XI");
+        test('\u89a2', "SHAN");
+        test('\u89a3', "WEI");
+        test('\u89a4', "XI");
+        test('\u89a5', "TIAN");
+        test('\u89a6', "YU");
+        test('\u89a7', "LAN");
+        test('\u89a8', "E");
+        test('\u89a9', "DU");
+        test('\u89aa', "QIN");
+        test('\u89ab', "PANG");
+        test('\u89ac', "JI");
+        test('\u89ad', "MING");
+        test('\u89ae', "YING");
+        test('\u89af', "GOU");
+        test('\u89b0', "QU");
+        test('\u89b1', "ZHAN");
+        test('\u89b2', "JIN");
+        test('\u89b3', "GUAN");
+        test('\u89b4', "DENG");
+        test('\u89b5', "JIAN");
+        test('\u89b6', "LUO");
+        test('\u89b7', "QU");
+        test('\u89b8', "JIAN");
+        test('\u89b9', "WEI");
+        test('\u89ba', "JUE");
+        test('\u89bb', "QU");
+        test('\u89bc', "LUO");
+        test('\u89bd', "LAN");
+        test('\u89be', "SHEN");
+        test('\u89bf', "DI");
+        test('\u89c0', "GUAN");
+        test('\u89c1', "JIAN");
+        test('\u89c2', "GUAN");
+        test('\u89c3', "YAN");
+        test('\u89c4', "GUI");
+        test('\u89c5', "MI");
+        test('\u89c6', "SHI");
+        test('\u89c7', "CHAN");
+        test('\u89c8', "LAN");
+        test('\u89c9', "JUE");
+        test('\u89ca', "JI");
+        test('\u89cb', "XI");
+        test('\u89cc', "DI");
+        test('\u89cd', "TIAN");
+        test('\u89ce', "YU");
+        test('\u89cf', "GOU");
+        test('\u89d0', "JIN");
+        test('\u89d1', "QU");
+        test('\u89d2', "JIAO");
+        test('\u89d3', "QIU");
+        test('\u89d4', "JIN");
+        test('\u89d5', "CU");
+        test('\u89d6', "JUE");
+        test('\u89d7', "ZHI");
+        test('\u89d8', "CHAO");
+        test('\u89d9', "JI");
+        test('\u89da', "GU");
+        test('\u89db', "DAN");
+        test('\u89dc', "ZI");
+        test('\u89dd', "DI");
+        test('\u89de', "SHANG");
+        test('\u89df', "HUA");
+        test('\u89e0', "QUAN");
+        test('\u89e1', "GE");
+        test('\u89e2', "SHI");
+        test('\u89e3', "JIE");
+        test('\u89e4', "GUI");
+        test('\u89e5', "GONG");
+        test('\u89e6', "CHU");
+        test('\u89e7', "JIE");
+        test('\u89e8', "HUN");
+        test('\u89e9', "QIU");
+        test('\u89ea', "XING");
+        test('\u89eb', "SU");
+        test('\u89ec', "NI");
+        test('\u89ed', "JI");
+        test('\u89ee', "LU");
+        test('\u89ef', "ZHI");
+        test('\u89f0', "ZHA");
+        test('\u89f1', "BI");
+        test('\u89f2', "XING");
+        test('\u89f3', "HU");
+        test('\u89f4', "SHANG");
+        test('\u89f5', "GONG");
+        test('\u89f6', "ZHI");
+        test('\u89f7', "XUE");
+        test('\u89f8', "CHU");
+        test('\u89f9', "XI");
+        test('\u89fa', "YI");
+        test('\u89fb', "LI");
+        test('\u89fc', "JUE");
+        test('\u89fd', "XI");
+        test('\u89fe', "YAN");
+        test('\u89ff', "XI");
+    }
+
+    @SmallTest
+    public void test_15() throws Exception {
+        if (!hasChineseTransliterator()) {
+            return;
+        }
+        test('\u8a00', "YAN");
+        test('\u8a01', "YAN");
+        test('\u8a02', "DING");
+        test('\u8a03', "FU");
+        test('\u8a04', "QIU");
+        test('\u8a05', "QIU");
+        test('\u8a06', "JIAO");
+        test('\u8a07', "HONG");
+        test('\u8a08', "JI");
+        test('\u8a09', "FAN");
+        test('\u8a0a', "XUN");
+        test('\u8a0b', "DIAO");
+        test('\u8a0c', "HONG");
+        test('\u8a0d', "CHAI");
+        test('\u8a0e', "TAO");
+        test('\u8a0f', "XU");
+        test('\u8a10', "JIE");
+        test('\u8a11', "YI");
+        test('\u8a12', "REN");
+        test('\u8a13', "XUN");
+        test('\u8a14', "YIN");
+        test('\u8a15', "SHAN");
+        test('\u8a16', "QI");
+        test('\u8a17', "TUO");
+        test('\u8a18', "JI");
+        test('\u8a19', "XUN");
+        test('\u8a1a', "YIN");
+        test('\u8a1b', "E");
+        test('\u8a1c', "FEN");
+        test('\u8a1d', "YA");
+        test('\u8a1e', "YAO");
+        test('\u8a1f', "SONG");
+        test('\u8a20', "SHEN");
+        test('\u8a21', "YIN");
+        test('\u8a22', "XIN");
+        test('\u8a23', "JUE");
+        test('\u8a24', "XIAO");
+        test('\u8a25', "NE");
+        test('\u8a26', "CHEN");
+        test('\u8a27', "YOU");
+        test('\u8a28', "ZHI");
+        test('\u8a29', "XIONG");
+        test('\u8a2a', "FANG");
+        test('\u8a2b', "XIN");
+        test('\u8a2c', "CHAO");
+        test('\u8a2d', "SHE");
+        test('\u8a2e', "XIAN");
+        test('\u8a2f', "SA");
+        test('\u8a30', "ZHUN");
+        test('\u8a31', "XU");
+        test('\u8a32', "YI");
+        test('\u8a33', "YI");
+        test('\u8a34', "SU");
+        test('\u8a35', "CHI");
+        test('\u8a36', "HE");
+        test('\u8a37', "SHEN");
+        test('\u8a38', "HE");
+        test('\u8a39', "XU");
+        test('\u8a3a', "ZHEN");
+        test('\u8a3b', "ZHU");
+        test('\u8a3c', "ZHENG");
+        test('\u8a3d', "GOU");
+        test('\u8a3e', "ZI");
+        test('\u8a3f', "ZI");
+        test('\u8a40', "ZHAN");
+        test('\u8a41', "GU");
+        test('\u8a42', "FU");
+        test('\u8a43', "JIAN");
+        test('\u8a44', "DIE");
+        test('\u8a45', "LING");
+        test('\u8a46', "DI");
+        test('\u8a47', "YANG");
+        test('\u8a48', "LI");
+        test('\u8a49', "NAO");
+        test('\u8a4a', "PAN");
+        test('\u8a4b', "ZHOU");
+        test('\u8a4c', "GAN");
+        test('\u8a4d', "YI");
+        test('\u8a4e', "JU");
+        test('\u8a4f', "YAO");
+        test('\u8a50', "ZHA");
+        test('\u8a51', "YI");
+        test('\u8a52', "YI");
+        test('\u8a53', "QU");
+        test('\u8a54', "ZHAO");
+        test('\u8a55', "PING");
+        test('\u8a56', "BI");
+        test('\u8a57', "XIONG");
+        test('\u8a58', "QU");
+        test('\u8a59', "BA");
+        test('\u8a5a', "DA");
+        test('\u8a5b', "ZU");
+        test('\u8a5c', "TAO");
+        test('\u8a5d', "ZHU");
+        test('\u8a5e', "CI");
+        test('\u8a5f', "ZHE");
+        test('\u8a60', "YONG");
+        test('\u8a61', "XU");
+        test('\u8a62', "XUN");
+        test('\u8a63', "YI");
+        test('\u8a64', "HUANG");
+        test('\u8a65', "HE");
+        test('\u8a66', "SHI");
+        test('\u8a67', "CHA");
+        test('\u8a68', "XIAO");
+        test('\u8a69', "SHI");
+        test('\u8a6a', "HEN");
+        test('\u8a6b', "CHA");
+        test('\u8a6c', "GOU");
+        test('\u8a6d', "GUI");
+        test('\u8a6e', "QUAN");
+        test('\u8a6f', "HUI");
+        test('\u8a70', "JIE");
+        test('\u8a71', "HUA");
+        test('\u8a72', "GAI");
+        test('\u8a73', "XIANG");
+        test('\u8a74', "WEI");
+        test('\u8a75', "SHEN");
+        test('\u8a76', "ZHOU");
+        test('\u8a77', "TONG");
+        test('\u8a78', "MI");
+        test('\u8a79', "ZHAN");
+        test('\u8a7a', "MING");
+        test('\u8a7b', "E");
+        test('\u8a7c', "HUI");
+        test('\u8a7d', "YAN");
+        test('\u8a7e', "XIONG");
+        test('\u8a7f', "GUA");
+        test('\u8a80', "ER");
+        test('\u8a81', "BING");
+        test('\u8a82', "TIAO");
+        test('\u8a83', "YI");
+        test('\u8a84', "LEI");
+        test('\u8a85', "ZHU");
+        test('\u8a86', "KUANG");
+        test('\u8a87', "KUA");
+        test('\u8a88', "WU");
+        test('\u8a89', "YU");
+        test('\u8a8a', "TENG");
+        test('\u8a8b', "JI");
+        test('\u8a8c', "ZHI");
+        test('\u8a8d', "REN");
+        test('\u8a8e', "CU");
+        test('\u8a8f', "LANG");
+        test('\u8a90', "E");
+        test('\u8a91', "KUANG");
+        test('\u8a92', "EI");
+        test('\u8a93', "SHI");
+        test('\u8a94', "TING");
+        test('\u8a95', "DAN");
+        test('\u8a96', "BEI");
+        test('\u8a97', "CHAN");
+        test('\u8a98', "YOU");
+        test('\u8a99', "KENG");
+        test('\u8a9a', "QIAO");
+        test('\u8a9b', "QIN");
+        test('\u8a9c', "SHUA");
+        test('\u8a9d', "AN");
+        test('\u8a9e', "YU");
+        test('\u8a9f', "XIAO");
+        test('\u8aa0', "CHENG");
+        test('\u8aa1', "JIE");
+        test('\u8aa2', "XIAN");
+        test('\u8aa3', "WU");
+        test('\u8aa4', "WU");
+        test('\u8aa5', "GAO");
+        test('\u8aa6', "SONG");
+        test('\u8aa7', "BU");
+        test('\u8aa8', "HUI");
+        test('\u8aa9', "JING");
+        test('\u8aaa', "SHUO");
+        test('\u8aab', "ZHEN");
+        test('\u8aac', "SHUO");
+        test('\u8aad', "DU");
+        test('\u8aae', "HUA");
+        test('\u8aaf', "CHANG");
+        test('\u8ab0', "SHUI");
+        test('\u8ab1', "JIE");
+        test('\u8ab2', "KE");
+        test('\u8ab3', "QU");
+        test('\u8ab4', "CONG");
+        test('\u8ab5', "XIAO");
+        test('\u8ab6', "SUI");
+        test('\u8ab7', "WANG");
+        test('\u8ab8', "XIAN");
+        test('\u8ab9', "FEI");
+        test('\u8aba', "CHI");
+        test('\u8abb', "TA");
+        test('\u8abc', "YI");
+        test('\u8abd', "NI");
+        test('\u8abe', "YIN");
+        test('\u8abf', "DIAO");
+        test('\u8ac0', "PI");
+        test('\u8ac1', "ZHUO");
+        test('\u8ac2', "CHAN");
+        test('\u8ac3', "CHEN");
+        test('\u8ac4', "ZHUN");
+        test('\u8ac5', "JI");
+        test('\u8ac6', "QI");
+        test('\u8ac7', "TAN");
+        test('\u8ac8', "ZHUI");
+        test('\u8ac9', "WEI");
+        test('\u8aca', "JU");
+        test('\u8acb', "QING");
+        test('\u8acc', "DONG");
+        test('\u8acd', "ZHENG");
+        test('\u8ace', "ZE");
+        test('\u8acf', "ZOU");
+        test('\u8ad0', "QIAN");
+        test('\u8ad1', "ZHUO");
+        test('\u8ad2', "LIANG");
+        test('\u8ad3', "JIAN");
+        test('\u8ad4', "CHU");
+        test('\u8ad5', "HAO");
+        test('\u8ad6', "LUN");
+        test('\u8ad7', "SHEN");
+        test('\u8ad8', "BIAO");
+        test('\u8ad9', "HUAI");
+        test('\u8ada', "PIAN");
+        test('\u8adb', "YU");
+        test('\u8adc', "DIE");
+        test('\u8add', "XU");
+        test('\u8ade', "PIAN");
+        test('\u8adf', "SHI");
+        test('\u8ae0', "XUAN");
+        test('\u8ae1', "SHI");
+        test('\u8ae2', "HUN");
+        test('\u8ae3', "HUA");
+        test('\u8ae4', "E");
+        test('\u8ae5', "ZHONG");
+        test('\u8ae6', "DI");
+        test('\u8ae7', "XIE");
+        test('\u8ae8', "FU");
+        test('\u8ae9', "PU");
+        test('\u8aea', "TING");
+        test('\u8aeb', "JIAN");
+        test('\u8aec', "QI");
+        test('\u8aed', "YU");
+        test('\u8aee', "ZI");
+        test('\u8aef', "ZHUAN");
+        test('\u8af0', "XI");
+        test('\u8af1', "HUI");
+        test('\u8af2', "YIN");
+        test('\u8af3', "AN");
+        test('\u8af4', "XIAN");
+        test('\u8af5', "NAN");
+        test('\u8af6', "CHEN");
+        test('\u8af7', "FENG");
+        test('\u8af8', "ZHU");
+        test('\u8af9', "YANG");
+        test('\u8afa', "YAN");
+        test('\u8afb', "HUANG");
+        test('\u8afc', "XUAN");
+        test('\u8afd', "GE");
+        test('\u8afe', "NUO");
+        test('\u8aff', "QI");
+        test('\u8b00', "MOU");
+        test('\u8b01', "YE");
+        test('\u8b02', "WEI");
+        test('\u8b03', "XING");
+        test('\u8b04', "TENG");
+        test('\u8b05', "ZHOU");
+        test('\u8b06', "SHAN");
+        test('\u8b07', "JIAN");
+        test('\u8b08', "PO");
+        test('\u8b09', "KUI");
+        test('\u8b0a', "HUANG");
+        test('\u8b0b', "HUO");
+        test('\u8b0c', "GE");
+        test('\u8b0d', "YING");
+        test('\u8b0e', "MI");
+        test('\u8b0f', "XIAO");
+        test('\u8b10', "MI");
+        test('\u8b11', "XI");
+        test('\u8b12', "QIANG");
+        test('\u8b13', "CHEN");
+        test('\u8b14', "XUE");
+        test('\u8b15', "TI");
+        test('\u8b16', "SU");
+        test('\u8b17', "BANG");
+        test('\u8b18', "CHI");
+        test('\u8b19', "QIAN");
+        test('\u8b1a', "SHI");
+        test('\u8b1b', "JIANG");
+        test('\u8b1c', "YUAN");
+        test('\u8b1d', "XIE");
+        test('\u8b1e', "HE");
+        test('\u8b1f', "TAO");
+        test('\u8b20', "YAO");
+        test('\u8b21', "YAO");
+        test('\u8b22', "ZHI");
+        test('\u8b23', "YU");
+        test('\u8b24', "BIAO");
+        test('\u8b25', "CONG");
+        test('\u8b26', "QING");
+        test('\u8b27', "LI");
+        test('\u8b28', "MO");
+        test('\u8b29', "MO");
+        test('\u8b2a', "SHANG");
+        test('\u8b2b', "ZHE");
+        test('\u8b2c', "MIU");
+        test('\u8b2d', "JIAN");
+        test('\u8b2e', "ZE");
+        test('\u8b2f', "JIE");
+        test('\u8b30', "LIAN");
+        test('\u8b31', "LOU");
+        test('\u8b32', "CAN");
+        test('\u8b33', "OU");
+        test('\u8b34', "GUN");
+        test('\u8b35', "XI");
+        test('\u8b36', "ZHUO");
+        test('\u8b37', "AO");
+        test('\u8b38', "AO");
+        test('\u8b39', "JIN");
+        test('\u8b3a', "ZHE");
+        test('\u8b3b', "YI");
+        test('\u8b3c', "HU");
+        test('\u8b3d', "JIANG");
+        test('\u8b3e', "MAN");
+        test('\u8b3f', "CHAO");
+        test('\u8b40', "HAN");
+        test('\u8b41', "HUA");
+        test('\u8b42', "CHAN");
+        test('\u8b43', "XU");
+        test('\u8b44', "ZENG");
+        test('\u8b45', "SE");
+        test('\u8b46', "XI");
+        test('\u8b47', "ZHA");
+        test('\u8b48', "DUI");
+        test('\u8b49', "ZHENG");
+        test('\u8b4a', "NAO");
+        test('\u8b4b', "LAN");
+        test('\u8b4c', "E");
+        test('\u8b4d', "YING");
+        test('\u8b4e', "JUE");
+        test('\u8b4f', "JI");
+        test('\u8b50', "ZUN");
+        test('\u8b51', "JIAO");
+        test('\u8b52', "BO");
+        test('\u8b53', "HUI");
+        test('\u8b54', "ZHUAN");
+        test('\u8b55', "WU");
+        test('\u8b56', "ZEN");
+        test('\u8b57', "ZHA");
+        test('\u8b58', "SHI");
+        test('\u8b59', "QIAO");
+        test('\u8b5a', "TAN");
+        test('\u8b5b', "ZEN");
+        test('\u8b5c', "PU");
+        test('\u8b5d', "SHENG");
+        test('\u8b5e', "XUAN");
+        test('\u8b5f', "ZAO");
+        test('\u8b60', "TAN");
+        test('\u8b61', "DANG");
+        test('\u8b62', "SUI");
+        test('\u8b63', "XIAN");
+        test('\u8b64', "JI");
+        test('\u8b65', "JIAO");
+        test('\u8b66', "JING");
+        test('\u8b67', "ZHAN");
+        test('\u8b68', "NANG");
+        test('\u8b69', "YI");
+        test('\u8b6a', "AI");
+        test('\u8b6b', "ZHAN");
+        test('\u8b6c', "PI");
+        test('\u8b6d', "HUI");
+        test('\u8b6e', "HUA");
+        test('\u8b6f', "YI");
+        test('\u8b70', "YI");
+        test('\u8b71', "SHAN");
+        test('\u8b72', "RANG");
+        test('\u8b73', "NOU");
+        test('\u8b74', "QIAN");
+        test('\u8b75', "ZHUI");
+        test('\u8b76', "TA");
+        test('\u8b77', "HU");
+        test('\u8b78', "ZHOU");
+        test('\u8b79', "HAO");
+        test('\u8b7a', "AI");
+        test('\u8b7b', "YING");
+        test('\u8b7c', "JIAN");
+        test('\u8b7d', "YU");
+        test('\u8b7e', "JIAN");
+        test('\u8b7f', "HUI");
+        test('\u8b80', "DU");
+        test('\u8b81', "ZHE");
+        test('\u8b82', "XUAN");
+        test('\u8b83', "ZAN");
+        test('\u8b84', "LEI");
+        test('\u8b85', "SHEN");
+        test('\u8b86', "WEI");
+        test('\u8b87', "CHAN");
+        test('\u8b88', "LI");
+        test('\u8b89', "YI");
+        test('\u8b8a', "BIAN");
+        test('\u8b8b', "ZHE");
+        test('\u8b8c', "YAN");
+        test('\u8b8d', "E");
+        test('\u8b8e', "CHOU");
+        test('\u8b8f', "WEI");
+        test('\u8b90', "CHOU");
+        test('\u8b91', "YAO");
+        test('\u8b92', "CHAN");
+        test('\u8b93', "RANG");
+        test('\u8b94', "YIN");
+        test('\u8b95', "LAN");
+        test('\u8b96', "CHEN");
+        test('\u8b97', "XIE");
+        test('\u8b98', "NIE");
+        test('\u8b99', "HUAN");
+        test('\u8b9a', "ZAN");
+        test('\u8b9b', "YI");
+        test('\u8b9c', "DANG");
+        test('\u8b9d', "ZHAN");
+        test('\u8b9e', "YAN");
+        test('\u8b9f', "DU");
+        test('\u8ba0', "YAN");
+        test('\u8ba1', "JI");
+        test('\u8ba2', "DING");
+        test('\u8ba3', "FU");
+        test('\u8ba4', "REN");
+        test('\u8ba5', "JI");
+        test('\u8ba6', "JIE");
+        test('\u8ba7', "HONG");
+        test('\u8ba8', "TAO");
+        test('\u8ba9', "RANG");
+        test('\u8baa', "SHAN");
+        test('\u8bab', "QI");
+        test('\u8bac', "TUO");
+        test('\u8bad', "XUN");
+        test('\u8bae', "YI");
+        test('\u8baf', "XUN");
+        test('\u8bb0', "JI");
+        test('\u8bb1', "REN");
+        test('\u8bb2', "JIANG");
+        test('\u8bb3', "HUI");
+        test('\u8bb4', "OU");
+        test('\u8bb5', "JU");
+        test('\u8bb6', "YA");
+        test('\u8bb7', "NE");
+        test('\u8bb8', "XU");
+        test('\u8bb9', "E");
+        test('\u8bba', "LUN");
+        test('\u8bbb', "XIONG");
+        test('\u8bbc', "SONG");
+        test('\u8bbd', "FENG");
+        test('\u8bbe', "SHE");
+        test('\u8bbf', "FANG");
+        test('\u8bc0', "JUE");
+        test('\u8bc1', "ZHENG");
+        test('\u8bc2', "GU");
+        test('\u8bc3', "HE");
+        test('\u8bc4', "PING");
+        test('\u8bc5', "ZU");
+        test('\u8bc6', "SHI");
+        test('\u8bc7', "XIONG");
+        test('\u8bc8', "ZHA");
+        test('\u8bc9', "SU");
+        test('\u8bca', "ZHEN");
+        test('\u8bcb', "DI");
+        test('\u8bcc', "ZHOU");
+        test('\u8bcd', "CI");
+        test('\u8bce', "QU");
+        test('\u8bcf', "ZHAO");
+        test('\u8bd0', "BI");
+        test('\u8bd1', "YI");
+        test('\u8bd2', "YI");
+        test('\u8bd3', "KUANG");
+        test('\u8bd4', "LEI");
+        test('\u8bd5', "SHI");
+        test('\u8bd6', "GUA");
+        test('\u8bd7', "SHI");
+        test('\u8bd8', "JI");
+        test('\u8bd9', "HUI");
+        test('\u8bda', "CHENG");
+        test('\u8bdb', "ZHU");
+        test('\u8bdc', "SHEN");
+        test('\u8bdd', "HUA");
+        test('\u8bde', "DAN");
+        test('\u8bdf', "GOU");
+        test('\u8be0', "QUAN");
+        test('\u8be1', "GUI");
+        test('\u8be2', "XUN");
+        test('\u8be3', "YI");
+        test('\u8be4', "ZHENG");
+        test('\u8be5', "GAI");
+        test('\u8be6', "XIANG");
+        test('\u8be7', "CHA");
+        test('\u8be8', "HUN");
+        test('\u8be9', "XU");
+        test('\u8bea', "ZHOU");
+        test('\u8beb', "JIE");
+        test('\u8bec', "WU");
+        test('\u8bed', "YU");
+        test('\u8bee', "QIAO");
+        test('\u8bef', "WU");
+        test('\u8bf0', "GAO");
+        test('\u8bf1', "YOU");
+        test('\u8bf2', "HUI");
+        test('\u8bf3', "KUANG");
+        test('\u8bf4', "SHUO");
+        test('\u8bf5', "SONG");
+        test('\u8bf6', "EI");
+        test('\u8bf7', "QING");
+        test('\u8bf8', "ZHU");
+        test('\u8bf9', "ZOU");
+        test('\u8bfa', "NUO");
+        test('\u8bfb', "DU");
+        test('\u8bfc', "ZHUO");
+        test('\u8bfd', "FEI");
+        test('\u8bfe', "KE");
+        test('\u8bff', "WEI");
+        test('\u8c00', "YU");
+        test('\u8c01', "SHUI");
+        test('\u8c02', "SHEN");
+        test('\u8c03', "DIAO");
+        test('\u8c04', "CHAN");
+        test('\u8c05', "LIANG");
+        test('\u8c06', "ZHUN");
+        test('\u8c07', "SUI");
+        test('\u8c08', "TAN");
+        test('\u8c09', "SHEN");
+        test('\u8c0a', "YI");
+        test('\u8c0b', "MOU");
+        test('\u8c0c', "CHEN");
+        test('\u8c0d', "DIE");
+        test('\u8c0e', "HUANG");
+        test('\u8c0f', "JIAN");
+        test('\u8c10', "XIE");
+        test('\u8c11', "XUE");
+        test('\u8c12', "YE");
+        test('\u8c13', "WEI");
+        test('\u8c14', "E");
+        test('\u8c15', "YU");
+        test('\u8c16', "XUAN");
+        test('\u8c17', "CHAN");
+        test('\u8c18', "ZI");
+        test('\u8c19', "AN");
+        test('\u8c1a', "YAN");
+        test('\u8c1b', "DI");
+        test('\u8c1c', "MI");
+        test('\u8c1d', "PIAN");
+        test('\u8c1e', "XU");
+        test('\u8c1f', "MO");
+        test('\u8c20', "DANG");
+        test('\u8c21', "SU");
+        test('\u8c22', "XIE");
+        test('\u8c23', "YAO");
+        test('\u8c24', "BANG");
+        test('\u8c25', "SHI");
+        test('\u8c26', "QIAN");
+        test('\u8c27', "MI");
+        test('\u8c28', "JIN");
+        test('\u8c29', "MAN");
+        test('\u8c2a', "ZHE");
+        test('\u8c2b', "JIAN");
+        test('\u8c2c', "MIU");
+        test('\u8c2d', "TAN");
+        test('\u8c2e', "ZEN");
+        test('\u8c2f', "QIAO");
+        test('\u8c30', "LAN");
+        test('\u8c31', "PU");
+        test('\u8c32', "JUE");
+        test('\u8c33', "YAN");
+        test('\u8c34', "QIAN");
+        test('\u8c35', "ZHAN");
+        test('\u8c36', "CHEN");
+        test('\u8c37', "GU");
+        test('\u8c38', "QIAN");
+        test('\u8c39', "HONG");
+        test('\u8c3a', "XIA");
+        test('\u8c3b', "JI");
+        test('\u8c3c', "HONG");
+        test('\u8c3d', "HAN");
+        test('\u8c3e', "HONG");
+        test('\u8c3f', "XI");
+        test('\u8c40', "XI");
+        test('\u8c41', "HUO");
+        test('\u8c42', "LIAO");
+        test('\u8c43', "HAN");
+        test('\u8c44', "DU");
+        test('\u8c45', "LONG");
+        test('\u8c46', "DOU");
+        test('\u8c47', "JIANG");
+        test('\u8c48', "QI");
+        test('\u8c49', "SHI");
+        test('\u8c4a', "LI");
+        test('\u8c4b', "DENG");
+        test('\u8c4c', "WAN");
+        test('\u8c4d', "BI");
+        test('\u8c4e', "SHU");
+        test('\u8c4f', "XIAN");
+        test('\u8c50', "FENG");
+        test('\u8c51', "ZHI");
+        test('\u8c52', "ZHI");
+        test('\u8c53', "YAN");
+        test('\u8c54', "YAN");
+        test('\u8c55', "SHI");
+        test('\u8c56', "CHU");
+        test('\u8c57', "HUI");
+        test('\u8c58', "TUN");
+        test('\u8c59', "YI");
+        test('\u8c5a', "TUN");
+        test('\u8c5b', "YI");
+        test('\u8c5c', "JIAN");
+        test('\u8c5d', "BA");
+        test('\u8c5e', "HOU");
+        test('\u8c5f', "E");
+        test('\u8c60', "CHU");
+        test('\u8c61', "XIANG");
+        test('\u8c62', "HUAN");
+        test('\u8c63', "JIAN");
+        test('\u8c64', "KEN");
+        test('\u8c65', "GAI");
+        test('\u8c66', "JU");
+        test('\u8c67', "FU");
+        test('\u8c68', "XI");
+        test('\u8c69', "BIN");
+        test('\u8c6a', "HAO");
+        test('\u8c6b', "YU");
+        test('\u8c6c', "ZHU");
+        test('\u8c6d', "JIA");
+        test('\u8c6e', "FEN");
+        test('\u8c6f', "XI");
+        test('\u8c70', "BO");
+        test('\u8c71', "WEN");
+        test('\u8c72', "HUAN");
+        test('\u8c73', "BIN");
+        test('\u8c74', "DI");
+        test('\u8c75', "ZONG");
+        test('\u8c76', "FEN");
+        test('\u8c77', "YI");
+        test('\u8c78', "ZHI");
+        test('\u8c79', "BAO");
+        test('\u8c7a', "CHAI");
+        test('\u8c7b', "AN");
+        test('\u8c7c', "PI");
+        test('\u8c7d', "NA");
+        test('\u8c7e', "PI");
+        test('\u8c7f', "GOU");
+        test('\u8c80', "NA");
+        test('\u8c81', "YOU");
+        test('\u8c82', "DIAO");
+        test('\u8c83', "MO");
+        test('\u8c84', "SI");
+        test('\u8c85', "XIU");
+        test('\u8c86', "HUAN");
+        test('\u8c87', "KUN");
+        test('\u8c88', "HE");
+        test('\u8c89', "HAO");
+        test('\u8c8a', "MO");
+        test('\u8c8b', "HAN");
+        test('\u8c8c', "MAO");
+        test('\u8c8d', "LI");
+        test('\u8c8e', "NI");
+        test('\u8c8f', "BI");
+        test('\u8c90', "YU");
+        test('\u8c91', "JIA");
+        test('\u8c92', "TUAN");
+        test('\u8c93', "MAO");
+        test('\u8c94', "PI");
+        test('\u8c95', "XI");
+        test('\u8c96', "E");
+        test('\u8c97', "JU");
+        test('\u8c98', "MO");
+        test('\u8c99', "CHU");
+        test('\u8c9a', "TAN");
+        test('\u8c9b', "HUAN");
+        test('\u8c9c', "JUE");
+        test('\u8c9d', "BEI");
+        test('\u8c9e', "ZHEN");
+        test('\u8c9f', "YUAN");
+        test('\u8ca0', "FU");
+        test('\u8ca1', "CAI");
+        test('\u8ca2', "GONG");
+        test('\u8ca3', "TE");
+        test('\u8ca4', "YI");
+        test('\u8ca5', "HANG");
+        test('\u8ca6', "WAN");
+        test('\u8ca7', "PIN");
+        test('\u8ca8', "HUO");
+        test('\u8ca9', "FAN");
+        test('\u8caa', "TAN");
+        test('\u8cab', "GUAN");
+        test('\u8cac', "ZE");
+        test('\u8cad', "ZHI");
+        test('\u8cae', "ER");
+        test('\u8caf', "ZHU");
+        test('\u8cb0', "SHI");
+        test('\u8cb1', "BI");
+        test('\u8cb2', "ZI");
+        test('\u8cb3', "ER");
+        test('\u8cb4', "GUI");
+        test('\u8cb5', "PIAN");
+        test('\u8cb6', "BIAN");
+        test('\u8cb7', "MAI");
+        test('\u8cb8', "DAI");
+        test('\u8cb9', "SHENG");
+        test('\u8cba', "KUANG");
+        test('\u8cbb', "FEI");
+        test('\u8cbc', "TIE");
+        test('\u8cbd', "YI");
+        test('\u8cbe', "CHI");
+        test('\u8cbf', "MAO");
+        test('\u8cc0', "HE");
+        test('\u8cc1', "BI");
+        test('\u8cc2', "LU");
+        test('\u8cc3', "LIN");
+        test('\u8cc4', "HUI");
+        test('\u8cc5', "GAI");
+        test('\u8cc6', "PIAN");
+        test('\u8cc7', "ZI");
+        test('\u8cc8', "JIA");
+        test('\u8cc9', "XU");
+        test('\u8cca', "ZEI");
+        test('\u8ccb', "JIAO");
+        test('\u8ccc', "GAI");
+        test('\u8ccd', "ZANG");
+        test('\u8cce', "JIAN");
+        test('\u8ccf', "YING");
+        test('\u8cd0', "XUN");
+        test('\u8cd1', "ZHEN");
+        test('\u8cd2', "SHE");
+        test('\u8cd3', "BIN");
+        test('\u8cd4', "BIN");
+        test('\u8cd5', "QIU");
+        test('\u8cd6', "SHE");
+        test('\u8cd7', "CHUAN");
+        test('\u8cd8', "ZANG");
+        test('\u8cd9', "ZHOU");
+        test('\u8cda', "LAI");
+        test('\u8cdb', "ZAN");
+        test('\u8cdc', "CI");
+        test('\u8cdd', "CHEN");
+        test('\u8cde', "SHANG");
+        test('\u8cdf', "TIAN");
+        test('\u8ce0', "PEI");
+        test('\u8ce1', "GENG");
+        test('\u8ce2', "XIAN");
+        test('\u8ce3', "MAI");
+        test('\u8ce4', "JIAN");
+        test('\u8ce5', "SUI");
+        test('\u8ce6', "FU");
+        test('\u8ce7', "TAN");
+        test('\u8ce8', "CONG");
+        test('\u8ce9', "CONG");
+        test('\u8cea', "ZHI");
+        test('\u8ceb', "JI");
+        test('\u8cec', "ZHANG");
+        test('\u8ced', "DU");
+        test('\u8cee', "JIN");
+        test('\u8cef', "XIONG");
+        test('\u8cf0', "CHUN");
+        test('\u8cf1', "YUN");
+        test('\u8cf2', "BAO");
+        test('\u8cf3', "ZAI");
+        test('\u8cf4', "LAI");
+        test('\u8cf5', "FENG");
+        test('\u8cf6', "CANG");
+        test('\u8cf7', "JI");
+        test('\u8cf8', "SHENG");
+        test('\u8cf9', "YI");
+        test('\u8cfa', "ZHUAN");
+        test('\u8cfb', "FU");
+        test('\u8cfc', "GOU");
+        test('\u8cfd', "SAI");
+        test('\u8cfe', "ZE");
+        test('\u8cff', "LIAO");
+        test('\u8d00', "YI");
+        test('\u8d01', "BAI");
+        test('\u8d02', "CHEN");
+        test('\u8d03', "WAN");
+        test('\u8d04', "ZHI");
+        test('\u8d05', "ZHUI");
+        test('\u8d06', "BIAO");
+        test('\u8d07', "YUN");
+        test('\u8d08', "ZENG");
+        test('\u8d09', "DAN");
+        test('\u8d0a', "ZAN");
+        test('\u8d0b', "YAN");
+        test('\u8d0c', "PU");
+        test('\u8d0d', "SHAN");
+        test('\u8d0e', "WAN");
+        test('\u8d0f', "YING");
+        test('\u8d10', "JIN");
+        test('\u8d11', "GAN");
+        test('\u8d12', "XIAN");
+        test('\u8d13', "ZANG");
+        test('\u8d14', "BI");
+        test('\u8d15', "DU");
+        test('\u8d16', "SHU");
+        test('\u8d17', "YAN");
+        test('\u8d18', "SHANG");
+        test('\u8d19', "XUAN");
+        test('\u8d1a', "LONG");
+        test('\u8d1b', "GAN");
+        test('\u8d1c', "ZANG");
+        test('\u8d1d', "BEI");
+        test('\u8d1e', "ZHEN");
+        test('\u8d1f', "FU");
+        test('\u8d20', "YUAN");
+        test('\u8d21', "GONG");
+        test('\u8d22', "CAI");
+        test('\u8d23', "ZE");
+        test('\u8d24', "XIAN");
+        test('\u8d25', "BAI");
+        test('\u8d26', "ZHANG");
+        test('\u8d27', "HUO");
+        test('\u8d28', "ZHI");
+        test('\u8d29', "FAN");
+        test('\u8d2a', "TAN");
+        test('\u8d2b', "PIN");
+        test('\u8d2c', "BIAN");
+        test('\u8d2d', "GOU");
+        test('\u8d2e', "ZHU");
+        test('\u8d2f', "GUAN");
+        test('\u8d30', "ER");
+        test('\u8d31', "JIAN");
+        test('\u8d32', "BEN");
+        test('\u8d33', "SHI");
+        test('\u8d34', "TIE");
+        test('\u8d35', "GUI");
+        test('\u8d36', "KUANG");
+        test('\u8d37', "DAI");
+        test('\u8d38', "MAO");
+        test('\u8d39', "FEI");
+        test('\u8d3a', "HE");
+        test('\u8d3b', "YI");
+        test('\u8d3c', "ZEI");
+        test('\u8d3d', "ZHI");
+        test('\u8d3e', "JIA");
+        test('\u8d3f', "HUI");
+        test('\u8d40', "ZI");
+        test('\u8d41', "LIN");
+        test('\u8d42', "LU");
+        test('\u8d43', "ZANG");
+        test('\u8d44', "ZI");
+        test('\u8d45', "GAI");
+        test('\u8d46', "JIN");
+        test('\u8d47', "QIU");
+        test('\u8d48', "ZHEN");
+        test('\u8d49', "LAI");
+        test('\u8d4a', "SHE");
+        test('\u8d4b', "FU");
+        test('\u8d4c', "DU");
+        test('\u8d4d', "JI");
+        test('\u8d4e', "SHU");
+        test('\u8d4f', "SHANG");
+        test('\u8d50', "CI");
+        test('\u8d51', "BI");
+        test('\u8d52', "ZHOU");
+        test('\u8d53', "GENG");
+        test('\u8d54', "PEI");
+        test('\u8d55', "DAN");
+        test('\u8d56', "LAI");
+        test('\u8d57', "FENG");
+        test('\u8d58', "ZHUI");
+        test('\u8d59', "FU");
+        test('\u8d5a', "ZHUAN");
+        test('\u8d5b', "SAI");
+        test('\u8d5c', "ZE");
+        test('\u8d5d', "YAN");
+        test('\u8d5e', "ZAN");
+        test('\u8d5f', "YUN");
+        test('\u8d60', "ZENG");
+        test('\u8d61', "SHAN");
+        test('\u8d62', "YING");
+        test('\u8d63', "GAN");
+        test('\u8d64', "CHI");
+        test('\u8d65', "XI");
+        test('\u8d66', "SHE");
+        test('\u8d67', "NAN");
+        test('\u8d68', "TONG");
+        test('\u8d69', "XI");
+        test('\u8d6a', "CHENG");
+        test('\u8d6b', "HE");
+        test('\u8d6c', "CHENG");
+        test('\u8d6d', "ZHE");
+        test('\u8d6e', "XIA");
+        test('\u8d6f', "TANG");
+        test('\u8d70', "ZOU");
+        test('\u8d71', "ZOU");
+        test('\u8d72', "LI");
+        test('\u8d73', "JIU");
+        test('\u8d74', "FU");
+        test('\u8d75', "ZHAO");
+        test('\u8d76', "GAN");
+        test('\u8d77', "QI");
+        test('\u8d78', "SHAN");
+        test('\u8d79', "QIONG");
+        test('\u8d7a', "YIN");
+        test('\u8d7b', "XIAN");
+        test('\u8d7c', "CI");
+        test('\u8d7d', "JUE");
+        test('\u8d7e', "QIN");
+        test('\u8d7f', "CHI");
+        test('\u8d80', "CI");
+        test('\u8d81', "CHEN");
+        test('\u8d82', "CHEN");
+        test('\u8d83', "DIE");
+        test('\u8d84', "JU");
+        test('\u8d85', "CHAO");
+        test('\u8d86', "DI");
+        test('\u8d87', "XI");
+        test('\u8d88', "ZHAN");
+        test('\u8d89', "JUE");
+        test('\u8d8a', "YUE");
+        test('\u8d8b', "QU");
+        test('\u8d8c', "JI");
+        test('\u8d8d', "CHI");
+        test('\u8d8e', "CHU");
+        test('\u8d8f', "GUA");
+        test('\u8d90', "XUE");
+        test('\u8d91', "ZI");
+        test('\u8d92', "TIAO");
+        test('\u8d93', "DUO");
+        test('\u8d94', "LIE");
+        test('\u8d95', "GAN");
+        test('\u8d96', "SUO");
+        test('\u8d97', "CU");
+        test('\u8d98', "XI");
+        test('\u8d99', "ZHAO");
+        test('\u8d9a', "SU");
+        test('\u8d9b', "YIN");
+        test('\u8d9c', "JU");
+        test('\u8d9d', "JIAN");
+        test('\u8d9e', "QUE");
+        test('\u8d9f', "TANG");
+        test('\u8da0', "CHUO");
+        test('\u8da1', "CUI");
+        test('\u8da2', "LU");
+        test('\u8da3', "QU");
+        test('\u8da4', "DANG");
+        test('\u8da5', "QIU");
+        test('\u8da6', "ZI");
+        test('\u8da7', "TI");
+        test('\u8da8', "QU");
+        test('\u8da9', "CHI");
+        test('\u8daa', "HUANG");
+        test('\u8dab', "QIAO");
+        test('\u8dac', "QIAO");
+        test('\u8dad', "JIAO");
+        test('\u8dae', "ZAO");
+        test('\u8daf', "TI");
+        test('\u8db0', "ER");
+        test('\u8db1', "ZAN");
+        test('\u8db2', "ZAN");
+        test('\u8db3', "ZU");
+        test('\u8db4', "PA");
+        test('\u8db5', "BAO");
+        test('\u8db6', "KU");
+        test('\u8db7', "KE");
+        test('\u8db8', "DUN");
+        test('\u8db9', "JUE");
+        test('\u8dba', "FU");
+        test('\u8dbb', "CHEN");
+        test('\u8dbc', "JIAN");
+        test('\u8dbd', "FANG");
+        test('\u8dbe', "ZHI");
+        test('\u8dbf', "TA");
+        test('\u8dc0', "YUE");
+        test('\u8dc1', "BA");
+        test('\u8dc2', "QI");
+        test('\u8dc3', "YUE");
+        test('\u8dc4', "QIANG");
+        test('\u8dc5', "TUO");
+        test('\u8dc6', "TAI");
+        test('\u8dc7', "YI");
+        test('\u8dc8', "NIAN");
+        test('\u8dc9', "LING");
+        test('\u8dca', "MEI");
+        test('\u8dcb', "BA");
+        test('\u8dcc', "DIE");
+        test('\u8dcd', "KU");
+        test('\u8dce', "TUO");
+        test('\u8dcf', "JIA");
+        test('\u8dd0', "CI");
+        test('\u8dd1', "PAO");
+        test('\u8dd2', "QIA");
+        test('\u8dd3', "ZHU");
+        test('\u8dd4', "JU");
+        test('\u8dd5', "DIAN");
+        test('\u8dd6', "ZHI");
+        test('\u8dd7', "FU");
+        test('\u8dd8', "PAN");
+        test('\u8dd9', "JU");
+        test('\u8dda', "SHAN");
+        test('\u8ddb', "BO");
+        test('\u8ddc', "NI");
+        test('\u8ddd', "JU");
+        test('\u8dde', "LI");
+        test('\u8ddf', "GEN");
+        test('\u8de0', "YI");
+        test('\u8de1', "JI");
+        test('\u8de2', "DUO");
+        test('\u8de3', "XIAN");
+        test('\u8de4', "JIAO");
+        test('\u8de5', "DUO");
+        test('\u8de6', "ZHU");
+        test('\u8de7', "QUAN");
+        test('\u8de8', "KUA");
+        test('\u8de9', "ZHUAI");
+        test('\u8dea', "GUI");
+        test('\u8deb', "QIONG");
+        test('\u8dec', "KUI");
+        test('\u8ded', "XIANG");
+        test('\u8dee', "CHI");
+        test('\u8def', "LU");
+        test('\u8df0', "PIAN");
+        test('\u8df1', "ZHI");
+        test('\u8df2', "JIA");
+        test('\u8df3', "TIAO");
+        test('\u8df4', "CAI");
+        test('\u8df5', "JIAN");
+        test('\u8df6', "TA");
+        test('\u8df7', "QIAO");
+        test('\u8df8', "BI");
+        test('\u8df9', "XIAN");
+        test('\u8dfa', "DUO");
+        test('\u8dfb', "JI");
+        test('\u8dfc', "JU");
+        test('\u8dfd', "JI");
+        test('\u8dfe', "SHU");
+        test('\u8dff', "TU");
+    }
+
+    @SmallTest
+    public void test_16() throws Exception {
+        if (!hasChineseTransliterator()) {
+            return;
+        }
+        test('\u8e00', "CHU");
+        test('\u8e01', "JING");
+        test('\u8e02', "NIE");
+        test('\u8e03', "XIAO");
+        test('\u8e04', "BU");
+        test('\u8e05', "XUE");
+        test('\u8e06', "CUN");
+        test('\u8e07', "MU");
+        test('\u8e08', "SHU");
+        test('\u8e09', "LIANG");
+        test('\u8e0a', "YONG");
+        test('\u8e0b', "JIAO");
+        test('\u8e0c', "CHOU");
+        test('\u8e0d', "QIAO");
+        test('\u8e0e', "MOU");
+        test('\u8e0f', "TA");
+        test('\u8e10', "JIAN");
+        test('\u8e11', "QI");
+        test('\u8e12', "WO");
+        test('\u8e13', "WEI");
+        test('\u8e14', "CHUO");
+        test('\u8e15', "JIE");
+        test('\u8e16', "JI");
+        test('\u8e17', "NIE");
+        test('\u8e18', "JU");
+        test('\u8e19', "JU");
+        test('\u8e1a', "LUN");
+        test('\u8e1b', "LU");
+        test('\u8e1c', "LENG");
+        test('\u8e1d', "HUAI");
+        test('\u8e1e', "JU");
+        test('\u8e1f', "CHI");
+        test('\u8e20', "WAN");
+        test('\u8e21', "QUAN");
+        test('\u8e22', "TI");
+        test('\u8e23', "BO");
+        test('\u8e24', "ZU");
+        test('\u8e25', "QIE");
+        test('\u8e26', "YI");
+        test('\u8e27', "CU");
+        test('\u8e28', "ZONG");
+        test('\u8e29', "CAI");
+        test('\u8e2a', "ZONG");
+        test('\u8e2b', "PENG");
+        test('\u8e2c', "ZHI");
+        test('\u8e2d', "ZHENG");
+        test('\u8e2e', "DIAN");
+        test('\u8e2f', "ZHI");
+        test('\u8e30', "YU");
+        test('\u8e31', "DUO");
+        test('\u8e32', "DUN");
+        test('\u8e33', "CHUAN");
+        test('\u8e34', "YONG");
+        test('\u8e35', "ZHONG");
+        test('\u8e36', "DI");
+        test('\u8e37', "ZHA");
+        test('\u8e38', "CHEN");
+        test('\u8e39', "CHUAI");
+        test('\u8e3a', "JIAN");
+        test('\u8e3b', "GUA");
+        test('\u8e3c', "TANG");
+        test('\u8e3d', "JU");
+        test('\u8e3e', "FU");
+        test('\u8e3f', "ZU");
+        test('\u8e40', "DIE");
+        test('\u8e41', "PIAN");
+        test('\u8e42', "ROU");
+        test('\u8e43', "NUO");
+        test('\u8e44', "TI");
+        test('\u8e45', "CHA");
+        test('\u8e46', "TUI");
+        test('\u8e47', "JIAN");
+        test('\u8e48', "DAO");
+        test('\u8e49', "CUO");
+        test('\u8e4a', "QI");
+        test('\u8e4b', "TA");
+        test('\u8e4c', "QIANG");
+        test('\u8e4d', "NIAN");
+        test('\u8e4e', "DIAN");
+        test('\u8e4f', "TI");
+        test('\u8e50', "JI");
+        test('\u8e51', "NIE");
+        test('\u8e52', "PAN");
+        test('\u8e53', "LIU");
+        test('\u8e54', "ZAN");
+        test('\u8e55', "BI");
+        test('\u8e56', "CHONG");
+        test('\u8e57', "LU");
+        test('\u8e58', "LIAO");
+        test('\u8e59', "CU");
+        test('\u8e5a', "TANG");
+        test('\u8e5b', "DAI");
+        test('\u8e5c', "SU");
+        test('\u8e5d', "XI");
+        test('\u8e5e', "KUI");
+        test('\u8e5f', "JI");
+        test('\u8e60', "ZHI");
+        test('\u8e61', "QIANG");
+        test('\u8e62', "DI");
+        test('\u8e63', "PAN");
+        test('\u8e64', "ZONG");
+        test('\u8e65', "LIAN");
+        test('\u8e66', "BENG");
+        test('\u8e67', "ZAO");
+        test('\u8e68', "NIAN");
+        test('\u8e69', "BIE");
+        test('\u8e6a', "TUI");
+        test('\u8e6b', "JU");
+        test('\u8e6c', "DENG");
+        test('\u8e6d', "CENG");
+        test('\u8e6e', "XIAN");
+        test('\u8e6f', "FAN");
+        test('\u8e70', "CHU");
+        test('\u8e71', "ZHONG");
+        test('\u8e72', "DUN");
+        test('\u8e73', "BO");
+        test('\u8e74', "CU");
+        test('\u8e75', "CU");
+        test('\u8e76', "JUE");
+        test('\u8e77', "JUE");
+        test('\u8e78', "LIN");
+        test('\u8e79', "TA");
+        test('\u8e7a', "QIAO");
+        test('\u8e7b', "JUE");
+        test('\u8e7c', "PU");
+        test('\u8e7d', "LIAO");
+        test('\u8e7e', "DUN");
+        test('\u8e7f', "CUAN");
+        test('\u8e80', "KUANG");
+        test('\u8e81', "ZAO");
+        test('\u8e82', "DA");
+        test('\u8e83', "BI");
+        test('\u8e84', "BI");
+        test('\u8e85', "ZHU");
+        test('\u8e86', "JU");
+        test('\u8e87', "CHU");
+        test('\u8e88', "QIAO");
+        test('\u8e89', "DUN");
+        test('\u8e8a', "CHOU");
+        test('\u8e8b', "JI");
+        test('\u8e8c', "WU");
+        test('\u8e8d', "YUE");
+        test('\u8e8e', "NIAN");
+        test('\u8e8f', "LIN");
+        test('\u8e90', "LIE");
+        test('\u8e91', "ZHI");
+        test('\u8e92', "LI");
+        test('\u8e93', "ZHI");
+        test('\u8e94', "CHAN");
+        test('\u8e95', "CHU");
+        test('\u8e96', "DUAN");
+        test('\u8e97', "WEI");
+        test('\u8e98', "LONG");
+        test('\u8e99', "LIN");
+        test('\u8e9a', "XIAN");
+        test('\u8e9b', "WEI");
+        test('\u8e9c', "ZUAN");
+        test('\u8e9d', "LAN");
+        test('\u8e9e', "XIE");
+        test('\u8e9f', "RANG");
+        test('\u8ea0', "SA");
+        test('\u8ea1', "NIE");
+        test('\u8ea2', "TA");
+        test('\u8ea3', "QU");
+        test('\u8ea4', "JIE");
+        test('\u8ea5', "CUAN");
+        test('\u8ea6', "CUO");
+        test('\u8ea7', "XI");
+        test('\u8ea8', "KUI");
+        test('\u8ea9', "JUE");
+        test('\u8eaa', "LIN");
+        test('\u8eab', "SHEN");
+        test('\u8eac', "GONG");
+        test('\u8ead', "DAN");
+        test('\u8eae', "FEN");
+        test('\u8eaf', "QU");
+        test('\u8eb0', "TI");
+        test('\u8eb1', "DUO");
+        test('\u8eb2', "DUO");
+        test('\u8eb3', "GONG");
+        test('\u8eb4', "LANG");
+        test('\u8eb5', "REN");
+        test('\u8eb6', "LUO");
+        test('\u8eb7', "AI");
+        test('\u8eb8', "JI");
+        test('\u8eb9', "JU");
+        test('\u8eba', "TANG");
+        test('\u8ebb', "KONG");
+        test('\u8ebc', "LAO");
+        test('\u8ebd', "YAN");
+        test('\u8ebe', "MEI");
+        test('\u8ebf', "KANG");
+        test('\u8ec0', "QU");
+        test('\u8ec1', "LOU");
+        test('\u8ec2', "LAO");
+        test('\u8ec3', "DUO");
+        test('\u8ec4', "ZHI");
+        test('\u8ec5', "YAN");
+        test('\u8ec6', "TI");
+        test('\u8ec7', "DAO");
+        test('\u8ec8', "YING");
+        test('\u8ec9', "YU");
+        test('\u8eca', "CHE");
+        test('\u8ecb', "YA");
+        test('\u8ecc', "GUI");
+        test('\u8ecd', "JUN");
+        test('\u8ece', "WEI");
+        test('\u8ecf', "YUE");
+        test('\u8ed0', "XIN");
+        test('\u8ed1', "DAI");
+        test('\u8ed2', "XUAN");
+        test('\u8ed3', "FAN");
+        test('\u8ed4', "REN");
+        test('\u8ed5', "SHAN");
+        test('\u8ed6', "KUANG");
+        test('\u8ed7', "SHU");
+        test('\u8ed8', "TUN");
+        test('\u8ed9', "CHEN");
+        test('\u8eda', "DAI");
+        test('\u8edb', "E");
+        test('\u8edc', "NA");
+        test('\u8edd', "QI");
+        test('\u8ede', "MAO");
+        test('\u8edf', "RUAN");
+        test('\u8ee0', "REN");
+        test('\u8ee1', "QIAN");
+        test('\u8ee2', "ZHUAN");
+        test('\u8ee3', "HONG");
+        test('\u8ee4', "HU");
+        test('\u8ee5', "QU");
+        test('\u8ee6', "KUANG");
+        test('\u8ee7', "DI");
+        test('\u8ee8', "LING");
+        test('\u8ee9', "DAI");
+        test('\u8eea', "AO");
+        test('\u8eeb', "ZHEN");
+        test('\u8eec', "FAN");
+        test('\u8eed', "KUANG");
+        test('\u8eee', "YANG");
+        test('\u8eef', "PENG");
+        test('\u8ef0', "BEI");
+        test('\u8ef1', "GU");
+        test('\u8ef2', "GU");
+        test('\u8ef3', "PAO");
+        test('\u8ef4', "ZHU");
+        test('\u8ef5', "RONG");
+        test('\u8ef6', "E");
+        test('\u8ef7', "BA");
+        test('\u8ef8', "ZHOU");
+        test('\u8ef9', "ZHI");
+        test('\u8efa', "YAO");
+        test('\u8efb', "KE");
+        test('\u8efc', "YI");
+        test('\u8efd', "ZHI");
+        test('\u8efe', "SHI");
+        test('\u8eff', "PING");
+        test('\u8f00', "ER");
+        test('\u8f01', "GONG");
+        test('\u8f02', "JU");
+        test('\u8f03', "JIAO");
+        test('\u8f04', "GUANG");
+        test('\u8f05', "HE");
+        test('\u8f06', "KAI");
+        test('\u8f07', "QUAN");
+        test('\u8f08', "ZHOU");
+        test('\u8f09', "ZAI");
+        test('\u8f0a', "ZHI");
+        test('\u8f0b', "SHE");
+        test('\u8f0c', "LIANG");
+        test('\u8f0d', "YU");
+        test('\u8f0e', "SHAO");
+        test('\u8f0f', "YOU");
+        test('\u8f10', "WAN");
+        test('\u8f11', "YIN");
+        test('\u8f12', "ZHE");
+        test('\u8f13', "WAN");
+        test('\u8f14', "FU");
+        test('\u8f15', "QING");
+        test('\u8f16', "ZHOU");
+        test('\u8f17', "NI");
+        test('\u8f18', "LENG");
+        test('\u8f19', "ZHE");
+        test('\u8f1a', "ZHAN");
+        test('\u8f1b', "LIANG");
+        test('\u8f1c', "ZI");
+        test('\u8f1d', "HUI");
+        test('\u8f1e', "WANG");
+        test('\u8f1f', "CHUO");
+        test('\u8f20', "GUO");
+        test('\u8f21', "KAN");
+        test('\u8f22', "YI");
+        test('\u8f23', "PENG");
+        test('\u8f24', "QIAN");
+        test('\u8f25', "GUN");
+        test('\u8f26', "NIAN");
+        test('\u8f27', "PING");
+        test('\u8f28', "GUAN");
+        test('\u8f29', "BEI");
+        test('\u8f2a', "LUN");
+        test('\u8f2b', "PAI");
+        test('\u8f2c', "LIANG");
+        test('\u8f2d', "RUAN");
+        test('\u8f2e', "ROU");
+        test('\u8f2f', "JI");
+        test('\u8f30', "YANG");
+        test('\u8f31', "XIAN");
+        test('\u8f32', "CHUAN");
+        test('\u8f33', "COU");
+        test('\u8f34', "CHUN");
+        test('\u8f35', "GE");
+        test('\u8f36', "YOU");
+        test('\u8f37', "HONG");
+        test('\u8f38', "SHU");
+        test('\u8f39', "FU");
+        test('\u8f3a', "ZI");
+        test('\u8f3b', "FU");
+        test('\u8f3c', "WEN");
+        test('\u8f3d', "BEN");
+        test('\u8f3e', "ZHAN");
+        test('\u8f3f', "YU");
+        test('\u8f40', "WEN");
+        test('\u8f41', "TAO");
+        test('\u8f42', "GU");
+        test('\u8f43', "ZHEN");
+        test('\u8f44', "XIA");
+        test('\u8f45', "YUAN");
+        test('\u8f46', "LU");
+        test('\u8f47', "JIAO");
+        test('\u8f48', "CHAO");
+        test('\u8f49', "ZHUAN");
+        test('\u8f4a', "WEI");
+        test('\u8f4b', "HUN");
+        test('\u8f4c', "XUE");
+        test('\u8f4d', "ZHE");
+        test('\u8f4e', "JIAO");
+        test('\u8f4f', "ZHAN");
+        test('\u8f50', "BU");
+        test('\u8f51', "LAO");
+        test('\u8f52', "FEN");
+        test('\u8f53', "FAN");
+        test('\u8f54', "LIN");
+        test('\u8f55', "GE");
+        test('\u8f56', "SE");
+        test('\u8f57', "KAN");
+        test('\u8f58', "HUAN");
+        test('\u8f59', "YI");
+        test('\u8f5a', "JI");
+        test('\u8f5b', "ZHUI");
+        test('\u8f5c', "ER");
+        test('\u8f5d', "YU");
+        test('\u8f5e', "JIAN");
+        test('\u8f5f', "HONG");
+        test('\u8f60', "LEI");
+        test('\u8f61', "PEI");
+        test('\u8f62', "LI");
+        test('\u8f63', "LI");
+        test('\u8f64', "LU");
+        test('\u8f65', "LIN");
+        test('\u8f66', "CHE");
+        test('\u8f67', "YA");
+        test('\u8f68', "GUI");
+        test('\u8f69', "XUAN");
+        test('\u8f6a', "DAI");
+        test('\u8f6b', "REN");
+        test('\u8f6c', "ZHUAN");
+        test('\u8f6d', "E");
+        test('\u8f6e', "LUN");
+        test('\u8f6f', "RUAN");
+        test('\u8f70', "HONG");
+        test('\u8f71', "GU");
+        test('\u8f72', "KE");
+        test('\u8f73', "LU");
+        test('\u8f74', "ZHOU");
+        test('\u8f75', "ZHI");
+        test('\u8f76', "YI");
+        test('\u8f77', "HU");
+        test('\u8f78', "ZHEN");
+        test('\u8f79', "LI");
+        test('\u8f7a', "YAO");
+        test('\u8f7b', "QING");
+        test('\u8f7c', "SHI");
+        test('\u8f7d', "ZAI");
+        test('\u8f7e', "ZHI");
+        test('\u8f7f', "JIAO");
+        test('\u8f80', "ZHOU");
+        test('\u8f81', "QUAN");
+        test('\u8f82', "LU");
+        test('\u8f83', "JIAO");
+        test('\u8f84', "ZHE");
+        test('\u8f85', "FU");
+        test('\u8f86', "LIANG");
+        test('\u8f87', "NIAN");
+        test('\u8f88', "BEI");
+        test('\u8f89', "HUI");
+        test('\u8f8a', "GUN");
+        test('\u8f8b', "WANG");
+        test('\u8f8c', "LIANG");
+        test('\u8f8d', "CHUO");
+        test('\u8f8e', "ZI");
+        test('\u8f8f', "COU");
+        test('\u8f90', "FU");
+        test('\u8f91', "JI");
+        test('\u8f92', "WEN");
+        test('\u8f93', "SHU");
+        test('\u8f94', "PEI");
+        test('\u8f95', "YUAN");
+        test('\u8f96', "XIA");
+        test('\u8f97', "NIAN");
+        test('\u8f98', "LU");
+        test('\u8f99', "ZHE");
+        test('\u8f9a', "LIN");
+        test('\u8f9b', "XIN");
+        test('\u8f9c', "GU");
+        test('\u8f9d', "CI");
+        test('\u8f9e', "CI");
+        test('\u8f9f', "PI");
+        test('\u8fa0', "ZUI");
+        test('\u8fa1', "BIAN");
+        test('\u8fa2', "LA");
+        test('\u8fa3', "LA");
+        test('\u8fa4', "CI");
+        test('\u8fa5', "XUE");
+        test('\u8fa6', "BAN");
+        test('\u8fa7', "BIAN");
+        test('\u8fa8', "BIAN");
+        test('\u8fa9', "BIAN");
+        test('\u8faa', "XUE");
+        test('\u8fab', "BIAN");
+        test('\u8fac', "BAN");
+        test('\u8fad', "CI");
+        test('\u8fae', "BIAN");
+        test('\u8faf', "BIAN");
+        test('\u8fb0', "CHEN");
+        test('\u8fb1', "RU");
+        test('\u8fb2', "NONG");
+        test('\u8fb3', "NONG");
+        test('\u8fb4', "CHAN");
+        test('\u8fb5', "CHUO");
+        test('\u8fb6', "CHUO");
+        test('\u8fb7', "YI");
+        test('\u8fb8', "RENG");
+        test('\u8fb9', "BIAN");
+        test('\u8fba', "BIAN");
+        test('\u8fbb', "SHI");
+        test('\u8fbc', "RU");
+        test('\u8fbd', "LIAO");
+        test('\u8fbe', "DA");
+        test('\u8fbf', "CHAN");
+        test('\u8fc0', "GAN");
+        test('\u8fc1', "QIAN");
+        test('\u8fc2', "YU");
+        test('\u8fc3', "YU");
+        test('\u8fc4', "QI");
+        test('\u8fc5', "XUN");
+        test('\u8fc6', "YI");
+        test('\u8fc7', "GUO");
+        test('\u8fc8', "MAI");
+        test('\u8fc9', "QI");
+        test('\u8fca', "ZA");
+        test('\u8fcb', "WANG");
+        test('\u8fcc', "TU");
+        test('\u8fcd', "ZHUN");
+        test('\u8fce', "YING");
+        test('\u8fcf', "TI");
+        test('\u8fd0', "YUN");
+        test('\u8fd1', "JIN");
+        test('\u8fd2', "HANG");
+        test('\u8fd3', "YA");
+        test('\u8fd4', "FAN");
+        test('\u8fd5', "WU");
+        test('\u8fd6', "DA");
+        test('\u8fd7', "E");
+        test('\u8fd8', "HAI");
+        test('\u8fd9', "ZHE");
+        test('\u8fda', "ZHONG");
+        test('\u8fdb', "JIN");
+        test('\u8fdc', "YUAN");
+        test('\u8fdd', "WEI");
+        test('\u8fde', "LIAN");
+        test('\u8fdf', "CHI");
+        test('\u8fe0', "CHE");
+        test('\u8fe1', "NI");
+        test('\u8fe2', "TIAO");
+        test('\u8fe3', "ZHI");
+        test('\u8fe4', "YI");
+        test('\u8fe5', "JIONG");
+        test('\u8fe6', "JIA");
+        test('\u8fe7', "CHEN");
+        test('\u8fe8', "DAI");
+        test('\u8fe9', "ER");
+        test('\u8fea', "DI");
+        test('\u8feb', "PO");
+        test('\u8fec', "ZHU");
+        test('\u8fed', "DIE");
+        test('\u8fee', "ZE");
+        test('\u8fef', "TAO");
+        test('\u8ff0', "SHU");
+        test('\u8ff1', "TUO");
+        test('\u8ff2', "QU");
+        test('\u8ff3', "JING");
+        test('\u8ff4', "HUI");
+        test('\u8ff5', "DONG");
+        test('\u8ff6', "YOU");
+        test('\u8ff7', "MI");
+        test('\u8ff8', "BENG");
+        test('\u8ff9', "JI");
+        test('\u8ffa', "NAI");
+        test('\u8ffb', "YI");
+        test('\u8ffc', "JIE");
+        test('\u8ffd', "ZHUI");
+        test('\u8ffe', "LIE");
+        test('\u8fff', "XUN");
+        test('\u9000', "TUI");
+        test('\u9001', "SONG");
+        test('\u9002', "SHI");
+        test('\u9003', "TAO");
+        test('\u9004', "PANG");
+        test('\u9005', "HOU");
+        test('\u9006', "NI");
+        test('\u9007', "DUN");
+        test('\u9008', "JIONG");
+        test('\u9009', "XUAN");
+        test('\u900a', "XUN");
+        test('\u900b', "BU");
+        test('\u900c', "YOU");
+        test('\u900d', "XIAO");
+        test('\u900e', "QIU");
+        test('\u900f', "TOU");
+        test('\u9010', "ZHU");
+        test('\u9011', "QIU");
+        test('\u9012', "DI");
+        test('\u9013', "DI");
+        test('\u9014', "TU");
+        test('\u9015', "JING");
+        test('\u9016', "TI");
+        test('\u9017', "DOU");
+        test('\u9018', "YI");
+        test('\u9019', "ZHE");
+        test('\u901a', "TONG");
+        test('\u901b', "GUANG");
+        test('\u901c', "WU");
+        test('\u901d', "SHI");
+        test('\u901e', "CHENG");
+        test('\u901f', "SU");
+        test('\u9020', "ZAO");
+        test('\u9021', "QUN");
+        test('\u9022', "FENG");
+        test('\u9023', "LIAN");
+        test('\u9024', "SUO");
+        test('\u9025', "HUI");
+        test('\u9026', "LI");
+        test('\u9027', "GU");
+        test('\u9028', "LAI");
+        test('\u9029', "BEN");
+        test('\u902a', "CUO");
+        test('\u902b', "JUE");
+        test('\u902c', "BENG");
+        test('\u902d', "HUAN");
+        test('\u902e', "DAI");
+        test('\u902f', "LU");
+        test('\u9030', "YOU");
+        test('\u9031', "ZHOU");
+        test('\u9032', "JIN");
+        test('\u9033', "YU");
+        test('\u9034', "CHUO");
+        test('\u9035', "KUI");
+        test('\u9036', "WEI");
+        test('\u9037', "TI");
+        test('\u9038', "YI");
+        test('\u9039', "DA");
+        test('\u903a', "YUAN");
+        test('\u903b', "LUO");
+        test('\u903c', "BI");
+        test('\u903d', "NUO");
+        test('\u903e', "YU");
+        test('\u903f', "DANG");
+        test('\u9040', "SUI");
+        test('\u9041', "DUN");
+        test('\u9042', "SUI");
+        test('\u9043', "YAN");
+        test('\u9044', "CHUAN");
+        test('\u9045', "CHI");
+        test('\u9046', "TI");
+        test('\u9047', "YU");
+        test('\u9048', "SHI");
+        test('\u9049', "ZHEN");
+        test('\u904a', "YOU");
+        test('\u904b', "YUN");
+        test('\u904c', "E");
+        test('\u904d', "BIAN");
+        test('\u904e', "GUO");
+        test('\u904f', "E");
+        test('\u9050', "XIA");
+        test('\u9051', "HUANG");
+        test('\u9052', "QIU");
+        test('\u9053', "DAO");
+        test('\u9054', "DA");
+        test('\u9055', "WEI");
+        test('\u9056', "NAN");
+        test('\u9057', "YI");
+        test('\u9058', "GOU");
+        test('\u9059', "YAO");
+        test('\u905a', "CHOU");
+        test('\u905b', "LIU");
+        test('\u905c', "XUN");
+        test('\u905d', "TA");
+        test('\u905e', "DI");
+        test('\u905f', "CHI");
+        test('\u9060', "YUAN");
+        test('\u9061', "SU");
+        test('\u9062', "TA");
+        test('\u9063', "QIAN");
+        test('\u9064', "MA");
+        test('\u9065', "YAO");
+        test('\u9066', "GUAN");
+        test('\u9067', "ZHANG");
+        test('\u9068', "AO");
+        test('\u9069', "SHI");
+        test('\u906a', "CA");
+        test('\u906b', "CHI");
+        test('\u906c', "SU");
+        test('\u906d', "ZAO");
+        test('\u906e', "ZHE");
+        test('\u906f', "DUN");
+        test('\u9070', "DI");
+        test('\u9071', "LOU");
+        test('\u9072', "CHI");
+        test('\u9073', "CUO");
+        test('\u9074', "LIN");
+        test('\u9075', "ZUN");
+        test('\u9076', "RAO");
+        test('\u9077', "QIAN");
+        test('\u9078', "XUAN");
+        test('\u9079', "YU");
+        test('\u907a', "YI");
+        test('\u907b', "WU");
+        test('\u907c', "LIAO");
+        test('\u907d', "JU");
+        test('\u907e', "SHI");
+        test('\u907f', "BI");
+        test('\u9080', "YAO");
+        test('\u9081', "MAI");
+        test('\u9082', "XIE");
+        test('\u9083', "SUI");
+        test('\u9084', "HAI");
+        test('\u9085', "ZHAN");
+        test('\u9086', "TENG");
+        test('\u9087', "ER");
+        test('\u9088', "MIAO");
+        test('\u9089', "BIAN");
+        test('\u908a', "BIAN");
+        test('\u908b', "LA");
+        test('\u908c', "LI");
+        test('\u908d', "YUAN");
+        test('\u908e', "YAO");
+        test('\u908f', "LUO");
+        test('\u9090', "LI");
+        test('\u9091', "YI");
+        test('\u9092', "TING");
+        test('\u9093', "DENG");
+        test('\u9094', "QI");
+        test('\u9095', "YONG");
+        test('\u9096', "SHAN");
+        test('\u9097', "HAN");
+        test('\u9098', "YU");
+        test('\u9099', "MANG");
+        test('\u909a', "RU");
+        test('\u909b', "QIONG");
+        test('\u909c', "WAN");
+        test('\u909d', "KUANG");
+        test('\u909e', "FU");
+        test('\u909f', "KANG");
+        test('\u90a0', "BIN");
+        test('\u90a1', "FANG");
+        test('\u90a2', "XING");
+        test('\u90a3', "NA");
+        test('\u90a4', "XIN");
+        test('\u90a5', "SHEN");
+        test('\u90a6', "BANG");
+        test('\u90a7', "YUAN");
+        test('\u90a8', "CUN");
+        test('\u90a9', "HUO");
+        test('\u90aa', "XIE");
+        test('\u90ab', "BANG");
+        test('\u90ac', "WU");
+        test('\u90ad', "JU");
+        test('\u90ae', "YOU");
+        test('\u90af', "HAN");
+        test('\u90b0', "TAI");
+        test('\u90b1', "QIU");
+        test('\u90b2', "BI");
+        test('\u90b3', "PI");
+        test('\u90b4', "BING");
+        test('\u90b5', "SHAO");
+        test('\u90b6', "BEI");
+        test('\u90b7', "WA");
+        test('\u90b8', "DI");
+        test('\u90b9', "ZOU");
+        test('\u90ba', "YE");
+        test('\u90bb', "LIN");
+        test('\u90bc', "KUANG");
+        test('\u90bd', "GUI");
+        test('\u90be', "ZHU");
+        test('\u90bf', "SHI");
+        test('\u90c0', "KU");
+        test('\u90c1', "YU");
+        test('\u90c2', "GAI");
+        test('\u90c3', "HE");
+        test('\u90c4', "QIE");
+        test('\u90c5', "ZHI");
+        test('\u90c6', "JI");
+        test('\u90c7', "HUAN");
+        test('\u90c8', "HOU");
+        test('\u90c9', "XING");
+        test('\u90ca', "JIAO");
+        test('\u90cb', "XI");
+        test('\u90cc', "GUI");
+        test('\u90cd', "NUO");
+        test('\u90ce', "LANG");
+        test('\u90cf', "JIA");
+        test('\u90d0', "KUAI");
+        test('\u90d1', "ZHENG");
+        test('\u90d2', "LANG");
+        test('\u90d3', "YUN");
+        test('\u90d4', "YAN");
+        test('\u90d5', "CHENG");
+        test('\u90d6', "DOU");
+        test('\u90d7', "XI");
+        test('\u90d8', "LU");
+        test('\u90d9', "FU");
+        test('\u90da', "WU");
+        test('\u90db', "FU");
+        test('\u90dc', "GAO");
+        test('\u90dd', "HAO");
+        test('\u90de', "LANG");
+        test('\u90df', "JIA");
+        test('\u90e0', "GENG");
+        test('\u90e1', "JUN");
+        test('\u90e2', "YING");
+        test('\u90e3', "BO");
+        test('\u90e4', "XI");
+        test('\u90e5', "BEI");
+        test('\u90e6', "LI");
+        test('\u90e7', "YUN");
+        test('\u90e8', "BU");
+        test('\u90e9', "XIAO");
+        test('\u90ea', "QI");
+        test('\u90eb', "PI");
+        test('\u90ec', "QING");
+        test('\u90ed', "GUO");
+        test('\u90ee', "ZHOU");
+        test('\u90ef', "TAN");
+        test('\u90f0', "ZOU");
+        test('\u90f1', "PING");
+        test('\u90f2', "LAI");
+        test('\u90f3', "NI");
+        test('\u90f4', "CHEN");
+        test('\u90f5', "YOU");
+        test('\u90f6', "BU");
+        test('\u90f7', "XIANG");
+        test('\u90f8', "DAN");
+        test('\u90f9', "JU");
+        test('\u90fa', "YONG");
+        test('\u90fb', "QIAO");
+        test('\u90fc', "YI");
+        test('\u90fd', "DOU");
+        test('\u90fe', "YAN");
+        test('\u90ff', "MEI");
+        test('\u9100', "RUO");
+        test('\u9101', "BEI");
+        test('\u9102', "E");
+        test('\u9103', "SHU");
+        test('\u9104', "JUAN");
+        test('\u9105', "YU");
+        test('\u9106', "YUN");
+        test('\u9107', "HOU");
+        test('\u9108', "KUI");
+        test('\u9109', "XIANG");
+        test('\u910a', "XIANG");
+        test('\u910b', "SOU");
+        test('\u910c', "TANG");
+        test('\u910d', "MING");
+        test('\u910e', "XI");
+        test('\u910f', "RU");
+        test('\u9110', "CHU");
+        test('\u9111', "ZI");
+        test('\u9112', "ZOU");
+        test('\u9113', "YE");
+        test('\u9114', "WU");
+        test('\u9115', "XIANG");
+        test('\u9116', "YUN");
+        test('\u9117', "HAO");
+        test('\u9118', "YONG");
+        test('\u9119', "BI");
+        test('\u911a', "MAO");
+        test('\u911b', "CHAO");
+        test('\u911c', "FU");
+        test('\u911d', "LIAO");
+        test('\u911e', "YIN");
+        test('\u911f', "ZHUAN");
+        test('\u9120', "HU");
+        test('\u9121', "QIAO");
+        test('\u9122', "YAN");
+        test('\u9123', "ZHANG");
+        test('\u9124', "MAN");
+        test('\u9125', "QIAO");
+        test('\u9126', "XU");
+        test('\u9127', "DENG");
+        test('\u9128', "BI");
+        test('\u9129', "XUN");
+        test('\u912a', "BI");
+        test('\u912b', "ZENG");
+        test('\u912c', "WEI");
+        test('\u912d', "ZHENG");
+        test('\u912e', "MAO");
+        test('\u912f', "SHAN");
+        test('\u9130', "LIN");
+        test('\u9131', "PO");
+        test('\u9132', "DAN");
+        test('\u9133', "MENG");
+        test('\u9134', "YE");
+        test('\u9135', "CAO");
+        test('\u9136', "KUAI");
+        test('\u9137', "FENG");
+        test('\u9138', "MENG");
+        test('\u9139', "ZOU");
+        test('\u913a', "KUANG");
+        test('\u913b', "LIAN");
+        test('\u913c', "ZAN");
+        test('\u913d', "CHAN");
+        test('\u913e', "YOU");
+        test('\u913f', "JI");
+        test('\u9140', "YAN");
+        test('\u9141', "CHAN");
+        test('\u9142', "CUO");
+        test('\u9143', "LING");
+        test('\u9144', "HUAN");
+        test('\u9145', "XI");
+        test('\u9146', "FENG");
+        test('\u9147', "ZAN");
+        test('\u9148', "LI");
+        test('\u9149', "YOU");
+        test('\u914a', "DING");
+        test('\u914b', "QIU");
+        test('\u914c', "ZHUO");
+        test('\u914d', "PEI");
+        test('\u914e', "ZHOU");
+        test('\u914f', "YI");
+        test('\u9150', "GAN");
+        test('\u9151', "YU");
+        test('\u9152', "JIU");
+        test('\u9153', "YAN");
+        test('\u9154', "ZUI");
+        test('\u9155', "MAO");
+        test('\u9156', "ZHEN");
+        test('\u9157', "XU");
+        test('\u9158', "DOU");
+        test('\u9159', "ZHEN");
+        test('\u915a', "FEN");
+        test('\u915b', "YUAN");
+        test('\u915c', "FU");
+        test('\u915d', "YUN");
+        test('\u915e', "TAI");
+        test('\u915f', "TIAN");
+        test('\u9160', "QIA");
+        test('\u9161', "TUO");
+        test('\u9162', "CU");
+        test('\u9163', "HAN");
+        test('\u9164', "GU");
+        test('\u9165', "SU");
+        test('\u9166', "FA");
+        test('\u9167', "CHOU");
+        test('\u9168', "ZAI");
+        test('\u9169', "MING");
+        test('\u916a', "LAO");
+        test('\u916b', "CHUO");
+        test('\u916c', "CHOU");
+        test('\u916d', "YOU");
+        test('\u916e', "TONG");
+        test('\u916f', "ZHI");
+        test('\u9170', "XIAN");
+        test('\u9171', "JIANG");
+        test('\u9172', "CHENG");
+        test('\u9173', "YIN");
+        test('\u9174', "TU");
+        test('\u9175', "JIAO");
+        test('\u9176', "MEI");
+        test('\u9177', "KU");
+        test('\u9178', "SUAN");
+        test('\u9179', "LEI");
+        test('\u917a', "PU");
+        test('\u917b', "ZUI");
+        test('\u917c', "HAI");
+        test('\u917d', "YAN");
+        test('\u917e', "SHAI");
+        test('\u917f', "NIANG");
+        test('\u9180', "WEI");
+        test('\u9181', "LU");
+        test('\u9182', "LAN");
+        test('\u9183', "YAN");
+        test('\u9184', "TAO");
+        test('\u9185', "PEI");
+        test('\u9186', "ZHAN");
+        test('\u9187', "CHUN");
+        test('\u9188', "TAN");
+        test('\u9189', "ZUI");
+        test('\u918a', "ZHUI");
+        test('\u918b', "CU");
+        test('\u918c', "KUN");
+        test('\u918d', "TI");
+        test('\u918e', "XIAN");
+        test('\u918f', "DU");
+        test('\u9190', "HU");
+        test('\u9191', "XU");
+        test('\u9192', "XING");
+        test('\u9193', "TAN");
+        test('\u9194', "QIU");
+        test('\u9195', "CHUN");
+        test('\u9196', "YUN");
+        test('\u9197', "PO");
+        test('\u9198', "KE");
+        test('\u9199', "SOU");
+        test('\u919a', "MI");
+        test('\u919b', "QUAN");
+        test('\u919c', "CHOU");
+        test('\u919d', "CUO");
+        test('\u919e', "YUN");
+        test('\u919f', "YONG");
+        test('\u91a0', "ANG");
+        test('\u91a1', "ZHA");
+        test('\u91a2', "HAI");
+        test('\u91a3', "TANG");
+        test('\u91a4', "JIANG");
+        test('\u91a5', "PIAO");
+        test('\u91a6', "CHEN");
+        test('\u91a7', "YU");
+        test('\u91a8', "LI");
+        test('\u91a9', "ZAO");
+        test('\u91aa', "LAO");
+        test('\u91ab', "YI");
+        test('\u91ac', "JIANG");
+        test('\u91ad', "BU");
+        test('\u91ae', "JIAO");
+        test('\u91af', "XI");
+        test('\u91b0', "TAN");
+        test('\u91b1', "FA");
+        test('\u91b2', "NONG");
+        test('\u91b3', "YI");
+        test('\u91b4', "LI");
+        test('\u91b5', "JU");
+        test('\u91b6', "YAN");
+        test('\u91b7', "YI");
+        test('\u91b8', "NIANG");
+        test('\u91b9', "RU");
+        test('\u91ba', "XUN");
+        test('\u91bb', "CHOU");
+        test('\u91bc', "YAN");
+        test('\u91bd', "LING");
+        test('\u91be', "MI");
+        test('\u91bf', "MI");
+        test('\u91c0', "NIANG");
+        test('\u91c1', "XIN");
+        test('\u91c2', "JIAO");
+        test('\u91c3', "SHAI");
+        test('\u91c4', "MI");
+        test('\u91c5', "YAN");
+        test('\u91c6', "BIAN");
+        test('\u91c7', "CAI");
+        test('\u91c8', "SHI");
+        test('\u91c9', "YOU");
+        test('\u91ca', "SHI");
+        test('\u91cb', "SHI");
+        test('\u91cc', "LI");
+        test('\u91cd', "ZHONG");
+        test('\u91ce', "YE");
+        test('\u91cf', "LIANG");
+        test('\u91d0', "LI");
+        test('\u91d1', "JIN");
+        test('\u91d2', "JIN");
+        test('\u91d3', "QIU");
+        test('\u91d4', "YI");
+        test('\u91d5', "LIAO");
+        test('\u91d6', "DAO");
+        test('\u91d7', "ZHAO");
+        test('\u91d8', "DING");
+        test('\u91d9', "PO");
+        test('\u91da', "QIU");
+        test('\u91db', "BA");
+        test('\u91dc', "FU");
+        test('\u91dd', "ZHEN");
+        test('\u91de', "ZHI");
+        test('\u91df', "BA");
+        test('\u91e0', "LUAN");
+        test('\u91e1', "FU");
+        test('\u91e2', "NAI");
+        test('\u91e3', "DIAO");
+        test('\u91e4', "SHAN");
+        test('\u91e5', "QIAO");
+        test('\u91e6', "KOU");
+        test('\u91e7', "CHUAN");
+        test('\u91e8', "ZI");
+        test('\u91e9', "FAN");
+        test('\u91ea', "HUA");
+        test('\u91eb', "HUA");
+        test('\u91ec', "HAN");
+        test('\u91ed', "GANG");
+        test('\u91ee', "QI");
+        test('\u91ef', "MANG");
+        test('\u91f0', "RI");
+        test('\u91f1', "DI");
+        test('\u91f2', "SI");
+        test('\u91f3', "XI");
+        test('\u91f4', "YI");
+        test('\u91f5', "CHAI");
+        test('\u91f6', "SHI");
+        test('\u91f7', "TU");
+        test('\u91f8', "XI");
+        test('\u91f9', "NU");
+        test('\u91fa', "QIAN");
+        test('\u91fb', "QIU");
+        test('\u91fc', "JIAN");
+        test('\u91fd', "PI");
+        test('\u91fe', "YE");
+        test('\u91ff', "JIN");
+    }
+
+    @SmallTest
+    public void test_17() throws Exception {
+        if (!hasChineseTransliterator()) {
+            return;
+        }
+        test('\u9200', "BA");
+        test('\u9201', "FANG");
+        test('\u9202', "CHEN");
+        test('\u9203', "XING");
+        test('\u9204', "DOU");
+        test('\u9205', "YUE");
+        test('\u9206', "QIAN");
+        test('\u9207', "FU");
+        test('\u9208', "PI");
+        test('\u9209', "NA");
+        test('\u920a', "XIN");
+        test('\u920b', "E");
+        test('\u920c', "JUE");
+        test('\u920d', "DUN");
+        test('\u920e', "GOU");
+        test('\u920f', "YIN");
+        test('\u9210', "QIAN");
+        test('\u9211', "BAN");
+        test('\u9212', "SA");
+        test('\u9213', "REN");
+        test('\u9214', "CHAO");
+        test('\u9215', "NIU");
+        test('\u9216', "FEN");
+        test('\u9217', "YUN");
+        test('\u9218', "JI");
+        test('\u9219', "QIN");
+        test('\u921a', "PI");
+        test('\u921b', "GUO");
+        test('\u921c', "HONG");
+        test('\u921d', "YIN");
+        test('\u921e', "JUN");
+        test('\u921f', "SHI");
+        test('\u9220', "YI");
+        test('\u9221', "ZHONG");
+        test('\u9222', "XI");
+        test('\u9223', "GAI");
+        test('\u9224', "RI");
+        test('\u9225', "HUO");
+        test('\u9226', "TAI");
+        test('\u9227', "KANG");
+        test('\u9228', "YUAN");
+        test('\u9229', "LU");
+        test('\u922a', "E");
+        test('\u922b', "WEN");
+        test('\u922c', "DUO");
+        test('\u922d', "ZI");
+        test('\u922e', "NI");
+        test('\u922f', "TU");
+        test('\u9230', "SHI");
+        test('\u9231', "MIN");
+        test('\u9232', "GU");
+        test('\u9233', "KE");
+        test('\u9234', "LING");
+        test('\u9235', "BING");
+        test('\u9236', "SI");
+        test('\u9237', "GU");
+        test('\u9238', "BO");
+        test('\u9239', "PI");
+        test('\u923a', "YU");
+        test('\u923b', "SI");
+        test('\u923c', "ZUO");
+        test('\u923d', "BU");
+        test('\u923e', "YOU");
+        test('\u923f', "TIAN");
+        test('\u9240', "JIA");
+        test('\u9241', "ZHEN");
+        test('\u9242', "SHI");
+        test('\u9243', "SHI");
+        test('\u9244', "ZHI");
+        test('\u9245', "JU");
+        test('\u9246', "CHAN");
+        test('\u9247', "SHI");
+        test('\u9248', "SHI");
+        test('\u9249', "XUAN");
+        test('\u924a', "ZHAO");
+        test('\u924b', "BAO");
+        test('\u924c', "HE");
+        test('\u924d', "BI");
+        test('\u924e', "SHENG");
+        test('\u924f', "CHU");
+        test('\u9250', "SHI");
+        test('\u9251', "BO");
+        test('\u9252', "ZHU");
+        test('\u9253', "CHI");
+        test('\u9254', "ZA");
+        test('\u9255', "PO");
+        test('\u9256', "TONG");
+        test('\u9257', "QIAN");
+        test('\u9258', "FU");
+        test('\u9259', "ZHAI");
+        test('\u925a', "LIU");
+        test('\u925b', "QIAN");
+        test('\u925c', "FU");
+        test('\u925d', "LI");
+        test('\u925e', "YUE");
+        test('\u925f', "PI");
+        test('\u9260', "YANG");
+        test('\u9261', "BAN");
+        test('\u9262', "BO");
+        test('\u9263', "JIE");
+        test('\u9264', "GOU");
+        test('\u9265', "SHU");
+        test('\u9266', "ZHENG");
+        test('\u9267', "MU");
+        test('\u9268', "XI");
+        test('\u9269', "XI");
+        test('\u926a', "DI");
+        test('\u926b', "JIA");
+        test('\u926c', "MU");
+        test('\u926d', "TAN");
+        test('\u926e', "HUAN");
+        test('\u926f', "YI");
+        test('\u9270', "SI");
+        test('\u9271', "KUANG");
+        test('\u9272', "KA");
+        test('\u9273', "BEI");
+        test('\u9274', "JIAN");
+        test('\u9275', "TONG");
+        test('\u9276', "XING");
+        test('\u9277', "HONG");
+        test('\u9278', "JIAO");
+        test('\u9279', "CHI");
+        test('\u927a', "ER");
+        test('\u927b', "LUO");
+        test('\u927c', "BING");
+        test('\u927d', "SHI");
+        test('\u927e', "MOU");
+        test('\u927f', "JIA");
+        test('\u9280', "YIN");
+        test('\u9281', "JUN");
+        test('\u9282', "ZHOU");
+        test('\u9283', "CHONG");
+        test('\u9284', "XIANG");
+        test('\u9285', "TONG");
+        test('\u9286', "MO");
+        test('\u9287', "LEI");
+        test('\u9288', "JI");
+        test('\u9289', "YU");
+        test('\u928a', "XU");
+        test('\u928b', "REN");
+        test('\u928c', "ZUN");
+        test('\u928d', "ZHI");
+        test('\u928e', "QIONG");
+        test('\u928f', "SHAN");
+        test('\u9290', "CHI");
+        test('\u9291', "XIAN");
+        test('\u9292', "XING");
+        test('\u9293', "QUAN");
+        test('\u9294', "PI");
+        test('\u9295', "TIE");
+        test('\u9296', "ZHU");
+        test('\u9297', "XIANG");
+        test('\u9298', "MING");
+        test('\u9299', "KUA");
+        test('\u929a', "YAO");
+        test('\u929b', "XIAN");
+        test('\u929c', "XIAN");
+        test('\u929d', "XIU");
+        test('\u929e', "JUN");
+        test('\u929f', "CHA");
+        test('\u92a0', "LAO");
+        test('\u92a1', "JI");
+        test('\u92a2', "PI");
+        test('\u92a3', "RU");
+        test('\u92a4', "MI");
+        test('\u92a5', "YI");
+        test('\u92a6', "YIN");
+        test('\u92a7', "GUANG");
+        test('\u92a8', "AN");
+        test('\u92a9', "DIU");
+        test('\u92aa', "YOU");
+        test('\u92ab', "SE");
+        test('\u92ac', "KAO");
+        test('\u92ad', "QIAN");
+        test('\u92ae', "LUAN");
+        test('\u92af', "SI");
+        test('\u92b0', "AI");
+        test('\u92b1', "DIAO");
+        test('\u92b2', "HAN");
+        test('\u92b3', "RUI");
+        test('\u92b4', "SHI");
+        test('\u92b5', "KENG");
+        test('\u92b6', "QIU");
+        test('\u92b7', "XIAO");
+        test('\u92b8', "ZHE");
+        test('\u92b9', "XIU");
+        test('\u92ba', "ZANG");
+        test('\u92bb', "TI");
+        test('\u92bc', "CUO");
+        test('\u92bd', "GUA");
+        test('\u92be', "HONG");
+        test('\u92bf', "ZHONG");
+        test('\u92c0', "TOU");
+        test('\u92c1', "LU");
+        test('\u92c2', "MEI");
+        test('\u92c3', "LANG");
+        test('\u92c4', "WAN");
+        test('\u92c5', "XIN");
+        test('\u92c6', "YUN");
+        test('\u92c7', "BEI");
+        test('\u92c8', "WU");
+        test('\u92c9', "SU");
+        test('\u92ca', "YU");
+        test('\u92cb', "CHAN");
+        test('\u92cc', "DING");
+        test('\u92cd', "BO");
+        test('\u92ce', "HAN");
+        test('\u92cf', "JIA");
+        test('\u92d0', "HONG");
+        test('\u92d1', "CUAN");
+        test('\u92d2', "FENG");
+        test('\u92d3', "CHAN");
+        test('\u92d4', "WAN");
+        test('\u92d5', "ZHI");
+        test('\u92d6', "SI");
+        test('\u92d7', "XUAN");
+        test('\u92d8', "HUA");
+        test('\u92d9', "YU");
+        test('\u92da', "TIAO");
+        test('\u92db', "GONG");
+        test('\u92dc', "ZHUO");
+        test('\u92dd', "LUE");
+        test('\u92de', "XING");
+        test('\u92df', "QIN");
+        test('\u92e0', "SHEN");
+        test('\u92e1', "HAN");
+        test('\u92e2', "LUE");
+        test('\u92e3', "YE");
+        test('\u92e4', "CHU");
+        test('\u92e5', "ZENG");
+        test('\u92e6', "JU");
+        test('\u92e7', "XIAN");
+        test('\u92e8', "TIE");
+        test('\u92e9', "MANG");
+        test('\u92ea', "PU");
+        test('\u92eb', "LI");
+        test('\u92ec', "PAN");
+        test('\u92ed', "RUI");
+        test('\u92ee', "CHENG");
+        test('\u92ef', "GAO");
+        test('\u92f0', "LI");
+        test('\u92f1', "TE");
+        test('\u92f2', "BING");
+        test('\u92f3', "ZHU");
+        test('\u92f4', "ZHEN");
+        test('\u92f5', "TU");
+        test('\u92f6', "LIU");
+        test('\u92f7', "ZUI");
+        test('\u92f8', "JU");
+        test('\u92f9', "CHANG");
+        test('\u92fa', "YUAN");
+        test('\u92fb', "JIAN");
+        test('\u92fc', "GANG");
+        test('\u92fd', "DIAO");
+        test('\u92fe', "TAO");
+        test('\u92ff', "CHANG");
+        test('\u9300', "LUN");
+        test('\u9301', "GUO");
+        test('\u9302', "LING");
+        test('\u9303', "BEI");
+        test('\u9304', "LU");
+        test('\u9305', "LI");
+        test('\u9306', "QIANG");
+        test('\u9307', "POU");
+        test('\u9308', "JUAN");
+        test('\u9309', "MIN");
+        test('\u930a', "ZUI");
+        test('\u930b', "PENG");
+        test('\u930c', "AN");
+        test('\u930d', "PI");
+        test('\u930e', "XIAN");
+        test('\u930f', "YA");
+        test('\u9310', "ZHUI");
+        test('\u9311', "LEI");
+        test('\u9312', "KE");
+        test('\u9313', "KONG");
+        test('\u9314', "TA");
+        test('\u9315', "KUN");
+        test('\u9316', "DU");
+        test('\u9317', "NEI");
+        test('\u9318', "CHUI");
+        test('\u9319', "ZI");
+        test('\u931a', "ZHENG");
+        test('\u931b', "BEN");
+        test('\u931c', "NIE");
+        test('\u931d', "ZONG");
+        test('\u931e', "CHUN");
+        test('\u931f', "TAN");
+        test('\u9320', "DING");
+        test('\u9321', "QI");
+        test('\u9322', "QIAN");
+        test('\u9323', "ZHUI");
+        test('\u9324', "JI");
+        test('\u9325', "YU");
+        test('\u9326', "JIN");
+        test('\u9327', "GUAN");
+        test('\u9328', "MAO");
+        test('\u9329', "CHANG");
+        test('\u932a', "TIAN");
+        test('\u932b', "XI");
+        test('\u932c', "LIAN");
+        test('\u932d', "TAO");
+        test('\u932e', "GU");
+        test('\u932f', "CUO");
+        test('\u9330', "SHU");
+        test('\u9331', "ZHEN");
+        test('\u9332', "LU");
+        test('\u9333', "MENG");
+        test('\u9334', "LU");
+        test('\u9335', "HUA");
+        test('\u9336', "BIAO");
+        test('\u9337', "GA");
+        test('\u9338', "LAI");
+        test('\u9339', "KEN");
+        test('\u933a', "FANG");
+        test('\u933b', "WU");
+        test('\u933c', "NAI");
+        test('\u933d', "WAN");
+        test('\u933e', "ZAN");
+        test('\u933f', "HU");
+        test('\u9340', "DE");
+        test('\u9341', "XIAN");
+        test('\u9342', "PIAN");
+        test('\u9343', "HUO");
+        test('\u9344', "LIANG");
+        test('\u9345', "FA");
+        test('\u9346', "MEN");
+        test('\u9347', "KAI");
+        test('\u9348', "YING");
+        test('\u9349', "DI");
+        test('\u934a', "LIAN");
+        test('\u934b', "GUO");
+        test('\u934c', "XIAN");
+        test('\u934d', "DU");
+        test('\u934e', "TU");
+        test('\u934f', "WEI");
+        test('\u9350', "ZONG");
+        test('\u9351', "FU");
+        test('\u9352', "ROU");
+        test('\u9353', "JI");
+        test('\u9354', "E");
+        test('\u9355', "JUN");
+        test('\u9356', "CHEN");
+        test('\u9357', "TI");
+        test('\u9358', "ZHA");
+        test('\u9359', "HU");
+        test('\u935a', "YANG");
+        test('\u935b', "DUAN");
+        test('\u935c', "XIA");
+        test('\u935d', "YU");
+        test('\u935e', "KENG");
+        test('\u935f', "XING");
+        test('\u9360', "HUANG");
+        test('\u9361', "WEI");
+        test('\u9362', "FU");
+        test('\u9363', "ZHAO");
+        test('\u9364', "CHA");
+        test('\u9365', "QIE");
+        test('\u9366', "SHI");
+        test('\u9367', "HONG");
+        test('\u9368', "KUI");
+        test('\u9369', "TIAN");
+        test('\u936a', "MOU");
+        test('\u936b', "QIAO");
+        test('\u936c', "QIAO");
+        test('\u936d', "HOU");
+        test('\u936e', "TOU");
+        test('\u936f', "CONG");
+        test('\u9370', "HUAN");
+        test('\u9371', "YE");
+        test('\u9372', "MIN");
+        test('\u9373', "JIAN");
+        test('\u9374', "DUAN");
+        test('\u9375', "JIAN");
+        test('\u9376', "SONG");
+        test('\u9377', "KUI");
+        test('\u9378', "HU");
+        test('\u9379', "XUAN");
+        test('\u937a', "DUO");
+        test('\u937b', "JIE");
+        test('\u937c', "ZHEN");
+        test('\u937d', "BIAN");
+        test('\u937e', "ZHONG");
+        test('\u937f', "ZI");
+        test('\u9380', "XIU");
+        test('\u9381', "YE");
+        test('\u9382', "MEI");
+        test('\u9383', "PAI");
+        test('\u9384', "AI");
+        test('\u9385', "JIE");
+        test('\u9386', "QIAN");
+        test('\u9387', "MEI");
+        test('\u9388', "SUO");
+        test('\u9389', "DA");
+        test('\u938a', "BANG");
+        test('\u938b', "XIA");
+        test('\u938c', "LIAN");
+        test('\u938d', "SUO");
+        test('\u938e', "KAI");
+        test('\u938f', "LIU");
+        test('\u9390', "YAO");
+        test('\u9391', "YE");
+        test('\u9392', "NOU");
+        test('\u9393', "WENG");
+        test('\u9394', "RONG");
+        test('\u9395', "TANG");
+        test('\u9396', "SUO");
+        test('\u9397', "QIANG");
+        test('\u9398', "LI");
+        test('\u9399', "SHUO");
+        test('\u939a', "CHUI");
+        test('\u939b', "BO");
+        test('\u939c', "PAN");
+        test('\u939d', "DA");
+        test('\u939e', "BI");
+        test('\u939f', "SANG");
+        test('\u93a0', "GANG");
+        test('\u93a1', "ZI");
+        test('\u93a2', "WU");
+        test('\u93a3', "YING");
+        test('\u93a4', "HUANG");
+        test('\u93a5', "TIAO");
+        test('\u93a6', "LIU");
+        test('\u93a7', "KAI");
+        test('\u93a8', "SUN");
+        test('\u93a9', "SHA");
+        test('\u93aa', "SOU");
+        test('\u93ab', "WAN");
+        test('\u93ac', "HAO");
+        test('\u93ad', "ZHEN");
+        test('\u93ae', "ZHEN");
+        test('\u93af', "LANG");
+        test('\u93b0', "YI");
+        test('\u93b1', "YUAN");
+        test('\u93b2', "TANG");
+        test('\u93b3', "NIE");
+        test('\u93b4', "XI");
+        test('\u93b5', "JIA");
+        test('\u93b6', "GE");
+        test('\u93b7', "MA");
+        test('\u93b8', "JUAN");
+        test('\u93b9', "SONG");
+        test('\u93ba', "ZU");
+        test('\u93bb', "SUO");
+        test('\u93bc', "XIA");
+        test('\u93bd', "FENG");
+        test('\u93be', "WEN");
+        test('\u93bf', "NA");
+        test('\u93c0', "LU");
+        test('\u93c1', "SUO");
+        test('\u93c2', "OU");
+        test('\u93c3', "ZU");
+        test('\u93c4', "TUAN");
+        test('\u93c5', "XIU");
+        test('\u93c6', "GUAN");
+        test('\u93c7', "XUAN");
+        test('\u93c8', "LIAN");
+        test('\u93c9', "SHOU");
+        test('\u93ca', "AO");
+        test('\u93cb', "MAN");
+        test('\u93cc', "MO");
+        test('\u93cd', "LUO");
+        test('\u93ce', "BI");
+        test('\u93cf', "WEI");
+        test('\u93d0', "LIU");
+        test('\u93d1', "DI");
+        test('\u93d2', "SAN");
+        test('\u93d3', "ZONG");
+        test('\u93d4', "YI");
+        test('\u93d5', "LU");
+        test('\u93d6', "AO");
+        test('\u93d7', "KENG");
+        test('\u93d8', "QIANG");
+        test('\u93d9', "CUI");
+        test('\u93da', "QI");
+        test('\u93db', "CHANG");
+        test('\u93dc', "TANG");
+        test('\u93dd', "MAN");
+        test('\u93de', "YONG");
+        test('\u93df', "CHAN");
+        test('\u93e0', "FENG");
+        test('\u93e1', "JING");
+        test('\u93e2', "BIAO");
+        test('\u93e3', "SHU");
+        test('\u93e4', "LOU");
+        test('\u93e5', "XIU");
+        test('\u93e6', "CONG");
+        test('\u93e7', "LONG");
+        test('\u93e8', "ZAN");
+        test('\u93e9', "JIAN");
+        test('\u93ea', "CAO");
+        test('\u93eb', "LI");
+        test('\u93ec', "XIA");
+        test('\u93ed', "XI");
+        test('\u93ee', "KANG");
+        test('\u93ef', "SHUANG");
+        test('\u93f0', "BENG");
+        test('\u93f1', "ZHANG");
+        test('\u93f2', "QIAN");
+        test('\u93f3', "CHENG");
+        test('\u93f4', "LU");
+        test('\u93f5', "HUA");
+        test('\u93f6', "JI");
+        test('\u93f7', "PU");
+        test('\u93f8', "HUI");
+        test('\u93f9', "QIANG");
+        test('\u93fa', "PO");
+        test('\u93fb', "LIN");
+        test('\u93fc', "SE");
+        test('\u93fd', "XIU");
+        test('\u93fe', "SAN");
+        test('\u93ff', "CHENG");
+        test('\u9400', "KUI");
+        test('\u9401', "SI");
+        test('\u9402', "LIU");
+        test('\u9403', "NAO");
+        test('\u9404', "HUANG");
+        test('\u9405', "PIE");
+        test('\u9406', "SUI");
+        test('\u9407', "FAN");
+        test('\u9408', "QIAO");
+        test('\u9409', "QUAN");
+        test('\u940a', "YANG");
+        test('\u940b', "TANG");
+        test('\u940c', "XIANG");
+        test('\u940d', "JUE");
+        test('\u940e', "JIAO");
+        test('\u940f', "ZUN");
+        test('\u9410', "LIAO");
+        test('\u9411', "QIE");
+        test('\u9412', "LAO");
+        test('\u9413', "DUI");
+        test('\u9414', "XIN");
+        test('\u9415', "ZAN");
+        test('\u9416', "JI");
+        test('\u9417', "JIAN");
+        test('\u9418', "ZHONG");
+        test('\u9419', "DENG");
+        test('\u941a', "YA");
+        test('\u941b', "YING");
+        test('\u941c', "DUI");
+        test('\u941d', "JUE");
+        test('\u941e', "NOU");
+        test('\u941f', "ZAN");
+        test('\u9420', "PU");
+        test('\u9421', "TIE");
+        test('\u9422', "FAN");
+        test('\u9423', "ZHANG");
+        test('\u9424', "DING");
+        test('\u9425', "SHAN");
+        test('\u9426', "KAI");
+        test('\u9427', "JIAN");
+        test('\u9428', "FEI");
+        test('\u9429', "SUI");
+        test('\u942a', "LU");
+        test('\u942b', "JUAN");
+        test('\u942c', "HUI");
+        test('\u942d', "YU");
+        test('\u942e', "LIAN");
+        test('\u942f', "ZHUO");
+        test('\u9430', "QIAO");
+        test('\u9431', "JIAN");
+        test('\u9432', "ZHUO");
+        test('\u9433', "LEI");
+        test('\u9434', "BI");
+        test('\u9435', "TIE");
+        test('\u9436', "HUAN");
+        test('\u9437', "YE");
+        test('\u9438', "DUO");
+        test('\u9439', "GUO");
+        test('\u943a', "DANG");
+        test('\u943b', "JU");
+        test('\u943c', "FEN");
+        test('\u943d', "DA");
+        test('\u943e', "BEI");
+        test('\u943f', "YI");
+        test('\u9440', "AI");
+        test('\u9441', "ZONG");
+        test('\u9442', "XUN");
+        test('\u9443', "DIAO");
+        test('\u9444', "ZHU");
+        test('\u9445', "HENG");
+        test('\u9446', "ZHUI");
+        test('\u9447', "JI");
+        test('\u9448', "NIE");
+        test('\u9449', "HE");
+        test('\u944a', "HUO");
+        test('\u944b', "QING");
+        test('\u944c', "BIN");
+        test('\u944d', "YING");
+        test('\u944e', "KUI");
+        test('\u944f', "NING");
+        test('\u9450', "XU");
+        test('\u9451', "JIAN");
+        test('\u9452', "JIAN");
+        test('\u9453', "QIAN");
+        test('\u9454', "CHA");
+        test('\u9455', "ZHI");
+        test('\u9456', "MIE");
+        test('\u9457', "LI");
+        test('\u9458', "LEI");
+        test('\u9459', "JI");
+        test('\u945a', "ZUAN");
+        test('\u945b', "KUANG");
+        test('\u945c', "SHANG");
+        test('\u945d', "PENG");
+        test('\u945e', "LA");
+        test('\u945f', "DU");
+        test('\u9460', "SHUO");
+        test('\u9461', "CHUO");
+        test('\u9462', "LU");
+        test('\u9463', "BIAO");
+        test('\u9464', "BAO");
+        test('\u9465', "LU");
+        test('\u9466', "XIAN");
+        test('\u9467', "KUAN");
+        test('\u9468', "LONG");
+        test('\u9469', "E");
+        test('\u946a', "LU");
+        test('\u946b', "XIN");
+        test('\u946c', "JIAN");
+        test('\u946d', "LAN");
+        test('\u946e', "BO");
+        test('\u946f', "JIAN");
+        test('\u9470', "YAO");
+        test('\u9471', "CHAN");
+        test('\u9472', "XIANG");
+        test('\u9473', "JIAN");
+        test('\u9474', "XI");
+        test('\u9475', "GUAN");
+        test('\u9476', "CANG");
+        test('\u9477', "NIE");
+        test('\u9478', "LEI");
+        test('\u9479', "CUAN");
+        test('\u947a', "QU");
+        test('\u947b', "PAN");
+        test('\u947c', "LUO");
+        test('\u947d', "ZUAN");
+        test('\u947e', "LUAN");
+        test('\u947f', "ZAO");
+        test('\u9480', "NIE");
+        test('\u9481', "JUE");
+        test('\u9482', "TANG");
+        test('\u9483', "SHU");
+        test('\u9484', "LAN");
+        test('\u9485', "JIN");
+        test('\u9486', "GA");
+        test('\u9487', "YI");
+        test('\u9488', "ZHEN");
+        test('\u9489', "DING");
+        test('\u948a', "ZHAO");
+        test('\u948b', "PO");
+        test('\u948c', "LIAO");
+        test('\u948d', "TU");
+        test('\u948e', "QIAN");
+        test('\u948f', "CHUAN");
+        test('\u9490', "SHAN");
+        test('\u9491', "JI");
+        test('\u9492', "FAN");
+        test('\u9493', "DIAO");
+        test('\u9494', "MEN");
+        test('\u9495', "NU");
+        test('\u9496', "YANG");
+        test('\u9497', "CHAI");
+        test('\u9498', "XING");
+        test('\u9499', "GAI");
+        test('\u949a', "BU");
+        test('\u949b', "TAI");
+        test('\u949c', "JU");
+        test('\u949d', "DUN");
+        test('\u949e', "CHAO");
+        test('\u949f', "ZHONG");
+        test('\u94a0', "NA");
+        test('\u94a1', "BEI");
+        test('\u94a2', "GANG");
+        test('\u94a3', "BAN");
+        test('\u94a4', "QIAN");
+        test('\u94a5', "YAO");
+        test('\u94a6', "QIN");
+        test('\u94a7', "JUN");
+        test('\u94a8', "WU");
+        test('\u94a9', "GOU");
+        test('\u94aa', "KANG");
+        test('\u94ab', "FANG");
+        test('\u94ac', "HUO");
+        test('\u94ad', "TOU");
+        test('\u94ae', "NIU");
+        test('\u94af', "BA");
+        test('\u94b0', "YU");
+        test('\u94b1', "QIAN");
+        test('\u94b2', "ZHENG");
+        test('\u94b3', "QIAN");
+        test('\u94b4', "GU");
+        test('\u94b5', "BO");
+        test('\u94b6', "E");
+        test('\u94b7', "PO");
+        test('\u94b8', "BU");
+        test('\u94b9', "BO");
+        test('\u94ba', "YUE");
+        test('\u94bb', "ZUAN");
+        test('\u94bc', "MU");
+        test('\u94bd', "TAN");
+        test('\u94be', "JIA");
+        test('\u94bf', "DIAN");
+        test('\u94c0', "YOU");
+        test('\u94c1', "TIE");
+        test('\u94c2', "BO");
+        test('\u94c3', "LING");
+        test('\u94c4', "SHUO");
+        test('\u94c5', "QIAN");
+        test('\u94c6', "MAO");
+        test('\u94c7', "BAO");
+        test('\u94c8', "SHI");
+        test('\u94c9', "XUAN");
+        test('\u94ca', "TA");
+        test('\u94cb', "BI");
+        test('\u94cc', "NI");
+        test('\u94cd', "PI");
+        test('\u94ce', "DUO");
+        test('\u94cf', "XING");
+        test('\u94d0', "KAO");
+        test('\u94d1', "LAO");
+        test('\u94d2', "ER");
+        test('\u94d3', "MANG");
+        test('\u94d4', "YA");
+        test('\u94d5', "YOU");
+        test('\u94d6', "CHENG");
+        test('\u94d7', "JIA");
+        test('\u94d8', "YE");
+        test('\u94d9', "NAO");
+        test('\u94da', "ZHI");
+        test('\u94db', "DANG");
+        test('\u94dc', "TONG");
+        test('\u94dd', "LU");
+        test('\u94de', "DIAO");
+        test('\u94df', "YIN");
+        test('\u94e0', "KAI");
+        test('\u94e1', "ZHA");
+        test('\u94e2', "ZHU");
+        test('\u94e3', "XI");
+        test('\u94e4', "DING");
+        test('\u94e5', "DIU");
+        test('\u94e6', "XIAN");
+        test('\u94e7', "HUA");
+        test('\u94e8', "QUAN");
+        test('\u94e9', "SHA");
+        test('\u94ea', "HA");
+        test('\u94eb', "DIAO");
+        test('\u94ec', "GE");
+        test('\u94ed', "MING");
+        test('\u94ee', "ZHENG");
+        test('\u94ef', "SE");
+        test('\u94f0', "JIAO");
+        test('\u94f1', "YI");
+        test('\u94f2', "CHAN");
+        test('\u94f3', "CHONG");
+        test('\u94f4', "TANG");
+        test('\u94f5', "AN");
+        test('\u94f6', "YIN");
+        test('\u94f7', "RU");
+        test('\u94f8', "ZHU");
+        test('\u94f9', "LAO");
+        test('\u94fa', "PU");
+        test('\u94fb', "WU");
+        test('\u94fc', "LAI");
+        test('\u94fd', "TE");
+        test('\u94fe', "LIAN");
+        test('\u94ff', "KENG");
+        test('\u9500', "XIAO");
+        test('\u9501', "SUO");
+        test('\u9502', "LI");
+        test('\u9503', "ZENG");
+        test('\u9504', "CHU");
+        test('\u9505', "GUO");
+        test('\u9506', "GAO");
+        test('\u9507', "E");
+        test('\u9508', "XIU");
+        test('\u9509', "CUO");
+        test('\u950a', "LUE");
+        test('\u950b', "FENG");
+        test('\u950c', "XIN");
+        test('\u950d', "LIU");
+        test('\u950e', "KAI");
+        test('\u950f', "JIAN");
+        test('\u9510', "RUI");
+        test('\u9511', "TI");
+        test('\u9512', "LANG");
+        test('\u9513', "QIN");
+        test('\u9514', "JU");
+        test('\u9515', "A");
+        test('\u9516', "QIANG");
+        test('\u9517', "ZHE");
+        test('\u9518', "NUO");
+        test('\u9519', "CUO");
+        test('\u951a', "MAO");
+        test('\u951b', "BEN");
+        test('\u951c', "QI");
+        test('\u951d', "DE");
+        test('\u951e', "KE");
+        test('\u951f', "KUN");
+        test('\u9520', "CHANG");
+        test('\u9521', "XI");
+        test('\u9522', "GU");
+        test('\u9523', "LUO");
+        test('\u9524', "CHUI");
+        test('\u9525', "ZHUI");
+        test('\u9526', "JIN");
+        test('\u9527', "ZHI");
+        test('\u9528', "XIAN");
+        test('\u9529', "JUAN");
+        test('\u952a', "HUO");
+        test('\u952b', "PEI");
+        test('\u952c', "TAN");
+        test('\u952d', "DING");
+        test('\u952e', "JIAN");
+        test('\u952f', "JU");
+        test('\u9530', "MENG");
+        test('\u9531', "ZI");
+        test('\u9532', "QIE");
+        test('\u9533', "YING");
+        test('\u9534', "KAI");
+        test('\u9535', "QIANG");
+        test('\u9536', "SI");
+        test('\u9537', "E");
+        test('\u9538', "CHA");
+        test('\u9539', "QIAO");
+        test('\u953a', "ZHONG");
+        test('\u953b', "DUAN");
+        test('\u953c', "SOU");
+        test('\u953d', "HUANG");
+        test('\u953e', "HUAN");
+        test('\u953f', "AI");
+        test('\u9540', "DU");
+        test('\u9541', "MEI");
+        test('\u9542', "LOU");
+        test('\u9543', "ZI");
+        test('\u9544', "FEI");
+        test('\u9545', "MEI");
+        test('\u9546', "MO");
+        test('\u9547', "ZHEN");
+        test('\u9548', "BO");
+        test('\u9549', "GE");
+        test('\u954a', "NIE");
+        test('\u954b', "TANG");
+        test('\u954c', "JUAN");
+        test('\u954d', "NIE");
+        test('\u954e', "NA");
+        test('\u954f', "LIU");
+        test('\u9550', "GAO");
+        test('\u9551', "BANG");
+        test('\u9552', "YI");
+        test('\u9553', "JIA");
+        test('\u9554', "BIN");
+        test('\u9555', "RONG");
+        test('\u9556', "BIAO");
+        test('\u9557', "TANG");
+        test('\u9558', "MAN");
+        test('\u9559', "LUO");
+        test('\u955a', "BENG");
+        test('\u955b', "YONG");
+        test('\u955c', "JING");
+        test('\u955d', "DI");
+        test('\u955e', "ZU");
+        test('\u955f', "XUAN");
+        test('\u9560', "LIU");
+        test('\u9561', "CHAN");
+        test('\u9562', "JUE");
+        test('\u9563', "LIAO");
+        test('\u9564', "PU");
+        test('\u9565', "LU");
+        test('\u9566', "DUI");
+        test('\u9567', "LAN");
+        test('\u9568', "PU");
+        test('\u9569', "CUAN");
+        test('\u956a', "QIANG");
+        test('\u956b', "DENG");
+        test('\u956c', "HUO");
+        test('\u956d', "LEI");
+        test('\u956e', "HUAN");
+        test('\u956f', "ZHUO");
+        test('\u9570', "LIAN");
+        test('\u9571', "YI");
+        test('\u9572', "CHA");
+        test('\u9573', "BIAO");
+        test('\u9574', "LA");
+        test('\u9575', "CHAN");
+        test('\u9576', "XIANG");
+        test('\u9577', "ZHANG");
+        test('\u9578', "CHANG");
+        test('\u9579', "JIU");
+        test('\u957a', "AO");
+        test('\u957b', "DIE");
+        test('\u957c', "QU");
+        test('\u957d', "LIAO");
+        test('\u957e', "MI");
+        test('\u957f', "CHANG");
+        test('\u9580', "MEN");
+        test('\u9581', "MA");
+        test('\u9582', "SHUAN");
+        test('\u9583', "SHAN");
+        test('\u9584', "HUO");
+        test('\u9585', "MEN");
+        test('\u9586', "YAN");
+        test('\u9587', "BI");
+        test('\u9588', "HAN");
+        test('\u9589', "BI");
+        test('\u958a', "SHAN");
+        test('\u958b', "KAI");
+        test('\u958c', "KANG");
+        test('\u958d', "BENG");
+        test('\u958e', "HONG");
+        test('\u958f', "RUN");
+        test('\u9590', "SAN");
+        test('\u9591', "XIAN");
+        test('\u9592', "XIAN");
+        test('\u9593', "JIAN");
+        test('\u9594', "MIN");
+        test('\u9595', "XIA");
+        test('\u9596', "SHUI");
+        test('\u9597', "DOU");
+        test('\u9598', "ZHA");
+        test('\u9599', "NAO");
+        test('\u959a', "ZHAN");
+        test('\u959b', "PENG");
+        test('\u959c', "XIA");
+        test('\u959d', "LING");
+        test('\u959e', "BIAN");
+        test('\u959f', "BI");
+        test('\u95a0', "RUN");
+        test('\u95a1', "AI");
+        test('\u95a2', "GUAN");
+        test('\u95a3', "GE");
+        test('\u95a4', "GE");
+        test('\u95a5', "FA");
+        test('\u95a6', "CHU");
+        test('\u95a7', "HONG");
+        test('\u95a8', "GUI");
+        test('\u95a9', "MIN");
+        test('\u95aa', "SE");
+        test('\u95ab', "KUN");
+        test('\u95ac', "LANG");
+        test('\u95ad', "LU");
+        test('\u95ae', "TING");
+        test('\u95af', "SHA");
+        test('\u95b0', "JU");
+        test('\u95b1', "YUE");
+        test('\u95b2', "YUE");
+        test('\u95b3', "CHAN");
+        test('\u95b4', "QU");
+        test('\u95b5', "LIN");
+        test('\u95b6', "CHANG");
+        test('\u95b7', "SHAI");
+        test('\u95b8', "KUN");
+        test('\u95b9', "YAN");
+        test('\u95ba', "WEN");
+        test('\u95bb', "YAN");
+        test('\u95bc', "E");
+        test('\u95bd', "HUN");
+        test('\u95be', "YU");
+        test('\u95bf', "WEN");
+        test('\u95c0', "XIANG");
+        test('\u95c1', "BAO");
+        test('\u95c2', "HONG");
+        test('\u95c3', "QU");
+        test('\u95c4', "YAO");
+        test('\u95c5', "WEN");
+        test('\u95c6', "BAN");
+        test('\u95c7', "AN");
+        test('\u95c8', "WEI");
+        test('\u95c9', "YIN");
+        test('\u95ca', "KUO");
+        test('\u95cb', "QUE");
+        test('\u95cc', "LAN");
+        test('\u95cd', "DU");
+        test('\u95ce', "QUAN");
+        test('\u95cf', "FENG");
+        test('\u95d0', "TIAN");
+        test('\u95d1', "NIE");
+        test('\u95d2', "TA");
+        test('\u95d3', "KAI");
+        test('\u95d4', "HE");
+        test('\u95d5', "QUE");
+        test('\u95d6', "CHUANG");
+        test('\u95d7', "GUAN");
+        test('\u95d8', "DOU");
+        test('\u95d9', "QI");
+        test('\u95da', "KUI");
+        test('\u95db', "TANG");
+        test('\u95dc', "GUAN");
+        test('\u95dd', "PIAO");
+        test('\u95de', "KAN");
+        test('\u95df', "XI");
+        test('\u95e0', "HUI");
+        test('\u95e1', "CHAN");
+        test('\u95e2', "PI");
+        test('\u95e3', "DANG");
+        test('\u95e4', "HUAN");
+        test('\u95e5', "TA");
+        test('\u95e6', "WEN");
+        test('\u95e7', "TA");
+        test('\u95e8', "MEN");
+        test('\u95e9', "SHUAN");
+        test('\u95ea', "SHAN");
+        test('\u95eb', "YAN");
+        test('\u95ec', "HAN");
+        test('\u95ed', "BI");
+        test('\u95ee', "WEN");
+        test('\u95ef', "CHUANG");
+        test('\u95f0', "RUN");
+        test('\u95f1', "WEI");
+        test('\u95f2', "XIAN");
+        test('\u95f3', "HONG");
+        test('\u95f4', "JIAN");
+        test('\u95f5', "MIN");
+        test('\u95f6', "KANG");
+        test('\u95f7', "MEN");
+        test('\u95f8', "ZHA");
+        test('\u95f9', "NAO");
+        test('\u95fa', "GUI");
+        test('\u95fb', "WEN");
+        test('\u95fc', "TA");
+        test('\u95fd', "MIN");
+        test('\u95fe', "LU");
+        test('\u95ff', "KAI");
+    }
+
+    @SmallTest
+    public void test_18() throws Exception {
+        if (!hasChineseTransliterator()) {
+            return;
+        }
+        test('\u9600', "FA");
+        test('\u9601', "GE");
+        test('\u9602', "HE");
+        test('\u9603', "KUN");
+        test('\u9604', "JIU");
+        test('\u9605', "YUE");
+        test('\u9606', "LANG");
+        test('\u9607', "DU");
+        test('\u9608', "YU");
+        test('\u9609', "YAN");
+        test('\u960a', "CHANG");
+        test('\u960b', "XI");
+        test('\u960c', "WEN");
+        test('\u960d', "HUN");
+        test('\u960e', "YAN");
+        test('\u960f', "E");
+        test('\u9610', "CHAN");
+        test('\u9611', "LAN");
+        test('\u9612', "QU");
+        test('\u9613', "HUI");
+        test('\u9614', "KUO");
+        test('\u9615', "QUE");
+        test('\u9616', "HE");
+        test('\u9617', "TIAN");
+        test('\u9618', "DA");
+        test('\u9619', "QUE");
+        test('\u961a', "HAN");
+        test('\u961b', "HUAN");
+        test('\u961c', "FU");
+        test('\u961d', "FU");
+        test('\u961e', "LE");
+        test('\u961f', "DUI");
+        test('\u9620', "XIN");
+        test('\u9621', "QIAN");
+        test('\u9622', "WU");
+        test('\u9623', "GAI");
+        test('\u9624', "ZHI");
+        test('\u9625', "YIN");
+        test('\u9626', "YANG");
+        test('\u9627', "DOU");
+        test('\u9628', "E");
+        test('\u9629', "SHENG");
+        test('\u962a', "BAN");
+        test('\u962b', "PEI");
+        test('\u962c', "KENG");
+        test('\u962d', "YUN");
+        test('\u962e', "RUAN");
+        test('\u962f', "ZHI");
+        test('\u9630', "PI");
+        test('\u9631', "JING");
+        test('\u9632', "FANG");
+        test('\u9633', "YANG");
+        test('\u9634', "YIN");
+        test('\u9635', "ZHEN");
+        test('\u9636', "JIE");
+        test('\u9637', "CHENG");
+        test('\u9638', "E");
+        test('\u9639', "QU");
+        test('\u963a', "DI");
+        test('\u963b', "ZU");
+        test('\u963c', "ZUO");
+        test('\u963d', "DIAN");
+        test('\u963e', "LING");
+        test('\u963f', "A");
+        test('\u9640', "TUO");
+        test('\u9641', "TUO");
+        test('\u9642', "BEI");
+        test('\u9643', "BING");
+        test('\u9644', "FU");
+        test('\u9645', "JI");
+        test('\u9646', "LU");
+        test('\u9647', "LONG");
+        test('\u9648', "CHEN");
+        test('\u9649', "XING");
+        test('\u964a', "DUO");
+        test('\u964b', "LOU");
+        test('\u964c', "MO");
+        test('\u964d', "JIANG");
+        test('\u964e', "SHU");
+        test('\u964f', "DUO");
+        test('\u9650', "XIAN");
+        test('\u9651', "ER");
+        test('\u9652', "GUI");
+        test('\u9653', "YU");
+        test('\u9654', "GAI");
+        test('\u9655', "SHAN");
+        test('\u9656', "JUN");
+        test('\u9657', "QIAO");
+        test('\u9658', "XING");
+        test('\u9659', "CHUN");
+        test('\u965a', "FU");
+        test('\u965b', "BI");
+        test('\u965c', "XIA");
+        test('\u965d', "SHAN");
+        test('\u965e', "SHENG");
+        test('\u965f', "ZHI");
+        test('\u9660', "PU");
+        test('\u9661', "DOU");
+        test('\u9662', "YUAN");
+        test('\u9663', "ZHEN");
+        test('\u9664', "CHU");
+        test('\u9665', "XIAN");
+        test('\u9666', "DAO");
+        test('\u9667', "NIE");
+        test('\u9668', "YUN");
+        test('\u9669', "XIAN");
+        test('\u966a', "PEI");
+        test('\u966b', "FEI");
+        test('\u966c', "ZOU");
+        test('\u966d', "YI");
+        test('\u966e', "DUI");
+        test('\u966f', "LUN");
+        test('\u9670', "YIN");
+        test('\u9671', "JU");
+        test('\u9672', "CHUI");
+        test('\u9673', "CHEN");
+        test('\u9674', "PI");
+        test('\u9675', "LING");
+        test('\u9676', "TAO");
+        test('\u9677', "XIAN");
+        test('\u9678', "LU");
+        test('\u9679', "SHENG");
+        test('\u967a', "XIAN");
+        test('\u967b', "YIN");
+        test('\u967c', "ZHU");
+        test('\u967d', "YANG");
+        test('\u967e', "RENG");
+        test('\u967f', "XIA");
+        test('\u9680', "CHONG");
+        test('\u9681', "YAN");
+        test('\u9682', "YIN");
+        test('\u9683', "SHU");
+        test('\u9684', "DI");
+        test('\u9685', "YU");
+        test('\u9686', "LONG");
+        test('\u9687', "WEI");
+        test('\u9688', "WEI");
+        test('\u9689', "NIE");
+        test('\u968a', "DUI");
+        test('\u968b', "SUI");
+        test('\u968c', "AN");
+        test('\u968d', "HUANG");
+        test('\u968e', "JIE");
+        test('\u968f', "SUI");
+        test('\u9690', "YIN");
+        test('\u9691', "GAI");
+        test('\u9692', "YAN");
+        test('\u9693', "HUI");
+        test('\u9694', "GE");
+        test('\u9695', "YUN");
+        test('\u9696', "WU");
+        test('\u9697', "KUI");
+        test('\u9698', "AI");
+        test('\u9699', "XI");
+        test('\u969a', "TANG");
+        test('\u969b', "JI");
+        test('\u969c', "ZHANG");
+        test('\u969d', "DAO");
+        test('\u969e', "AO");
+        test('\u969f', "XI");
+        test('\u96a0', "YIN");
+        test('\u96a1', "SA");
+        test('\u96a2', "RAO");
+        test('\u96a3', "LIN");
+        test('\u96a4', "TUI");
+        test('\u96a5', "DENG");
+        test('\u96a6', "JIAO");
+        test('\u96a7', "SUI");
+        test('\u96a8', "SUI");
+        test('\u96a9', "AO");
+        test('\u96aa', "XIAN");
+        test('\u96ab', "FEN");
+        test('\u96ac', "NI");
+        test('\u96ad', "ER");
+        test('\u96ae', "JI");
+        test('\u96af', "DAO");
+        test('\u96b0', "XI");
+        test('\u96b1', "YIN");
+        test('\u96b2', "E");
+        test('\u96b3', "HUI");
+        test('\u96b4', "LONG");
+        test('\u96b5', "XI");
+        test('\u96b6', "LI");
+        test('\u96b7', "LI");
+        test('\u96b8', "LI");
+        test('\u96b9', "ZHUI");
+        test('\u96ba', "HU");
+        test('\u96bb', "ZHI");
+        test('\u96bc', "SUN");
+        test('\u96bd', "JUAN");
+        test('\u96be', "NAN");
+        test('\u96bf', "YI");
+        test('\u96c0', "QUE");
+        test('\u96c1', "YAN");
+        test('\u96c2', "QIN");
+        test('\u96c3', "QIAN");
+        test('\u96c4', "XIONG");
+        test('\u96c5', "YA");
+        test('\u96c6', "JI");
+        test('\u96c7', "GU");
+        test('\u96c8', "HUAN");
+        test('\u96c9', "ZHI");
+        test('\u96ca', "GOU");
+        test('\u96cb', "JUAN");
+        test('\u96cc', "CI");
+        test('\u96cd', "YONG");
+        test('\u96ce', "JU");
+        test('\u96cf', "CHU");
+        test('\u96d0', "HU");
+        test('\u96d1', "ZA");
+        test('\u96d2', "LUO");
+        test('\u96d3', "YU");
+        test('\u96d4', "CHOU");
+        test('\u96d5', "DIAO");
+        test('\u96d6', "SUI");
+        test('\u96d7', "HAN");
+        test('\u96d8', "WO");
+        test('\u96d9', "SHUANG");
+        test('\u96da', "GUAN");
+        test('\u96db', "CHU");
+        test('\u96dc', "ZA");
+        test('\u96dd', "YONG");
+        test('\u96de', "JI");
+        test('\u96df', "XI");
+        test('\u96e0', "CHOU");
+        test('\u96e1', "LIU");
+        test('\u96e2', "LI");
+        test('\u96e3', "NAN");
+        test('\u96e4', "XUE");
+        test('\u96e5', "ZA");
+        test('\u96e6', "JI");
+        test('\u96e7', "JI");
+        test('\u96e8', "YU");
+        test('\u96e9', "YU");
+        test('\u96ea', "XUE");
+        test('\u96eb', "NA");
+        test('\u96ec', "FOU");
+        test('\u96ed', "SE");
+        test('\u96ee', "MU");
+        test('\u96ef', "WEN");
+        test('\u96f0', "FEN");
+        test('\u96f1', "PANG");
+        test('\u96f2', "YUN");
+        test('\u96f3', "LI");
+        test('\u96f4', "CHI");
+        test('\u96f5', "YANG");
+        test('\u96f6', "LING");
+        test('\u96f7', "LEI");
+        test('\u96f8', "AN");
+        test('\u96f9', "BAO");
+        test('\u96fa', "WU");
+        test('\u96fb', "DIAN");
+        test('\u96fc', "DANG");
+        test('\u96fd', "HU");
+        test('\u96fe', "WU");
+        test('\u96ff', "DIAO");
+        test('\u9700', "XU");
+        test('\u9701', "JI");
+        test('\u9702', "MU");
+        test('\u9703', "CHEN");
+        test('\u9704', "XIAO");
+        test('\u9705', "ZHA");
+        test('\u9706', "TING");
+        test('\u9707', "ZHEN");
+        test('\u9708', "PEI");
+        test('\u9709', "MEI");
+        test('\u970a', "LING");
+        test('\u970b', "QI");
+        test('\u970c', "ZHOU");
+        test('\u970d', "HUO");
+        test('\u970e', "SHA");
+        test('\u970f', "FEI");
+        test('\u9710', "HONG");
+        test('\u9711', "ZHAN");
+        test('\u9712', "YIN");
+        test('\u9713', "NI");
+        test('\u9714', "ZHU");
+        test('\u9715', "TUN");
+        test('\u9716', "LIN");
+        test('\u9717', "LING");
+        test('\u9718', "DONG");
+        test('\u9719', "YING");
+        test('\u971a', "WU");
+        test('\u971b', "LING");
+        test('\u971c', "SHUANG");
+        test('\u971d', "LING");
+        test('\u971e', "XIA");
+        test('\u971f', "HONG");
+        test('\u9720', "YIN");
+        test('\u9721', "MAI");
+        test('\u9722', "MAI");
+        test('\u9723', "YUN");
+        test('\u9724', "LIU");
+        test('\u9725', "MENG");
+        test('\u9726', "BIN");
+        test('\u9727', "WU");
+        test('\u9728', "WEI");
+        test('\u9729', "KUO");
+        test('\u972a', "YIN");
+        test('\u972b', "XI");
+        test('\u972c', "YI");
+        test('\u972d', "AI");
+        test('\u972e', "DAN");
+        test('\u972f', "TENG");
+        test('\u9730', "SAN");
+        test('\u9731', "YU");
+        test('\u9732', "LU");
+        test('\u9733', "LONG");
+        test('\u9734', "DAI");
+        test('\u9735', "JI");
+        test('\u9736', "PANG");
+        test('\u9737', "YANG");
+        test('\u9738', "BA");
+        test('\u9739', "PI");
+        test('\u973a', "WEI");
+        test('\u973b', "FENG");
+        test('\u973c', "XI");
+        test('\u973d', "JI");
+        test('\u973e', "MAI");
+        test('\u973f', "MENG");
+        test('\u9740', "MENG");
+        test('\u9741', "LEI");
+        test('\u9742', "LI");
+        test('\u9743', "HUO");
+        test('\u9744', "AI");
+        test('\u9745', "FEI");
+        test('\u9746', "DAI");
+        test('\u9747', "LONG");
+        test('\u9748', "LING");
+        test('\u9749', "AI");
+        test('\u974a', "FENG");
+        test('\u974b', "LI");
+        test('\u974c', "BAO");
+        test('\u974d', "HE");
+        test('\u974e', "HE");
+        test('\u974f', "HE");
+        test('\u9750', "BING");
+        test('\u9751', "QING");
+        test('\u9752', "QING");
+        test('\u9753', "JING");
+        test('\u9754', "TIAN");
+        test('\u9755', "ZHEN");
+        test('\u9756', "JING");
+        test('\u9757', "CHENG");
+        test('\u9758', "QING");
+        test('\u9759', "JING");
+        test('\u975a', "JING");
+        test('\u975b', "DIAN");
+        test('\u975c', "JING");
+        test('\u975d', "TIAN");
+        test('\u975e', "FEI");
+        test('\u975f', "FEI");
+        test('\u9760', "KAO");
+        test('\u9761', "MI");
+        test('\u9762', "MIAN");
+        test('\u9763', "MIAN");
+        test('\u9764', "BAO");
+        test('\u9765', "YE");
+        test('\u9766', "TIAN");
+        test('\u9767', "HUI");
+        test('\u9768', "YE");
+        test('\u9769', "GE");
+        test('\u976a', "DING");
+        test('\u976b', "CHA");
+        test('\u976c', "QIAN");
+        test('\u976d', "REN");
+        test('\u976e', "DI");
+        test('\u976f', "DU");
+        test('\u9770', "WU");
+        test('\u9771', "REN");
+        test('\u9772', "QIN");
+        test('\u9773', "JIN");
+        test('\u9774', "XUE");
+        test('\u9775', "NIU");
+        test('\u9776', "BA");
+        test('\u9777', "YIN");
+        test('\u9778', "SA");
+        test('\u9779', "NA");
+        test('\u977a', "MO");
+        test('\u977b', "ZU");
+        test('\u977c', "DA");
+        test('\u977d', "BAN");
+        test('\u977e', "YI");
+        test('\u977f', "YAO");
+        test('\u9780', "TAO");
+        test('\u9781', "BEI");
+        test('\u9782', "JIA");
+        test('\u9783', "HONG");
+        test('\u9784', "PAO");
+        test('\u9785', "YANG");
+        test('\u9786', "BING");
+        test('\u9787', "YIN");
+        test('\u9788', "GE");
+        test('\u9789', "TAO");
+        test('\u978a', "JIE");
+        test('\u978b', "XIE");
+        test('\u978c', "AN");
+        test('\u978d', "AN");
+        test('\u978e', "HEN");
+        test('\u978f', "GONG");
+        test('\u9790', "QIA");
+        test('\u9791', "DA");
+        test('\u9792', "QIAO");
+        test('\u9793', "TING");
+        test('\u9794', "MAN");
+        test('\u9795', "YING");
+        test('\u9796', "SUI");
+        test('\u9797', "TIAO");
+        test('\u9798', "QIAO");
+        test('\u9799', "XUAN");
+        test('\u979a', "KONG");
+        test('\u979b', "BENG");
+        test('\u979c', "TA");
+        test('\u979d', "SHANG");
+        test('\u979e', "BING");
+        test('\u979f', "KUO");
+        test('\u97a0', "JU");
+        test('\u97a1', "LA");
+        test('\u97a2', "XIE");
+        test('\u97a3', "ROU");
+        test('\u97a4', "BANG");
+        test('\u97a5', "ENG");
+        test('\u97a6', "QIU");
+        test('\u97a7', "QIU");
+        test('\u97a8', "HE");
+        test('\u97a9', "XIAO");
+        test('\u97aa', "MU");
+        test('\u97ab', "JU");
+        test('\u97ac', "JIAN");
+        test('\u97ad', "BIAN");
+        test('\u97ae', "DI");
+        test('\u97af', "JIAN");
+        test('\u97b0', "WEN");
+        test('\u97b1', "TAO");
+        test('\u97b2', "GOU");
+        test('\u97b3', "TA");
+        test('\u97b4', "BEI");
+        test('\u97b5', "XIE");
+        test('\u97b6', "PAN");
+        test('\u97b7', "GE");
+        test('\u97b8', "BI");
+        test('\u97b9', "KUO");
+        test('\u97ba', "TANG");
+        test('\u97bb', "LOU");
+        test('\u97bc', "GUI");
+        test('\u97bd', "QIAO");
+        test('\u97be', "XUE");
+        test('\u97bf', "JI");
+        test('\u97c0', "JIAN");
+        test('\u97c1', "JIANG");
+        test('\u97c2', "CHAN");
+        test('\u97c3', "DA");
+        test('\u97c4', "HU");
+        test('\u97c5', "XIAN");
+        test('\u97c6', "QIAN");
+        test('\u97c7', "DU");
+        test('\u97c8', "WA");
+        test('\u97c9', "JIAN");
+        test('\u97ca', "LAN");
+        test('\u97cb', "WEI");
+        test('\u97cc', "REN");
+        test('\u97cd', "FU");
+        test('\u97ce', "MEI");
+        test('\u97cf', "QUAN");
+        test('\u97d0', "GE");
+        test('\u97d1', "WEI");
+        test('\u97d2', "QIAO");
+        test('\u97d3', "HAN");
+        test('\u97d4', "CHANG");
+        test('\u97d5', "KUO");
+        test('\u97d6', "ROU");
+        test('\u97d7', "YUN");
+        test('\u97d8', "SHE");
+        test('\u97d9', "WEI");
+        test('\u97da', "GE");
+        test('\u97db', "BAI");
+        test('\u97dc', "TAO");
+        test('\u97dd', "GOU");
+        test('\u97de', "YUN");
+        test('\u97df', "GAO");
+        test('\u97e0', "BI");
+        test('\u97e1', "WEI");
+        test('\u97e2', "SUI");
+        test('\u97e3', "DU");
+        test('\u97e4', "WA");
+        test('\u97e5', "DU");
+        test('\u97e6', "WEI");
+        test('\u97e7', "REN");
+        test('\u97e8', "FU");
+        test('\u97e9', "HAN");
+        test('\u97ea', "WEI");
+        test('\u97eb', "YUN");
+        test('\u97ec', "TAO");
+        test('\u97ed', "JIU");
+        test('\u97ee', "JIU");
+        test('\u97ef', "XIAN");
+        test('\u97f0', "XIE");
+        test('\u97f1', "XIAN");
+        test('\u97f2', "JI");
+        test('\u97f3', "YIN");
+        test('\u97f4', "ZA");
+        test('\u97f5', "YUN");
+        test('\u97f6', "SHAO");
+        test('\u97f7', "LE");
+        test('\u97f8', "PENG");
+        test('\u97f9', "HUANG");
+        test('\u97fa', "YING");
+        test('\u97fb', "YUN");
+        test('\u97fc', "PENG");
+        test('\u97fd', "AN");
+        test('\u97fe', "YIN");
+        test('\u97ff', "XIANG");
+        test('\u9800', "HU");
+        test('\u9801', "YE");
+        test('\u9802', "DING");
+        test('\u9803', "QING");
+        test('\u9804', "KUI");
+        test('\u9805', "XIANG");
+        test('\u9806', "SHUN");
+        test('\u9807', "HAN");
+        test('\u9808', "XU");
+        test('\u9809', "YI");
+        test('\u980a', "XU");
+        test('\u980b', "E");
+        test('\u980c', "SONG");
+        test('\u980d', "KUI");
+        test('\u980e', "QI");
+        test('\u980f', "HANG");
+        test('\u9810', "YU");
+        test('\u9811', "WAN");
+        test('\u9812', "BAN");
+        test('\u9813', "DUN");
+        test('\u9814', "DI");
+        test('\u9815', "DAN");
+        test('\u9816', "PAN");
+        test('\u9817', "PO");
+        test('\u9818', "LING");
+        test('\u9819', "CHE");
+        test('\u981a', "JING");
+        test('\u981b', "LEI");
+        test('\u981c', "HE");
+        test('\u981d', "QIAO");
+        test('\u981e', "E");
+        test('\u981f', "E");
+        test('\u9820', "WEI");
+        test('\u9821', "XIE");
+        test('\u9822', "KUO");
+        test('\u9823', "SHEN");
+        test('\u9824', "YI");
+        test('\u9825', "SHEN");
+        test('\u9826', "HAI");
+        test('\u9827', "DUI");
+        test('\u9828', "YU");
+        test('\u9829', "PING");
+        test('\u982a', "LEI");
+        test('\u982b', "FU");
+        test('\u982c', "JIA");
+        test('\u982d', "TOU");
+        test('\u982e', "HUI");
+        test('\u982f', "KUI");
+        test('\u9830', "JIA");
+        test('\u9831', "LUO");
+        test('\u9832', "TING");
+        test('\u9833', "CHENG");
+        test('\u9834', "YING");
+        test('\u9835', "YUN");
+        test('\u9836', "HU");
+        test('\u9837', "HAN");
+        test('\u9838', "JING");
+        test('\u9839', "TUI");
+        test('\u983a', "TUI");
+        test('\u983b', "PIN");
+        test('\u983c', "LAI");
+        test('\u983d', "TUI");
+        test('\u983e', "ZI");
+        test('\u983f', "ZI");
+        test('\u9840', "CHUI");
+        test('\u9841', "DING");
+        test('\u9842', "LAI");
+        test('\u9843', "TAN");
+        test('\u9844', "HAN");
+        test('\u9845', "QIAN");
+        test('\u9846', "KE");
+        test('\u9847', "CUI");
+        test('\u9848', "XUAN");
+        test('\u9849', "QIN");
+        test('\u984a', "YI");
+        test('\u984b', "SAI");
+        test('\u984c', "TI");
+        test('\u984d', "E");
+        test('\u984e', "E");
+        test('\u984f', "YAN");
+        test('\u9850', "WEN");
+        test('\u9851', "KAN");
+        test('\u9852', "YONG");
+        test('\u9853', "ZHUAN");
+        test('\u9854', "YAN");
+        test('\u9855', "XIAN");
+        test('\u9856', "XIN");
+        test('\u9857', "YI");
+        test('\u9858', "YUAN");
+        test('\u9859', "SANG");
+        test('\u985a', "DIAN");
+        test('\u985b', "DIAN");
+        test('\u985c', "JIANG");
+        test('\u985d', "KUI");
+        test('\u985e', "LEI");
+        test('\u985f', "LAO");
+        test('\u9860', "PIAO");
+        test('\u9861', "WAI");
+        test('\u9862', "MAN");
+        test('\u9863', "CU");
+        test('\u9864', "YAO");
+        test('\u9865', "HAO");
+        test('\u9866', "QIAO");
+        test('\u9867', "GU");
+        test('\u9868', "XUN");
+        test('\u9869', "YAN");
+        test('\u986a', "HUI");
+        test('\u986b', "CHAN");
+        test('\u986c', "RU");
+        test('\u986d', "MENG");
+        test('\u986e', "BIN");
+        test('\u986f', "XIAN");
+        test('\u9870', "PIN");
+        test('\u9871', "LU");
+        test('\u9872', "LAN");
+        test('\u9873', "NIE");
+        test('\u9874', "QUAN");
+        test('\u9875', "YE");
+        test('\u9876', "DING");
+        test('\u9877', "QING");
+        test('\u9878', "HAN");
+        test('\u9879', "XIANG");
+        test('\u987a', "SHUN");
+        test('\u987b', "XU");
+        test('\u987c', "XU");
+        test('\u987d', "WAN");
+        test('\u987e', "GU");
+        test('\u987f', "DUN");
+        test('\u9880', "QI");
+        test('\u9881', "BAN");
+        test('\u9882', "SONG");
+        test('\u9883', "HANG");
+        test('\u9884', "YU");
+        test('\u9885', "LU");
+        test('\u9886', "LING");
+        test('\u9887', "PO");
+        test('\u9888', "JING");
+        test('\u9889', "JIE");
+        test('\u988a', "JIA");
+        test('\u988b', "TING");
+        test('\u988c', "HE");
+        test('\u988d', "YING");
+        test('\u988e', "JIONG");
+        test('\u988f', "KE");
+        test('\u9890', "YI");
+        test('\u9891', "PIN");
+        test('\u9892', "HUI");
+        test('\u9893', "TUI");
+        test('\u9894', "HAN");
+        test('\u9895', "YING");
+        test('\u9896', "YING");
+        test('\u9897', "KE");
+        test('\u9898', "TI");
+        test('\u9899', "YONG");
+        test('\u989a', "E");
+        test('\u989b', "ZHUAN");
+        test('\u989c', "YAN");
+        test('\u989d', "E");
+        test('\u989e', "NIE");
+        test('\u989f', "MAN");
+        test('\u98a0', "DIAN");
+        test('\u98a1', "SANG");
+        test('\u98a2', "HAO");
+        test('\u98a3', "LEI");
+        test('\u98a4', "CHAN");
+        test('\u98a5', "RU");
+        test('\u98a6', "PIN");
+        test('\u98a7', "QUAN");
+        test('\u98a8', "FENG");
+        test('\u98a9', "BIAO");
+        test('\u98aa', "GUA");
+        test('\u98ab', "FU");
+        test('\u98ac', "XIA");
+        test('\u98ad', "ZHAN");
+        test('\u98ae', "BIAO");
+        test('\u98af', "SA");
+        test('\u98b0', "BA");
+        test('\u98b1', "TAI");
+        test('\u98b2', "LIE");
+        test('\u98b3', "GUA");
+        test('\u98b4', "XUAN");
+        test('\u98b5', "SHAO");
+        test('\u98b6', "JU");
+        test('\u98b7', "BIAO");
+        test('\u98b8', "SI");
+        test('\u98b9', "WEI");
+        test('\u98ba', "YANG");
+        test('\u98bb', "YAO");
+        test('\u98bc', "SOU");
+        test('\u98bd', "KAI");
+        test('\u98be', "SOU");
+        test('\u98bf', "FAN");
+        test('\u98c0', "LIU");
+        test('\u98c1', "XI");
+        test('\u98c2', "LIU");
+        test('\u98c3', "PIAO");
+        test('\u98c4', "PIAO");
+        test('\u98c5', "LIU");
+        test('\u98c6', "BIAO");
+        test('\u98c7', "BIAO");
+        test('\u98c8', "BIAO");
+        test('\u98c9', "LIAO");
+        test('\u98ca', "BIAO");
+        test('\u98cb', "SE");
+        test('\u98cc', "FENG");
+        test('\u98cd', "XIU");
+        test('\u98ce', "FENG");
+        test('\u98cf', "YANG");
+        test('\u98d0', "ZHAN");
+        test('\u98d1', "BIAO");
+        test('\u98d2', "SA");
+        test('\u98d3', "JU");
+        test('\u98d4', "SI");
+        test('\u98d5', "SOU");
+        test('\u98d6', "YAO");
+        test('\u98d7', "LIU");
+        test('\u98d8', "PIAO");
+        test('\u98d9', "BIAO");
+        test('\u98da', "BIAO");
+        test('\u98db', "FEI");
+        test('\u98dc', "FAN");
+        test('\u98dd', "FEI");
+        test('\u98de', "FEI");
+        test('\u98df', "SHI");
+        test('\u98e0', "SHI");
+        test('\u98e1', "CAN");
+        test('\u98e2', "JI");
+        test('\u98e3', "DING");
+        test('\u98e4', "SI");
+        test('\u98e5', "TUO");
+        test('\u98e6', "ZHAN");
+        test('\u98e7', "SUN");
+        test('\u98e8', "XIANG");
+        test('\u98e9', "TUN");
+        test('\u98ea', "REN");
+        test('\u98eb', "YU");
+        test('\u98ec', "JUAN");
+        test('\u98ed', "CHI");
+        test('\u98ee', "YIN");
+        test('\u98ef', "FAN");
+        test('\u98f0', "FAN");
+        test('\u98f1', "SUN");
+        test('\u98f2', "YIN");
+        test('\u98f3', "TOU");
+        test('\u98f4', "YI");
+        test('\u98f5', "ZUO");
+        test('\u98f6', "BI");
+        test('\u98f7', "JIE");
+        test('\u98f8', "TAO");
+        test('\u98f9', "LIU");
+        test('\u98fa', "CI");
+        test('\u98fb', "TIE");
+        test('\u98fc', "SI");
+        test('\u98fd', "BAO");
+        test('\u98fe', "SHI");
+        test('\u98ff', "DUO");
+        test('\u9900', "HAI");
+        test('\u9901', "REN");
+        test('\u9902', "TIAN");
+        test('\u9903', "JIAO");
+        test('\u9904', "JIA");
+        test('\u9905', "BING");
+        test('\u9906', "YAO");
+        test('\u9907', "TONG");
+        test('\u9908', "CI");
+        test('\u9909', "XIANG");
+        test('\u990a', "YANG");
+        test('\u990b', "JUAN");
+        test('\u990c', "ER");
+        test('\u990d', "YAN");
+        test('\u990e', "LE");
+        test('\u990f', "XI");
+        test('\u9910', "CAN");
+        test('\u9911', "BO");
+        test('\u9912', "NEI");
+        test('\u9913', "E");
+        test('\u9914', "BU");
+        test('\u9915', "JUN");
+        test('\u9916', "DOU");
+        test('\u9917', "SU");
+        test('\u9918', "YU");
+        test('\u9919', "SHI");
+        test('\u991a', "YAO");
+        test('\u991b', "HUN");
+        test('\u991c', "GUO");
+        test('\u991d', "SHI");
+        test('\u991e', "JIAN");
+        test('\u991f', "ZHUI");
+        test('\u9920', "BING");
+        test('\u9921', "XIAN");
+        test('\u9922', "BU");
+        test('\u9923', "YE");
+        test('\u9924', "TAN");
+        test('\u9925', "FEI");
+        test('\u9926', "ZHANG");
+        test('\u9927', "WEI");
+        test('\u9928', "GUAN");
+        test('\u9929', "E");
+        test('\u992a', "NUAN");
+        test('\u992b', "YUN");
+        test('\u992c', "HU");
+        test('\u992d', "HUANG");
+        test('\u992e', "TIE");
+        test('\u992f', "HUI");
+        test('\u9930', "JIAN");
+        test('\u9931', "HOU");
+        test('\u9932', "AI");
+        test('\u9933', "TANG");
+        test('\u9934', "FEN");
+        test('\u9935', "WEI");
+        test('\u9936', "GU");
+        test('\u9937', "CHA");
+        test('\u9938', "SONG");
+        test('\u9939', "TANG");
+        test('\u993a', "BO");
+        test('\u993b', "GAO");
+        test('\u993c', "XI");
+        test('\u993d', "KUI");
+        test('\u993e', "LIU");
+        test('\u993f', "SOU");
+        test('\u9940', "TAO");
+        test('\u9941', "YE");
+        test('\u9942', "YUN");
+        test('\u9943', "MO");
+        test('\u9944', "TANG");
+        test('\u9945', "MAN");
+        test('\u9946', "BI");
+        test('\u9947', "YU");
+        test('\u9948', "XIU");
+        test('\u9949', "JIN");
+        test('\u994a', "SAN");
+        test('\u994b', "KUI");
+        test('\u994c', "ZHUAN");
+        test('\u994d', "SHAN");
+        test('\u994e', "CHI");
+        test('\u994f', "DAN");
+        test('\u9950', "YI");
+        test('\u9951', "JI");
+        test('\u9952', "RAO");
+        test('\u9953', "CHENG");
+        test('\u9954', "YONG");
+        test('\u9955', "TAO");
+        test('\u9956', "WEI");
+        test('\u9957', "XIANG");
+        test('\u9958', "ZHAN");
+        test('\u9959', "FEN");
+        test('\u995a', "HAI");
+        test('\u995b', "MENG");
+        test('\u995c', "YAN");
+        test('\u995d', "MO");
+        test('\u995e', "CHAN");
+        test('\u995f', "XIANG");
+        test('\u9960', "LUO");
+        test('\u9961', "ZAN");
+        test('\u9962', "NANG");
+        test('\u9963', "SHI");
+        test('\u9964', "DING");
+        test('\u9965', "JI");
+        test('\u9966', "TUO");
+        test('\u9967', "TANG");
+        test('\u9968', "TUN");
+        test('\u9969', "XI");
+        test('\u996a', "REN");
+        test('\u996b', "YU");
+        test('\u996c', "CHI");
+        test('\u996d', "FAN");
+        test('\u996e', "YIN");
+        test('\u996f', "JIAN");
+        test('\u9970', "SHI");
+        test('\u9971', "BAO");
+        test('\u9972', "SI");
+        test('\u9973', "DUO");
+        test('\u9974', "YI");
+        test('\u9975', "ER");
+        test('\u9976', "RAO");
+        test('\u9977', "XIANG");
+        test('\u9978', "HE");
+        test('\u9979', "LE");
+        test('\u997a', "JIAO");
+        test('\u997b', "XI");
+        test('\u997c', "BING");
+        test('\u997d', "BO");
+        test('\u997e', "DOU");
+        test('\u997f', "E");
+        test('\u9980', "YU");
+        test('\u9981', "NEI");
+        test('\u9982', "JUN");
+        test('\u9983', "GUO");
+        test('\u9984', "HUN");
+        test('\u9985', "XIAN");
+        test('\u9986', "GUAN");
+        test('\u9987', "CHA");
+        test('\u9988', "KUI");
+        test('\u9989', "GU");
+        test('\u998a', "SOU");
+        test('\u998b', "CHAN");
+        test('\u998c', "YE");
+        test('\u998d', "MO");
+        test('\u998e', "BO");
+        test('\u998f', "LIU");
+        test('\u9990', "XIU");
+        test('\u9991', "JIN");
+        test('\u9992', "MAN");
+        test('\u9993', "SAN");
+        test('\u9994', "ZHUAN");
+        test('\u9995', "NANG");
+        test('\u9996', "SHOU");
+        test('\u9997', "KUI");
+        test('\u9998', "GUO");
+        test('\u9999', "XIANG");
+        test('\u999a', "FEN");
+        test('\u999b', "BO");
+        test('\u999c', "NI");
+        test('\u999d', "BI");
+        test('\u999e', "BO");
+        test('\u999f', "TU");
+        test('\u99a0', "HAN");
+        test('\u99a1', "FEI");
+        test('\u99a2', "JIAN");
+        test('\u99a3', "AN");
+        test('\u99a4', "AI");
+        test('\u99a5', "FU");
+        test('\u99a6', "XIAN");
+        test('\u99a7', "YUN");
+        test('\u99a8', "XIN");
+        test('\u99a9', "FEN");
+        test('\u99aa', "PIN");
+        test('\u99ab', "XIN");
+        test('\u99ac', "MA");
+        test('\u99ad', "YU");
+        test('\u99ae', "FENG");
+        test('\u99af', "HAN");
+        test('\u99b0', "DI");
+        test('\u99b1', "TUO");
+        test('\u99b2', "ZHE");
+        test('\u99b3', "CHI");
+        test('\u99b4', "XUN");
+        test('\u99b5', "ZHU");
+        test('\u99b6', "ZHI");
+        test('\u99b7', "PEI");
+        test('\u99b8', "XIN");
+        test('\u99b9', "RI");
+        test('\u99ba', "SA");
+        test('\u99bb', "YUN");
+        test('\u99bc', "WEN");
+        test('\u99bd', "ZHI");
+        test('\u99be', "DAN");
+        test('\u99bf', "LU");
+        test('\u99c0', "YOU");
+        test('\u99c1', "BO");
+        test('\u99c2', "BAO");
+        test('\u99c3', "JUE");
+        test('\u99c4', "TUO");
+        test('\u99c5', "YI");
+        test('\u99c6', "QU");
+        test('\u99c7', "PU");
+        test('\u99c8', "QU");
+        test('\u99c9', "JIONG");
+        test('\u99ca', "PO");
+        test('\u99cb', "ZHAO");
+        test('\u99cc', "YUAN");
+        test('\u99cd', "PEI");
+        test('\u99ce', "ZHOU");
+        test('\u99cf', "JU");
+        test('\u99d0', "ZHU");
+        test('\u99d1', "NU");
+        test('\u99d2', "JU");
+        test('\u99d3', "PI");
+        test('\u99d4', "ZANG");
+        test('\u99d5', "JIA");
+        test('\u99d6', "LING");
+        test('\u99d7', "ZHEN");
+        test('\u99d8', "TAI");
+        test('\u99d9', "FU");
+        test('\u99da', "YANG");
+        test('\u99db', "SHI");
+        test('\u99dc', "BI");
+        test('\u99dd', "TUO");
+        test('\u99de', "TUO");
+        test('\u99df', "SI");
+        test('\u99e0', "LIU");
+        test('\u99e1', "MA");
+        test('\u99e2', "PIAN");
+        test('\u99e3', "TAO");
+        test('\u99e4', "ZHI");
+        test('\u99e5', "RONG");
+        test('\u99e6', "TENG");
+        test('\u99e7', "DONG");
+        test('\u99e8', "XUN");
+        test('\u99e9', "QUAN");
+        test('\u99ea', "SHEN");
+        test('\u99eb', "JIONG");
+        test('\u99ec', "ER");
+        test('\u99ed', "HAI");
+        test('\u99ee', "BO");
+        test('\u99ef', "ZHU");
+        test('\u99f0', "YIN");
+        test('\u99f1', "LUO");
+        test('\u99f2', "ZHOU");
+        test('\u99f3', "DAN");
+        test('\u99f4', "XIE");
+        test('\u99f5', "LIU");
+        test('\u99f6', "JU");
+        test('\u99f7', "SONG");
+        test('\u99f8', "QIN");
+        test('\u99f9', "MANG");
+        test('\u99fa', "LANG");
+        test('\u99fb', "HAN");
+        test('\u99fc', "TU");
+        test('\u99fd', "XUAN");
+        test('\u99fe', "TUI");
+        test('\u99ff', "JUN");
+    }
+
+    @SmallTest
+    public void test_19() throws Exception {
+        if (!hasChineseTransliterator()) {
+            return;
+        }
+        test('\u9a00', "E");
+        test('\u9a01', "CHENG");
+        test('\u9a02', "XING");
+        test('\u9a03', "AI");
+        test('\u9a04', "LU");
+        test('\u9a05', "ZHUI");
+        test('\u9a06', "ZHOU");
+        test('\u9a07', "SHE");
+        test('\u9a08', "PIAN");
+        test('\u9a09', "KUN");
+        test('\u9a0a', "TAO");
+        test('\u9a0b', "LAI");
+        test('\u9a0c', "ZONG");
+        test('\u9a0d', "KE");
+        test('\u9a0e', "QI");
+        test('\u9a0f', "QI");
+        test('\u9a10', "YAN");
+        test('\u9a11', "FEI");
+        test('\u9a12', "SAO");
+        test('\u9a13', "YAN");
+        test('\u9a14', "GE");
+        test('\u9a15', "YAO");
+        test('\u9a16', "WU");
+        test('\u9a17', "PIAN");
+        test('\u9a18', "CONG");
+        test('\u9a19', "PIAN");
+        test('\u9a1a', "QIAN");
+        test('\u9a1b', "FEI");
+        test('\u9a1c', "HUANG");
+        test('\u9a1d', "QIAN");
+        test('\u9a1e', "HUO");
+        test('\u9a1f', "YU");
+        test('\u9a20', "TI");
+        test('\u9a21', "QUAN");
+        test('\u9a22', "XIA");
+        test('\u9a23', "ZONG");
+        test('\u9a24', "KUI");
+        test('\u9a25', "ROU");
+        test('\u9a26', "SI");
+        test('\u9a27', "GUA");
+        test('\u9a28', "TUO");
+        test('\u9a29', "GUI");
+        test('\u9a2a', "SOU");
+        test('\u9a2b', "QIAN");
+        test('\u9a2c', "CHENG");
+        test('\u9a2d', "ZHI");
+        test('\u9a2e', "LIU");
+        test('\u9a2f', "PENG");
+        test('\u9a30', "TENG");
+        test('\u9a31', "XI");
+        test('\u9a32', "CAO");
+        test('\u9a33', "DU");
+        test('\u9a34', "YAN");
+        test('\u9a35', "YUAN");
+        test('\u9a36', "ZOU");
+        test('\u9a37', "SAO");
+        test('\u9a38', "SHAN");
+        test('\u9a39', "LI");
+        test('\u9a3a', "ZHI");
+        test('\u9a3b', "SHUANG");
+        test('\u9a3c', "LU");
+        test('\u9a3d', "XI");
+        test('\u9a3e', "LUO");
+        test('\u9a3f', "ZHANG");
+        test('\u9a40', "MO");
+        test('\u9a41', "AO");
+        test('\u9a42', "CAN");
+        test('\u9a43', "BIAO");
+        test('\u9a44', "CONG");
+        test('\u9a45', "QU");
+        test('\u9a46', "BI");
+        test('\u9a47', "ZHI");
+        test('\u9a48', "YU");
+        test('\u9a49', "XU");
+        test('\u9a4a', "HUA");
+        test('\u9a4b', "BO");
+        test('\u9a4c', "SU");
+        test('\u9a4d', "XIAO");
+        test('\u9a4e', "LIN");
+        test('\u9a4f', "ZHAN");
+        test('\u9a50', "DUN");
+        test('\u9a51', "LIU");
+        test('\u9a52', "TUO");
+        test('\u9a53', "CENG");
+        test('\u9a54', "DIAN");
+        test('\u9a55', "JIAO");
+        test('\u9a56', "TIE");
+        test('\u9a57', "YAN");
+        test('\u9a58', "LUO");
+        test('\u9a59', "ZHAN");
+        test('\u9a5a', "JING");
+        test('\u9a5b', "YI");
+        test('\u9a5c', "YE");
+        test('\u9a5d', "TUO");
+        test('\u9a5e', "PIN");
+        test('\u9a5f', "ZHOU");
+        test('\u9a60', "YAN");
+        test('\u9a61', "LONG");
+        test('\u9a62', "LU");
+        test('\u9a63', "TENG");
+        test('\u9a64', "XIANG");
+        test('\u9a65', "JI");
+        test('\u9a66', "SHUANG");
+        test('\u9a67', "JU");
+        test('\u9a68', "XI");
+        test('\u9a69', "HUAN");
+        test('\u9a6a', "LI");
+        test('\u9a6b', "BIAO");
+        test('\u9a6c', "MA");
+        test('\u9a6d', "YU");
+        test('\u9a6e', "TUO");
+        test('\u9a6f', "XUN");
+        test('\u9a70', "CHI");
+        test('\u9a71', "QU");
+        test('\u9a72', "RI");
+        test('\u9a73', "BO");
+        test('\u9a74', "LU");
+        test('\u9a75', "ZANG");
+        test('\u9a76', "SHI");
+        test('\u9a77', "SI");
+        test('\u9a78', "FU");
+        test('\u9a79', "JU");
+        test('\u9a7a', "ZOU");
+        test('\u9a7b', "ZHU");
+        test('\u9a7c', "TUO");
+        test('\u9a7d', "NU");
+        test('\u9a7e', "JIA");
+        test('\u9a7f', "YI");
+        test('\u9a80', "DAI");
+        test('\u9a81', "XIAO");
+        test('\u9a82', "MA");
+        test('\u9a83', "YIN");
+        test('\u9a84', "JIAO");
+        test('\u9a85', "HUA");
+        test('\u9a86', "LUO");
+        test('\u9a87', "HAI");
+        test('\u9a88', "PIAN");
+        test('\u9a89', "BIAO");
+        test('\u9a8a', "LI");
+        test('\u9a8b', "CHENG");
+        test('\u9a8c', "YAN");
+        test('\u9a8d', "XING");
+        test('\u9a8e', "QIN");
+        test('\u9a8f', "JUN");
+        test('\u9a90', "QI");
+        test('\u9a91', "QI");
+        test('\u9a92', "KE");
+        test('\u9a93', "ZHUI");
+        test('\u9a94', "ZONG");
+        test('\u9a95', "SU");
+        test('\u9a96', "CAN");
+        test('\u9a97', "PIAN");
+        test('\u9a98', "ZHI");
+        test('\u9a99', "KUI");
+        test('\u9a9a', "SAO");
+        test('\u9a9b', "WU");
+        test('\u9a9c', "AO");
+        test('\u9a9d', "LIU");
+        test('\u9a9e', "QIAN");
+        test('\u9a9f', "SHAN");
+        test('\u9aa0', "BIAO");
+        test('\u9aa1', "LUO");
+        test('\u9aa2', "CONG");
+        test('\u9aa3', "CHAN");
+        test('\u9aa4', "ZHOU");
+        test('\u9aa5', "JI");
+        test('\u9aa6', "SHUANG");
+        test('\u9aa7', "XIANG");
+        test('\u9aa8', "GU");
+        test('\u9aa9', "WEI");
+        test('\u9aaa', "WEI");
+        test('\u9aab', "WEI");
+        test('\u9aac', "YU");
+        test('\u9aad', "GAN");
+        test('\u9aae', "YI");
+        test('\u9aaf', "ANG");
+        test('\u9ab0', "TOU");
+        test('\u9ab1', "JIE");
+        test('\u9ab2', "BAO");
+        test('\u9ab3', "BEI");
+        test('\u9ab4', "CI");
+        test('\u9ab5', "TI");
+        test('\u9ab6', "DI");
+        test('\u9ab7', "KU");
+        test('\u9ab8', "HAI");
+        test('\u9ab9', "QIAO");
+        test('\u9aba', "HOU");
+        test('\u9abb', "KUA");
+        test('\u9abc', "GE");
+        test('\u9abd', "TUI");
+        test('\u9abe', "GENG");
+        test('\u9abf', "PIAN");
+        test('\u9ac0', "BI");
+        test('\u9ac1', "KE");
+        test('\u9ac2', "QIA");
+        test('\u9ac3', "YU");
+        test('\u9ac4', "SUI");
+        test('\u9ac5', "LOU");
+        test('\u9ac6', "BO");
+        test('\u9ac7', "XIAO");
+        test('\u9ac8', "BANG");
+        test('\u9ac9', "BO");
+        test('\u9aca', "CI");
+        test('\u9acb', "KUAN");
+        test('\u9acc', "BIN");
+        test('\u9acd', "MO");
+        test('\u9ace', "LIAO");
+        test('\u9acf', "LOU");
+        test('\u9ad0', "XIAO");
+        test('\u9ad1', "DU");
+        test('\u9ad2', "ZANG");
+        test('\u9ad3', "SUI");
+        test('\u9ad4', "TI");
+        test('\u9ad5', "BIN");
+        test('\u9ad6', "KUAN");
+        test('\u9ad7', "LU");
+        test('\u9ad8', "GAO");
+        test('\u9ad9', "GAO");
+        test('\u9ada', "QIAO");
+        test('\u9adb', "KAO");
+        test('\u9adc', "QIAO");
+        test('\u9add', "LAO");
+        test('\u9ade', "SAO");
+        test('\u9adf', "BIAO");
+        test('\u9ae0', "KUN");
+        test('\u9ae1', "KUN");
+        test('\u9ae2', "DI");
+        test('\u9ae3', "FANG");
+        test('\u9ae4', "XIU");
+        test('\u9ae5', "RAN");
+        test('\u9ae6', "MAO");
+        test('\u9ae7', "DAN");
+        test('\u9ae8', "KUN");
+        test('\u9ae9', "BIN");
+        test('\u9aea', "FA");
+        test('\u9aeb', "TIAO");
+        test('\u9aec', "PI");
+        test('\u9aed', "ZI");
+        test('\u9aee', "FA");
+        test('\u9aef', "RAN");
+        test('\u9af0', "TI");
+        test('\u9af1', "BAO");
+        test('\u9af2', "BI");
+        test('\u9af3', "MAO");
+        test('\u9af4', "FU");
+        test('\u9af5', "ER");
+        test('\u9af6', "RONG");
+        test('\u9af7', "QU");
+        test('\u9af8', "GONG");
+        test('\u9af9', "XIU");
+        test('\u9afa', "KUO");
+        test('\u9afb', "JI");
+        test('\u9afc', "PENG");
+        test('\u9afd', "ZHUA");
+        test('\u9afe', "SHAO");
+        test('\u9aff', "SUO");
+        test('\u9b00', "TI");
+        test('\u9b01', "LI");
+        test('\u9b02', "BIN");
+        test('\u9b03', "ZONG");
+        test('\u9b04', "DI");
+        test('\u9b05', "PENG");
+        test('\u9b06', "SONG");
+        test('\u9b07', "ZHENG");
+        test('\u9b08', "QUAN");
+        test('\u9b09', "ZONG");
+        test('\u9b0a', "SHUN");
+        test('\u9b0b', "JIAN");
+        test('\u9b0c', "TUO");
+        test('\u9b0d', "HU");
+        test('\u9b0e', "LA");
+        test('\u9b0f', "JIU");
+        test('\u9b10', "QI");
+        test('\u9b11', "LIAN");
+        test('\u9b12', "ZHEN");
+        test('\u9b13', "BIN");
+        test('\u9b14', "PENG");
+        test('\u9b15', "MA");
+        test('\u9b16', "SAN");
+        test('\u9b17', "MAN");
+        test('\u9b18', "MAN");
+        test('\u9b19', "SENG");
+        test('\u9b1a', "XU");
+        test('\u9b1b', "LIE");
+        test('\u9b1c', "QIAN");
+        test('\u9b1d', "QIAN");
+        test('\u9b1e', "NANG");
+        test('\u9b1f', "HUAN");
+        test('\u9b20', "KUO");
+        test('\u9b21', "NING");
+        test('\u9b22', "BIN");
+        test('\u9b23', "LIE");
+        test('\u9b24', "RANG");
+        test('\u9b25', "DOU");
+        test('\u9b26', "DOU");
+        test('\u9b27', "NAO");
+        test('\u9b28', "HONG");
+        test('\u9b29', "XI");
+        test('\u9b2a', "DOU");
+        test('\u9b2b', "HAN");
+        test('\u9b2c', "DOU");
+        test('\u9b2d', "DOU");
+        test('\u9b2e', "JIU");
+        test('\u9b2f', "CHANG");
+        test('\u9b30', "YU");
+        test('\u9b31', "YU");
+        test('\u9b32', "GE");
+        test('\u9b33', "YAN");
+        test('\u9b34', "FU");
+        test('\u9b35', "QIN");
+        test('\u9b36', "GUI");
+        test('\u9b37', "ZONG");
+        test('\u9b38', "LIU");
+        test('\u9b39', "GUI");
+        test('\u9b3a', "SHANG");
+        test('\u9b3b', "YU");
+        test('\u9b3c', "GUI");
+        test('\u9b3d', "MEI");
+        test('\u9b3e', "JI");
+        test('\u9b3f', "QI");
+        test('\u9b40', "GA");
+        test('\u9b41', "KUI");
+        test('\u9b42', "HUN");
+        test('\u9b43', "BA");
+        test('\u9b44', "PO");
+        test('\u9b45', "MEI");
+        test('\u9b46', "XU");
+        test('\u9b47', "YAN");
+        test('\u9b48', "XIAO");
+        test('\u9b49', "LIANG");
+        test('\u9b4a', "YU");
+        test('\u9b4b', "TUI");
+        test('\u9b4c', "QI");
+        test('\u9b4d', "WANG");
+        test('\u9b4e', "LIANG");
+        test('\u9b4f', "WEI");
+        test('\u9b50', "GAN");
+        test('\u9b51', "CHI");
+        test('\u9b52', "PIAO");
+        test('\u9b53', "BI");
+        test('\u9b54', "MO");
+        test('\u9b55', "JI");
+        test('\u9b56', "XU");
+        test('\u9b57', "CHOU");
+        test('\u9b58', "YAN");
+        test('\u9b59', "ZHAN");
+        test('\u9b5a', "YU");
+        test('\u9b5b', "DAO");
+        test('\u9b5c', "REN");
+        test('\u9b5d', "JIE");
+        test('\u9b5e', "BA");
+        test('\u9b5f', "HONG");
+        test('\u9b60', "TUO");
+        test('\u9b61', "DIAO");
+        test('\u9b62', "JI");
+        test('\u9b63', "XU");
+        test('\u9b64', "E");
+        test('\u9b65', "E");
+        test('\u9b66', "SHA");
+        test('\u9b67', "HANG");
+        test('\u9b68', "TUN");
+        test('\u9b69', "MO");
+        test('\u9b6a', "JIE");
+        test('\u9b6b', "SHEN");
+        test('\u9b6c', "BAN");
+        test('\u9b6d', "YUAN");
+        test('\u9b6e', "PI");
+        test('\u9b6f', "LU");
+        test('\u9b70', "WEN");
+        test('\u9b71', "HU");
+        test('\u9b72', "LU");
+        test('\u9b73', "ZA");
+        test('\u9b74', "FANG");
+        test('\u9b75', "FEN");
+        test('\u9b76', "NA");
+        test('\u9b77', "YOU");
+        test('\u9b78', "PIAN");
+        test('\u9b79', "MO");
+        test('\u9b7a', "HE");
+        test('\u9b7b', "XIA");
+        test('\u9b7c', "QU");
+        test('\u9b7d', "HAN");
+        test('\u9b7e', "PI");
+        test('\u9b7f', "LING");
+        test('\u9b80', "TUO");
+        test('\u9b81', "BO");
+        test('\u9b82', "QIU");
+        test('\u9b83', "PING");
+        test('\u9b84', "FU");
+        test('\u9b85', "BI");
+        test('\u9b86', "CI");
+        test('\u9b87', "WEI");
+        test('\u9b88', "JU");
+        test('\u9b89', "DIAO");
+        test('\u9b8a', "BA");
+        test('\u9b8b', "YOU");
+        test('\u9b8c', "GUN");
+        test('\u9b8d', "PI");
+        test('\u9b8e', "NIAN");
+        test('\u9b8f', "XING");
+        test('\u9b90', "TAI");
+        test('\u9b91', "BAO");
+        test('\u9b92', "FU");
+        test('\u9b93', "ZHA");
+        test('\u9b94', "JU");
+        test('\u9b95', "GU");
+        test('\u9b96', "SHI");
+        test('\u9b97', "DONG");
+        test('\u9b98', "DAI");
+        test('\u9b99', "TA");
+        test('\u9b9a', "JIE");
+        test('\u9b9b', "SHU");
+        test('\u9b9c', "HOU");
+        test('\u9b9d', "XIANG");
+        test('\u9b9e', "ER");
+        test('\u9b9f', "AN");
+        test('\u9ba0', "WEI");
+        test('\u9ba1', "ZHAO");
+        test('\u9ba2', "ZHU");
+        test('\u9ba3', "YIN");
+        test('\u9ba4', "LIE");
+        test('\u9ba5', "LUO");
+        test('\u9ba6', "TONG");
+        test('\u9ba7', "TI");
+        test('\u9ba8', "YI");
+        test('\u9ba9', "BING");
+        test('\u9baa', "WEI");
+        test('\u9bab', "JIAO");
+        test('\u9bac', "KU");
+        test('\u9bad', "GUI");
+        test('\u9bae', "XIAN");
+        test('\u9baf', "GE");
+        test('\u9bb0', "HUI");
+        test('\u9bb1', "LAO");
+        test('\u9bb2', "FU");
+        test('\u9bb3', "KAO");
+        test('\u9bb4', "XIU");
+        test('\u9bb5', "DUO");
+        test('\u9bb6', "JUN");
+        test('\u9bb7', "TI");
+        test('\u9bb8', "MIAN");
+        test('\u9bb9', "SHAO");
+        test('\u9bba', "ZHA");
+        test('\u9bbb', "SUO");
+        test('\u9bbc', "QIN");
+        test('\u9bbd', "YU");
+        test('\u9bbe', "NEI");
+        test('\u9bbf', "ZHE");
+        test('\u9bc0', "GUN");
+        test('\u9bc1', "GENG");
+        test('\u9bc2', "SU");
+        test('\u9bc3', "WU");
+        test('\u9bc4', "QIU");
+        test('\u9bc5', "SHAN");
+        test('\u9bc6', "PU");
+        test('\u9bc7', "HUAN");
+        test('\u9bc8', "TIAO");
+        test('\u9bc9', "LI");
+        test('\u9bca', "SHA");
+        test('\u9bcb', "SHA");
+        test('\u9bcc', "KAO");
+        test('\u9bcd', "MENG");
+        test('\u9bce', "CHENG");
+        test('\u9bcf', "LI");
+        test('\u9bd0', "ZOU");
+        test('\u9bd1', "XI");
+        test('\u9bd2', "YONG");
+        test('\u9bd3', "NI");
+        test('\u9bd4', "ZI");
+        test('\u9bd5', "QI");
+        test('\u9bd6', "ZHENG");
+        test('\u9bd7', "XIANG");
+        test('\u9bd8', "NEI");
+        test('\u9bd9', "CHUN");
+        test('\u9bda', "JI");
+        test('\u9bdb', "DIAO");
+        test('\u9bdc', "QIE");
+        test('\u9bdd', "GU");
+        test('\u9bde', "ZHOU");
+        test('\u9bdf', "DONG");
+        test('\u9be0', "LAI");
+        test('\u9be1', "FEI");
+        test('\u9be2', "NI");
+        test('\u9be3', "YI");
+        test('\u9be4', "KUN");
+        test('\u9be5', "LU");
+        test('\u9be6', "JIU");
+        test('\u9be7', "CHANG");
+        test('\u9be8', "JING");
+        test('\u9be9', "LUN");
+        test('\u9bea', "LING");
+        test('\u9beb', "ZOU");
+        test('\u9bec', "LI");
+        test('\u9bed', "MENG");
+        test('\u9bee', "ZONG");
+        test('\u9bef', "ZHI");
+        test('\u9bf0', "NIAN");
+        test('\u9bf1', "HU");
+        test('\u9bf2', "YU");
+        test('\u9bf3', "DI");
+        test('\u9bf4', "SHI");
+        test('\u9bf5', "SHEN");
+        test('\u9bf6', "HUN");
+        test('\u9bf7', "TI");
+        test('\u9bf8', "HOU");
+        test('\u9bf9', "XING");
+        test('\u9bfa', "ZHU");
+        test('\u9bfb', "LA");
+        test('\u9bfc', "ZONG");
+        test('\u9bfd', "ZEI");
+        test('\u9bfe', "BIAN");
+        test('\u9bff', "BIAN");
+        test('\u9c00', "HUAN");
+        test('\u9c01', "QUAN");
+        test('\u9c02', "ZEI");
+        test('\u9c03', "WEI");
+        test('\u9c04', "WEI");
+        test('\u9c05', "YU");
+        test('\u9c06', "CHUN");
+        test('\u9c07', "ROU");
+        test('\u9c08', "DIE");
+        test('\u9c09', "HUANG");
+        test('\u9c0a', "LIAN");
+        test('\u9c0b', "YAN");
+        test('\u9c0c', "QIU");
+        test('\u9c0d', "QIU");
+        test('\u9c0e', "JIAN");
+        test('\u9c0f', "BI");
+        test('\u9c10', "E");
+        test('\u9c11', "YANG");
+        test('\u9c12', "FU");
+        test('\u9c13', "SAI");
+        test('\u9c14', "GAN");
+        test('\u9c15', "XIA");
+        test('\u9c16', "TUO");
+        test('\u9c17', "HU");
+        test('\u9c18', "SHI");
+        test('\u9c19', "RUO");
+        test('\u9c1a', "XUAN");
+        test('\u9c1b', "WEN");
+        test('\u9c1c', "QIAN");
+        test('\u9c1d', "HAO");
+        test('\u9c1e', "WU");
+        test('\u9c1f', "FANG");
+        test('\u9c20', "SAO");
+        test('\u9c21', "LIU");
+        test('\u9c22', "MA");
+        test('\u9c23', "SHI");
+        test('\u9c24', "SHI");
+        test('\u9c25', "GUAN");
+        test('\u9c26', "ZI");
+        test('\u9c27', "TENG");
+        test('\u9c28', "TA");
+        test('\u9c29', "YAO");
+        test('\u9c2a', "E");
+        test('\u9c2b', "YONG");
+        test('\u9c2c', "QIAN");
+        test('\u9c2d', "QI");
+        test('\u9c2e', "WEN");
+        test('\u9c2f', "RUO");
+        test('\u9c30', "SHEN");
+        test('\u9c31', "LIAN");
+        test('\u9c32', "AO");
+        test('\u9c33', "LE");
+        test('\u9c34', "HUI");
+        test('\u9c35', "MIN");
+        test('\u9c36', "JI");
+        test('\u9c37', "TIAO");
+        test('\u9c38', "QU");
+        test('\u9c39', "JIAN");
+        test('\u9c3a', "SHEN");
+        test('\u9c3b', "MAN");
+        test('\u9c3c', "XI");
+        test('\u9c3d', "QIU");
+        test('\u9c3e', "BIAO");
+        test('\u9c3f', "JI");
+        test('\u9c40', "JI");
+        test('\u9c41', "ZHU");
+        test('\u9c42', "JIANG");
+        test('\u9c43', "XIU");
+        test('\u9c44', "ZHUAN");
+        test('\u9c45', "YONG");
+        test('\u9c46', "ZHANG");
+        test('\u9c47', "KANG");
+        test('\u9c48', "XUE");
+        test('\u9c49', "BIE");
+        test('\u9c4a', "YU");
+        test('\u9c4b', "QU");
+        test('\u9c4c', "XIANG");
+        test('\u9c4d', "BO");
+        test('\u9c4e', "JIAO");
+        test('\u9c4f', "XUN");
+        test('\u9c50', "SU");
+        test('\u9c51', "HUANG");
+        test('\u9c52', "ZUN");
+        test('\u9c53', "SHAN");
+        test('\u9c54', "SHAN");
+        test('\u9c55', "FAN");
+        test('\u9c56', "GUI");
+        test('\u9c57', "LIN");
+        test('\u9c58', "XUN");
+        test('\u9c59', "MIAO");
+        test('\u9c5a', "XI");
+        test('\u9c5b', "ZENG");
+        test('\u9c5c', "XIANG");
+        test('\u9c5d', "FEN");
+        test('\u9c5e', "GUAN");
+        test('\u9c5f', "HOU");
+        test('\u9c60', "KUAI");
+        test('\u9c61', "ZEI");
+        test('\u9c62', "SAO");
+        test('\u9c63', "ZHAN");
+        test('\u9c64', "GAN");
+        test('\u9c65', "GUI");
+        test('\u9c66', "YING");
+        test('\u9c67', "LI");
+        test('\u9c68', "CHANG");
+        test('\u9c69', "LEI");
+        test('\u9c6a', "SHU");
+        test('\u9c6b', "AI");
+        test('\u9c6c', "RU");
+        test('\u9c6d', "JI");
+        test('\u9c6e', "XU");
+        test('\u9c6f', "HU");
+        test('\u9c70', "SHU");
+        test('\u9c71', "LI");
+        test('\u9c72', "LIE");
+        test('\u9c73', "LI");
+        test('\u9c74', "MIE");
+        test('\u9c75', "ZHEN");
+        test('\u9c76', "XIANG");
+        test('\u9c77', "E");
+        test('\u9c78', "LU");
+        test('\u9c79', "GUAN");
+        test('\u9c7a', "LI");
+        test('\u9c7b', "XIAN");
+        test('\u9c7c', "YU");
+        test('\u9c7d', "DAO");
+        test('\u9c7e', "JI");
+        test('\u9c7f', "YOU");
+        test('\u9c80', "TUN");
+        test('\u9c81', "LU");
+        test('\u9c82', "FANG");
+        test('\u9c83', "BA");
+        test('\u9c84', "HE");
+        test('\u9c85', "BA");
+        test('\u9c86', "PING");
+        test('\u9c87', "NIAN");
+        test('\u9c88', "LU");
+        test('\u9c89', "YOU");
+        test('\u9c8a', "ZHA");
+        test('\u9c8b', "FU");
+        test('\u9c8c', "BA");
+        test('\u9c8d', "BAO");
+        test('\u9c8e', "HOU");
+        test('\u9c8f', "PI");
+        test('\u9c90', "TAI");
+        test('\u9c91', "GUI");
+        test('\u9c92', "JIE");
+        test('\u9c93', "KAO");
+        test('\u9c94', "WEI");
+        test('\u9c95', "ER");
+        test('\u9c96', "TONG");
+        test('\u9c97', "ZEI");
+        test('\u9c98', "HOU");
+        test('\u9c99', "KUAI");
+        test('\u9c9a', "JI");
+        test('\u9c9b', "JIAO");
+        test('\u9c9c', "XIAN");
+        test('\u9c9d', "ZHA");
+        test('\u9c9e', "XIANG");
+        test('\u9c9f', "XUN");
+        test('\u9ca0', "GENG");
+        test('\u9ca1', "LI");
+        test('\u9ca2', "LIAN");
+        test('\u9ca3', "JIAN");
+        test('\u9ca4', "LI");
+        test('\u9ca5', "SHI");
+        test('\u9ca6', "TIAO");
+        test('\u9ca7', "GUN");
+        test('\u9ca8', "SHA");
+        test('\u9ca9', "HUAN");
+        test('\u9caa', "JUN");
+        test('\u9cab', "JI");
+        test('\u9cac', "YONG");
+        test('\u9cad', "QING");
+        test('\u9cae', "LING");
+        test('\u9caf', "QI");
+        test('\u9cb0', "ZOU");
+        test('\u9cb1', "FEI");
+        test('\u9cb2', "KUN");
+        test('\u9cb3', "CHANG");
+        test('\u9cb4', "GU");
+        test('\u9cb5', "NI");
+        test('\u9cb6', "NIAN");
+        test('\u9cb7', "DIAO");
+        test('\u9cb8', "JING");
+        test('\u9cb9', "SHEN");
+        test('\u9cba', "SHI");
+        test('\u9cbb', "ZI");
+        test('\u9cbc', "FEN");
+        test('\u9cbd', "DIE");
+        test('\u9cbe', "BI");
+        test('\u9cbf', "CHANG");
+        test('\u9cc0', "TI");
+        test('\u9cc1', "WEN");
+        test('\u9cc2', "WEI");
+        test('\u9cc3', "SAI");
+        test('\u9cc4', "E");
+        test('\u9cc5', "QIU");
+        test('\u9cc6', "FU");
+        test('\u9cc7', "HUANG");
+        test('\u9cc8', "QUAN");
+        test('\u9cc9', "JIANG");
+        test('\u9cca', "BIAN");
+        test('\u9ccb', "SAO");
+        test('\u9ccc', "AO");
+        test('\u9ccd', "QI");
+        test('\u9cce', "TA");
+        test('\u9ccf', "GUAN");
+        test('\u9cd0', "YAO");
+        test('\u9cd1', "PANG");
+        test('\u9cd2', "JIAN");
+        test('\u9cd3', "LE");
+        test('\u9cd4', "BIAO");
+        test('\u9cd5', "XUE");
+        test('\u9cd6', "BIE");
+        test('\u9cd7', "MAN");
+        test('\u9cd8', "MIN");
+        test('\u9cd9', "YONG");
+        test('\u9cda', "WEI");
+        test('\u9cdb', "XI");
+        test('\u9cdc', "GUI");
+        test('\u9cdd', "SHAN");
+        test('\u9cde', "LIN");
+        test('\u9cdf', "ZUN");
+        test('\u9ce0', "HU");
+        test('\u9ce1', "GAN");
+        test('\u9ce2', "LI");
+        test('\u9ce3', "ZHAN");
+        test('\u9ce4', "GUAN");
+        test('\u9ce5', "NIAO");
+        test('\u9ce6', "YI");
+        test('\u9ce7', "FU");
+        test('\u9ce8', "LI");
+        test('\u9ce9', "JIU");
+        test('\u9cea', "BU");
+        test('\u9ceb', "YAN");
+        test('\u9cec', "FU");
+        test('\u9ced', "DIAO");
+        test('\u9cee', "JI");
+        test('\u9cef', "FENG");
+        test('\u9cf0', "RU");
+        test('\u9cf1', "GAN");
+        test('\u9cf2', "SHI");
+        test('\u9cf3', "FENG");
+        test('\u9cf4', "MING");
+        test('\u9cf5', "BAO");
+        test('\u9cf6', "YUAN");
+        test('\u9cf7', "ZHI");
+        test('\u9cf8', "HU");
+        test('\u9cf9', "QIN");
+        test('\u9cfa', "FU");
+        test('\u9cfb', "BAN");
+        test('\u9cfc', "WEN");
+        test('\u9cfd', "JIAN");
+        test('\u9cfe', "SHI");
+        test('\u9cff', "YU");
+        test('\u9d00', "FOU");
+        test('\u9d01', "YAO");
+        test('\u9d02', "JUE");
+        test('\u9d03', "JUE");
+        test('\u9d04', "PI");
+        test('\u9d05', "HUAN");
+        test('\u9d06', "ZHEN");
+        test('\u9d07', "BAO");
+        test('\u9d08', "YAN");
+        test('\u9d09', "YA");
+        test('\u9d0a', "ZHENG");
+        test('\u9d0b', "FANG");
+        test('\u9d0c', "FENG");
+        test('\u9d0d', "WEN");
+        test('\u9d0e', "OU");
+        test('\u9d0f', "DAI");
+        test('\u9d10', "GE");
+        test('\u9d11', "RU");
+        test('\u9d12', "LING");
+        test('\u9d13', "MIE");
+        test('\u9d14', "FU");
+        test('\u9d15', "TUO");
+        test('\u9d16', "MIN");
+        test('\u9d17', "LI");
+        test('\u9d18', "BIAN");
+        test('\u9d19', "ZHI");
+        test('\u9d1a', "GE");
+        test('\u9d1b', "YUAN");
+        test('\u9d1c', "CI");
+        test('\u9d1d', "QU");
+        test('\u9d1e', "XIAO");
+        test('\u9d1f', "CHI");
+        test('\u9d20', "DAN");
+        test('\u9d21', "JU");
+        test('\u9d22', "YAO");
+        test('\u9d23', "GU");
+        test('\u9d24', "DONG");
+        test('\u9d25', "YU");
+        test('\u9d26', "YANG");
+        test('\u9d27', "RONG");
+        test('\u9d28', "YA");
+        test('\u9d29', "TIE");
+        test('\u9d2a', "YU");
+        test('\u9d2b', "TIAN");
+        test('\u9d2c', "YING");
+        test('\u9d2d', "DUI");
+        test('\u9d2e', "WU");
+        test('\u9d2f', "ER");
+        test('\u9d30', "GUA");
+        test('\u9d31', "AI");
+        test('\u9d32', "ZHI");
+        test('\u9d33', "YAN");
+        test('\u9d34', "HENG");
+        test('\u9d35', "XIAO");
+        test('\u9d36', "JIA");
+        test('\u9d37', "LIE");
+        test('\u9d38', "ZHU");
+        test('\u9d39', "YANG");
+        test('\u9d3a', "TI");
+        test('\u9d3b', "HONG");
+        test('\u9d3c', "LUO");
+        test('\u9d3d', "RU");
+        test('\u9d3e', "MOU");
+        test('\u9d3f', "GE");
+        test('\u9d40', "REN");
+        test('\u9d41', "JIAO");
+        test('\u9d42', "XIU");
+        test('\u9d43', "ZHOU");
+        test('\u9d44', "ZHI");
+        test('\u9d45', "LUO");
+        test('\u9d46', "HENG");
+        test('\u9d47', "NIAN");
+        test('\u9d48', "E");
+        test('\u9d49', "LUAN");
+        test('\u9d4a', "JIA");
+        test('\u9d4b', "JI");
+        test('\u9d4c', "TU");
+        test('\u9d4d', "HUAN");
+        test('\u9d4e', "TUO");
+        test('\u9d4f', "BU");
+        test('\u9d50', "WU");
+        test('\u9d51', "JUAN");
+        test('\u9d52', "YU");
+        test('\u9d53', "BO");
+        test('\u9d54', "JUN");
+        test('\u9d55', "XUN");
+        test('\u9d56', "BI");
+        test('\u9d57', "XI");
+        test('\u9d58', "JUN");
+        test('\u9d59', "JU");
+        test('\u9d5a', "TU");
+        test('\u9d5b', "JING");
+        test('\u9d5c', "TI");
+        test('\u9d5d', "E");
+        test('\u9d5e', "E");
+        test('\u9d5f', "KUANG");
+        test('\u9d60', "HU");
+        test('\u9d61', "WU");
+        test('\u9d62', "SHEN");
+        test('\u9d63', "LAI");
+        test('\u9d64', "JIAO");
+        test('\u9d65', "PAN");
+        test('\u9d66', "LU");
+        test('\u9d67', "PI");
+        test('\u9d68', "SHU");
+        test('\u9d69', "FU");
+        test('\u9d6a', "AN");
+        test('\u9d6b', "ZHUO");
+        test('\u9d6c', "PENG");
+        test('\u9d6d', "QIN");
+        test('\u9d6e', "QIAN");
+        test('\u9d6f', "BEI");
+        test('\u9d70', "DIAO");
+        test('\u9d71', "LU");
+        test('\u9d72', "QUE");
+        test('\u9d73', "JIAN");
+        test('\u9d74', "JU");
+        test('\u9d75', "TU");
+        test('\u9d76', "YA");
+        test('\u9d77', "YUAN");
+        test('\u9d78', "QI");
+        test('\u9d79', "LI");
+        test('\u9d7a', "YE");
+        test('\u9d7b', "ZHUI");
+        test('\u9d7c', "KONG");
+        test('\u9d7d', "DUO");
+        test('\u9d7e', "KUN");
+        test('\u9d7f', "SHENG");
+        test('\u9d80', "QI");
+        test('\u9d81', "JING");
+        test('\u9d82', "YI");
+        test('\u9d83', "YI");
+        test('\u9d84', "JING");
+        test('\u9d85', "ZI");
+        test('\u9d86', "LAI");
+        test('\u9d87', "DONG");
+        test('\u9d88', "QI");
+        test('\u9d89', "CHUN");
+        test('\u9d8a', "GENG");
+        test('\u9d8b', "JU");
+        test('\u9d8c', "JUE");
+        test('\u9d8d', "YI");
+        test('\u9d8e', "ZUN");
+        test('\u9d8f', "JI");
+        test('\u9d90', "SHU");
+        test('\u9d91', "YING");
+        test('\u9d92', "CHI");
+        test('\u9d93', "MIAO");
+        test('\u9d94', "ROU");
+        test('\u9d95', "AN");
+        test('\u9d96', "QIU");
+        test('\u9d97', "TI");
+        test('\u9d98', "HU");
+        test('\u9d99', "TI");
+        test('\u9d9a', "E");
+        test('\u9d9b', "JIE");
+        test('\u9d9c', "MAO");
+        test('\u9d9d', "FU");
+        test('\u9d9e', "CHUN");
+        test('\u9d9f', "TU");
+        test('\u9da0', "YAN");
+        test('\u9da1', "HE");
+        test('\u9da2', "YUAN");
+        test('\u9da3', "PIAN");
+        test('\u9da4', "KUN");
+        test('\u9da5', "MEI");
+        test('\u9da6', "HU");
+        test('\u9da7', "YING");
+        test('\u9da8', "CHUAN");
+        test('\u9da9', "WU");
+        test('\u9daa', "JU");
+        test('\u9dab', "DONG");
+        test('\u9dac', "CANG");
+        test('\u9dad', "FANG");
+        test('\u9dae', "HE");
+        test('\u9daf', "YING");
+        test('\u9db0', "YUAN");
+        test('\u9db1', "XIAN");
+        test('\u9db2', "WENG");
+        test('\u9db3', "SHI");
+        test('\u9db4', "HE");
+        test('\u9db5', "CHU");
+        test('\u9db6', "TANG");
+        test('\u9db7', "XIA");
+        test('\u9db8', "RUO");
+        test('\u9db9', "LIU");
+        test('\u9dba', "JI");
+        test('\u9dbb', "GU");
+        test('\u9dbc', "JIAN");
+        test('\u9dbd', "SUN");
+        test('\u9dbe', "HAN");
+        test('\u9dbf', "CI");
+        test('\u9dc0', "CI");
+        test('\u9dc1', "YI");
+        test('\u9dc2', "YAO");
+        test('\u9dc3', "YAN");
+        test('\u9dc4', "JI");
+        test('\u9dc5', "LI");
+        test('\u9dc6', "TIAN");
+        test('\u9dc7', "KOU");
+        test('\u9dc8', "TI");
+        test('\u9dc9', "TI");
+        test('\u9dca', "YI");
+        test('\u9dcb', "TU");
+        test('\u9dcc', "MA");
+        test('\u9dcd', "JIAO");
+        test('\u9dce', "GAO");
+        test('\u9dcf', "TIAN");
+        test('\u9dd0', "CHEN");
+        test('\u9dd1', "JI");
+        test('\u9dd2', "TUAN");
+        test('\u9dd3', "ZHE");
+        test('\u9dd4', "AO");
+        test('\u9dd5', "YAO");
+        test('\u9dd6', "YI");
+        test('\u9dd7', "OU");
+        test('\u9dd8', "CHI");
+        test('\u9dd9', "ZHI");
+        test('\u9dda', "LIU");
+        test('\u9ddb', "YONG");
+        test('\u9ddc', "LU");
+        test('\u9ddd', "BI");
+        test('\u9dde', "SHUANG");
+        test('\u9ddf', "ZHUO");
+        test('\u9de0', "YU");
+        test('\u9de1', "WU");
+        test('\u9de2', "JUE");
+        test('\u9de3', "YIN");
+        test('\u9de4', "TI");
+        test('\u9de5', "SI");
+        test('\u9de6', "JIAO");
+        test('\u9de7', "YI");
+        test('\u9de8', "HUA");
+        test('\u9de9', "BI");
+        test('\u9dea', "YING");
+        test('\u9deb', "SU");
+        test('\u9dec', "HUANG");
+        test('\u9ded', "FAN");
+        test('\u9dee', "JIAO");
+        test('\u9def', "LIAO");
+        test('\u9df0', "YAN");
+        test('\u9df1', "GAO");
+        test('\u9df2', "JIU");
+        test('\u9df3', "XIAN");
+        test('\u9df4', "XIAN");
+        test('\u9df5', "TU");
+        test('\u9df6', "MAI");
+        test('\u9df7', "ZUN");
+        test('\u9df8', "YU");
+        test('\u9df9', "YING");
+        test('\u9dfa', "LU");
+        test('\u9dfb', "TUAN");
+        test('\u9dfc', "XIAN");
+        test('\u9dfd', "XUE");
+        test('\u9dfe', "YI");
+        test('\u9dff', "PI");
+    }
+
+    @SmallTest
+    public void test_20() throws Exception {
+        if (!hasChineseTransliterator()) {
+            return;
+        }
+        test('\u9e00', "CHU");
+        test('\u9e01', "LUO");
+        test('\u9e02', "XI");
+        test('\u9e03', "YI");
+        test('\u9e04', "JI");
+        test('\u9e05', "ZE");
+        test('\u9e06', "YU");
+        test('\u9e07', "ZHAN");
+        test('\u9e08', "YE");
+        test('\u9e09', "YANG");
+        test('\u9e0a', "PI");
+        test('\u9e0b', "NING");
+        test('\u9e0c', "HU");
+        test('\u9e0d', "MI");
+        test('\u9e0e', "YING");
+        test('\u9e0f', "MENG");
+        test('\u9e10', "DI");
+        test('\u9e11', "YUE");
+        test('\u9e12', "YU");
+        test('\u9e13', "LEI");
+        test('\u9e14', "BAO");
+        test('\u9e15', "LU");
+        test('\u9e16', "HE");
+        test('\u9e17', "LONG");
+        test('\u9e18', "SHUANG");
+        test('\u9e19', "YUE");
+        test('\u9e1a', "YING");
+        test('\u9e1b', "GUAN");
+        test('\u9e1c', "QU");
+        test('\u9e1d', "LI");
+        test('\u9e1e', "LUAN");
+        test('\u9e1f', "NIAO");
+        test('\u9e20', "JIU");
+        test('\u9e21', "JI");
+        test('\u9e22', "YUAN");
+        test('\u9e23', "MING");
+        test('\u9e24', "SHI");
+        test('\u9e25', "OU");
+        test('\u9e26', "YA");
+        test('\u9e27', "CANG");
+        test('\u9e28', "BAO");
+        test('\u9e29', "ZHEN");
+        test('\u9e2a', "GU");
+        test('\u9e2b', "DONG");
+        test('\u9e2c', "LU");
+        test('\u9e2d', "YA");
+        test('\u9e2e', "XIAO");
+        test('\u9e2f', "YANG");
+        test('\u9e30', "LING");
+        test('\u9e31', "CHI");
+        test('\u9e32', "QU");
+        test('\u9e33', "YUAN");
+        test('\u9e34', "XUE");
+        test('\u9e35', "TUO");
+        test('\u9e36', "SI");
+        test('\u9e37', "ZHI");
+        test('\u9e38', "ER");
+        test('\u9e39', "GUA");
+        test('\u9e3a', "XIU");
+        test('\u9e3b', "HENG");
+        test('\u9e3c', "ZHOU");
+        test('\u9e3d', "GE");
+        test('\u9e3e', "LUAN");
+        test('\u9e3f', "HONG");
+        test('\u9e40', "WU");
+        test('\u9e41', "BO");
+        test('\u9e42', "LI");
+        test('\u9e43', "JUAN");
+        test('\u9e44', "GU");
+        test('\u9e45', "E");
+        test('\u9e46', "YU");
+        test('\u9e47', "XIAN");
+        test('\u9e48', "TI");
+        test('\u9e49', "WU");
+        test('\u9e4a', "QUE");
+        test('\u9e4b', "MIAO");
+        test('\u9e4c', "AN");
+        test('\u9e4d', "KUN");
+        test('\u9e4e', "BEI");
+        test('\u9e4f', "PENG");
+        test('\u9e50', "QIAN");
+        test('\u9e51', "CHUN");
+        test('\u9e52', "GENG");
+        test('\u9e53', "YUAN");
+        test('\u9e54', "SU");
+        test('\u9e55', "HU");
+        test('\u9e56', "HE");
+        test('\u9e57', "E");
+        test('\u9e58', "GU");
+        test('\u9e59', "QIU");
+        test('\u9e5a', "CI");
+        test('\u9e5b', "MEI");
+        test('\u9e5c', "WU");
+        test('\u9e5d', "YI");
+        test('\u9e5e', "YAO");
+        test('\u9e5f', "WENG");
+        test('\u9e60', "LIU");
+        test('\u9e61', "JI");
+        test('\u9e62', "YI");
+        test('\u9e63', "JIAN");
+        test('\u9e64', "HE");
+        test('\u9e65', "YI");
+        test('\u9e66', "YING");
+        test('\u9e67', "ZHE");
+        test('\u9e68', "LIU");
+        test('\u9e69', "LIAO");
+        test('\u9e6a', "JIAO");
+        test('\u9e6b', "JIU");
+        test('\u9e6c', "YU");
+        test('\u9e6d', "LU");
+        test('\u9e6e', "HUAN");
+        test('\u9e6f', "ZHAN");
+        test('\u9e70', "YING");
+        test('\u9e71', "HU");
+        test('\u9e72', "MENG");
+        test('\u9e73', "GUAN");
+        test('\u9e74', "SHUANG");
+        test('\u9e75', "LU");
+        test('\u9e76', "JIN");
+        test('\u9e77', "LING");
+        test('\u9e78', "JIAN");
+        test('\u9e79', "XIAN");
+        test('\u9e7a', "CUO");
+        test('\u9e7b', "JIAN");
+        test('\u9e7c', "JIAN");
+        test('\u9e7d', "YAN");
+        test('\u9e7e', "CUO");
+        test('\u9e7f', "LU");
+        test('\u9e80', "YOU");
+        test('\u9e81', "CU");
+        test('\u9e82', "JI");
+        test('\u9e83', "PAO");
+        test('\u9e84', "CU");
+        test('\u9e85', "PAO");
+        test('\u9e86', "ZHU");
+        test('\u9e87', "JUN");
+        test('\u9e88', "ZHU");
+        test('\u9e89', "JIAN");
+        test('\u9e8a', "MI");
+        test('\u9e8b', "MI");
+        test('\u9e8c', "YU");
+        test('\u9e8d', "LIU");
+        test('\u9e8e', "CHEN");
+        test('\u9e8f', "JUN");
+        test('\u9e90', "LIN");
+        test('\u9e91', "NI");
+        test('\u9e92', "QI");
+        test('\u9e93', "LU");
+        test('\u9e94', "JIU");
+        test('\u9e95', "JUN");
+        test('\u9e96', "JING");
+        test('\u9e97', "LI");
+        test('\u9e98', "XIANG");
+        test('\u9e99', "XIAN");
+        test('\u9e9a', "JIA");
+        test('\u9e9b', "MI");
+        test('\u9e9c', "LI");
+        test('\u9e9d', "SHE");
+        test('\u9e9e', "ZHANG");
+        test('\u9e9f', "LIN");
+        test('\u9ea0', "JING");
+        test('\u9ea1', "QI");
+        test('\u9ea2', "LING");
+        test('\u9ea3', "YAN");
+        test('\u9ea4', "CU");
+        test('\u9ea5', "MAI");
+        test('\u9ea6', "MAI");
+        test('\u9ea7', "HE");
+        test('\u9ea8', "CHAO");
+        test('\u9ea9', "FU");
+        test('\u9eaa', "MIAN");
+        test('\u9eab', "MIAN");
+        test('\u9eac', "FU");
+        test('\u9ead', "PAO");
+        test('\u9eae', "QU");
+        test('\u9eaf', "QU");
+        test('\u9eb0', "MOU");
+        test('\u9eb1', "FU");
+        test('\u9eb2', "XIAN");
+        test('\u9eb3', "LAI");
+        test('\u9eb4', "QU");
+        test('\u9eb5', "MIAN");
+        test('\u9eb6', "CHI");
+        test('\u9eb7', "FENG");
+        test('\u9eb8', "FU");
+        test('\u9eb9', "QU");
+        test('\u9eba', "MIAN");
+        test('\u9ebb', "MA");
+        test('\u9ebc', "ME");
+        test('\u9ebd', "MO");
+        test('\u9ebe', "HUI");
+        test('\u9ebf', "MO");
+        test('\u9ec0', "ZOU");
+        test('\u9ec1', "NUN");
+        test('\u9ec2', "FEN");
+        test('\u9ec3', "HUANG");
+        test('\u9ec4', "HUANG");
+        test('\u9ec5', "JIN");
+        test('\u9ec6', "GUANG");
+        test('\u9ec7', "TIAN");
+        test('\u9ec8', "TOU");
+        test('\u9ec9', "HONG");
+        test('\u9eca', "HUA");
+        test('\u9ecb', "KUANG");
+        test('\u9ecc', "HONG");
+        test('\u9ecd', "SHU");
+        test('\u9ece', "LI");
+        test('\u9ecf', "NIAN");
+        test('\u9ed0', "CHI");
+        test('\u9ed1', "HEI");
+        test('\u9ed2', "HEI");
+        test('\u9ed3', "YI");
+        test('\u9ed4', "QIAN");
+        test('\u9ed5', "DAN");
+        test('\u9ed6', "XI");
+        test('\u9ed7', "TUN");
+        test('\u9ed8', "MO");
+        test('\u9ed9', "MO");
+        test('\u9eda', "QIAN");
+        test('\u9edb', "DAI");
+        test('\u9edc', "CHU");
+        test('\u9edd', "YOU");
+        test('\u9ede', "DIAN");
+        test('\u9edf', "YI");
+        test('\u9ee0', "XIA");
+        test('\u9ee1', "YAN");
+        test('\u9ee2', "QU");
+        test('\u9ee3', "MEI");
+        test('\u9ee4', "YAN");
+        test('\u9ee5', "QING");
+        test('\u9ee6', "YUE");
+        test('\u9ee7', "LI");
+        test('\u9ee8', "DANG");
+        test('\u9ee9', "DU");
+        test('\u9eea', "CAN");
+        test('\u9eeb', "YAN");
+        test('\u9eec', "YAN");
+        test('\u9eed', "YAN");
+        test('\u9eee', "DAN");
+        test('\u9eef', "AN");
+        test('\u9ef0', "ZHEN");
+        test('\u9ef1', "DAI");
+        test('\u9ef2', "CAN");
+        test('\u9ef3', "YI");
+        test('\u9ef4', "MEI");
+        test('\u9ef5', "ZHAN");
+        test('\u9ef6', "YAN");
+        test('\u9ef7', "DU");
+        test('\u9ef8', "LU");
+        test('\u9ef9', "ZHI");
+        test('\u9efa', "FEN");
+        test('\u9efb', "FU");
+        test('\u9efc', "FU");
+        test('\u9efd', "MIAN");
+        test('\u9efe', "MIAN");
+        test('\u9eff', "YUAN");
+        test('\u9f00', "CU");
+        test('\u9f01', "QU");
+        test('\u9f02', "CHAO");
+        test('\u9f03', "WA");
+        test('\u9f04', "ZHU");
+        test('\u9f05', "ZHI");
+        test('\u9f06', "MENG");
+        test('\u9f07', "AO");
+        test('\u9f08', "BIE");
+        test('\u9f09', "TUO");
+        test('\u9f0a', "BI");
+        test('\u9f0b', "YUAN");
+        test('\u9f0c', "CHAO");
+        test('\u9f0d', "TUO");
+        test('\u9f0e', "DING");
+        test('\u9f0f', "MI");
+        test('\u9f10', "NAI");
+        test('\u9f11', "DING");
+        test('\u9f12', "ZI");
+        test('\u9f13', "GU");
+        test('\u9f14', "GU");
+        test('\u9f15', "DONG");
+        test('\u9f16', "FEN");
+        test('\u9f17', "TAO");
+        test('\u9f18', "YUAN");
+        test('\u9f19', "PI");
+        test('\u9f1a', "CHANG");
+        test('\u9f1b', "GAO");
+        test('\u9f1c', "QI");
+        test('\u9f1d', "YUAN");
+        test('\u9f1e', "TANG");
+        test('\u9f1f', "TENG");
+        test('\u9f20', "SHU");
+        test('\u9f21', "SHU");
+        test('\u9f22', "FEN");
+        test('\u9f23', "FEI");
+        test('\u9f24', "WEN");
+        test('\u9f25', "BA");
+        test('\u9f26', "DIAO");
+        test('\u9f27', "TUO");
+        test('\u9f28', "ZHONG");
+        test('\u9f29', "QU");
+        test('\u9f2a', "SHENG");
+        test('\u9f2b', "SHI");
+        test('\u9f2c', "YOU");
+        test('\u9f2d', "SHI");
+        test('\u9f2e', "TING");
+        test('\u9f2f', "WU");
+        test('\u9f30', "NIAN");
+        test('\u9f31', "JING");
+        test('\u9f32', "HUN");
+        test('\u9f33', "JU");
+        test('\u9f34', "YAN");
+        test('\u9f35', "TU");
+        test('\u9f36', "SI");
+        test('\u9f37', "XI");
+        test('\u9f38', "XIAN");
+        test('\u9f39', "YAN");
+        test('\u9f3a', "LEI");
+        test('\u9f3b', "BI");
+        test('\u9f3c', "YAO");
+        test('\u9f3d', "QIU");
+        test('\u9f3e', "HAN");
+        test('\u9f3f', "WU");
+        test('\u9f40', "WU");
+        test('\u9f41', "HOU");
+        test('\u9f42', "XIE");
+        test('\u9f43', "E");
+        test('\u9f44', "ZHA");
+        test('\u9f45', "XIU");
+        test('\u9f46', "WENG");
+        test('\u9f47', "ZHA");
+        test('\u9f48', "NONG");
+        test('\u9f49', "NANG");
+        test('\u9f4a', "QI");
+        test('\u9f4b', "ZHAI");
+        test('\u9f4c', "JI");
+        test('\u9f4d', "ZI");
+        test('\u9f4e', "JI");
+        test('\u9f4f', "JI");
+        test('\u9f50', "QI");
+        test('\u9f51', "JI");
+        test('\u9f52', "CHI");
+        test('\u9f53', "CHEN");
+        test('\u9f54', "CHEN");
+        test('\u9f55', "HE");
+        test('\u9f56', "YA");
+        test('\u9f57', "YIN");
+        test('\u9f58', "XIE");
+        test('\u9f59', "BAO");
+        test('\u9f5a', "ZE");
+        test('\u9f5b', "XIE");
+        test('\u9f5c', "CHAI");
+        test('\u9f5d', "CHI");
+        test('\u9f5e', "YAN");
+        test('\u9f5f', "JU");
+        test('\u9f60', "TIAO");
+        test('\u9f61', "LING");
+        test('\u9f62', "LING");
+        test('\u9f63', "CHU");
+        test('\u9f64', "QUAN");
+        test('\u9f65', "XIE");
+        test('\u9f66', "KEN");
+        test('\u9f67', "NIE");
+        test('\u9f68', "JIU");
+        test('\u9f69', "YAO");
+        test('\u9f6a', "CHUO");
+        test('\u9f6b', "KUN");
+        test('\u9f6c', "YU");
+        test('\u9f6d', "CHU");
+        test('\u9f6e', "YI");
+        test('\u9f6f', "NI");
+        test('\u9f70', "ZE");
+        test('\u9f71', "ZOU");
+        test('\u9f72', "QU");
+        test('\u9f73', "YUN");
+        test('\u9f74', "YAN");
+        test('\u9f75', "OU");
+        test('\u9f76', "E");
+        test('\u9f77', "WO");
+        test('\u9f78', "YI");
+        test('\u9f79', "CI");
+        test('\u9f7a', "ZOU");
+        test('\u9f7b', "DIAN");
+        test('\u9f7c', "CHU");
+        test('\u9f7d', "JIN");
+        test('\u9f7e', "YA");
+        test('\u9f7f', "CHI");
+        test('\u9f80', "CHEN");
+        test('\u9f81', "HE");
+        test('\u9f82', "YIN");
+        test('\u9f83', "JU");
+        test('\u9f84', "LING");
+        test('\u9f85', "BAO");
+        test('\u9f86', "TIAO");
+        test('\u9f87', "ZI");
+        test('\u9f88', "KEN");
+        test('\u9f89', "YU");
+        test('\u9f8a', "CHUO");
+        test('\u9f8b', "QU");
+        test('\u9f8c', "WO");
+        test('\u9f8d', "LONG");
+        test('\u9f8e', "PANG");
+        test('\u9f8f', "GONG");
+        test('\u9f90', "PANG");
+        test('\u9f91', "YAN");
+        test('\u9f92', "LONG");
+        test('\u9f93', "LONG");
+        test('\u9f94', "GONG");
+        test('\u9f95', "KAN");
+        test('\u9f96', "DA");
+        test('\u9f97', "LING");
+        test('\u9f98', "DA");
+        test('\u9f99', "LONG");
+        test('\u9f9a', "GONG");
+        test('\u9f9b', "KAN");
+        test('\u9f9c', "GUI");
+        test('\u9f9d', "QIU");
+        test('\u9f9e', "BIE");
+        test('\u9f9f', "GUI");
+        test('\u9fa0', "YUE");
+        test('\u9fa1', "CHUI");
+        test('\u9fa2', "HE");
+        test('\u9fa3', "JUE");
+        test('\u9fa4', "XIE");
+        test('\u9fa5', "YU");
+        test('\u9fa6', "");
+        test('\u9fa7', "");
+        test('\u9fa8', "");
+        test('\u9fa9', "");
+        test('\u9faa', "");
+        test('\u9fab', "");
+        test('\u9fac', "");
+        test('\u9fad', "");
+        test('\u9fae', "");
+        test('\u9faf', "");
+        test('\u9fb0', "");
+        test('\u9fb1', "");
+        test('\u9fb2', "");
+        test('\u9fb3', "");
+        test('\u9fb4', "");
+        test('\u9fb5', "");
+        test('\u9fb6', "");
+        test('\u9fb7', "");
+        test('\u9fb8', "");
+        test('\u9fb9', "");
+        test('\u9fba', "");
+        test('\u9fbb', "");
+        test('\u9fbc', "");
+        test('\u9fbd', "");
+        test('\u9fbe', "");
+        test('\u9fbf', "");
+        test('\u9fc0', "");
+        test('\u9fc1', "");
+        test('\u9fc2', "");
+        test('\u9fc3', "SHAN");
+        test('\u9fc4', "");
+        test('\u9fc5', "");
+        test('\u9fc6', "");
+        test('\u9fc7', "");
+        test('\u9fc8', "");
+        test('\u9fc9', "");
+        test('\u9fca', "");
+        test('\u9fcb', "");
+        test('\u9fcc', "");
+        test('\u9fcd', "");
+        test('\u9fce', "");
+        test('\u9fcf', "");
+        test('\u9fd0', "");
+        test('\u9fd1', "");
+        test('\u9fd2', "");
+        test('\u9fd3', "");
+        test('\u9fd4', "");
+        test('\u9fd5', "");
+        test('\u9fd6', "");
+        test('\u9fd7', "");
+        test('\u9fd8', "");
+        test('\u9fd9', "");
+        test('\u9fda', "");
+        test('\u9fdb', "");
+        test('\u9fdc', "");
+        test('\u9fdd', "");
+        test('\u9fde', "");
+        test('\u9fdf', "");
+        test('\u9fe0', "");
+        test('\u9fe1', "");
+        test('\u9fe2', "");
+        test('\u9fe3', "");
+        test('\u9fe4', "");
+        test('\u9fe5', "");
+        test('\u9fe6', "");
+        test('\u9fe7', "");
+        test('\u9fe8', "");
+        test('\u9fe9', "");
+        test('\u9fea', "");
+        test('\u9feb', "");
+        test('\u9fec', "");
+        test('\u9fed', "");
+        test('\u9fee', "");
+        test('\u9fef', "");
+        test('\u9ff0', "");
+        test('\u9ff1', "");
+        test('\u9ff2', "");
+        test('\u9ff3', "");
+        test('\u9ff4', "");
+        test('\u9ff5', "");
+        test('\u9ff6', "");
+        test('\u9ff7', "");
+        test('\u9ff8', "");
+        test('\u9ff9', "");
+        test('\u9ffa', "");
+        test('\u9ffb', "");
+        test('\u9ffc', "");
+        test('\u9ffd', "");
+        test('\u9ffe', "");
+        test('\u9fff', "");
+    }
 }
diff --git a/tests/src/com/android/providers/contacts/LegacyContactsProviderTest.java b/tests/src/com/android/providers/contacts/LegacyContactsProviderTest.java
index e515af2..c752e4e 100644
--- a/tests/src/com/android/providers/contacts/LegacyContactsProviderTest.java
+++ b/tests/src/com/android/providers/contacts/LegacyContactsProviderTest.java
@@ -16,8 +16,6 @@
 
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.tests.*;
-
 import android.app.SearchManager;
 import android.content.ContentProvider;
 import android.content.ContentUris;
diff --git a/tests/src/com/android/providers/contacts/NameLookupBuilderTest.java b/tests/src/com/android/providers/contacts/NameLookupBuilderTest.java
index a5cff7a..a54193e 100644
--- a/tests/src/com/android/providers/contacts/NameLookupBuilderTest.java
+++ b/tests/src/com/android/providers/contacts/NameLookupBuilderTest.java
@@ -19,12 +19,12 @@ package com.android.providers.contacts;
 import android.provider.ContactsContract.FullNameStyle;
 import android.test.suitebuilder.annotation.SmallTest;
 
+import junit.framework.TestCase;
+
 import java.text.Collator;
 import java.util.Arrays;
 import java.util.Locale;
 
-import junit.framework.TestCase;
-
 /**
  * Unit tests for {@link NameLookupBuilder}.
  *
diff --git a/tests/src/com/android/providers/contacts/NameNormalizerTest.java b/tests/src/com/android/providers/contacts/NameNormalizerTest.java
index 9e4aaac..2872962 100644
--- a/tests/src/com/android/providers/contacts/NameNormalizerTest.java
+++ b/tests/src/com/android/providers/contacts/NameNormalizerTest.java
@@ -16,8 +16,12 @@
 
 package com.android.providers.contacts;
 
+import android.test.MoreAsserts;
 import android.test.suitebuilder.annotation.SmallTest;
 
+import java.text.RuleBasedCollator;
+import java.util.Locale;
+
 import junit.framework.TestCase;
 
 /**
@@ -32,6 +36,25 @@ import junit.framework.TestCase;
 @SmallTest
 public class NameNormalizerTest extends TestCase {
 
+    private Locale mOriginalLocale;
+
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+
+        mOriginalLocale = Locale.getDefault();
+
+        // Run all test in en_US
+        Locale.setDefault(Locale.US);
+    }
+
+    @Override
+    protected void tearDown() throws Exception {
+        Locale.setDefault(mOriginalLocale);
+        super.tearDown();
+    }
+
     public void testDifferent() {
         final String name1 = NameNormalizer.normalize("Helene");
         final String name2 = NameNormalizer.normalize("Francesca");
@@ -69,4 +92,33 @@ public class NameNormalizerTest extends TestCase {
     public void testComplexityLength() {
         assertTrue(NameNormalizer.compareComplexity("helene2009", "helene") > 0);
     }
+
+    public void testGetCollators() {
+        final RuleBasedCollator compressing1 = NameNormalizer.getCompressingCollator();
+        final RuleBasedCollator complexity1 = NameNormalizer.getComplexityCollator();
+
+        assertNotNull(compressing1);
+        assertNotNull(complexity1);
+        assertNotSame(compressing1, complexity1);
+
+        // Get again.  Should be cached.
+        final RuleBasedCollator compressing2 = NameNormalizer.getCompressingCollator();
+        final RuleBasedCollator complexity2 = NameNormalizer.getComplexityCollator();
+
+        assertSame(compressing1, compressing2);
+        assertSame(complexity1, complexity2);
+
+        // Change locale -- now new collators should be returned.
+        Locale.setDefault(Locale.FRANCE);
+
+        final RuleBasedCollator compressing3 = NameNormalizer.getCompressingCollator();
+        final RuleBasedCollator complexity3 = NameNormalizer.getComplexityCollator();
+
+        assertNotNull(compressing3);
+        assertNotNull(complexity3);
+        assertNotSame(compressing3, complexity3);
+
+        assertNotSame(compressing1, compressing3);
+        assertNotSame(complexity1, complexity3);
+    }
 }
diff --git a/tests/src/com/android/providers/contacts/NameSplitterTest.java b/tests/src/com/android/providers/contacts/NameSplitterTest.java
index 785fb01..d9007fc 100644
--- a/tests/src/com/android/providers/contacts/NameSplitterTest.java
+++ b/tests/src/com/android/providers/contacts/NameSplitterTest.java
@@ -16,16 +16,16 @@
 
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.NameSplitter.Name;
-
 import android.provider.ContactsContract.FullNameStyle;
 import android.provider.ContactsContract.PhoneticNameStyle;
 import android.test.suitebuilder.annotation.SmallTest;
 
-import java.util.Locale;
+import com.android.providers.contacts.NameSplitter.Name;
 
 import junit.framework.TestCase;
 
+import java.util.Locale;
+
 /**
  * Tests for {@link NameSplitter}.
  *
diff --git a/tests/src/com/android/providers/contacts/PhotoLoadingTestCase.java b/tests/src/com/android/providers/contacts/PhotoLoadingTestCase.java
index 20058ad..4b159a8 100644
--- a/tests/src/com/android/providers/contacts/PhotoLoadingTestCase.java
+++ b/tests/src/com/android/providers/contacts/PhotoLoadingTestCase.java
@@ -16,12 +16,12 @@
 
 package com.android.providers.contacts;
 
-import com.google.android.collect.Maps;
-
 import android.content.res.Resources;
 import android.test.AndroidTestCase;
 import android.test.suitebuilder.annotation.SmallTest;
 
+import com.google.android.collect.Maps;
+
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
diff --git a/tests/src/com/android/providers/contacts/PhotoProcessorTest.java b/tests/src/com/android/providers/contacts/PhotoProcessorTest.java
new file mode 100644
index 0000000..b34dd86
--- /dev/null
+++ b/tests/src/com/android/providers/contacts/PhotoProcessorTest.java
@@ -0,0 +1,51 @@
+/*
+ * Copyright (C) 2012 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.providers.contacts;
+
+import android.graphics.Bitmap;
+import android.graphics.Color;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.test.AndroidTestCase;
+import android.test.suitebuilder.annotation.SmallTest;
+
+import com.android.providers.contacts.tests.R;
+
+
+/**
+ * Tests for {@link PhotoProcessor}.
+ *
+ * Most of tests are covered by {@link PhotoStoreTest}.
+ */
+@SmallTest
+public class PhotoProcessorTest extends AndroidTestCase {
+
+    public void testTransparency() {
+        final Drawable source = getTestContext().getResources().getDrawable(
+                R.drawable.transparent_10x10);
+        final Bitmap sourceBitmap = ((BitmapDrawable) source).getBitmap();
+
+        final Bitmap normalized = PhotoProcessor.getNormalizedBitmap(sourceBitmap, 50, false);
+
+        // Make sure it's not scaled up.
+        assertEquals(10, normalized.getWidth());
+        assertEquals(10, normalized.getHeight());
+
+        // Make sure the transparent pixel is now 100% white.
+        assertEquals(Color.argb(255, 255, 255, 255), normalized.getPixel(0, 0));
+    }
+}
diff --git a/tests/src/com/android/providers/contacts/PhotoStoreTest.java b/tests/src/com/android/providers/contacts/PhotoStoreTest.java
index 1550d0b..4e797f7 100644
--- a/tests/src/com/android/providers/contacts/PhotoStoreTest.java
+++ b/tests/src/com/android/providers/contacts/PhotoStoreTest.java
@@ -16,9 +16,7 @@
 
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
-import com.android.providers.contacts.tests.R;
-import com.android.providers.contacts.util.Hex;
+import static com.android.providers.contacts.ContactsActor.PACKAGE_GREY;
 
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
@@ -26,17 +24,17 @@ import android.provider.ContactsContract;
 import android.provider.ContactsContract.PhotoFiles;
 import android.test.suitebuilder.annotation.MediumTest;
 
+import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
+import com.android.providers.contacts.tests.R;
+
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
-import java.util.Arrays;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 
-import static com.android.providers.contacts.ContactsActor.PACKAGE_GREY;
-
 /**
  * Tests for {@link PhotoStore}.
  */
@@ -81,7 +79,7 @@ public class PhotoStoreTest extends PhotoLoadingTestCase {
 
     public void testStoreNonSquare300x200Photo() throws IOException {
         // The longer side should be downscaled to the target size
-        runStorageTestForResource(R.drawable.earth_300x200, 256, 171);
+        runStorageTestForResource(R.drawable.earth_300x200, 256, 170);
     }
 
     public void testStoreNonSquare300x200PhotoWithCrop() throws IOException {
diff --git a/tests/src/com/android/providers/contacts/PostalSplitterForJapaneseTest.java b/tests/src/com/android/providers/contacts/PostalSplitterForJapaneseTest.java
index b4be173..eba9d53 100644
--- a/tests/src/com/android/providers/contacts/PostalSplitterForJapaneseTest.java
+++ b/tests/src/com/android/providers/contacts/PostalSplitterForJapaneseTest.java
@@ -16,14 +16,14 @@
 
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.PostalSplitter.Postal;
-
 import android.test.suitebuilder.annotation.SmallTest;
 
-import java.util.Locale;
+import com.android.providers.contacts.PostalSplitter.Postal;
 
 import junit.framework.TestCase;
 
+import java.util.Locale;
+
 /**
  * Tests for {@link PostalSplitter}, especially for ja_JP locale.
  * This class depends on the assumption that all the tests in {@link NameSplitterTest} pass.
diff --git a/tests/src/com/android/providers/contacts/PostalSplitterTest.java b/tests/src/com/android/providers/contacts/PostalSplitterTest.java
index 6778b79..d12b3f3 100644
--- a/tests/src/com/android/providers/contacts/PostalSplitterTest.java
+++ b/tests/src/com/android/providers/contacts/PostalSplitterTest.java
@@ -16,14 +16,14 @@
 
 package com.android.providers.contacts;
 
-import com.android.providers.contacts.PostalSplitter.Postal;
-
 import android.test.suitebuilder.annotation.SmallTest;
 
-import java.util.Locale;
+import com.android.providers.contacts.PostalSplitter.Postal;
 
 import junit.framework.TestCase;
 
+import java.util.Locale;
+
 /**
  * Tests for {@link PostalSplitter}, especially for en_US locale.
  *
diff --git a/tests/src/com/android/providers/contacts/SearchIndexManagerTest.java b/tests/src/com/android/providers/contacts/SearchIndexManagerTest.java
index 3abdc3f..dd1bc71 100644
--- a/tests/src/com/android/providers/contacts/SearchIndexManagerTest.java
+++ b/tests/src/com/android/providers/contacts/SearchIndexManagerTest.java
@@ -29,6 +29,9 @@ import android.test.MoreAsserts;
 import android.test.suitebuilder.annotation.MediumTest;
 import android.test.suitebuilder.annotation.Suppress;
 
+import com.android.providers.contacts.testutil.DataUtil;
+import com.android.providers.contacts.testutil.RawContactUtil;
+
 import java.text.Collator;
 import java.util.Arrays;
 import java.util.Locale;
@@ -46,12 +49,12 @@ import java.util.Locale;
 public class SearchIndexManagerTest extends BaseContactsProvider2Test {
 
     public void testSearchIndexForStructuredName() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
-        insertStructuredName(rawContactId, "John", "Doe");
+        DataUtil.insertStructuredName(mResolver, rawContactId, "John", "Doe");
         ContentValues values = new ContentValues();
         values.put(StructuredName.DISPLAY_NAME, "Bob I. Parr");
-        insertStructuredName(rawContactId, values);
+        DataUtil.insertStructuredName(mResolver, rawContactId, values);
         values.clear();
         values.put(StructuredName.PREFIX, "Mrs.");
         values.put(StructuredName.GIVEN_NAME, "Helen");
@@ -60,7 +63,7 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
         values.put(StructuredName.SUFFIX, "PhD");
         values.put(StructuredName.PHONETIC_FAMILY_NAME, "par");
         values.put(StructuredName.PHONETIC_GIVEN_NAME, "helen");
-        insertStructuredName(rawContactId, values);
+        DataUtil.insertStructuredName(mResolver, rawContactId, values);
 
         assertSearchIndex(
                 contactId, null, "John Doe Bob I Parr Helen I Parr PhD par helen parhelen", null);
@@ -72,11 +75,11 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
             return;
         }
 
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         ContentValues values = new ContentValues();
         values.put(StructuredName.DISPLAY_NAME, "\u695A\u8FAD");    // CHUCI
-        insertStructuredName(rawContactId, values);
+        DataUtil.insertStructuredName(mResolver, rawContactId, values);
 
         assertSearchIndex(
                 contactId, null, "\u695A\u8FAD \u695A\u8FAD CI \u8FAD CHUCI CC C", null);
@@ -87,11 +90,12 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
         if (!Arrays.asList(Collator.getAvailableLocales()).contains(Locale.CHINA)) {
             return;
         }
+        ContactLocaleUtils.setLocale(Locale.SIMPLIFIED_CHINESE);
 
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         ContentValues values = new ContentValues();
         values.put(StructuredName.DISPLAY_NAME, "\u695A\u8FAD");    // CHUCI
-        insertStructuredName(rawContactId, values);
+        DataUtil.insertStructuredName(mResolver, rawContactId, values);
 
         assertStoredValue(buildSearchUri("\u695A\u8FAD"), SearchSnippetColumns.SNIPPET, null);
         assertStoredValue(buildSearchUri("\u8FAD"), SearchSnippetColumns.SNIPPET, null);
@@ -107,11 +111,11 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
             return;
         }
 
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         ContentValues values = new ContentValues();
         values.put(StructuredName.DISPLAY_NAME, "\uC774\uC0C1\uC77C");    // Lee Sang Il
-        insertStructuredName(rawContactId, values);
+        DataUtil.insertStructuredName(mResolver, rawContactId, values);
 
         assertSearchIndex(contactId, null,
                 "\uC774\uC0C1\uC77C \uC0C1\uC77C \u1109\u110B \u110B\u1109\u110B", null);
@@ -123,10 +127,10 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
             return;
         }
 
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         ContentValues values = new ContentValues();
         values.put(StructuredName.DISPLAY_NAME, "\uC774\uC0C1\uC77C");   // Lee Sang Il
-        insertStructuredName(rawContactId, values);
+        DataUtil.insertStructuredName(mResolver, rawContactId, values);
 
         // Full name: Lee Sang Il
         assertStoredValue(buildSearchUri("\uC774\uC0C1\uC77C"), SearchSnippetColumns.SNIPPET, null);
@@ -147,13 +151,13 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
             return;
         }
 
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
 
         // Sun Woo Young Nyeu
         ContentValues values = new ContentValues();
         values.put(StructuredName.DISPLAY_NAME, "\uC120\uC6B0\uC6A9\uB140");
 
-        insertStructuredName(rawContactId, values);
+        DataUtil.insertStructuredName(mResolver, rawContactId, values);
 
         // Full name: Sun Woo Young Nyeu
         assertStoredValue(
@@ -171,7 +175,7 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
     }
 
     public void testSearchIndexForOrganization() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         ContentValues values = new ContentValues();
         values.put(Organization.COMPANY, "Acme Inc.");
@@ -189,7 +193,7 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
     }
 
     public void testSearchIndexForPhoneNumber() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         insertPhoneNumber(rawContactId, "800555GOOG");
         insertPhoneNumber(rawContactId, "8005551234");
@@ -198,7 +202,7 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
     }
 
     public void testSearchIndexForEmail() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         insertEmail(rawContactId, "Bob Parr <incredible@android.com>");
         insertEmail(rawContactId, "bob_parr@android.com");
@@ -208,7 +212,7 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
     }
 
     public void testSearchIndexForNickname() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         insertNickname(rawContactId, "incredible");
 
@@ -216,7 +220,7 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
     }
 
     public void testSearchIndexForStructuredPostal() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         insertPostalAddress(rawContactId, "1600 Amphitheatre Pkwy\nMountain View, CA 94043");
         ContentValues values = new ContentValues();
@@ -231,7 +235,7 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
     }
 
     public void testSearchIndexForIm() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         insertImHandle(rawContactId, Im.PROTOCOL_JABBER, null, "bp@android.com");
         insertImHandle(rawContactId, Im.PROTOCOL_CUSTOM, "android_im", "android@android.com");
@@ -241,7 +245,7 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
     }
 
     public void testSearchIndexForNote() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
         insertNote(rawContactId, "Please note: three notes or more make up a chord.");
 
@@ -250,7 +254,7 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
     }
 
     public void testSnippetArgs() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         insertNote(rawContactId, "Please note: three notes or more make up a chord.");
 
         assertStoredValue(
@@ -259,12 +263,12 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
     }
 
     public void testEmptyFilter() {
-        createRawContactWithName("John", "Doe");
+        RawContactUtil.createRawContactWithName(mResolver, "John", "Doe");
         assertEquals(0, getCount(buildSearchUri(""), null, null));
     }
 
     public void testSearchByName() {
-        createRawContactWithName("John Jay", "Doe");
+        RawContactUtil.createRawContactWithName(mResolver, "John Jay", "Doe");
 
         // We are supposed to find the contact, but return a null snippet
         assertStoredValue(buildSearchUri("john"), SearchSnippetColumns.SNIPPET, null);
@@ -273,7 +277,7 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
     }
 
     public void testSearchByPrefixName() {
-        createRawContactWithName("John Jay", "Doe");
+        RawContactUtil.createRawContactWithName(mResolver, "John Jay", "Doe");
 
         // prefix searches
         assertStoredValue(buildSearchUri("jo ja"), SearchSnippetColumns.SNIPPET, null);
@@ -282,7 +286,7 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
     }
 
     public void testGermanUmlautFullameCapitalizationSearch() {
-        createRawContactWithName("Matthäus BJÖRN Bünyamin", "Reißer");
+        RawContactUtil.createRawContactWithName(mResolver, "Matthäus BJÖRN Bünyamin", "Reißer");
 
         // make sure we can find those, independent of the capitalization
         assertStoredValue(buildSearchUri("matthäus"), SearchSnippetColumns.SNIPPET, null);
@@ -370,7 +374,7 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
     }
 
     public void testNameWithHyphen() {
-        createRawContactWithName("First", "Last-name");
+        RawContactUtil.createRawContactWithName(mResolver, "First", "Last-name");
 
         assertStoredValue(buildSearchUri("First"), SearchSnippetColumns.SNIPPET, null);
         assertStoredValue(buildSearchUri("Last"), SearchSnippetColumns.SNIPPET, null);
@@ -387,7 +391,7 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
 
     /** Same as {@link #testNameWithHyphen} except the name has double hyphens. */
     public void testNameWithDoubleHyphens() {
-        createRawContactWithName("First", "Last--name");
+        RawContactUtil.createRawContactWithName(mResolver, "First", "Last--name");
 
         assertStoredValue(buildSearchUri("First"), SearchSnippetColumns.SNIPPET, null);
         assertStoredValue(buildSearchUri("Last"), SearchSnippetColumns.SNIPPET, null);
@@ -400,7 +404,7 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
     }
 
     public void testNameWithPunctuations() {
-        createRawContactWithName("First", "O'Neill");
+        RawContactUtil.createRawContactWithName(mResolver, "First", "O'Neill");
 
         assertStoredValue(buildSearchUri("first"), SearchSnippetColumns.SNIPPET, null);
         assertStoredValue(buildSearchUri("oneill"), SearchSnippetColumns.SNIPPET, null);
@@ -408,7 +412,7 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
     }
 
     public void testSearchByEmailAddress() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         insertPhoneNumber(rawContactId, "1234567890");
         insertEmail(rawContactId, "john@doe.com");
         insertNote(rawContactId, "a hundred dollar note for doe@john.com and bob parr");
@@ -421,7 +425,7 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
     }
 
     public void testSearchByPhoneNumber() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         insertPhoneNumber(rawContactId, "330142685300");
         insertPhoneNumber(rawContactId, "(800)GOOG-123");
         insertEmail(rawContactId, "john@doe.com");
@@ -443,7 +447,7 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
      * Test case for bug 5904515
      */
     public void testSearchByPhoneNumber_diferSnippetting() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         insertPhoneNumber(rawContactId, "505-123-4567");
 
         // The bug happened with the old code only when we use \u0001 as the snippet marker.
@@ -461,7 +465,7 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
      * there's no visible breakage.)
      */
     public void testSearchByEmail_diferSnippetting() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         insertEmail(rawContactId, "john@doe.com");
 
         assertStoredValue(buildSearchUri("john", "\u0001,\u0001,\u2026,5", true),
@@ -505,10 +509,10 @@ public class SearchIndexManagerTest extends BaseContactsProvider2Test {
     }
 
     private void createRawContactWithDisplayName(String name) {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         ContentValues values = new ContentValues();
         values.put(StructuredName.DISPLAY_NAME, name);
-        insertStructuredName(rawContactId, values);
+        DataUtil.insertStructuredName(mResolver, rawContactId, values);
     }
 
     // TODO: expectedName must be tested. Many tests in here are quite useless at the moment
diff --git a/tests/src/com/android/providers/contacts/SqlInjectionDetectionTest.java b/tests/src/com/android/providers/contacts/SqlInjectionDetectionTest.java
index f4b8bab..e7b80a0 100644
--- a/tests/src/com/android/providers/contacts/SqlInjectionDetectionTest.java
+++ b/tests/src/com/android/providers/contacts/SqlInjectionDetectionTest.java
@@ -27,7 +27,7 @@ import android.provider.ContactsContract.CommonDataKinds.Phone;
 import android.provider.ContactsContract.Contacts;
 import android.test.suitebuilder.annotation.MediumTest;
 
-import junit.framework.Assert;
+import com.android.providers.contacts.testutil.RawContactUtil;
 
 /**
  * Unit tests for {@link ContactsProvider2}, to make sure the queries don't allow sql injection.
@@ -43,7 +43,7 @@ public class SqlInjectionDetectionTest extends BaseContactsProvider2Test {
     private static final String[] PHONE_ID_PROJECTION = new String[] { Phone._ID };
 
     public void testPhoneQueryValid() {
-        long rawContactId = createRawContactWithName("Hot", "Tamale");
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver, "Hot", "Tamale");
         insertPhoneNumber(rawContactId, "555-123-4567");
 
         assertQueryValid(Phone.CONTENT_URI, PHONE_ID_PROJECTION,
@@ -51,7 +51,7 @@ public class SqlInjectionDetectionTest extends BaseContactsProvider2Test {
     }
 
     public void testPhoneQueryBadProjection() {
-        long rawContactId = createRawContactWithName("Hot", "Tamale");
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver, "Hot", "Tamale");
         insertPhoneNumber(rawContactId, "555-123-4567");
 
         assertQueryThrows(IllegalArgumentException.class, Phone.CONTENT_URI,
@@ -59,7 +59,7 @@ public class SqlInjectionDetectionTest extends BaseContactsProvider2Test {
     }
 
     public void testPhoneQueryBadSelection() {
-        long rawContactId = createRawContactWithName("Hot", "Tamale");
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver, "Hot", "Tamale");
         insertPhoneNumber(rawContactId, "555-123-4567");
 
         assertQueryThrows(SQLiteException.class, Phone.CONTENT_URI, PHONE_ID_PROJECTION,
@@ -67,7 +67,7 @@ public class SqlInjectionDetectionTest extends BaseContactsProvider2Test {
     }
 
     public void testPhoneQueryBadSortOrder() {
-        long rawContactId = createRawContactWithName("Hot", "Tamale");
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver, "Hot", "Tamale");
         insertPhoneNumber(rawContactId, "555-123-4567");
 
         assertQueryThrows(SQLiteException.class, Phone.CONTENT_URI,
@@ -76,7 +76,7 @@ public class SqlInjectionDetectionTest extends BaseContactsProvider2Test {
 
     public void testPhoneQueryBadLimit() {
         // Non-numeric query parameters are ignored by the provider
-        long rawContactId = createRawContactWithName("Hot", "Tamale");
+        long rawContactId = RawContactUtil.createRawContactWithName(mResolver, "Hot", "Tamale");
         insertPhoneNumber(rawContactId, "555-123-4567");
 
         Builder builder = Contacts.CONTENT_FILTER_URI.buildUpon();
diff --git a/tests/src/com/android/providers/contacts/SynchronousContactsProvider2.java b/tests/src/com/android/providers/contacts/SynchronousContactsProvider2.java
index 3d28ad1..1d127c7 100644
--- a/tests/src/com/android/providers/contacts/SynchronousContactsProvider2.java
+++ b/tests/src/com/android/providers/contacts/SynchronousContactsProvider2.java
@@ -19,6 +19,9 @@ package com.android.providers.contacts;
 import android.accounts.Account;
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
+import android.util.Log;
+
+import junit.framework.Assert;
 
 import java.util.Locale;
 
@@ -46,7 +49,7 @@ public class SynchronousContactsProvider2 extends ContactsProvider2 {
     }
 
     @Override
-    public ProfileProvider getProfileProvider() {
+    public ProfileProvider newProfileProvider() {
         return new SynchronousProfileProvider(this);
     }
 
@@ -202,6 +205,7 @@ public class SynchronousContactsProvider2 extends ContactsProvider2 {
 
     @Override
     public void wipeData() {
+        Log.i(TAG, "wipeData");
         super.wipeData();
         SQLiteDatabase db = getDatabaseHelper(getContext()).getWritableDatabase();
         db.execSQL("replace into SQLITE_SEQUENCE (name,seq) values('raw_contacts', 42)");
@@ -210,4 +214,84 @@ public class SynchronousContactsProvider2 extends ContactsProvider2 {
 
         getContactDirectoryManagerForTest().scanAllPackages();
     }
+
+    // Flags to remember which transaction callback has been called for which mode.
+    private boolean mOnBeginTransactionInternalCalledInProfileMode;
+    private boolean mOnCommitTransactionInternalCalledInProfileMode;
+    private boolean mOnRollbackTransactionInternalCalledInProfileMode;
+
+    private boolean mOnBeginTransactionInternalCalledInContactMode;
+    private boolean mOnCommitTransactionInternalCalledInContactMode;
+    private boolean mOnRollbackTransactionInternalCalledInContactMode;
+
+    public void resetTrasactionCallbackCalledFlags() {
+        mOnBeginTransactionInternalCalledInProfileMode = false;
+        mOnCommitTransactionInternalCalledInProfileMode = false;
+        mOnRollbackTransactionInternalCalledInProfileMode = false;
+
+        mOnBeginTransactionInternalCalledInContactMode = false;
+        mOnCommitTransactionInternalCalledInContactMode = false;
+        mOnRollbackTransactionInternalCalledInContactMode = false;
+    }
+
+    @Override
+    protected void onBeginTransactionInternal(boolean forProfile) {
+        super.onBeginTransactionInternal(forProfile);
+        if (forProfile) {
+            mOnBeginTransactionInternalCalledInProfileMode = true;
+        } else {
+            mOnBeginTransactionInternalCalledInContactMode = true;
+        }
+    }
+
+    @Override
+    protected void onCommitTransactionInternal(boolean forProfile) {
+        super.onCommitTransactionInternal(forProfile);
+        if (forProfile) {
+            mOnCommitTransactionInternalCalledInProfileMode = true;
+        } else {
+            mOnCommitTransactionInternalCalledInContactMode = true;
+        }
+    }
+
+    @Override
+    protected void onRollbackTransactionInternal(boolean forProfile) {
+        super.onRollbackTransactionInternal(forProfile);
+        if (forProfile) {
+            mOnRollbackTransactionInternalCalledInProfileMode = true;
+        } else {
+            mOnRollbackTransactionInternalCalledInContactMode = true;
+        }
+    }
+
+    public void assertCommitTransactionCalledForProfileMode() {
+        Assert.assertTrue("begin", mOnBeginTransactionInternalCalledInProfileMode);
+        Assert.assertTrue("commit", mOnCommitTransactionInternalCalledInProfileMode);
+        Assert.assertFalse("rollback", mOnRollbackTransactionInternalCalledInProfileMode);
+    }
+
+    public void assertRollbackTransactionCalledForProfileMode() {
+        Assert.assertTrue("begin", mOnBeginTransactionInternalCalledInProfileMode);
+        Assert.assertFalse("commit", mOnCommitTransactionInternalCalledInProfileMode);
+        Assert.assertTrue("rollback", mOnRollbackTransactionInternalCalledInProfileMode);
+    }
+
+    public void assertNoTransactionsForProfileMode() {
+        Assert.assertFalse("begin", mOnBeginTransactionInternalCalledInProfileMode);
+        Assert.assertFalse("commit", mOnCommitTransactionInternalCalledInProfileMode);
+        Assert.assertFalse("rollback", mOnRollbackTransactionInternalCalledInProfileMode);
+    }
+
+
+    public void assertCommitTransactionCalledForContactMode() {
+        Assert.assertTrue("begin", mOnBeginTransactionInternalCalledInContactMode);
+        Assert.assertTrue("commit", mOnCommitTransactionInternalCalledInContactMode);
+        Assert.assertFalse("rollback", mOnRollbackTransactionInternalCalledInContactMode);
+    }
+
+    public void assertRollbackTransactionCalledForContactMode() {
+        Assert.assertTrue("begin", mOnBeginTransactionInternalCalledInContactMode);
+        Assert.assertFalse("commit", mOnCommitTransactionInternalCalledInContactMode);
+        Assert.assertTrue("rollback", mOnRollbackTransactionInternalCalledInContactMode);
+    }
 }
diff --git a/tests/src/com/android/providers/contacts/SynchronousProfileProvider.java b/tests/src/com/android/providers/contacts/SynchronousProfileProvider.java
index 93ad70f..308e67a 100644
--- a/tests/src/com/android/providers/contacts/SynchronousProfileProvider.java
+++ b/tests/src/com/android/providers/contacts/SynchronousProfileProvider.java
@@ -16,7 +16,6 @@
 
 package com.android.providers.contacts;
 
-import android.accounts.Account;
 import android.content.Context;
 
 import java.util.Locale;
diff --git a/tests/src/com/android/providers/contacts/TestUtils.java b/tests/src/com/android/providers/contacts/TestUtils.java
index 00789bf..b6d6a27 100644
--- a/tests/src/com/android/providers/contacts/TestUtils.java
+++ b/tests/src/com/android/providers/contacts/TestUtils.java
@@ -21,12 +21,12 @@ import android.content.Context;
 import android.database.Cursor;
 import android.util.Log;
 
+import junit.framework.Assert;
+
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
 
-import junit.framework.Assert;
-
 public class TestUtils {
     private TestUtils() {
     }
diff --git a/tests/src/com/android/providers/contacts/TransactionContextTest.java b/tests/src/com/android/providers/contacts/TransactionContextTest.java
new file mode 100644
index 0000000..084a51f
--- /dev/null
+++ b/tests/src/com/android/providers/contacts/TransactionContextTest.java
@@ -0,0 +1,97 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License
+ */
+
+package com.android.providers.contacts;
+
+import android.test.suitebuilder.annotation.SmallTest;
+
+import junit.framework.TestCase;
+
+import java.util.Map;
+import java.util.Set;
+
+/**
+ * Unit tests for TransactionContext.
+ */
+@SmallTest
+public class TransactionContextTest extends TestCase {
+
+    public void testClearExceptSearchIndexUpdates_returnsNewSets() {
+        TransactionContext context = new TransactionContext(false);
+        context.markRawContactDirtyAndChanged(1L, false);
+        context.rawContactUpdated(1L);
+        context.rawContactInserted(1L, 1L);
+        context.syncStateUpdated(1L, new Object());
+
+        context.clearExceptSearchIndexUpdates();
+
+        Set<Long> newDirty = context.getDirtyRawContactIds();
+        Set<Long> newChanged = context.getChangedRawContactIds();
+        Set<Long> newInserted = context.getInsertedRawContactIds();
+        Set<Long> newUpdated = context.getUpdatedRawContactIds();
+        Set<Map.Entry<Long, Object>> newSync = context.getUpdatedSyncStates();
+
+        assertTrue(newDirty.isEmpty());
+        assertTrue(newChanged.isEmpty());
+        assertTrue(newInserted.isEmpty());
+        assertTrue(newUpdated.isEmpty());
+        assertTrue(newSync.isEmpty());
+    }
+
+    public void testMarkDirtyAndChanged_onlyUpdatesChanged() {
+        TransactionContext context = new TransactionContext(false);
+
+        context.markRawContactDirtyAndChanged(1L, true /* isSyncAdapter */);
+
+        assertEquals(1, context.getChangedRawContactIds().size());
+        assertEquals(0, context.getDirtyRawContactIds().size());
+    }
+
+    public void testMarkDirtyAndChanged_onlyUpdatesDirtyAndChanged() {
+        TransactionContext context = new TransactionContext(false);
+
+        context.markRawContactDirtyAndChanged(1L, false /* isSyncAdapter */);
+
+        assertEquals(1, context.getChangedRawContactIds().size());
+        assertEquals(1, context.getDirtyRawContactIds().size());
+    }
+
+    public void testRawContactInserted_affectsChangedContacts() {
+        TransactionContext context = new TransactionContext(false);
+        assertTrue(context.getChangedRawContactIds().isEmpty());
+
+        context.rawContactInserted(1L, 2L);
+        assertEquals(1, context.getChangedRawContactIds().size());
+        assertTrue(context.getChangedRawContactIds().contains(1L));
+
+        context.rawContactInserted(5L, 10L);
+        assertEquals(2, context.getChangedRawContactIds().size());
+        assertTrue(context.getChangedRawContactIds().contains(5L));
+    }
+
+    public void testMarkRawContactChangedOrDeletedOrInserted_affectsChangedContacts() {
+        TransactionContext context = new TransactionContext(false);
+        assertTrue(context.getChangedRawContactIds().isEmpty());
+
+        context.markRawContactChangedOrDeletedOrInserted(1L);
+        assertEquals(1, context.getChangedRawContactIds().size());
+        assertTrue(context.getChangedRawContactIds().contains(1L));
+
+        context.rawContactInserted(5L, 10L);
+        assertEquals(2, context.getChangedRawContactIds().size());
+        assertTrue(context.getChangedRawContactIds().contains(5L));
+    }
+}
diff --git a/tests/src/com/android/providers/contacts/VCardTest.java b/tests/src/com/android/providers/contacts/VCardTest.java
index b022ebd..e2d205e 100644
--- a/tests/src/com/android/providers/contacts/VCardTest.java
+++ b/tests/src/com/android/providers/contacts/VCardTest.java
@@ -16,12 +16,13 @@
 
 package com.android.providers.contacts;
 
-import com.android.vcard.VCardComposer;
-import com.android.vcard.VCardConfig;
-
 import android.content.ContentResolver;
 import android.test.suitebuilder.annotation.MediumTest;
 
+import com.android.providers.contacts.testutil.RawContactUtil;
+import com.android.vcard.VCardComposer;
+import com.android.vcard.VCardConfig;
+
 /**
  * Tests (or integration tests) verifying if vCard library works well with {@link ContentResolver}.
  *
@@ -37,7 +38,7 @@ public class VCardTest extends BaseContactsProvider2Test {
      * a vCard string.
      */
     public void testCompose() {
-        createRawContactWithName("John", "Doe");
+        RawContactUtil.createRawContactWithName(mResolver, "John", "Doe");
         final VCardComposer composer = new VCardComposer(
                 getContext(), mResolver, VCardConfig.VCARD_TYPE_DEFAULT, null, true);
         assertTrue(composer.init());
diff --git a/tests/src/com/android/providers/contacts/VoicemailProviderTest.java b/tests/src/com/android/providers/contacts/VoicemailProviderTest.java
index 74195b5..8fdbccf 100644
--- a/tests/src/com/android/providers/contacts/VoicemailProviderTest.java
+++ b/tests/src/com/android/providers/contacts/VoicemailProviderTest.java
@@ -16,8 +16,6 @@
 
 package com.android.providers.contacts;
 
-import com.android.common.io.MoreCloseables;
-
 import android.content.ContentUris;
 import android.content.ContentValues;
 import android.database.Cursor;
@@ -30,6 +28,8 @@ import android.provider.VoicemailContract.Voicemails;
 import android.test.MoreAsserts;
 import android.test.suitebuilder.annotation.SmallTest;
 
+import com.android.common.io.MoreCloseables;
+
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
diff --git a/tests/src/com/android/providers/contacts/aggregation/ContactAggregatorTest.java b/tests/src/com/android/providers/contacts/aggregation/ContactAggregatorTest.java
index 8de5890..acd830f 100644
--- a/tests/src/com/android/providers/contacts/aggregation/ContactAggregatorTest.java
+++ b/tests/src/com/android/providers/contacts/aggregation/ContactAggregatorTest.java
@@ -16,25 +16,15 @@
 
 package com.android.providers.contacts.aggregation;
 
-import com.android.providers.contacts.BaseContactsProvider2Test;
-import com.android.providers.contacts.ContactsDatabaseHelper.Tables;
-import com.android.providers.contacts.ContactsProvider2;
-import com.android.providers.contacts.TestUtils;
-import com.android.providers.contacts.tests.R;
-import com.google.android.collect.Lists;
-
 import android.accounts.Account;
 import android.content.ContentProviderOperation;
 import android.content.ContentProviderResult;
 import android.content.ContentUris;
 import android.content.ContentValues;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
 import android.net.Uri;
-import android.provider.BaseColumns;
 import android.provider.ContactsContract;
 import android.provider.ContactsContract.AggregationExceptions;
-import android.provider.ContactsContract.CommonDataKinds.GroupMembership;
 import android.provider.ContactsContract.CommonDataKinds.Organization;
 import android.provider.ContactsContract.CommonDataKinds.StructuredName;
 import android.provider.ContactsContract.Contacts;
@@ -46,6 +36,14 @@ import android.provider.ContactsContract.StatusUpdates;
 import android.test.MoreAsserts;
 import android.test.suitebuilder.annotation.MediumTest;
 
+import com.android.providers.contacts.BaseContactsProvider2Test;
+import com.android.providers.contacts.TestUtils;
+import com.android.providers.contacts.tests.R;
+import com.android.providers.contacts.testutil.DataUtil;
+import com.android.providers.contacts.testutil.RawContactUtil;
+
+import com.google.android.collect.Lists;
+
 /**
  * Unit tests for {@link ContactAggregator}.
  *
@@ -69,8 +67,8 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     };
 
     public void testCrudAggregationExceptions() throws Exception {
-        long rawContactId1 = createRawContactWithName("zz", "top");
-        long rawContactId2 = createRawContactWithName("aa", "bottom");
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "zz", "top");
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "aa", "bottom");
 
         setAggregationException(AggregationExceptions.TYPE_KEEP_TOGETHER,
                 rawContactId1, rawContactId2);
@@ -117,9 +115,9 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     }
 
     public void testAggregationCreatesNewAggregate() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
 
-        Uri resultUri = insertStructuredName(rawContactId, "Johna", "Smitha");
+        Uri resultUri = DataUtil.insertStructuredName(mResolver, rawContactId, "Johna", "Smitha");
 
         // Parse the URI and confirm that it contains an ID
         assertTrue(ContentUris.parseId(resultUri) != 0);
@@ -132,11 +130,11 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     }
 
     public void testAggregationOfExactFullNameMatch() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
-        insertStructuredName(rawContactId1, "Johnb", "Smithb");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Johnb", "Smithb");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
-        insertStructuredName(rawContactId2, "Johnb", "Smithb");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Johnb", "Smithb");
 
         assertAggregated(rawContactId1, rawContactId2, "Johnb Smithb");
     }
@@ -145,17 +143,17 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
         Account account = new Account("accountName", "accountType");
         createAutoAddGroup(account);
 
-        long rawContactId1 = createRawContact(account);
-        insertStructuredName(rawContactId1, "Flynn", "Ryder");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, account);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Flynn", "Ryder");
 
         // Hide by removing from all groups
         removeGroupMemberships(rawContactId1);
 
-        long rawContactId2 = createRawContact(account);
-        insertStructuredName(rawContactId2, "Flynn", "Ryder");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, account);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Flynn", "Ryder");
 
-        long rawContactId3 = createRawContact(ACCOUNT_2);
-        insertStructuredName(rawContactId3, "Flynn", "Ryder");
+        long rawContactId3 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
+        DataUtil.insertStructuredName(mResolver, rawContactId3, "Flynn", "Ryder");
 
         assertNotAggregated(rawContactId1, rawContactId2);
         assertNotAggregated(rawContactId1, rawContactId3);
@@ -163,261 +161,262 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     }
 
     public void testAggregationOfCaseInsensitiveFullNameMatch() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
-        insertStructuredName(rawContactId1, "Johnc", "Smithc");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Johnc", "Smithc");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
-        insertStructuredName(rawContactId2, "Johnc", "smithc");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Johnc", "smithc");
 
         assertAggregated(rawContactId1, rawContactId2, "Johnc Smithc");
     }
 
     public void testAggregationOfLastNameMatch() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
-        insertStructuredName(rawContactId1, null, "Johnd");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, null, "Johnd");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
-        insertStructuredName(rawContactId2, null, "johnd");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, null, "johnd");
 
         assertAggregated(rawContactId1, rawContactId2, "Johnd");
     }
 
     public void testNonAggregationOfFirstNameMatch() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
-        insertStructuredName(rawContactId1, "Johne", "Smithe");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Johne", "Smithe");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
-        insertStructuredName(rawContactId2, "Johne", null);
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Johne", null);
 
         assertNotAggregated(rawContactId1, rawContactId2);
     }
 
     public void testNonAggregationOfLastNameMatch() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
-        insertStructuredName(rawContactId1, "Johnf", "Smithf");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Johnf", "Smithf");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
-        insertStructuredName(rawContactId2, null, "Smithf");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, null, "Smithf");
 
         assertNotAggregated(rawContactId1, rawContactId2);
     }
 
     public void testAggregationOfConcatenatedFullNameMatch() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
-        insertStructuredName(rawContactId1, "Johng", "Smithg");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Johng", "Smithg");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
-        insertStructuredName(rawContactId2, "johngsmithg", null);
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "johngsmithg", null);
 
         assertAggregated(rawContactId1, rawContactId2, "Johng Smithg");
     }
 
     public void testAggregationOfNormalizedFullNameMatch() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
-        insertStructuredName(rawContactId1, "H\u00e9l\u00e8ne", "Bj\u00f8rn");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "H\u00e9l\u00e8ne", "Bj\u00f8rn");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
-        insertStructuredName(rawContactId2, "helene bjorn", null);
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "helene bjorn", null);
 
         assertAggregated(rawContactId1, rawContactId2, "H\u00e9l\u00e8ne Bj\u00f8rn");
     }
 
     public void testAggregationOfNormalizedFullNameMatchWithReadOnlyAccount() {
-        long rawContactId1 = createRawContact(new Account("acct", READ_ONLY_ACCOUNT_TYPE));
-        insertStructuredName(rawContactId1, "H\u00e9l\u00e8ne", "Bj\u00f8rn");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, new Account("acct",
+                READ_ONLY_ACCOUNT_TYPE));
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "H\u00e9l\u00e8ne", "Bj\u00f8rn");
 
-        long rawContactId2 = createRawContact();
-        insertStructuredName(rawContactId2, "helene bjorn", null);
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "helene bjorn", null);
 
         assertAggregated(rawContactId1, rawContactId2, "helene bjorn");
     }
 
     public void testAggregationOfNumericNames() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
-        insertStructuredName(rawContactId1, "123", null);
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "123", null);
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
-        insertStructuredName(rawContactId2, "1-2-3", null);
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "1-2-3", null);
 
         assertAggregated(rawContactId1, rawContactId2, "1-2-3");
     }
 
     public void testAggregationOfInconsistentlyParsedNames() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
 
         ContentValues values = new ContentValues();
         values.put(StructuredName.DISPLAY_NAME, "604 Arizona Ave");
         values.put(StructuredName.GIVEN_NAME, "604");
         values.put(StructuredName.MIDDLE_NAME, "Arizona");
         values.put(StructuredName.FAMILY_NAME, "Ave");
-        insertStructuredName(rawContactId1, values);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, values);
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
         values.clear();
         values.put(StructuredName.DISPLAY_NAME, "604 Arizona Ave");
         values.put(StructuredName.GIVEN_NAME, "604");
         values.put(StructuredName.FAMILY_NAME, "Arizona Ave");
-        insertStructuredName(rawContactId2, values);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, values);
 
         assertAggregated(rawContactId1, rawContactId2, "604 Arizona Ave");
     }
 
     public void testAggregationBasedOnMiddleName() {
         ContentValues values = new ContentValues();
-        long rawContactId1 = createRawContact(ACCOUNT_1);
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
         values.put(StructuredName.GIVEN_NAME, "John");
         values.put(StructuredName.GIVEN_NAME, "Abigale");
         values.put(StructuredName.FAMILY_NAME, "James");
 
-        insertStructuredName(rawContactId1, values);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, values);
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
         values.clear();
         values.put(StructuredName.GIVEN_NAME, "John");
         values.put(StructuredName.GIVEN_NAME, "Marie");
         values.put(StructuredName.FAMILY_NAME, "James");
-        insertStructuredName(rawContactId2, values);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, values);
 
         assertNotAggregated(rawContactId1, rawContactId2);
     }
 
     public void testAggregationBasedOnPhoneNumberNoNameData() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
         insertPhoneNumber(rawContactId1, "(888)555-1231");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
         insertPhoneNumber(rawContactId2, "1(888)555-1231");
 
         assertAggregated(rawContactId1, rawContactId2);
     }
 
     public void testAggregationBasedOnPhoneNumberWhenTargetAggregateHasNoName() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
         insertPhoneNumber(rawContactId1, "(888)555-1232");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
-        insertStructuredName(rawContactId2, "Johnl", "Smithl");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Johnl", "Smithl");
         insertPhoneNumber(rawContactId2, "1(888)555-1232");
 
         assertAggregated(rawContactId1, rawContactId2);
     }
 
     public void testAggregationBasedOnPhoneNumberWhenNewContactHasNoName() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
-        insertStructuredName(rawContactId1, "Johnm", "Smithm");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Johnm", "Smithm");
         insertPhoneNumber(rawContactId1, "(888)555-1233");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
         insertPhoneNumber(rawContactId2, "1(888)555-1233");
 
         assertAggregated(rawContactId1, rawContactId2);
     }
 
     public void testAggregationBasedOnPhoneNumberWithDifferentNames() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
-        insertStructuredName(rawContactId1, "Baby", "Bear");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Baby", "Bear");
         insertPhoneNumber(rawContactId1, "(888)555-1235");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
-        insertStructuredName(rawContactId2, "Blind", "Mouse");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Blind", "Mouse");
         insertPhoneNumber(rawContactId2, "1(888)555-1235");
 
         assertNotAggregated(rawContactId1, rawContactId2);
     }
 
     public void testAggregationBasedOnPhoneNumberWithJustFirstName() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
-        insertStructuredName(rawContactId1, "Chick", "Notnull");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Chick", "Notnull");
         insertPhoneNumber(rawContactId1, "(888)555-1236");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
-        insertStructuredName(rawContactId2, "Chick", null);
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Chick", null);
         insertPhoneNumber(rawContactId2, "1(888)555-1236");
 
         assertAggregated(rawContactId1, rawContactId2);
     }
 
     public void testAggregationBasedOnEmailNoNameData() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
         insertEmail(rawContactId1, "lightning@android.com");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
         insertEmail(rawContactId2, "lightning@android.com");
 
         assertAggregated(rawContactId1, rawContactId2);
     }
 
     public void testAggregationBasedOnEmailWhenTargetAggregateHasNoName() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
         insertEmail(rawContactId1, "mcqueen@android.com");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
-        insertStructuredName(rawContactId2, "Lightning", "McQueen");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Lightning", "McQueen");
         insertEmail(rawContactId2, "mcqueen@android.com");
 
         assertAggregated(rawContactId1, rawContactId2, "Lightning McQueen");
     }
 
     public void testAggregationBasedOnEmailWhenNewContactHasNoName() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
-        insertStructuredName(rawContactId1, "Doc", "Hudson");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Doc", "Hudson");
         insertEmail(rawContactId1, "doc@android.com");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
         insertEmail(rawContactId2, "doc@android.com");
 
         assertAggregated(rawContactId1, rawContactId2);
     }
 
     public void testAggregationBasedOnEmailWithDifferentNames() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
-        insertStructuredName(rawContactId1, "Chick", "Hicks");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Chick", "Hicks");
         insertEmail(rawContactId1, "hicky@android.com");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
-        insertStructuredName(rawContactId2, "Luigi", "Guido");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Luigi", "Guido");
         insertEmail(rawContactId2, "hicky@android.com");
 
         assertNotAggregated(rawContactId1, rawContactId2);
     }
 
     public void testAggregationByCommonNicknameWithLastName() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
-        insertStructuredName(rawContactId1, "Bill", "Gore");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Bill", "Gore");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
-        insertStructuredName(rawContactId2, "William", "Gore");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "William", "Gore");
 
         assertAggregated(rawContactId1, rawContactId2, "William Gore");
     }
 
     public void testAggregationByCommonNicknameOnly() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
-        insertStructuredName(rawContactId1, "Lawrence", null);
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Lawrence", null);
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
-        insertStructuredName(rawContactId2, "Larry", null);
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Larry", null);
 
         assertAggregated(rawContactId1, rawContactId2, "Lawrence");
     }
 
     public void testAggregationByNicknameNoStructuredName() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
         insertNickname(rawContactId1, "Frozone");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
         insertNickname(rawContactId2, "Frozone");
 
         assertAggregated(rawContactId1, rawContactId2);
     }
 
     public void testAggregationByNicknameWithDifferentNames() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
-        insertStructuredName(rawContactId1, "Helen", "Parr");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Helen", "Parr");
         insertNickname(rawContactId1, "Elastigirl");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
-        insertStructuredName(rawContactId2, "Shawn", "Johnson");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Shawn", "Johnson");
         insertNickname(rawContactId2, "Elastigirl");
 
         assertNotAggregated(rawContactId1, rawContactId2);
@@ -426,11 +425,11 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     public void testNonAggregationOnOrganization() {
         ContentValues values = new ContentValues();
         values.put(Organization.TITLE, "Monsters, Inc");
-        long rawContactId1 = createRawContact(ACCOUNT_1);
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
         insertOrganization(rawContactId1, values);
         insertNickname(rawContactId1, "Boo");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
         insertOrganization(rawContactId2, values);
         insertNickname(rawContactId2, "Rendall");   // To force reaggregation
 
@@ -438,21 +437,21 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     }
 
     public void testAggregationByIdentity() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
         insertIdentity(rawContactId1, "iden1", "namespace1");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
         insertIdentity(rawContactId2, "iden1", "namespace1");
 
         assertAggregated(rawContactId1, rawContactId2);
     }
 
     public void testAggregationExceptionKeepIn() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
-        insertStructuredName(rawContactId1, "Johnk", "Smithk");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Johnk", "Smithk");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
-        insertStructuredName(rawContactId2, "Johnkx", "Smithkx");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Johnkx", "Smithkx");
 
         long contactId1 = queryContactId(rawContactId1);
         long contactId2 = queryContactId(rawContactId2);
@@ -476,11 +475,11 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     }
 
     public void testAggregationExceptionKeepOut() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
-        insertStructuredName(rawContactId1, "Johnh", "Smithh");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Johnh", "Smithh");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
-        insertStructuredName(rawContactId2, "Johnh", "Smithh");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Johnh", "Smithh");
 
         setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,
                 rawContactId1, rawContactId2);
@@ -489,14 +488,14 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     }
 
     public void testAggregationExceptionKeepOutCheckUpdatesDisplayName() {
-        long rawContactId1 = createRawContact(ACCOUNT_1);
-        insertStructuredName(rawContactId1, "Johni", "Smithi");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Johni", "Smithi");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
-        insertStructuredName(rawContactId2, "Johnj", "Smithj");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Johnj", "Smithj");
 
-        long rawContactId3 = createRawContact(ACCOUNT_3);
-        insertStructuredName(rawContactId3, "Johnm", "Smithm");
+        long rawContactId3 = RawContactUtil.createRawContact(mResolver, ACCOUNT_3);
+        DataUtil.insertStructuredName(mResolver, rawContactId3, "Johnm", "Smithm");
 
         setAggregationException(AggregationExceptions.TYPE_KEEP_TOGETHER,
                 rawContactId1, rawContactId2);
@@ -537,13 +536,52 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
         assertEquals("Johnm Smithm", displayName4);
     }
 
+    public void testAggregationExceptionKeepOutCheckResultDisplayNames() {
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "c", "c", ACCOUNT_1);
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "b", "b", ACCOUNT_2);
+        long rawContactId3 = RawContactUtil.createRawContactWithName(mResolver, "a", "a", ACCOUNT_3);
+
+        // Join all contacts
+        setAggregationException(AggregationExceptions.TYPE_KEEP_TOGETHER,
+                rawContactId1, rawContactId2);
+        setAggregationException(AggregationExceptions.TYPE_KEEP_TOGETHER,
+                rawContactId1, rawContactId3);
+        setAggregationException(AggregationExceptions.TYPE_KEEP_TOGETHER,
+                rawContactId2, rawContactId3);
+
+        // Separate all contacts. The order (2-3 , 1-2, 1-3) is important
+        setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,
+                rawContactId2, rawContactId3);
+        setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,
+                rawContactId1, rawContactId2);
+        setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,
+                rawContactId1, rawContactId3);
+
+        // Verify that we have three different contacts
+        long contactId1 = queryContactId(rawContactId1);
+        long contactId2 = queryContactId(rawContactId2);
+        long contactId3 = queryContactId(rawContactId3);
+
+        assertTrue(contactId1 != contactId2);
+        assertTrue(contactId1 != contactId3);
+        assertTrue(contactId2 != contactId3);
+
+        // Verify that each raw contact contribute to the contact display name
+        assertDisplayNameEquals(contactId1, rawContactId1);
+        assertDisplayNameEquals(contactId2, rawContactId2);
+        assertDisplayNameEquals(contactId3, rawContactId3);
+    }
+
     public void testNonAggregationWithMultipleAffinities() {
-        long rawContactId1 = createRawContactWithName("John", "Doe", ACCOUNT_1);
-        long rawContactId2 = createRawContactWithName("John", "Doe", ACCOUNT_1);
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_1);
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_1);
         assertNotAggregated(rawContactId1, rawContactId2);
 
         // There are two aggregates this raw contact could join, so it should join neither
-        long rawContactId3 = createRawContactWithName("John", "Doe", ACCOUNT_2);
+        long rawContactId3 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_2);
         assertNotAggregated(rawContactId1, rawContactId3);
         assertNotAggregated(rawContactId2, rawContactId3);
 
@@ -552,13 +590,16 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     }
 
     public void testSplitBecauseOfMultipleAffinities() {
-        long rawContactId1 = createRawContactWithName("John", "Doe", ACCOUNT_1);
-        long rawContactId2 = createRawContactWithName("John", "Doe", ACCOUNT_2);
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_1);
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_2);
         assertAggregated(rawContactId1, rawContactId2);
 
         // The aggregate this raw contact could join has a raw contact from the same account,
         // let's not aggregate and break up the existing aggregate because of the ambiguity
-        long rawContactId3 = createRawContactWithName("John", "Doe", ACCOUNT_1);
+        long rawContactId3 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_1);
         assertNotAggregated(rawContactId1, rawContactId3);
         assertNotAggregated(rawContactId2, rawContactId3);
         assertNotAggregated(rawContactId1, rawContactId2);
@@ -568,14 +609,14 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
         Account account = new Account("accountName", "accountType");
         createAutoAddGroup(account);
 
-        long rawContactId1 = createRawContact(account);
-        insertStructuredName(rawContactId1, "Flynn", "Ryder");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, account);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Flynn", "Ryder");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
-        insertStructuredName(rawContactId2, "Flynn", "Ryder");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Flynn", "Ryder");
 
-        long rawContactId3 = createRawContact(account);
-        insertStructuredName(rawContactId3, "Flynn", "Ryder");
+        long rawContactId3 = RawContactUtil.createRawContact(mResolver, account);
+        DataUtil.insertStructuredName(mResolver, rawContactId3, "Flynn", "Ryder");
 
         assertNotAggregated(rawContactId1, rawContactId3);
         assertNotAggregated(rawContactId2, rawContactId3);
@@ -593,15 +634,15 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
         Account account = new Account("accountName", "accountType");
         createAutoAddGroup(account);
 
-        long rawContactId1 = createRawContact(account);
-        insertStructuredName(rawContactId1, "Flynn", "Ryder");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, account);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Flynn", "Ryder");
         insertPhoneNumber(rawContactId1, "1234567890");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
         insertPhoneNumber(rawContactId2, "1234567890");
 
-        long rawContactId3 = createRawContact(account);
-        insertStructuredName(rawContactId3, "Flynn", "Ryder");
+        long rawContactId3 = RawContactUtil.createRawContact(mResolver, account);
+        DataUtil.insertStructuredName(mResolver, rawContactId3, "Flynn", "Ryder");
 
         assertNotAggregated(rawContactId1, rawContactId3);
         assertNotAggregated(rawContactId2, rawContactId3);
@@ -619,15 +660,15 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
         Account account = new Account("accountName", "accountType");
         long groupId = createAutoAddGroup(account);
 
-        long rawContactId1 = createRawContact(account);
-        insertStructuredName(rawContactId1, "Flynn", "Ryder");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, account);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Flynn", "Ryder");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
-        insertStructuredName(rawContactId2, "Flynn", "Ryder");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Flynn", "Ryder");
 
-        long rawContactId3 = createRawContact(account);
+        long rawContactId3 = RawContactUtil.createRawContact(mResolver, account);
         removeGroupMemberships(rawContactId3);
-        insertStructuredName(rawContactId3, "Flynn", "Ryder");
+        DataUtil.insertStructuredName(mResolver, rawContactId3, "Flynn", "Ryder");
 
         assertAggregated(rawContactId1, rawContactId2, "Flynn Ryder");
         assertNotAggregated(rawContactId1, rawContactId3);
@@ -641,9 +682,12 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     }
 
     public void testNonSplitBecauseOfMultipleAffinitiesWhenOverridden() {
-        long rawContactId1 = createRawContactWithName("John", "Doe", ACCOUNT_1);
-        long rawContactId2 = createRawContactWithName("John", "Doe", ACCOUNT_2);
-        long rawContactId3 = createRawContactWithName("John", "Doe", ACCOUNT_3);
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_1);
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_2);
+        long rawContactId3 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_3);
         assertAggregated(rawContactId1, rawContactId2);
         assertAggregated(rawContactId1, rawContactId3);
         setAggregationException(
@@ -653,7 +697,8 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
 
         // The aggregate this raw contact could join has a raw contact from the same account,
         // let's not aggregate and break up the existing aggregate because of the ambiguity
-        long rawContactId4 = createRawContactWithName("John", "Doe", ACCOUNT_1);
+        long rawContactId4 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_1);
         assertAggregated(rawContactId1, rawContactId2);     // Aggregation exception
         assertNotAggregated(rawContactId1, rawContactId3);
         assertNotAggregated(rawContactId1, rawContactId4);
@@ -661,18 +706,22 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     }
 
     public void testNonAggregationFromSameAccount() {
-        long rawContactId1 = createRawContactWithName("John", "Doe", ACCOUNT_1);
-        long rawContactId2 = createRawContactWithName("John", "Doe", ACCOUNT_1);
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_1);
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_1);
         assertNotAggregated(rawContactId1, rawContactId2);
     }
 
     public void testNonAggregationFromSameAccountNoCommonData() {
-        long rawContactId1 = createRawContactWithName("John", "Doe", ACCOUNT_1);
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_1);
         insertEmail(rawContactId1, "lightning1@android.com");
         insertPhoneNumber(rawContactId1, "111-222-3333");
         insertIdentity(rawContactId1, "iden1", "namespace");
 
-        long rawContactId2 = createRawContactWithName("John", "Doe", ACCOUNT_1);
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_1);
         insertEmail(rawContactId2, "lightning2@android.com");
         insertPhoneNumber(rawContactId2, "555-666-7777");
         insertIdentity(rawContactId1, "iden2", "namespace");
@@ -681,20 +730,24 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     }
 
     public void testAggregationFromSameAccountEmailSame() {
-        long rawContactId1 = createRawContactWithName("John", "Doe", ACCOUNT_1);
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_1);
         insertEmail(rawContactId1, "lightning@android.com");
 
-        long rawContactId2 = createRawContactWithName("John", "Doe", ACCOUNT_1);
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_1);
         insertEmail(rawContactId2, "lightning@android.com");
 
         assertAggregated(rawContactId1, rawContactId2);
     }
 
     public void testNonAggregationFromSameAccountEmailDifferent() {
-        long rawContactId1 = createRawContactWithName("John", "Doe", ACCOUNT_1);
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_1);
         insertEmail(rawContactId1, "lightning1@android.com");
 
-        long rawContactId2 = createRawContactWithName("John", "Doe", ACCOUNT_1);
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_1);
         insertEmail(rawContactId2, "lightning2@android.com");
         insertEmail(rawContactId2, "lightning3@android.com");
 
@@ -702,21 +755,25 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     }
 
     public void testAggregationFromSameAccountIdentitySame() {
-        long rawContactId1 = createRawContactWithName("John", "Doe", ACCOUNT_1);
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_1);
         insertIdentity(rawContactId1, "iden", "namespace");
 
-        long rawContactId2 = createRawContactWithName("John", "Doe", ACCOUNT_1);
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_1);
         insertIdentity(rawContactId2, "iden", "namespace");
 
         assertAggregated(rawContactId1, rawContactId2);
     }
 
     public void testNonAggregationFromSameAccountIdentityDifferent() {
-        long rawContactId1 = createRawContactWithName("John", "Doe", ACCOUNT_1);
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_1);
         insertIdentity(rawContactId1, "iden1", "namespace1");
         insertIdentity(rawContactId1, "iden2", "namespace2");
 
-        long rawContactId2 = createRawContactWithName("John", "Doe", ACCOUNT_1);
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_1);
         insertIdentity(rawContactId2, "iden2", "namespace1");
         insertIdentity(rawContactId2, "iden1", "namespace2");
 
@@ -724,52 +781,58 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     }
 
     public void testAggregationFromSameAccountPhoneNumberSame() {
-        long rawContactId1 = createRawContactWithName("John", "Doe", ACCOUNT_1);
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_1);
         insertPhoneNumber(rawContactId1, "111-222-3333");
 
-        long rawContactId2 = createRawContactWithName("John", "Doe", ACCOUNT_1);
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_1);
         insertPhoneNumber(rawContactId2, "111-222-3333");
 
         assertAggregated(rawContactId1, rawContactId2);
     }
 
     public void testAggregationFromSameAccountPhoneNumberNormalizedSame() {
-        long rawContactId1 = createRawContactWithName("John", "Doe", ACCOUNT_1);
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_1);
         insertPhoneNumber(rawContactId1, "111-222-3333");
 
-        long rawContactId2 = createRawContactWithName("John", "Doe", ACCOUNT_1);
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_1);
         insertPhoneNumber(rawContactId2, "+1-111-222-3333");
 
         assertAggregated(rawContactId1, rawContactId2);
     }
 
     public void testNonAggregationFromSameAccountPhoneNumberDifferent() {
-        long rawContactId1 = createRawContactWithName("John", "Doe", ACCOUNT_1);
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_1);
         insertPhoneNumber(rawContactId1, "111-222-3333");
 
-        long rawContactId2 = createRawContactWithName("John", "Doe", ACCOUNT_1);
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "John", "Doe",
+                ACCOUNT_1);
         insertPhoneNumber(rawContactId2, "111-222-3334");
 
         assertNotAggregated(rawContactId1, rawContactId2);
     }
 
     public void testAggregationSuggestionsBasedOnName() {
-        long rawContactId1 = createRawContact();
-        insertStructuredName(rawContactId1, "Duane", null);
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Duane", null);
 
         // Exact name match
-        long rawContactId2 = createRawContact();
-        insertStructuredName(rawContactId2, "Duane", null);
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Duane", null);
         setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,
                 rawContactId1, rawContactId2);
 
         // Edit distance == 0.84
-        long rawContactId3 = createRawContact();
-        insertStructuredName(rawContactId3, "Dwayne", null);
+        long rawContactId3 = RawContactUtil.createRawContact(mResolver);
+        DataUtil.insertStructuredName(mResolver, rawContactId3, "Dwayne", null);
 
         // Edit distance == 0.6
-        long rawContactId4 = createRawContact();
-        insertStructuredName(rawContactId4, "Donny", null);
+        long rawContactId4 = RawContactUtil.createRawContact(mResolver);
+        DataUtil.insertStructuredName(mResolver, rawContactId4, "Donny", null);
 
         long contactId1 = queryContactId(rawContactId1);
         long contactId2 = queryContactId(rawContactId2);
@@ -781,12 +844,12 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     public void testAggregationSuggestionsBasedOnPhoneNumber() {
 
         // Create two contacts that would not be aggregated because of name mismatch
-        long rawContactId1 = createRawContact();
-        insertStructuredName(rawContactId1, "Lord", "Farquaad");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Lord", "Farquaad");
         insertPhoneNumber(rawContactId1, "(888)555-1236");
 
-        long rawContactId2 = createRawContact();
-        insertStructuredName(rawContactId2, "Talking", "Donkey");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Talking", "Donkey");
         insertPhoneNumber(rawContactId2, "1(888)555-1236");
 
         long contactId1 = queryContactId(rawContactId1);
@@ -799,12 +862,12 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     public void testAggregationSuggestionsBasedOnEmailAddress() {
 
         // Create two contacts that would not be aggregated because of name mismatch
-        long rawContactId1 = createRawContact();
-        insertStructuredName(rawContactId1, "Carl", "Fredricksen");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Carl", "Fredricksen");
         insertEmail(rawContactId1, "up@android.com");
 
-        long rawContactId2 = createRawContact();
-        insertStructuredName(rawContactId2, "Charles", "Muntz");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Charles", "Muntz");
         insertEmail(rawContactId2, "up@android.com");
 
         long contactId1 = queryContactId(rawContactId1);
@@ -817,12 +880,12 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     public void testAggregationSuggestionsBasedOnEmailAddressApproximateMatch() {
 
         // Create two contacts that would not be aggregated because of name mismatch
-        long rawContactId1 = createRawContact();
-        insertStructuredName(rawContactId1, "Bob", null);
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Bob", null);
         insertEmail(rawContactId1, "incredible@android.com");
 
-        long rawContactId2 = createRawContact();
-        insertStructuredName(rawContactId2, "Lucius", "Best");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Lucius", "Best");
         insertEmail(rawContactId2, "incrediball@android.com");
 
         long contactId1 = queryContactId(rawContactId1);
@@ -833,12 +896,12 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     }
 
     public void testAggregationSuggestionsBasedOnNickname() {
-        long rawContactId1 = createRawContact();
-        insertStructuredName(rawContactId1, "Peter", "Parker");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Peter", "Parker");
         insertNickname(rawContactId1, "Spider-Man");
 
-        long rawContactId2 = createRawContact();
-        insertStructuredName(rawContactId2, "Manny", "Spider");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Manny", "Spider");
 
         long contactId1 = queryContactId(rawContactId1);
         setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,
@@ -849,12 +912,12 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     }
 
     public void testAggregationSuggestionsBasedOnNicknameMatchingName() {
-        long rawContactId1 = createRawContact();
-        insertStructuredName(rawContactId1, "Clark", "Kent");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Clark", "Kent");
         insertNickname(rawContactId1, "Superman");
 
-        long rawContactId2 = createRawContact();
-        insertStructuredName(rawContactId2, "Roy", "Williams");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Roy", "Williams");
         insertNickname(rawContactId2, "superman");
 
         long contactId1 = queryContactId(rawContactId1);
@@ -866,11 +929,11 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     }
 
     public void testAggregationSuggestionsBasedOnCommonNickname() {
-        long rawContactId1 = createRawContact();
-        insertStructuredName(rawContactId1, "Dick", "Cherry");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Dick", "Cherry");
 
-        long rawContactId2 = createRawContact();
-        insertStructuredName(rawContactId2, "Richard", "Cherry");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Richard", "Cherry");
 
         setAggregationException(AggregationExceptions.TYPE_KEEP_SEPARATE,
                 rawContactId1, rawContactId2);
@@ -883,12 +946,12 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     public void testAggregationSuggestionsBasedOnPhoneNumberWithFilter() {
 
         // Create two contacts that would not be aggregated because of name mismatch
-        long rawContactId1 = createRawContact();
-        insertStructuredName(rawContactId1, "Lord", "Farquaad");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver);
+        DataUtil.insertStructuredName(mResolver, rawContactId1, "Lord", "Farquaad");
         insertPhoneNumber(rawContactId1, "(888)555-1236");
 
-        long rawContactId2 = createRawContact();
-        insertStructuredName(rawContactId2, "Talking", "Donkey");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver);
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "Talking", "Donkey");
         insertPhoneNumber(rawContactId2, "1(888)555-1236");
 
         long contactId1 = queryContactId(rawContactId1);
@@ -902,13 +965,15 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     }
 
     public void testAggregationSuggestionsDontSuggestInvisible() {
-        long rawContactId1 = createRawContactWithName("first", "last", ACCOUNT_1);
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "first", "last",
+                ACCOUNT_1);
         insertPhoneNumber(rawContactId1, "111-222-3333");
         insertNickname(rawContactId1, "Superman");
         insertEmail(rawContactId1, "incredible@android.com");
 
         // Create another with the exact same name, phone number, nickname and email.
-        long rawContactId2 = createRawContactWithName("first", "last", ACCOUNT_2);
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "first", "last",
+                ACCOUNT_2);
         insertPhoneNumber(rawContactId2, "111-222-3333");
         insertNickname(rawContactId2, "Superman");
         insertEmail(rawContactId2, "incredible@android.com");
@@ -934,15 +999,15 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     }
 
     public void testChoosePhotoSetBeforeAggregation() {
-        long rawContactId1 = createRawContact();
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver);
         setContactAccount(rawContactId1, "donut", "donut_act");
         insertPhoto(rawContactId1);
 
-        long rawContactId2 = createRawContact();
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver);
         setContactAccount(rawContactId2, "cupcake", "cupcake_act");
         long cupcakeId = ContentUris.parseId(insertPhoto(rawContactId2));
 
-        long rawContactId3 = createRawContact();
+        long rawContactId3 = RawContactUtil.createRawContact(mResolver);
         setContactAccount(rawContactId3, "froyo", "froyo_act");
         insertPhoto(rawContactId3);
 
@@ -954,17 +1019,17 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     }
 
     public void testChoosePhotoSetAfterAggregation() {
-        long rawContactId1 = createRawContact();
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver);
         setContactAccount(rawContactId1, "donut", "donut_act");
         insertPhoto(rawContactId1);
 
-        long rawContactId2 = createRawContact();
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver);
         setAggregationException(AggregationExceptions.TYPE_KEEP_TOGETHER,
                 rawContactId1, rawContactId2);
         setContactAccount(rawContactId2, "cupcake", "cupcake_act");
         long cupcakeId = ContentUris.parseId(insertPhoto(rawContactId2));
 
-        long rawContactId3 = createRawContact();
+        long rawContactId3 = RawContactUtil.createRawContact(mResolver);
         setAggregationException(AggregationExceptions.TYPE_KEEP_TOGETHER,
                 rawContactId1, rawContactId3);
         setContactAccount(rawContactId3, "froyo", "froyo_act");
@@ -984,7 +1049,7 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
 
     public void testChooseLargerPhotoByDimensions() {
         // Donut photo is 256x256.
-        long rawContactId1 = createRawContact();
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver);
         setContactAccount(rawContactId1, "donut", "donut_act");
         long normalEarthDataId = ContentUris.parseId(
                 insertPhoto(rawContactId1, R.drawable.earth_normal));
@@ -993,7 +1058,7 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
                 Photo.PHOTO_FILE_ID);
 
         // Cupcake would normally have priority, but its photo is 200x200.
-        long rawContactId2 = createRawContact();
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver);
         setContactAccount(rawContactId2, "cupcake", "cupcake_act");
         insertPhoto(rawContactId2, R.drawable.earth_200);
 
@@ -1006,7 +1071,7 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
 
     public void testChooseLargerPhotoByFileSize() {
         // Donut photo is a 256x256 photo of a nebula.
-        long rawContactId1 = createRawContact();
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver);
         setContactAccount(rawContactId1, "donut", "donut_act");
         long nebulaDataId = ContentUris.parseId(
                 insertPhoto(rawContactId1, R.drawable.nebula));
@@ -1016,7 +1081,7 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
 
         // Cupcake would normally have priority, but its photo (of a galaxy) has the same dimensions
         // as Donut's, but a smaller filesize.
-        long rawContactId2 = createRawContact();
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver);
         setContactAccount(rawContactId2, "cupcake", "cupcake_act");
         insertPhoto(rawContactId2, R.drawable.galaxy);
 
@@ -1029,7 +1094,7 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
 
     public void testChooseFilePhotoOverThumbnail() {
         // Donut photo is a 256x256 photo of Earth.
-        long rawContactId1 = createRawContact();
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver);
         setContactAccount(rawContactId1, "donut", "donut_act");
         long normalEarthDataId = ContentUris.parseId(
                 insertPhoto(rawContactId1, R.drawable.earth_normal));
@@ -1038,7 +1103,7 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
                 Photo.PHOTO_FILE_ID);
 
         // Cupcake would normally have priority, but its photo of Earth is thumbnail-sized.
-        long rawContactId2 = createRawContact();
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver);
         setContactAccount(rawContactId2, "cupcake", "cupcake_act");
         insertPhoto(rawContactId2, R.drawable.earth_small);
 
@@ -1051,12 +1116,12 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
 
     public void testFallbackToAccountPriorityForSamePhoto() {
         // Donut photo is a 256x256 photo of Earth.
-        long rawContactId1 = createRawContact();
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver);
         setContactAccount(rawContactId1, "donut", "donut_act");
         insertPhoto(rawContactId1, R.drawable.earth_normal);
 
         // Cupcake has the same 256x256 photo of Earth.
-        long rawContactId2 = createRawContact();
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver);
         setContactAccount(rawContactId2, "cupcake", "cupcake_act");
         long cupcakeEarthDataId = ContentUris.parseId(
                 insertPhoto(rawContactId2, R.drawable.earth_normal));
@@ -1073,13 +1138,13 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
 
     public void testFallbackToAccountPriorityForDifferingThumbnails() {
         // Donut photo is a 96x96 thumbnail of Earth.
-        long rawContactId1 = createRawContact();
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver);
         setContactAccount(rawContactId1, "donut", "donut_act");
         insertPhoto(rawContactId1, R.drawable.earth_small);
 
         // Cupcake photo is the 96x96 "no contact" placeholder (smaller filesize than the Earth
         // picture, but thumbnail filesizes are ignored in the aggregator).
-        long rawContactId2 = createRawContact();
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver);
         setContactAccount(rawContactId2, "cupcake", "cupcake_act");
         long cupcakeDataId = ContentUris.parseId(
                 insertPhoto(rawContactId2, R.drawable.ic_contact_picture));
@@ -1092,7 +1157,7 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     }
 
     public void testDisplayNameSources() {
-        long rawContactId = createRawContact();
+        long rawContactId = RawContactUtil.createRawContact(mResolver);
         long contactId = queryContactId(rawContactId);
 
         assertNull(queryDisplayName(contactId));
@@ -1114,15 +1179,18 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
         values.clear();
         values.put(StructuredName.GIVEN_NAME, "Eclair");
         values.put(StructuredName.FAMILY_NAME, "Android");
-        insertStructuredName(rawContactId, values);
+        DataUtil.insertStructuredName(mResolver, rawContactId, values);
         assertEquals("Eclair Android", queryDisplayName(contactId));
     }
 
     public void testVerifiedName() {
-        long rawContactId1 = createRawContactWithName("test1", "TEST1", ACCOUNT_1);
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "test1", "TEST1",
+                ACCOUNT_1);
         storeValue(RawContacts.CONTENT_URI, rawContactId1, RawContacts.NAME_VERIFIED, "1");
-        long rawContactId2 = createRawContactWithName("test2", "TEST2", ACCOUNT_2);
-        long rawContactId3 = createRawContactWithName("test3", "TEST3 LONG", ACCOUNT_3);
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "test2", "TEST2",
+                ACCOUNT_2);
+        long rawContactId3 = RawContactUtil.createRawContactWithName(mResolver, "test3",
+                "TEST3 LONG", ACCOUNT_3);
 
         setAggregationException(AggregationExceptions.TYPE_KEEP_TOGETHER, rawContactId1,
                 rawContactId2);
@@ -1148,15 +1216,15 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     public void testAggregationModeSuspendedSeparateTransactions() {
 
         // Setting aggregation mode to SUSPENDED should prevent aggregation from happening
-        long rawContactId1 = createRawContact(ACCOUNT_1);
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver, ACCOUNT_1);
         storeValue(RawContacts.CONTENT_URI, rawContactId1,
                 RawContacts.AGGREGATION_MODE, RawContacts.AGGREGATION_MODE_SUSPENDED);
-        Uri name1 = insertStructuredName(rawContactId1, "THE", "SAME");
+        Uri name1 = DataUtil.insertStructuredName(mResolver, rawContactId1, "THE", "SAME");
 
-        long rawContactId2 = createRawContact(ACCOUNT_2);
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver, ACCOUNT_2);
         storeValue(RawContacts.CONTENT_URI, rawContactId2,
                 RawContacts.AGGREGATION_MODE, RawContacts.AGGREGATION_MODE_SUSPENDED);
-        insertStructuredName(rawContactId2, "THE", "SAME");
+        DataUtil.insertStructuredName(mResolver, rawContactId2, "THE", "SAME");
 
         assertNotAggregated(rawContactId1, rawContactId2);
 
@@ -1334,12 +1402,12 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     }
 
     public void testAggregatedStatusUpdate() {
-        long rawContactId1 = createRawContact();
-        Uri dataUri1 = insertStructuredName(rawContactId1, "john", "doe");
+        long rawContactId1 = RawContactUtil.createRawContact(mResolver);
+        Uri dataUri1 = DataUtil.insertStructuredName(mResolver, rawContactId1, "john", "doe");
         insertStatusUpdate(ContentUris.parseId(dataUri1), StatusUpdates.AWAY, "Green", 100,
                 StatusUpdates.CAPABILITY_HAS_CAMERA);
-        long rawContactId2 = createRawContact();
-        Uri dataUri2 = insertStructuredName(rawContactId2, "john", "doe");
+        long rawContactId2 = RawContactUtil.createRawContact(mResolver);
+        Uri dataUri2 = DataUtil.insertStructuredName(mResolver, rawContactId2, "john", "doe");
         insertStatusUpdate(ContentUris.parseId(dataUri2), StatusUpdates.AVAILABLE, "Red", 50,
                 StatusUpdates.CAPABILITY_HAS_CAMERA);
         setAggregationException(
@@ -1360,8 +1428,8 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
     }
 
     public void testAggregationSuggestionsByName() throws Exception {
-        long rawContactId1 = createRawContactWithName("first1", "last1");
-        long rawContactId2 = createRawContactWithName("first2", "last2");
+        long rawContactId1 = RawContactUtil.createRawContactWithName(mResolver, "first1", "last1");
+        long rawContactId2 = RawContactUtil.createRawContactWithName(mResolver, "first2", "last2");
 
         Uri uri = AggregationSuggestions.builder()
                 .addParameter(AggregationSuggestions.PARAMETER_MATCH_NAME, "last1 first1")
@@ -1413,4 +1481,18 @@ public class ContactAggregatorTest extends BaseContactsProvider2Test {
 
         cursor.close();
     }
+
+    private void assertDisplayNameEquals(long contactId, long rawContactId) {
+
+        String contactDisplayName = queryDisplayName(contactId);
+
+        Cursor c = queryRawContact(rawContactId);
+        assertTrue(c.moveToFirst());
+        String rawDisplayName = c.getString(c.getColumnIndex(RawContacts.DISPLAY_NAME_PRIMARY));
+        c.close();
+
+        assertTrue(contactDisplayName != null);
+        assertTrue(rawDisplayName != null);
+        assertEquals(rawDisplayName, contactDisplayName);
+    }
 }
diff --git a/tests/src/com/android/providers/contacts/aggregation/util/ContactMatcherTest.java b/tests/src/com/android/providers/contacts/aggregation/util/ContactMatcherTest.java
new file mode 100644
index 0000000..301902a
--- /dev/null
+++ b/tests/src/com/android/providers/contacts/aggregation/util/ContactMatcherTest.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (C) 2012 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License
+ */
+package com.android.providers.contacts.aggregation.util;
+
+import com.android.providers.contacts.ContactsDatabaseHelper.NameLookupType;
+
+import android.test.AndroidTestCase;
+import android.test.suitebuilder.annotation.SmallTest;
+
+@SmallTest
+public class ContactMatcherTest extends AndroidTestCase {
+
+    public void testMatchName_invalidHexDecimal() {
+        final ContactMatcher matcher = new ContactMatcher();
+
+        // This shouldn't throw.  Bug 6827136
+        matcher.matchName(1, NameLookupType.NAME_COLLATION_KEY, "InvalidHex",
+                NameLookupType.NAME_COLLATION_KEY, "InvalidHex2",
+                ContactMatcher.MATCHING_ALGORITHM_CONSERVATIVE);
+    }
+}
diff --git a/tests/src/com/android/providers/contacts/aggregation/util/NameDistanceTest.java b/tests/src/com/android/providers/contacts/aggregation/util/NameDistanceTest.java
index 7f9f053..b833220 100644
--- a/tests/src/com/android/providers/contacts/aggregation/util/NameDistanceTest.java
+++ b/tests/src/com/android/providers/contacts/aggregation/util/NameDistanceTest.java
@@ -16,12 +16,11 @@
 
 package com.android.providers.contacts.aggregation.util;
 
+import android.test.suitebuilder.annotation.SmallTest;
+
 import com.android.providers.contacts.NameNormalizer;
-import com.android.providers.contacts.aggregation.util.NameDistance;
 import com.android.providers.contacts.util.Hex;
 
-import android.test.suitebuilder.annotation.SmallTest;
-
 import junit.framework.TestCase;
 
 /**
diff --git a/tests/src/com/android/providers/contacts/database/MoreDatabaseUtilTest.java b/tests/src/com/android/providers/contacts/database/MoreDatabaseUtilTest.java
new file mode 100644
index 0000000..6eb8b55
--- /dev/null
+++ b/tests/src/com/android/providers/contacts/database/MoreDatabaseUtilTest.java
@@ -0,0 +1,57 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License
+ */
+
+package com.android.providers.contacts.database;
+
+import android.test.suitebuilder.annotation.SmallTest;
+
+import junit.framework.TestCase;
+
+/**
+ * Unit tests for MoreDatabaseutil.
+ */
+@SmallTest
+public class MoreDatabaseUtilTest extends TestCase {
+
+    public void testBuildBindArgString() {
+        assertEquals("?", MoreDatabaseUtils.buildBindArgString(1));
+        assertEquals("?,?", MoreDatabaseUtils.buildBindArgString(2));
+        assertEquals("?,?,?", MoreDatabaseUtils.buildBindArgString(3));
+        assertEquals("?,?,?,?", MoreDatabaseUtils.buildBindArgString(4));
+    }
+
+    public void testBuildIndex() {
+        String expected = "create index testtable_testfield_index on testtable(testfield)";
+        String actual = MoreDatabaseUtils.buildCreateIndexSql("testtable", "testfield")
+                .toLowerCase();
+        assertEquals(expected, actual);
+
+        expected = "create index test_table_test_field_index on test_table(test_field)";
+        actual = MoreDatabaseUtils.buildCreateIndexSql("test_table", "test_field").toLowerCase();
+        assertEquals(expected, actual);
+    }
+
+    public void testDropIndex() {
+        String expected = "drop index if exists testtable_testfield_index";
+        String actual = MoreDatabaseUtils.buildDropIndexSql("testtable", "testfield").toLowerCase();
+        assertEquals(expected, actual);
+    }
+
+    public void testBuildIndexName() {
+        assertEquals("testtable_testfield_index",
+                MoreDatabaseUtils.buildIndexName("testtable", "testfield"));
+    }
+}
diff --git a/tests/src/com/android/providers/contacts/testutil/CommonDatabaseUtils.java b/tests/src/com/android/providers/contacts/testutil/CommonDatabaseUtils.java
new file mode 100644
index 0000000..bba5978
--- /dev/null
+++ b/tests/src/com/android/providers/contacts/testutil/CommonDatabaseUtils.java
@@ -0,0 +1,78 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License
+ */
+
+package com.android.providers.contacts.testutil;
+
+import android.content.ContentValues;
+import android.database.Cursor;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Common database methods.
+ */
+public class CommonDatabaseUtils {
+
+    // primitive value used when record is not found.
+    public static final long NOT_FOUND = -1;
+
+    public static String[] singleRecordToArray(Cursor cursor) {
+        String[] result = null;
+        try {
+            if (cursor.moveToNext()) {
+                result = new String[cursor.getColumnCount()];
+                fillArray(cursor, result);
+            }
+        } finally {
+            closeQuietly(cursor);
+        }
+        return result;
+    }
+
+    public static List<String[]> multiRecordToArray(Cursor cursor) {
+        ArrayList<String[]> result = new ArrayList<String[]>();
+        try {
+            while (cursor.moveToNext()) {
+                String[] record = new String[cursor.getColumnCount()];
+                fillArray(cursor, record);
+                result.add(record);
+            }
+        } finally {
+            closeQuietly(cursor);
+        }
+        return result;
+    }
+
+    private static void fillArray(Cursor cursor, String[] array) {
+        for (int i = 0; i < array.length; i++) {
+            array[i] = cursor.getString(i);
+        }
+    }
+
+    public static void closeQuietly(Cursor cursor) {
+        if (cursor != null) {
+            cursor.close();
+        }
+    }
+
+    public static void extrasVarArgsToValues(ContentValues values, String... extras) {
+        for (int i = 0; i < extras.length; ) {
+            values.put(extras[i], extras[i + 1]);
+            i += 2;
+        }
+    }
+}
diff --git a/tests/src/com/android/providers/contacts/testutil/ContactUtil.java b/tests/src/com/android/providers/contacts/testutil/ContactUtil.java
new file mode 100644
index 0000000..442c5e7
--- /dev/null
+++ b/tests/src/com/android/providers/contacts/testutil/ContactUtil.java
@@ -0,0 +1,74 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License
+ */
+
+package com.android.providers.contacts.testutil;
+
+import android.content.ContentResolver;
+import android.content.ContentUris;
+import android.content.ContentValues;
+import android.database.Cursor;
+import android.net.Uri;
+import android.provider.ContactsContract;
+
+/**
+ * Convenience methods for operating on the Contacts table.
+ */
+public class ContactUtil {
+
+    private static final Uri URI = ContactsContract.Contacts.CONTENT_URI;
+
+    public static void update(ContentResolver resolver, long contactId,
+            ContentValues values) {
+        Uri uri = ContentUris.withAppendedId(URI, contactId);
+        resolver.update(uri, values, null, null);
+    }
+
+    public static void delete(ContentResolver resolver, long contactId) {
+        Uri uri = ContentUris.withAppendedId(URI, contactId);
+        resolver.delete(uri, null, null);
+    }
+
+    public static boolean recordExistsForContactId(ContentResolver resolver, long contactId) {
+        String[] projection = new String[]{
+                ContactsContract.Contacts._ID
+        };
+        Uri uri = ContentUris.withAppendedId(URI, contactId);
+        Cursor cursor = resolver.query(uri, projection, null, null, null);
+        if (cursor.moveToNext()) {
+            return true;
+        }
+        return false;
+    }
+
+    public static long queryContactLastUpdatedTimestamp(ContentResolver resolver, long contactId) {
+        String[] projection = new String[]{
+                ContactsContract.Contacts.CONTACT_LAST_UPDATED_TIMESTAMP
+        };
+
+        Uri uri = ContentUris.withAppendedId(ContactsContract.Contacts.CONTENT_URI, contactId);
+        Cursor cursor = resolver.query(uri, projection, null, null, null);
+        try {
+            if (cursor.moveToNext()) {
+                return cursor.getLong(0);
+            }
+        } finally {
+            if (cursor != null) {
+                cursor.close();
+            }
+        }
+        return CommonDatabaseUtils.NOT_FOUND;
+    }
+}
diff --git a/tests/src/com/android/providers/contacts/testutil/DataUtil.java b/tests/src/com/android/providers/contacts/testutil/DataUtil.java
new file mode 100644
index 0000000..874aacf
--- /dev/null
+++ b/tests/src/com/android/providers/contacts/testutil/DataUtil.java
@@ -0,0 +1,70 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License
+ */
+
+package com.android.providers.contacts.testutil;
+
+import android.content.ContentResolver;
+import android.content.ContentUris;
+import android.content.ContentValues;
+import android.net.Uri;
+import android.provider.ContactsContract;
+import android.test.mock.MockContentResolver;
+
+/**
+ * Convenience methods for operating on the Data table.
+ */
+public class DataUtil {
+
+    private static final Uri URI = ContactsContract.Data.CONTENT_URI;
+
+    public static void delete(ContentResolver resolver, long dataId) {
+        Uri uri = ContentUris.withAppendedId(URI, dataId);
+        resolver.delete(uri, null, null);
+    }
+
+    public static void update(ContentResolver resolver, long dataId, ContentValues values) {
+        Uri uri = ContentUris.withAppendedId(URI, dataId);
+        resolver.update(uri, values, null, null);
+    }
+
+    public static Uri insertStructuredName(ContentResolver resolver, long rawContactId,
+            ContentValues values) {
+        values.put(ContactsContract.Data.RAW_CONTACT_ID, rawContactId);
+        values.put(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE);
+        Uri resultUri = resolver.insert(ContactsContract.Data.CONTENT_URI, values);
+        return resultUri;
+    }
+
+    public static Uri insertStructuredName(ContentResolver resolver, long rawContactId,
+            String givenName, String familyName) {
+        ContentValues values = new ContentValues();
+        StringBuilder sb = new StringBuilder();
+        if (givenName != null) {
+            sb.append(givenName);
+        }
+        if (givenName != null && familyName != null) {
+            sb.append(" ");
+        }
+        if (familyName != null) {
+            sb.append(familyName);
+        }
+        values.put(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME, sb.toString());
+        values.put(ContactsContract.CommonDataKinds.StructuredName.GIVEN_NAME, givenName);
+        values.put(ContactsContract.CommonDataKinds.StructuredName.FAMILY_NAME, familyName);
+
+        return insertStructuredName(resolver, rawContactId, values);
+    }
+}
diff --git a/tests/src/com/android/providers/contacts/testutil/DatabaseAsserts.java b/tests/src/com/android/providers/contacts/testutil/DatabaseAsserts.java
new file mode 100644
index 0000000..ac4df17
--- /dev/null
+++ b/tests/src/com/android/providers/contacts/testutil/DatabaseAsserts.java
@@ -0,0 +1,95 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License
+ */
+
+package com.android.providers.contacts.testutil;
+
+import android.content.ContentResolver;
+import android.content.ContentValues;
+import android.net.Uri;
+import android.test.MoreAsserts;
+
+import junit.framework.Assert;
+
+/**
+ * Common methods for asserting database related operations.
+ */
+public class DatabaseAsserts {
+
+    public static void assertDeleteIsUnsupported(ContentResolver resolver, Uri uri) {
+        try {
+            resolver.delete(uri, null, null);
+            Assert.fail("delete operation should have failed with UnsupportedOperationException on"
+                    + uri);
+        } catch (UnsupportedOperationException e) {
+            // pass
+        }
+    }
+
+    public static void assertInsertIsUnsupported(ContentResolver resolver, Uri  uri) {
+        try {
+            ContentValues values = new ContentValues();
+            resolver.insert(uri, values);
+            Assert.fail("insert operation should have failed with UnsupportedOperationException on"
+                    + uri);
+        } catch (UnsupportedOperationException e) {
+            // pass
+        }
+    }
+
+    /**
+     * Create a contact and assert that the record exists.
+     *
+     * @return The created contact id pair.
+     */
+    public static ContactIdPair assertAndCreateContact(ContentResolver resolver) {
+        long rawContactId = RawContactUtil.createRawContactWithName(resolver);
+
+        long contactId = RawContactUtil.queryContactIdByRawContactId(resolver, rawContactId);
+        MoreAsserts.assertNotEqual(CommonDatabaseUtils.NOT_FOUND, contactId);
+
+        return new ContactIdPair(contactId, rawContactId);
+    }
+
+    /**
+     * Asserts that a contact id was deleted, has a delete log, and that log has a timestamp greater
+     * than the given timestamp.
+     *
+     * @param contactId The contact id to check.
+     * @param start The timestamp that the delete log should be greater than.
+     */
+    public static void assertHasDeleteLogGreaterThan(ContentResolver resolver, long contactId,
+            long start) {
+        Assert.assertFalse(ContactUtil.recordExistsForContactId(resolver, contactId));
+
+        long deletedTimestamp = DeletedContactUtil.queryDeletedTimestampForContactId(resolver,
+                contactId);
+        MoreAsserts.assertNotEqual(CommonDatabaseUtils.NOT_FOUND, deletedTimestamp);
+        Assert.assertTrue(deletedTimestamp > start);
+    }
+
+    /**
+     * Holds a single contact id and raw contact id relationship.
+     */
+    public static class ContactIdPair {
+        public long mContactId;
+        public long mRawContactId;
+
+        public ContactIdPair(long contactId, long rawContactId) {
+            this.mContactId = contactId;
+            this.mRawContactId = rawContactId;
+        }
+    }
+}
diff --git a/tests/src/com/android/providers/contacts/testutil/DeletedContactUtil.java b/tests/src/com/android/providers/contacts/testutil/DeletedContactUtil.java
new file mode 100644
index 0000000..2dab7f9
--- /dev/null
+++ b/tests/src/com/android/providers/contacts/testutil/DeletedContactUtil.java
@@ -0,0 +1,81 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License
+ */
+
+package com.android.providers.contacts.testutil;
+
+import static android.provider.ContactsContract.DeletedContacts;
+
+import android.content.ContentResolver;
+import android.content.ContentUris;
+import android.database.Cursor;
+import android.net.Uri;
+
+import java.util.List;
+
+/**
+ * Convenience methods for operating on the DeletedContacts table.
+ */
+public class DeletedContactUtil {
+
+    private static final Uri URI = DeletedContacts.CONTENT_URI;
+
+    public static long queryDeletedTimestampForContactId(ContentResolver resolver, long contactId) {
+        String[] projection = new String[]{
+                DeletedContacts.CONTACT_DELETED_TIMESTAMP
+        };
+        Uri uri = ContentUris.withAppendedId(URI, contactId);
+        Cursor cursor = resolver.query(uri, projection, null, null, null);
+        if (cursor.moveToNext()) {
+            return cursor.getLong(0);
+        }
+        return CommonDatabaseUtils.NOT_FOUND;
+    }
+
+    public static long getCount(ContentResolver resolver) {
+        String[] projection = new String[] {
+                DeletedContacts.CONTACT_ID
+        };
+        Cursor cursor = resolver.query(URI, projection, null, null, null);
+        try {
+            return cursor.getCount();
+        } finally {
+            CommonDatabaseUtils.closeQuietly(cursor);
+        }
+    }
+
+    /**
+     * Queries all records.
+     *
+     * @return A list of records.  Where each record is represented as an array of strings.
+     */
+    public static List<String[]> query(ContentResolver resolver, String[] projection) {
+        Cursor cursor = resolver.query(URI, projection, null, null, null);
+        return CommonDatabaseUtils.multiRecordToArray(cursor);
+    }
+
+    /**
+     * Queries all records after a given timestamp.
+     *
+     * @return A list of records.  Where each record is represented as an array of strings.
+     */
+    public static List<String[]> querySinceTimestamp(ContentResolver resolver, String[] projection,
+            long timestamp) {
+        String selection = DeletedContacts.CONTACT_DELETED_TIMESTAMP + ">?";
+        String[] args = new String[] {timestamp + ""};
+        Cursor cursor = resolver.query(URI, projection, selection, args, null);
+        return CommonDatabaseUtils.multiRecordToArray(cursor);
+    }
+}
diff --git a/tests/src/com/android/providers/contacts/testutil/RawContactUtil.java b/tests/src/com/android/providers/contacts/testutil/RawContactUtil.java
new file mode 100644
index 0000000..e9cd3b5
--- /dev/null
+++ b/tests/src/com/android/providers/contacts/testutil/RawContactUtil.java
@@ -0,0 +1,121 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License
+ */
+
+package com.android.providers.contacts.testutil;
+
+import android.accounts.Account;
+import android.content.ContentResolver;
+import android.content.ContentUris;
+import android.content.ContentValues;
+import android.database.Cursor;
+import android.net.Uri;
+import android.provider.ContactsContract;
+import android.test.mock.MockContentResolver;
+
+import java.util.List;
+
+/**
+ * Convenience methods for operating on the RawContacts table.
+ */
+public class RawContactUtil {
+
+    private static final Uri URI = ContactsContract.RawContacts.CONTENT_URI;
+
+    public static void update(ContentResolver resolver, long rawContactId,
+            ContentValues values) {
+        Uri uri = ContentUris.withAppendedId(URI, rawContactId);
+        resolver.update(uri, values, null, null);
+    }
+
+    public static String[] queryByRawContactId(ContentResolver resolver,
+            long rawContactId, String[] projection) {
+        Uri uri = ContentUris.withAppendedId(ContactsContract.RawContacts.CONTENT_URI,
+                rawContactId);
+        Cursor cursor = resolver.query(uri, projection, null, null, null);
+        return CommonDatabaseUtils.singleRecordToArray(cursor);
+    }
+
+    /**
+     * Returns a list of raw contact records.
+     *
+     * @return A list of records.  Where each record is represented as an array of strings.
+     */
+    public static List<String[]> queryByContactId(ContentResolver resolver, long contactId,
+            String[] projection) {
+        Uri uri = ContentUris.withAppendedId(ContactsContract.RawContacts.CONTENT_URI, contactId);
+        Cursor cursor = resolver.query(uri, projection, null, null, null);
+        return CommonDatabaseUtils.multiRecordToArray(cursor);
+    }
+
+    public static void delete(ContentResolver resolver, long rawContactId,
+            boolean isSyncAdapter) {
+        Uri uri = ContentUris.withAppendedId(ContactsContract.RawContacts.CONTENT_URI, rawContactId)
+                .buildUpon()
+                .appendQueryParameter(ContactsContract.CALLER_IS_SYNCADAPTER, isSyncAdapter + "")
+                .build();
+        resolver.delete(uri, null, null);
+    }
+
+    public static long queryContactIdByRawContactId(ContentResolver resolver, long rawContactid) {
+        String[] projection = new String[]{
+                ContactsContract.RawContacts.CONTACT_ID
+        };
+        String[] result = RawContactUtil.queryByRawContactId(resolver, rawContactid,
+                projection);
+        if (result == null) {
+            return CommonDatabaseUtils.NOT_FOUND;
+        }
+        return Long.parseLong(result[0]);
+    }
+
+    public static boolean rawContactExistsById(ContentResolver resolver, long rawContactid) {
+        long contactId = queryContactIdByRawContactId(resolver, rawContactid);
+        return contactId != CommonDatabaseUtils.NOT_FOUND;
+    }
+
+    public static long createRawContact(ContentResolver resolver, Account account,
+            String... extras) {
+        ContentValues values = new ContentValues();
+        CommonDatabaseUtils.extrasVarArgsToValues(values, extras);
+        final Uri uri = TestUtil.maybeAddAccountQueryParameters(ContactsContract.RawContacts.CONTENT_URI, account);
+        Uri contactUri = resolver.insert(uri, values);
+        return ContentUris.parseId(contactUri);
+    }
+
+    public static long createRawContactWithName(ContentResolver resolver) {
+        return createRawContactWithName(resolver, null);
+    }
+
+    public static long createRawContactWithName(ContentResolver resolver, Account account) {
+        return createRawContactWithName(resolver, "John", "Doe", account);
+    }
+
+    public static long createRawContactWithName(ContentResolver resolver, String firstName,
+            String lastName) {
+        return createRawContactWithName(resolver, firstName, lastName, null);
+    }
+
+    public static long createRawContactWithName(ContentResolver resolver, String firstName,
+            String lastName, Account account) {
+        long rawContactId = createRawContact(resolver, account);
+        DataUtil.insertStructuredName(resolver, rawContactId, firstName, lastName);
+        return rawContactId;
+    }
+
+    public static long createRawContact(ContentResolver resolver) {
+        return createRawContact(resolver, null);
+    }
+}
diff --git a/tests/src/com/android/providers/contacts/testutil/TestUtil.java b/tests/src/com/android/providers/contacts/testutil/TestUtil.java
new file mode 100644
index 0000000..2020f6d
--- /dev/null
+++ b/tests/src/com/android/providers/contacts/testutil/TestUtil.java
@@ -0,0 +1,53 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License
+ */
+
+package com.android.providers.contacts.testutil;
+
+import android.accounts.Account;
+import android.net.Uri;
+import android.provider.ContactsContract;
+import android.util.Log;
+
+/**
+ * Common methods used for testing.
+ */
+public class TestUtil {
+    private static String TAG = TestUtil.class.getSimpleName();
+
+    public static final Account ACCOUNT_1 = new Account("account_name_1", "account_type_1");
+    public static final Account ACCOUNT_2 = new Account("account_name_2", "account_type_2");
+
+    /**
+     * Sleep for 1ms.
+     */
+    public static void sleep() {
+        try {
+            Thread.sleep(1);
+        } catch (InterruptedException e) {
+            Log.w(TAG, "Sleep interrupted.");
+        }
+    }
+
+    public static Uri maybeAddAccountQueryParameters(Uri uri, Account account) {
+        if (account == null) {
+            return uri;
+        }
+        return uri.buildUpon()
+                .appendQueryParameter(ContactsContract.RawContacts.ACCOUNT_NAME, account.name)
+                .appendQueryParameter(ContactsContract.RawContacts.ACCOUNT_TYPE, account.type)
+                .build();
+    }
+}
diff --git a/tests/src/com/android/providers/contacts/util/DBQueryUtilsTest.java b/tests/src/com/android/providers/contacts/util/DBQueryUtilsTest.java
index 43f7c06..e09e59e 100644
--- a/tests/src/com/android/providers/contacts/util/DBQueryUtilsTest.java
+++ b/tests/src/com/android/providers/contacts/util/DBQueryUtilsTest.java
@@ -18,13 +18,15 @@ package com.android.providers.contacts.util;
 
 import static com.android.providers.contacts.util.DbQueryUtils.checkForSupportedColumns;
 import static com.android.providers.contacts.util.DbQueryUtils.concatenateClauses;
+import static com.android.providers.contacts.util.DbQueryUtils.escapeLikeValue;
+
+import android.content.ContentValues;
+import android.test.suitebuilder.annotation.SmallTest;
 
 import com.android.common.content.ProjectionMap;
 import com.android.providers.contacts.EvenMoreAsserts;
 
-import android.content.ContentValues;
-import android.test.AndroidTestCase;
-import android.test.suitebuilder.annotation.SmallTest;
+import junit.framework.TestCase;
 
 /**
  * Unit tests for the {@link DbQueryUtils} class.
@@ -34,7 +36,7 @@ import android.test.suitebuilder.annotation.SmallTest;
  * </code>
  */
 @SmallTest
-public class DBQueryUtilsTest extends AndroidTestCase {
+public class DBQueryUtilsTest extends TestCase {
     public void testGetEqualityClause() {
         assertEquals("(foo = 'bar')", DbQueryUtils.getEqualityClause("foo", "bar"));
         assertEquals("(foo = 2)", DbQueryUtils.getEqualityClause("foo", 2));
@@ -71,4 +73,30 @@ public class DBQueryUtilsTest extends AndroidTestCase {
             }
         });
     }
+
+    public void testEscapeLikeValuesEscapesUnderscores() {
+        StringBuilder sb = new StringBuilder();
+        DbQueryUtils.escapeLikeValue(sb, "my_test_string", '\\');
+        assertEquals("my\\_test\\_string", sb.toString());
+
+        sb = new StringBuilder();
+        DbQueryUtils.escapeLikeValue(sb, "_test_", '\\');
+        assertEquals("\\_test\\_", sb.toString());
+    }
+
+    public void testEscapeLikeValuesEscapesPercents() {
+        StringBuilder sb = new StringBuilder();
+        escapeLikeValue(sb, "my%test%string", '\\');
+        assertEquals("my\\%test\\%string", sb.toString());
+
+        sb = new StringBuilder();
+        escapeLikeValue(sb, "%test%", '\\');
+        assertEquals("\\%test\\%", sb.toString());
+    }
+
+    public void testEscapeLikeValuesNoChanges() {
+        StringBuilder sb = new StringBuilder();
+        escapeLikeValue(sb, "my test string", '\\');
+        assertEquals("my test string", sb.toString());
+    }
 }
diff --git a/tests/src/com/android/providers/contacts/util/MockSharedPreferences.java b/tests/src/com/android/providers/contacts/util/MockSharedPreferences.java
index d00e711..574ce19 100644
--- a/tests/src/com/android/providers/contacts/util/MockSharedPreferences.java
+++ b/tests/src/com/android/providers/contacts/util/MockSharedPreferences.java
@@ -16,10 +16,10 @@
 
 package com.android.providers.contacts.util;
 
-import com.google.android.collect.Maps;
-
 import android.content.SharedPreferences;
 
+import com.google.android.collect.Maps;
+
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
diff --git a/tests/src/com/android/providers/contacts/util/TypedUriMatcherImplTest.java b/tests/src/com/android/providers/contacts/util/TypedUriMatcherImplTest.java
index 48bd608..329e6e2 100644
--- a/tests/src/com/android/providers/contacts/util/TypedUriMatcherImplTest.java
+++ b/tests/src/com/android/providers/contacts/util/TypedUriMatcherImplTest.java
@@ -20,9 +20,6 @@ import android.net.Uri;
 import android.test.AndroidTestCase;
 import android.test.suitebuilder.annotation.SmallTest;
 
-import com.android.providers.contacts.util.TypedUriMatcherImpl;
-import com.android.providers.contacts.util.UriType;
-
 /**
  * Unit tests for {@link TypedUriMatcherImpl}.
  * Run the test like this:
